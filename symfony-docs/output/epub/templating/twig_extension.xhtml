<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Write a custom Twig Extension</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-write-a-custom-twig-extension">
<span id="index-0"></span><h1>How to Write a custom Twig Extension</h1>
<p><a class="reference external" href="https://twig.symfony.com/doc/2.x/advanced.html#creating-an-extension">Twig Extensions</a><span class="link-target"> [https://twig.symfony.com/doc/2.x/advanced.html#creating-an-extension]</span> allow to create custom functions, filters and more to use
them in your Twig templates. Before writing your own Twig extension, check if
the filter/function that you need is already implemented in:</p>
<ul class="simple">
<li><p>The <a class="reference external" href="https://twig.symfony.com/doc/2.x/#reference">default Twig filters and functions</a><span class="link-target"> [https://twig.symfony.com/doc/2.x/#reference]</span>;</p></li>
<li><p>The <a class="reference internal" href="../reference/twig_reference.xhtml"><span class="doc">Twig filters and functions added by Symfony</span></a>;</p></li>
<li><p>The <a class="reference external" href="https://github.com/twigphp?q=extra">official Twig extensions</a><span class="link-target"> [https://github.com/twigphp?q=extra]</span> related to strings, HTML, Markdown, internationalization, etc.</p></li>
</ul>
<div class="section" id="create-the-extension-class">
<h2>Create the Extension Class</h2>
<p>Suppose you want to create a new filter called <code class="docutils literal notranslate"><span class="pre">price</span></code> that formats a number
into money:</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{{</span> <span class="nv">product.price</span><span class="o">|</span><span class="nf">price</span> <span class="cp">}}</span><span class="x"></span>

<span class="c">{# pass in the 3 optional arguments #}</span><span class="x"></span>
<span class="cp">{{</span> <span class="nv">product.price</span><span class="o">|</span><span class="nf">price</span><span class="o">(</span><span class="m">2</span><span class="o">,</span> <span class="s1">&#39;,&#39;</span><span class="o">,</span> <span class="s1">&#39;.&#39;</span><span class="o">)</span> <span class="cp">}}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
<p>Create a class that extends <code class="docutils literal notranslate"><span class="pre">AbstractExtension</span></code> and fill in the logic:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Twig/AppExtension.php</span>
<span class="k">namespace</span> <span class="nx">App\Twig</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Twig\Extension\AbstractExtension</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Twig\TwigFilter</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">AppExtension</span> <span class="k">extends</span> <span class="nx">AbstractExtension</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">getFilters</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="p">[</span>
            <span class="k">new</span> <span class="nx">TwigFilter</span><span class="p">(</span><span class="s1">&#39;price&#39;</span><span class="p">,</span> <span class="p">[</span><span class="nv">$this</span><span class="p">,</span> <span class="s1">&#39;formatPrice&#39;</span><span class="p">]),</span>
        <span class="p">];</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">formatPrice</span><span class="p">(</span><span class="nv">$number</span><span class="p">,</span> <span class="nv">$decimals</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">$decPoint</span> <span class="o">=</span> <span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="nv">$thousandsSep</span> <span class="o">=</span> <span class="s1">&#39;,&#39;</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$price</span> <span class="o">=</span> <span class="nb">number_format</span><span class="p">(</span><span class="nv">$number</span><span class="p">,</span> <span class="nv">$decimals</span><span class="p">,</span> <span class="nv">$decPoint</span><span class="p">,</span> <span class="nv">$thousandsSep</span><span class="p">);</span>
        <span class="nv">$price</span> <span class="o">=</span> <span class="s1">&#39;$&#39;</span><span class="o">.</span><span class="nv">$price</span><span class="p">;</span>

        <span class="k">return</span> <span class="nv">$price</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>If you want to create a function instead of a filter, define the
<code class="docutils literal notranslate"><span class="pre">getFunctions()</span></code> method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Twig/AppExtension.php</span>
<span class="k">namespace</span> <span class="nx">App\Twig</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Twig\Extension\AbstractExtension</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Twig\TwigFunction</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">AppExtension</span> <span class="k">extends</span> <span class="nx">AbstractExtension</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">getFunctions</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="p">[</span>
            <span class="k">new</span> <span class="nx">TwigFunction</span><span class="p">(</span><span class="s1">&#39;area&#39;</span><span class="p">,</span> <span class="p">[</span><span class="nv">$this</span><span class="p">,</span> <span class="s1">&#39;calculateArea&#39;</span><span class="p">]),</span>
        <span class="p">];</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">calculateArea</span><span class="p">(</span><span class="nx">int</span> <span class="nv">$width</span><span class="p">,</span> <span class="nx">int</span> <span class="nv">$length</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$width</span> <span class="o">*</span> <span class="nv">$length</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Along with custom filters and functions, you can also register
<a class="reference external" href="https://twig.symfony.com/doc/2.x/advanced.html#id1">global variables</a><span class="link-target"> [https://twig.symfony.com/doc/2.x/advanced.html#id1]</span>.</p>
</div>
<div class="section" id="register-an-extension-as-a-service">
<h3>Register an Extension as a Service</h3>
<p>Next, register your class as a service and tag it with <code class="docutils literal notranslate"><span class="pre">twig.extension</span></code>. If you’re
using the <a class="reference internal" href="../service_container.xhtml#service-container-services-load-example"><span class="std std-ref">default services.yaml configuration</span></a>,
you’re done! Symfony will automatically know about your new service and add the tag.</p>
<p>You can now start using your filter in any Twig template. Optionally, execute
this command to confirm that your new filter was successfully registered:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># display all information about Twig</span>
<span class="gp">$</span> php bin/console debug:twig

<span class="c1"># display only the information about a specific filter</span>
<span class="gp">$</span> php bin/console debug:twig --filter<span class="o">=</span>price
</pre></div>
</td></tr></table></div>
</div>
</div>
<div class="section" id="creating-lazy-loaded-twig-extensions">
<span id="lazy-loaded-twig-extensions"></span><h2>Creating Lazy-Loaded Twig Extensions</h2>
<div class="versionadded">
<p><span class="versionmodified">New in version 1.35: </span>Support for lazy-loaded extensions was introduced in Twig 1.35.0 and 2.4.4.</p>
</div>
<p>Including the code of the custom filters/functions in the Twig extension class
is the simplest way to create extensions. However, Twig must initialize all
extensions before rendering any template, even if the template doesn’t use an
extension.</p>
<p>If extensions don’t define dependencies (i.e. if you don’t inject services in
them) performance is not affected. However, if extensions define lots of complex
dependencies (e.g. those making database connections), the performance loss can
be significant.</p>
<p>That’s why Twig allows to decouple the extension definition from its
implementation. Following the same example as before, the first change would be
to remove the <code class="docutils literal notranslate"><span class="pre">formatPrice()</span></code> method from the extension and update the PHP
callable defined in <code class="docutils literal notranslate"><span class="pre">getFilters()</span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Twig/AppExtension.php</span>
<span class="k">namespace</span> <span class="nx">App\Twig</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Twig\AppRuntime</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Twig\Extension\AbstractExtension</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Twig\TwigFilter</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">AppExtension</span> <span class="k">extends</span> <span class="nx">AbstractExtension</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">getFilters</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="p">[</span>
            <span class="c1">// the logic of this filter is now implemented in a different class</span>
            <span class="k">new</span> <span class="nx">TwigFilter</span><span class="p">(</span><span class="s1">&#39;price&#39;</span><span class="p">,</span> <span class="p">[</span><span class="nx">AppRuntime</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="s1">&#39;formatPrice&#39;</span><span class="p">]),</span>
        <span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Then, create the new <code class="docutils literal notranslate"><span class="pre">AppRuntime</span></code> class (it’s not required but these classes
are suffixed with <code class="docutils literal notranslate"><span class="pre">Runtime</span></code> by convention) and include the logic of the
previous <code class="docutils literal notranslate"><span class="pre">formatPrice()</span></code> method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Twig/AppRuntime.php</span>
<span class="k">namespace</span> <span class="nx">App\Twig</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Twig\Extension\RuntimeExtensionInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">AppRuntime</span> <span class="k">implements</span> <span class="nx">RuntimeExtensionInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// this simple example doesn&#39;t define any dependency, but in your own</span>
        <span class="c1">// extensions, you&#39;ll need to inject services using this constructor</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">formatPrice</span><span class="p">(</span><span class="nv">$number</span><span class="p">,</span> <span class="nv">$decimals</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">$decPoint</span> <span class="o">=</span> <span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="nv">$thousandsSep</span> <span class="o">=</span> <span class="s1">&#39;,&#39;</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$price</span> <span class="o">=</span> <span class="nb">number_format</span><span class="p">(</span><span class="nv">$number</span><span class="p">,</span> <span class="nv">$decimals</span><span class="p">,</span> <span class="nv">$decPoint</span><span class="p">,</span> <span class="nv">$thousandsSep</span><span class="p">);</span>
        <span class="nv">$price</span> <span class="o">=</span> <span class="s1">&#39;$&#39;</span><span class="o">.</span><span class="nv">$price</span><span class="p">;</span>

        <span class="k">return</span> <span class="nv">$price</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>If you’re using the default <code class="docutils literal notranslate"><span class="pre">services.yaml</span></code> configuration, this will already
work! Otherwise, <a class="reference internal" href="../service_container.xhtml#service-container-creating-service"><span class="std std-ref">create a service</span></a>
for this class and <a class="reference internal" href="../service_container/tags.xhtml"><span class="doc">tag your service</span></a> with <code class="docutils literal notranslate"><span class="pre">twig.runtime</span></code>.</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>