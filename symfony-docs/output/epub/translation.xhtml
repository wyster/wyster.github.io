<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Translations</title>
    <link rel="stylesheet" href="_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="translations">
<span id="index-0"></span><h1>Translations</h1>
<p>The term “internationalization” (often abbreviated <a class="reference external" href="https://en.wikipedia.org/wiki/Internationalization_and_localization">i18n</a><span class="link-target"> [https://en.wikipedia.org/wiki/Internationalization_and_localization]</span>) refers to the
process of abstracting strings and other locale-specific pieces out of your
application into a layer where they can be translated and converted based
on the user’s locale (i.e. language and country). For text, this means
wrapping each with a function capable of translating the text (or “message”)
into the language of the user:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// text will *always* print out in English</span>
<span class="k">echo</span> <span class="s1">&#39;Hello World&#39;</span><span class="p">;</span>

<span class="c1">// text can be translated into the end-user&#39;s language or</span>
<span class="c1">// default to English</span>
<span class="k">echo</span> <span class="nv">$translator</span><span class="o">-&gt;</span><span class="na">trans</span><span class="p">(</span><span class="s1">&#39;Hello World&#39;</span><span class="p">);</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The term <em>locale</em> refers roughly to the user’s language and country. It
can be any string that your application uses to manage translations and
other format differences (e.g. currency format). The <a class="reference external" href="https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes">ISO 639-1</a><span class="link-target"> [https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes]</span>
<em>language</em> code, an underscore (<code class="docutils literal notranslate"><span class="pre">_</span></code>), then the <a class="reference external" href="https://en.wikipedia.org/wiki/ISO_3166-1#Current_codes">ISO 3166-1 alpha-2</a><span class="link-target"> [https://en.wikipedia.org/wiki/ISO_3166-1#Current_codes]</span>
<em>country</em> code (e.g. <code class="docutils literal notranslate"><span class="pre">fr_FR</span></code> for French/France) is recommended.</p>
</div>
<p>The translation process has several steps:</p>
<ol class="arabic simple">
<li><p><a class="reference internal" href="#translation-configuration"><span class="std std-ref">Enable and configure</span></a> Symfony’s
translation service;</p></li>
<li><p>Abstract strings (i.e. “messages”) by wrapping them in calls to the
<code class="docutils literal notranslate"><span class="pre">Translator</span></code> (“<a class="reference internal" href="#translation-basic"><span class="std std-ref">Basic Translation</span></a>”);</p></li>
<li><p><a class="reference internal" href="#translation-resources"><span class="std std-ref">Create translation resources/files</span></a>
for each supported locale that translate each message in the application;</p></li>
<li><p>Determine, <a class="reference internal" href="translation/locale.xhtml"><span class="doc">set and manage the user’s locale</span></a>
for the request and optionally
<a class="reference internal" href="session/locale_sticky_session.xhtml"><span class="doc">on the user’s entire session</span></a>.</p></li>
</ol>
<div class="section" id="installation">
<h2>Installation</h2>
<p>First, run this command to install the translator before using it:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require symfony/translation
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="configuration">
<span id="translation-configuration"></span><h2>Configuration</h2>
<p>The previous command creates an initial config file where you can define the
default locale of the application and the directory where the translation files
are located:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/packages/translation.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">framework</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">default_locale</span><span class="p p-Indicator">:</span> <span class="s">&#39;en&#39;</span>
    <span class="l l-Scalar l-Scalar-Plain">translator</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">default_path</span><span class="p p-Indicator">:</span> <span class="s">&#39;%kernel.project_dir%/translations&#39;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/packages/translation.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xmlns:framework=</span><span class="s">&quot;http://symfony.com/schema/dic/symfony&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd</span>
<span class="s">        http://symfony.com/schema/dic/symfony</span>
<span class="s">        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;framework:config</span> <span class="na">default-locale=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;framework:translator&gt;</span>
            <span class="nt">&lt;framework:default-path&gt;</span>&#39;%kernel.project_dir%/translations&#39;<span class="nt">&lt;/framework:default-path&gt;</span>
            <span class="c">&lt;!-- ... --&gt;</span>
        <span class="nt">&lt;/framework:translator&gt;</span>
    <span class="nt">&lt;/framework:config&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/packages/translation.php</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;framework&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;default_locale&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;en&#39;</span><span class="p">,</span>
    <span class="s1">&#39;translator&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;default_path&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;%kernel.project_dir%/translations&#39;</span><span class="p">],</span>
    <span class="c1">// ...</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>The locale used in translations is the one stored on the request. This is
typically set via a <code class="docutils literal notranslate"><span class="pre">_locale</span></code> attribute on your routes (see <a class="reference internal" href="translation/locale.xhtml#translation-locale-url"><span class="std std-ref">The Locale and the URL</span></a>).</p>
</div>
<div class="section" id="basic-translation">
<span id="translation-basic"></span><h2>Basic Translation</h2>
<p>Translation of text is done through the  <code class="docutils literal notranslate"><span class="pre">translator</span></code> service
(<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Translation/Translator.php" title="Symfony\Component\Translation\Translator"><span class="pre">Translator</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Translation/Translator.php]</span></span></code>). To translate a block
of text (called a <em>message</em>), use the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Translation/Translator.php" title="Symfony\Component\Translation\Translator::trans()"><span class="pre">trans()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Translation/Translator.php]</span></span></code> method. Suppose,
for example, that you’re translating a static message from inside a controller:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="k">use</span> <span class="nx">Symfony\Contracts\Translation\TranslatorInterface</span><span class="p">;</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">(</span><span class="nx">TranslatorInterface</span> <span class="nv">$translator</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$translated</span> <span class="o">=</span> <span class="nv">$translator</span><span class="o">-&gt;</span><span class="na">trans</span><span class="p">(</span><span class="s1">&#39;Symfony is great&#39;</span><span class="p">);</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
<p id="translation-resources">When this code is run, Symfony will attempt to translate the message
“Symfony is great” based on the <code class="docutils literal notranslate"><span class="pre">locale</span></code> of the user. For this to work,
you need to tell Symfony how to translate the message via a “translation
resource”, which is usually a file that contains a collection of translations
for a given locale. This “dictionary” of translations can be created in several
different formats:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># translations/messages.fr.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">Symfony is great</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">J&#39;aime Symfony</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- translations/messages.fr.xlf --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
<span class="nt">&lt;xliff</span> <span class="na">version=</span><span class="s">&quot;1.2&quot;</span> <span class="na">xmlns=</span><span class="s">&quot;urn:oasis:names:tc:xliff:document:1.2&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;file</span> <span class="na">source-language=</span><span class="s">&quot;en&quot;</span> <span class="na">datatype=</span><span class="s">&quot;plaintext&quot;</span> <span class="na">original=</span><span class="s">&quot;file.ext&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;body&gt;</span>
            <span class="nt">&lt;trans-unit</span> <span class="na">id=</span><span class="s">&quot;symfony_is_great&quot;</span><span class="nt">&gt;</span>
                <span class="nt">&lt;source&gt;</span>Symfony is great<span class="nt">&lt;/source&gt;</span>
                <span class="nt">&lt;target&gt;</span>J&#39;aime Symfony<span class="nt">&lt;/target&gt;</span>
            <span class="nt">&lt;/trans-unit&gt;</span>
        <span class="nt">&lt;/body&gt;</span>
    <span class="nt">&lt;/file&gt;</span>
<span class="nt">&lt;/xliff&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// translations/messages.fr.php</span>
<span class="k">return</span> <span class="p">[</span>
    <span class="s1">&#39;Symfony is great&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;J&#39;aime Symfony&quot;</span><span class="p">,</span>
<span class="p">];</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>For information on where these files should be located, see
<a class="reference internal" href="#translation-resource-locations"><span class="std std-ref">Translation Resource/File Names and Locations</span></a>.</p>
<p>Now, if the language of the user’s locale is French (e.g. <code class="docutils literal notranslate"><span class="pre">fr_FR</span></code> or <code class="docutils literal notranslate"><span class="pre">fr_BE</span></code>),
the message will be translated into <code class="docutils literal notranslate"><span class="pre">J'aime</span> <span class="pre">Symfony</span></code>. You can also translate
the message inside your <a class="reference internal" href="#translation-in-templates"><span class="std std-ref">templates</span></a>.</p>
<div class="section" id="using-real-or-keyword-messages">
<span id="translation-real-vs-keyword-messages"></span><h3>Using Real or Keyword Messages</h3>
<p>This example illustrates the two different philosophies when creating
messages to be translated:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$translator</span><span class="o">-&gt;</span><span class="na">trans</span><span class="p">(</span><span class="s1">&#39;Symfony is great&#39;</span><span class="p">);</span>

<span class="nv">$translator</span><span class="o">-&gt;</span><span class="na">trans</span><span class="p">(</span><span class="s1">&#39;symfony.great&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>In the first method, messages are written in the language of the default
locale (English in this case). That message is then used as the “id”
when creating translations.</p>
<p>In the second method, messages are actually “keywords” that convey the
idea of the message. The keyword message is then used as the “id” for
any translations. In this case, translations must be made for the default
locale (i.e. to translate <code class="docutils literal notranslate"><span class="pre">symfony.great</span></code> to <code class="docutils literal notranslate"><span class="pre">Symfony</span> <span class="pre">is</span> <span class="pre">great</span></code>).</p>
<p>The second method is handy because the message key won’t need to be changed
in every translation file if you decide that the message should actually
read “Symfony is really great” in the default locale.</p>
<p>The choice of which method to use is entirely up to you, but the “keyword”
format is often recommended for multi-language applications, whereas for
shared bundles that contain translation resources we recommend the real
message, so your application can choose to disable the translator layer
and you will see a readable message.</p>
<p>Additionally, the <code class="docutils literal notranslate"><span class="pre">php</span></code> and <code class="docutils literal notranslate"><span class="pre">yaml</span></code> file formats support nested ids to
avoid repeating yourself if you use keywords instead of real text for your
ids:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="l l-Scalar l-Scalar-Plain">symfony</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">is</span><span class="p p-Indicator">:</span>
        <span class="c1"># id is symfony.is.great</span>
        <span class="l l-Scalar l-Scalar-Plain">great</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">Symfony is great</span>
        <span class="c1"># id is symfony.is.amazing</span>
        <span class="l l-Scalar l-Scalar-Plain">amazing</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">Symfony is amazing</span>
    <span class="l l-Scalar l-Scalar-Plain">has</span><span class="p p-Indicator">:</span>
        <span class="c1"># id is symfony.has.bundles</span>
        <span class="l l-Scalar l-Scalar-Plain">bundles</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">Symfony has bundles</span>
<span class="l l-Scalar l-Scalar-Plain">user</span><span class="p p-Indicator">:</span>
    <span class="c1"># id is user.login</span>
    <span class="l l-Scalar l-Scalar-Plain">login</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">Login</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="p">[</span>
    <span class="s1">&#39;symfony&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;is&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
            <span class="c1">// id is symfony.is.great</span>
            <span class="s1">&#39;great&#39;</span>   <span class="o">=&gt;</span> <span class="s1">&#39;Symfony is great&#39;</span><span class="p">,</span>
            <span class="c1">// id is symfony.is.amazing</span>
            <span class="s1">&#39;amazing&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Symfony is amazing&#39;</span><span class="p">,</span>
        <span class="p">],</span>
        <span class="s1">&#39;has&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
            <span class="c1">// id is symfony.has.bundles</span>
            <span class="s1">&#39;bundles&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Symfony has bundles&#39;</span><span class="p">,</span>
        <span class="p">],</span>
    <span class="p">],</span>
    <span class="s1">&#39;user&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="c1">// id is user.login</span>
        <span class="s1">&#39;login&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Login&#39;</span><span class="p">,</span>
    <span class="p">],</span>
<span class="p">];</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
<div class="section" id="the-translation-process">
<h3>The Translation Process</h3>
<p>To actually translate the message, Symfony uses the following process when
using the <code class="docutils literal notranslate"><span class="pre">trans()</span></code> method:</p>
<ol class="arabic simple">
<li><p>The <code class="docutils literal notranslate"><span class="pre">locale</span></code> of the current user, which is stored on the request is determined;</p></li>
<li><p>A catalog (e.g. big collection) of translated messages is loaded from translation
resources defined for the <code class="docutils literal notranslate"><span class="pre">locale</span></code> (e.g. <code class="docutils literal notranslate"><span class="pre">fr_FR</span></code>). Messages from the
<a class="reference internal" href="#translation-fallback"><span class="std std-ref">fallback locale</span></a> are also loaded and
added to the catalog if they don’t already exist. The end result is a large
“dictionary” of translations. This catalog is cached in production to
minimize performance impact.</p></li>
<li><p>If the message is located in the catalog, the translation is returned. If
not, the translator returns the original message.</p></li>
</ol>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>When translating strings that are not in the default domain (<code class="docutils literal notranslate"><span class="pre">messages</span></code>),
you must specify the domain as the third argument of <code class="docutils literal notranslate"><span class="pre">trans()</span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$translator</span><span class="o">-&gt;</span><span class="na">trans</span><span class="p">(</span><span class="s1">&#39;Symfony is great&#39;</span><span class="p">,</span> <span class="p">[],</span> <span class="s1">&#39;admin&#39;</span><span class="p">);</span>
</pre></div>
</div>
</div>
</div>
</div>
<div class="section" id="message-format">
<span id="pluralization"></span><span id="message-placeholders"></span><h2>Message Format</h2>
<p>Sometimes, a message containing a variable needs to be translated:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="nv">$translated</span> <span class="o">=</span> <span class="nv">$translator</span><span class="o">-&gt;</span><span class="na">trans</span><span class="p">(</span><span class="s1">&#39;Hello &#39;</span><span class="o">.</span><span class="nv">$name</span><span class="p">);</span>
</pre></div>
</div>
<p>However, creating a translation for this string is impossible since the
translator will try to look up the message including the variable portions
(e.g. <em>“Hello Ryan”</em> or <em>“Hello Fabien”</em>).</p>
<p>Another complication is when you have translations that may or may not be
plural, based on some variable:</p>
<div class="highlight-text notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span>There is one apple.
There are 5 apples.
</pre></div>
</td></tr></table></div>
<p>To manage these situations, Symfony follows the <a class="reference external" href="https://unicode-org.github.io/icu/userguide/format_parse/messages/">ICU MessageFormat</a><span class="link-target"> [https://unicode-org.github.io/icu/userguide/format_parse/messages/]</span> syntax by
using PHP’s <code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/class.messageformatter.php" title="MessageFormatter"><span class="pre">MessageFormatter</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/class.messageformatter.php]</span></span></code> class. Read more about this in
<a class="reference internal" href="translation/message_format.xhtml"><span class="doc">How to Translate Messages using the ICU MessageFormat</span></a>.</p>
<div class="versionadded">
<p><span class="versionmodified">New in version 4.2: </span>Support for ICU MessageFormat was introduced in Symfony 4.2. Prior to this,
pluralization was managed by the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Translation/Translator.php" title="Symfony\Component\Translation\Translator::transChoice()"><span class="pre">transChoice()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Translation/Translator.php]</span></span></code> method.</p>
</div>
</div>
<div class="section" id="translations-in-templates">
<span id="translation-in-templates"></span><h2>Translations in Templates</h2>
<p>Most of the time, translation occurs in templates. Symfony provides native
support for both Twig and PHP templates:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span><span class="cp">{%</span> <span class="k">trans</span> <span class="cp">%}</span>Symfony is great!<span class="cp">{%</span> <span class="k">endtrans</span> <span class="cp">%}</span><span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</pre></div>
</td></tr></table></div>
<p>Read <a class="reference internal" href="translation/templates.xhtml"><span class="doc">Using Translation in Templates</span></a> for more information about the Twig tags and
filters for translation.</p>
</div>
<div class="section" id="forcing-the-translator-locale">
<h2>Forcing the Translator Locale</h2>
<p>When translating a message, the translator uses the specified locale or the
<code class="docutils literal notranslate"><span class="pre">fallback</span></code> locale if necessary. You can also manually specify the locale to
use for translation:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$translator</span><span class="o">-&gt;</span><span class="na">trans</span><span class="p">(</span>
    <span class="s1">&#39;Symfony is great&#39;</span><span class="p">,</span>
    <span class="p">[],</span>
    <span class="s1">&#39;messages&#39;</span><span class="p">,</span>
    <span class="s1">&#39;fr_FR&#39;</span>
<span class="p">);</span>
</pre></div>
</div>
</div>
<div class="section" id="extracting-translation-contents-and-updating-catalogs-automatically">
<h2>Extracting Translation Contents and Updating Catalogs Automatically</h2>
<p>The most time-consuming tasks when translating an application is to extract all
the template contents to be translated and to keep all the translation files in
sync. Symfony includes a command called <code class="docutils literal notranslate"><span class="pre">translation:update</span></code> that helps you
with these tasks:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># shows all the messages that should be translated for the French language</span>
<span class="gp">$</span> php bin/console translation:update --dump-messages fr

<span class="c1"># updates the French translation files with the missing strings for that locale</span>
<span class="gp">$</span> php bin/console translation:update --force fr

<span class="c1"># check out the command help to see its options (prefix, output format, domain, sorting, etc.)</span>
<span class="gp">$</span> php bin/console translation:update --help
</pre></div>
</td></tr></table></div>
<p>The <code class="docutils literal notranslate"><span class="pre">translation:update</span></code> command looks for missing translations in:</p>
<ul class="simple">
<li><p>Templates stored in the <code class="docutils literal notranslate"><span class="pre">templates/</span></code> directory (or any other directory
defined in the <a class="reference internal" href="reference/configuration/twig.xhtml#config-twig-default-path"><span class="std std-ref">twig.default_path</span></a> and
<a class="reference internal" href="reference/configuration/twig.xhtml#config-twig-paths"><span class="std std-ref">twig.paths</span></a> config options);</p></li>
<li><p>Any PHP file/class that injects or <a class="reference internal" href="service_container/autowiring.xhtml"><span class="doc">autowires</span></a>
the <code class="docutils literal notranslate"><span class="pre">translator</span></code> service and makes calls to the <code class="docutils literal notranslate"><span class="pre">trans()</span></code> function.</p></li>
</ul>
<div class="versionadded">
<p><span class="versionmodified">New in version 4.3: </span>The extraction of missing translation strings from PHP files was introduced
in Symfony 4.3.</p>
</div>
</div>
<div class="section" id="translation-resource-file-names-and-locations">
<span id="translation-resource-locations"></span><h2>Translation Resource/File Names and Locations</h2>
<p>Symfony looks for message files (i.e. translations) in the following default locations:</p>
<ol class="arabic simple">
<li><p>the <code class="docutils literal notranslate"><span class="pre">translations/</span></code> directory (at the root of the project);</p></li>
<li><p>the <code class="docutils literal notranslate"><span class="pre">src/Resources/&lt;bundle</span> <span class="pre">name&gt;/translations/</span></code> directory;</p></li>
<li><p>the <code class="docutils literal notranslate"><span class="pre">Resources/translations/</span></code> directory inside of any bundle.</p></li>
</ol>
<div class="deprecated">
<p><span class="versionmodified">Deprecated since version 4.2: </span>Using the <code class="docutils literal notranslate"><span class="pre">src/Resources/&lt;bundle</span> <span class="pre">name&gt;/translations/</span></code> directory to store
translations was deprecated in Symfony 4.2. Use instead the directory
defined in the <code class="docutils literal notranslate"><span class="pre">default_path</span></code> option (which is <code class="docutils literal notranslate"><span class="pre">translations/</span></code> by default).</p>
</div>
<p>The locations are listed here with the highest priority first. That is, you can
override the translation messages of a bundle in any of the top two directories.</p>
<p>The override mechanism works at a key level: only the overridden keys need
to be listed in a higher priority message file. When a key is not found
in a message file, the translator will automatically fall back to the lower
priority message files.</p>
<p>The filename of the translation files is also important: each message file
must be named according to the following path: <code class="docutils literal notranslate"><span class="pre">domain.locale.loader</span></code>:</p>
<ul class="simple">
<li><p><strong>domain</strong>: Domains are a way to organize messages into groups. Unless
parts of the application are explicitly separated from each other, it is
recommended to only use the default <code class="docutils literal notranslate"><span class="pre">messages</span></code> domain (e.g.
<code class="docutils literal notranslate"><span class="pre">messages.en.yaml</span></code>).</p></li>
<li><p><strong>locale</strong>: The locale that the translations are for (e.g. <code class="docutils literal notranslate"><span class="pre">en_GB</span></code>, <code class="docutils literal notranslate"><span class="pre">en</span></code>, etc);</p></li>
<li><p><strong>loader</strong>: How Symfony should load and parse the file (e.g. <code class="docutils literal notranslate"><span class="pre">xlf</span></code>,
<code class="docutils literal notranslate"><span class="pre">php</span></code>, <code class="docutils literal notranslate"><span class="pre">yaml</span></code>, etc).</p></li>
</ul>
<p>The loader can be the name of any registered loader. By default, Symfony
provides many loaders:</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">.yaml</span></code>: YAML file</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">.xlf</span></code>: XLIFF file;</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">.php</span></code>: Returning a PHP array;</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">.csv</span></code>: CSV file;</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">.json</span></code>: JSON file;</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">.ini</span></code>: INI file;</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">.dat</span></code>, <code class="docutils literal notranslate"><span class="pre">.res</span></code>: ICU resource bundle;</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">.mo</span></code>: Machine object format;</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">.po</span></code>: Portable object format;</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">.qt</span></code>: QT Translations XML file;</p></li>
</ul>
<p>The choice of which loader to use is entirely up to you and is a matter of
taste. The recommended option is to use YAML for simple projects and use XLIFF
if you’re generating translations with specialized programs or teams.</p>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>Each time you create a <em>new</em> message catalog (or install a bundle
that includes a translation catalog), be sure to clear your cache so
that Symfony can discover the new translation resources:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console cache:clear
</pre></div>
</td></tr></table></div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>You can add other directories with the <a class="reference internal" href="reference/configuration/framework.xhtml#reference-translator-paths"><span class="std std-ref">paths</span></a>
option in the configuration:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/packages/translation.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">framework</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">translator</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">paths</span><span class="p p-Indicator">:</span>
            <span class="p p-Indicator">-</span> <span class="s">&#39;%kernel.project_dir%/custom/path/to/translations&#39;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/packages/translation.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:framework=</span><span class="s">&quot;http://symfony.com/schema/dic/symfony&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-Instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd</span>
<span class="s">        http://symfony.com/schema/dic/symfony</span>
<span class="s">        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;framework:config&gt;</span>
        <span class="nt">&lt;framework:translator&gt;</span>
            <span class="nt">&lt;framework:path&gt;</span>%kernel.project_dir%/custom/path/to/translations<span class="nt">&lt;/framework:path&gt;</span>
        <span class="nt">&lt;/framework:translator&gt;</span>
    <span class="nt">&lt;/framework:config&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/packages/translation.php</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;framework&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;translator&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;paths&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
            <span class="s1">&#39;%kernel.project_dir%/custom/path/to/translations&#39;</span><span class="p">,</span>
        <span class="p">],</span>
    <span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>You can also store translations in a database, or any other storage by
providing a custom class implementing the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Translation/Loader/LoaderInterface.php" title="Symfony\Component\Translation\Loader\LoaderInterface"><span class="pre">LoaderInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Translation/Loader/LoaderInterface.php]</span></span></code> interface.
See the <a class="reference internal" href="reference/dic_tags.xhtml#dic-tags-translation-loader"><span class="std std-ref">translation.loader</span></a> tag for more information.</p>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 4.3: </span>Starting from Symfony 4.3, when you create a new translation file (or
install a bundle that includes translation files), you don’t have to clear
the cache with the command <code class="docutils literal notranslate"><span class="pre">php</span> <span class="pre">bin/console</span> <span class="pre">cache:clear</span></code> as you had to do
in previous Symfony versions.</p>
</div>
</div>
<div class="section" id="handling-the-user-s-locale">
<h2>Handling the User’s Locale</h2>
<p>Translating happens based on the user’s locale. Read <a class="reference internal" href="translation/locale.xhtml"><span class="doc">How to Work with the User’s Locale</span></a>
to learn more about how to handle it.</p>
</div>
<div class="section" id="fallback-translation-locales">
<span id="translation-fallback"></span><h2>Fallback Translation Locales</h2>
<p>Imagine that the user’s locale is <code class="docutils literal notranslate"><span class="pre">es_AR</span></code> and that you’re translating the
key <code class="docutils literal notranslate"><span class="pre">Symfony</span> <span class="pre">is</span> <span class="pre">great</span></code>. To find the Spanish translation, Symfony actually
checks translation resources for several locales:</p>
<ol class="arabic">
<li><p>First, Symfony looks for the translation in a <code class="docutils literal notranslate"><span class="pre">es_AR</span></code> (Argentinean
Spanish) translation resource (e.g. <code class="docutils literal notranslate"><span class="pre">messages.es_AR.yaml</span></code>);</p></li>
<li><p>If it wasn’t found, Symfony looks for the translation in the
parent locale, which is automatically defined only for some locales. In
this example, the parent locale is <code class="docutils literal notranslate"><span class="pre">es_419</span></code> (Latin American Spanish);</p></li>
<li><p>If it wasn’t found, Symfony looks for the translation in a <code class="docutils literal notranslate"><span class="pre">es</span></code>
(Spanish) translation resource (e.g. <code class="docutils literal notranslate"><span class="pre">messages.es.yaml</span></code>);</p></li>
<li><p>If the translation still isn’t found, Symfony uses the <code class="docutils literal notranslate"><span class="pre">fallbacks</span></code> option,
which can be configured as follows:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/packages/translation.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">framework</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">translator</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">fallbacks</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="s">&#39;en&#39;</span><span class="p p-Indicator">]</span>
        <span class="c1"># ...</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/packages/translation.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xmlns:framework=</span><span class="s">&quot;http://symfony.com/schema/dic/symfony&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd</span>
<span class="s">        http://symfony.com/schema/dic/symfony</span>
<span class="s">        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;framework:config&gt;</span>
        <span class="nt">&lt;framework:translator&gt;</span>
            <span class="nt">&lt;framework:fallback&gt;</span>en<span class="nt">&lt;/framework:fallback&gt;</span>
            <span class="c">&lt;!-- ... --&gt;</span>
        <span class="nt">&lt;/framework:translator&gt;</span>
    <span class="nt">&lt;/framework:config&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/packages/translation.php</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;framework&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;translator&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;fallbacks&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;en&#39;</span><span class="p">]],</span>
    <span class="c1">// ...</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</li>
</ol>
<div class="deprecated">
<p><span class="versionmodified">Deprecated since version 4.4: </span>In Symfony versions before 4.4, the <code class="docutils literal notranslate"><span class="pre">fallbacks</span></code> option was initialized to
<code class="docutils literal notranslate"><span class="pre">en</span></code> (English) when not configured explicitly. Starting from Symfony 4.4,
this option is initialized to the same value as the <code class="docutils literal notranslate"><span class="pre">default_locale</span></code> option.</p>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>When Symfony can’t find a translation in the given locale, it will
add the missing translation to the log file. For details,
see <a class="reference internal" href="reference/configuration/framework.xhtml#reference-framework-translator-logging"><span class="std std-ref">logging</span></a>.</p>
</div>
</div>
<div class="section" id="translating-database-content">
<h2>Translating Database Content</h2>
<p>The translation of database content should be handled by Doctrine through
the <a class="reference external" href="http://atlantic18.github.io/DoctrineExtensions/doc/translatable.html">Translatable Extension</a><span class="link-target"> [http://atlantic18.github.io/DoctrineExtensions/doc/translatable.html]</span> or the <a class="reference external" href="https://github.com/KnpLabs/DoctrineBehaviors">Translatable Behavior</a><span class="link-target"> [https://github.com/KnpLabs/DoctrineBehaviors]</span> (PHP 5.4+).
For more information, see the documentation for these libraries.</p>
</div>
<div class="section" id="debugging-translations">
<h2>Debugging Translations</h2>
<p>When you work with many translation messages in different languages, it can
be hard to keep track which translations are missing and which are not used
anymore. Read <a class="reference internal" href="translation/debug.xhtml"><span class="doc">How to Find Missing or Unused Translation Messages</span></a> to find out how to identify these
messages.</p>
</div>
<div class="section" id="summary">
<h2>Summary</h2>
<p>With the Symfony Translation component, creating an internationalized application
no longer needs to be a painful process and boils down to these steps:</p>
<ul class="simple">
<li><p>Abstract messages in your application by wrapping each in the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Translation/Translator.php" title="Symfony\Component\Translation\Translator::trans()"><span class="pre">trans()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Translation/Translator.php]</span></span></code> method;</p></li>
<li><p>Translate each message into multiple locales by creating translation message
files. Symfony discovers and processes each file because its name follows
a specific convention;</p></li>
<li><p>Manage the user’s locale, which is stored on the request, but can also
be set on the user’s session.</p></li>
</ul>
</div>
<div class="section" id="learn-more">
<h2>Learn more</h2>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="translation/message_format.xhtml">How to Translate Messages using the ICU MessageFormat</a></li>
<li class="toctree-l1"><a class="reference internal" href="translation/templates.xhtml">Using Translation in Templates</a></li>
<li class="toctree-l1"><a class="reference internal" href="translation/locale.xhtml">How to Work with the User’s Locale</a></li>
<li class="toctree-l1"><a class="reference internal" href="translation/debug.xhtml">How to Find Missing or Unused Translation Messages</a></li>
<li class="toctree-l1"><a class="reference internal" href="translation/lint.xhtml">How to Find Errors in Translation Files</a></li>
<li class="toctree-l1"><a class="reference internal" href="translation/xliff.xhtml">The XLIFF format</a></li>
</ul>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>