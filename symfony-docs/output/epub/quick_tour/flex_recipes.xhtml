<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Flex: Compose your Application</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="flex-compose-your-application">
<h1>Flex: Compose your Application</h1>
<p>After reading the first part of this tutorial, you have decided that Symfony was
worth another 10 minutes. Great choice! In this second part, you’ll learn about
Symfony Flex: the amazing tool that makes adding new features as simple as running
one command. It’s also the reason why Symfony is ideal for a small micro-service
or a huge application. Curious? Perfect!</p>
<div class="section" id="symfony-start-micro">
<h2>Symfony: Start Micro!</h2>
<p>Unless you’re building a pure API (more on that soon!), you’ll probably want to
render HTML. To do that, you’ll use <a class="reference external" href="https://twig.symfony.com/">Twig</a><span class="link-target"> [https://twig.symfony.com/]</span>. Twig is a flexible, fast, and secure
template engine for PHP. It makes your templates more readable and concise; it also
makes them more friendly for web designers.</p>
<p>Is Twig already installed in our application? Actually, not yet! And that’s great!
When you start a new Symfony project, it’s <em>small</em>:  only the most critical dependencies
are included in your <code class="docutils literal notranslate"><span class="pre">composer.json</span></code> file:</p>
<div class="highlight-text notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span>&quot;require&quot;: {
    &quot;...&quot;,
    &quot;symfony/console&quot;: &quot;^4.1&quot;,
    &quot;symfony/flex&quot;: &quot;^1.0&quot;,
    &quot;symfony/framework-bundle&quot;: &quot;^4.1&quot;,
    &quot;symfony/yaml&quot;: &quot;^4.1&quot;
}
</pre></div>
</td></tr></table></div>
<p>This makes Symfony different than any other PHP framework! Instead of starting with
a <em>bulky</em> app with <em>every</em> possible feature you might ever need, a Symfony app is
small, simple and <em>fast</em>. And you’re in total control of what you add.</p>
</div>
<div class="section" id="flex-recipes-and-aliases">
<h2>Flex Recipes and Aliases</h2>
<p>So how can we install and configure Twig? By running one single command:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require twig
</pre></div>
</td></tr></table></div>
<p>Two <em>very</em> interesting things happen behind the scenes thanks to Symfony Flex: a
Composer plugin that is already installed in our project.</p>
<p>First, <code class="docutils literal notranslate"><span class="pre">twig</span></code> is not the name of a Composer package: it’s a Flex <em>alias</em> that
points to <code class="docutils literal notranslate"><span class="pre">symfony/twig-bundle</span></code>. Flex resolves that alias for Composer.</p>
<p>And second, Flex installs a <em>recipe</em> for <code class="docutils literal notranslate"><span class="pre">symfony/twig-bundle</span></code>. What’s a recipe?
It’s a way for a library to automatically configure itself by adding and modifying
files. Thanks to recipes, adding features is seamless and automated: install a package
and you’re done!</p>
<p>You can find a full list of recipes and aliases by going to <a class="reference external" href="https://flex.symfony.com">https://flex.symfony.com</a>.</p>
<p>What did this recipe do? In addition to automatically enabling the feature in
<code class="docutils literal notranslate"><span class="pre">config/bundles.php</span></code>, it added 3 things:</p>
<dl class="simple">
<dt><code class="docutils literal notranslate"><span class="pre">config/packages/twig.yaml</span></code></dt>
<dd><p>A configuration file that sets up Twig with sensible defaults.</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">config/packages/test/twig.yaml</span></code></dt>
<dd><p>A configuration file that changes some Twig options when running tests.</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">templates/</span></code></dt>
<dd><p>This is the directory where template files will live. The recipe also added
a <code class="docutils literal notranslate"><span class="pre">base.html.twig</span></code> layout file.</p>
</dd>
</dl>
</div>
<div class="section" id="twig-rendering-a-template">
<h2>Twig: Rendering a Template</h2>
<p>Thanks to Flex, after one command, you can start using Twig immediately:</p>
<div class="highlight-diff notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22</pre></div></td><td class="code"><div class="highlight"><pre><span></span>&lt;?php
// src/Controller/DefaultController.php
namespace App\Controller;

use Symfony\Component\Routing\Annotation\Route;
<span class="gd">- use Symfony\Component\HttpFoundation\Response;</span>
<span class="gi">+ use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;</span>

<span class="gd">-class DefaultController</span>
<span class="gi">+class DefaultController extends AbstractController</span>
 {
     /**
      * @Route(&quot;/hello/{name}&quot;)
      */
     public function index($name)
     {
<span class="gd">-        return new Response(&quot;Hello $name!&quot;);</span>
<span class="gi">+        return $this-&gt;render(&#39;default/index.html.twig&#39;, [</span>
<span class="gi">+            &#39;name&#39; =&gt; $name,</span>
<span class="gi">+        ]);</span>
     }
}
</pre></div>
</td></tr></table></div>
<p>By extending <code class="docutils literal notranslate"><span class="pre">AbstractController</span></code>, you now have access to a number of shortcut
methods and tools, like <code class="docutils literal notranslate"><span class="pre">render()</span></code>. Create the new template:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# templates/default/index.html.twig #}</span>
<span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Hello <span class="cp">{{</span> <span class="nv">name</span> <span class="cp">}}</span><span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</pre></div>
</td></tr></table></div>
<p>That’s it! The <code class="docutils literal notranslate"><span class="pre">{{</span> <span class="pre">name</span> <span class="pre">}}</span></code> syntax will print the <code class="docutils literal notranslate"><span class="pre">name</span></code> variable that’s passed
in from the controller. If you’re new to Twig, welcome! You’ll learn more about
its syntax and power later.</p>
<p>But, right now, the page <em>only</em> contains the <code class="docutils literal notranslate"><span class="pre">h1</span></code> tag. To give it an HTML layout,
extend <code class="docutils literal notranslate"><span class="pre">base.html.twig</span></code>:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# templates/default/index.html.twig #}</span>
<span class="cp">{%</span> <span class="k">extends</span> <span class="s1">&#39;base.html.twig&#39;</span> <span class="cp">%}</span>

<span class="cp">{%</span> <span class="k">block</span> <span class="nv">body</span> <span class="cp">%}</span>
    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Hello <span class="cp">{{</span> <span class="nv">name</span> <span class="cp">}}</span><span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
<span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span>
</pre></div>
</td></tr></table></div>
<p>This is called template inheritance: our page now inherits the HTML structure from
<code class="docutils literal notranslate"><span class="pre">base.html.twig</span></code>.</p>
</div>
<div class="section" id="profiler-debugging-paradise">
<h2>Profiler: Debugging Paradise</h2>
<p>One of the <em>coolest</em> features of Symfony isn’t even installed yet! Let’s fix that:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require profiler
</pre></div>
</td></tr></table></div>
<p>Yes! This is another alias! And Flex <em>also</em> installs another recipe, which automates
the configuration of Symfony’s Profiler. What’s the result? Refresh!</p>
<p>See that black bar on the bottom? That’s the web debug toolbar, and it’s your new
best friend. By hovering over each icon, you can get information about what controller
was executed, performance information, cache hits &amp; misses and a lot more. Click
any icon to go into the <em>profiler</em> where you have even <em>more</em> detailed debugging
and performance data!</p>
<p>Oh, and as you install more libraries, you’ll get more tools (like a web debug toolbar
icon that shows database queries).</p>
<p>You can now directly use the profiler because it configured <em>itself</em> thanks to
the recipe. What else can we install?</p>
</div>
<div class="section" id="rich-api-support">
<h2>Rich API Support</h2>
<p>Are you building an API? You can already return JSON from any controller:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="o">&lt;?</span><span class="nx">php</span>
<span class="c1">// src/Controller/DefaultController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Annotation\Route</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">DefaultController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="sd">/**</span>
<span class="sd">     * @Route(&quot;/api/hello/{name}&quot;)</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">apiExample</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">json</span><span class="p">([</span>
            <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="nv">$name</span><span class="p">,</span>
            <span class="s1">&#39;symfony&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;rocks&#39;</span><span class="p">,</span>
        <span class="p">]);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>But for a <em>truly</em> rich API, try installing <a class="reference external" href="https://api-platform.com/">API Platform</a><span class="link-target"> [https://api-platform.com/]</span>:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require api
</pre></div>
</td></tr></table></div>
<p>This is an alias to <code class="docutils literal notranslate"><span class="pre">api-platform/api-pack</span></code> <a class="reference internal" href="../setup.xhtml#symfony-packs"><span class="std std-ref">Symfony pack</span></a>,
which has dependencies on several other packages, like Symfony’s Validator and
Security components, as well as the Doctrine ORM. In fact, Flex installed <em>5</em> recipes!</p>
<p>But like usual, we can immediately start using the new library. Want to create a
rich API for a <code class="docutils literal notranslate"><span class="pre">product</span></code> table? Create a <code class="docutils literal notranslate"><span class="pre">Product</span></code> entity and give it the
<code class="docutils literal notranslate"><span class="pre">&#64;ApiResource()</span></code> annotation:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="o">&lt;?</span><span class="nx">php</span>
<span class="c1">// src/Entity/Product.php</span>
<span class="k">namespace</span> <span class="nx">App\Entity</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">ApiPlatform\Core\Annotation\ApiResource</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Doctrine\ORM\Mapping</span> <span class="k">as</span> <span class="nx">ORM</span><span class="p">;</span>

<span class="sd">/**</span>
<span class="sd"> * @ORM\Entity()</span>
<span class="sd"> * @ApiResource()</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">Product</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @ORM\Id</span>
<span class="sd">     * @ORM\GeneratedValue(strategy=&quot;AUTO&quot;)</span>
<span class="sd">     * @ORM\Column(type=&quot;integer&quot;)</span>
<span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$id</span><span class="p">;</span>

    <span class="sd">/**</span>
<span class="sd">     * @ORM\Column(type=&quot;string&quot;)</span>
<span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$name</span><span class="p">;</span>

    <span class="sd">/**</span>
<span class="sd">     * @ORM\Column(type=&quot;int&quot;)</span>
<span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$price</span><span class="p">;</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Done! You now have endpoints to list, add, update and delete products! Don’t believe
me? List your routes by running:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console debug:router

<span class="go">------------------------------ -------- -------------------------------------</span>
<span class="go"> Name                           Method   Path</span>
<span class="go">------------------------------ -------- -------------------------------------</span>
<span class="go"> api_products_get_collection    GET      /api/products.{_format}</span>
<span class="go"> api_products_post_collection   POST     /api/products.{_format}</span>
<span class="go"> api_products_get_item          GET      /api/products/{id}.{_format}</span>
<span class="go"> api_products_put_item          PUT      /api/products/{id}.{_format}</span>
<span class="go"> api_products_delete_item       DELETE   /api/products/{id}.{_format}</span>
<span class="go"> ...</span>
<span class="go">------------------------------ -------- -------------------------------------</span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="removing-recipes">
<h2>Removing Recipes</h2>
<p>Not convinced yet? No problem: remove the library:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer remove api
</pre></div>
</td></tr></table></div>
<p>Flex will <em>uninstall</em> the recipes: removing files and un-doing changes to put your
app back in its original state. Experiment without worry.</p>
</div>
<div class="section" id="more-features-architecture-and-speed">
<h2>More Features, Architecture and Speed</h2>
<p>I hope you’re as excited about Flex as I am! But we still have <em>one</em> more chapter,
and it’s the most important yet. I want to show you how Symfony empowers you to quickly
build features <em>without</em> sacrificing code quality or performance. It’s all about
the service container, and it’s Symfony’s super power. Read on: about <a class="reference internal" href="the_architecture.xhtml"><span class="doc">The Architecture</span></a>.</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>