<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Test Code that Interacts with the Database</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-test-code-that-interacts-with-the-database">
<span id="index-0"></span><h1>How to Test Code that Interacts with the Database</h1>
<div class="section" id="configuring-a-database-for-tests">
<h2>Configuring a Database for Tests</h2>
<p>Tests that interact with the database should use their own separate database to
not mess with the databases used in the other <a class="reference internal" href="../configuration.xhtml#configuration-environments"><span class="std std-ref">configuration environments</span></a>.
To do that, edit or create the <code class="docutils literal notranslate"><span class="pre">.env.test.local</span></code> file at the root directory of
your project and define the new value for the <code class="docutils literal notranslate"><span class="pre">DATABASE_URL</span></code> env var:</p>
<div class="highlight-bash notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># .env.test.local</span>
<span class="nv">DATABASE_URL</span><span class="o">=</span><span class="s2">&quot;mysql://USERNAME:PASSWORD@127.0.0.1:3306/DB_NAME?serverVersion=5.7&quot;</span>
</pre></div>
</td></tr></table></div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>A common practice is to append the <code class="docutils literal notranslate"><span class="pre">_test</span></code> suffix to the original database
names in tests. If the database name in production is called <code class="docutils literal notranslate"><span class="pre">project_acme</span></code>
the name of the testing database could be <code class="docutils literal notranslate"><span class="pre">project_acme_test</span></code>.</p>
</div>
<p>The above assumes that each developer/machine uses a different database for the
tests. If the entire team uses the same settings for tests, edit or create the
<code class="docutils literal notranslate"><span class="pre">.env.test</span></code> file instead and commit it to the shared repository. Learn more
about <a class="reference internal" href="../configuration.xhtml#configuration-multiple-env-files"><span class="std std-ref">using multiple .env files in Symfony applications</span></a>.</p>
</div>
<div class="section" id="resetting-the-database-automatically-before-each-test">
<h2>Resetting the Database Automatically Before each Test</h2>
<p>Tests should be independent from each other to avoid side effects. For example,
if some test modifies the database (by adding or removing an entity) it could
change the results of other tests. Run the following command to install a bundle
that ensures that each test is run with the same unmodified database:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require --dev dama/doctrine-test-bundle
</pre></div>
</td></tr></table></div>
<p>Now, enable it as a PHPUnit extension or listener:</p>
<div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- phpunit.xml.dist --&gt;</span>
<span class="nt">&lt;phpunit&gt;</span>
    <span class="c">&lt;!-- ... --&gt;</span>

    <span class="c">&lt;!-- Add this for PHPUnit 7.5 or higher --&gt;</span>
    <span class="nt">&lt;extensions&gt;</span>
        <span class="nt">&lt;extension</span> <span class="na">class=</span><span class="s">&quot;DAMA\DoctrineTestBundle\PHPUnit\PHPUnitExtension&quot;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/extensions&gt;</span>

    <span class="c">&lt;!-- Add this for PHPUnit 7.0 until 7.4 --&gt;</span>
    <span class="nt">&lt;listeners&gt;</span>
        <span class="nt">&lt;listener</span> <span class="na">class=</span><span class="s">&quot;\DAMA\DoctrineTestBundle\PHPUnit\PHPUnitListener&quot;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/listeners&gt;</span>
<span class="nt">&lt;/phpunit&gt;</span>
</pre></div>
</td></tr></table></div>
<p>This bundle uses a clever trick to avoid side effects without sacrificing
performance: it begins a database transaction before every test and rolls it
back automatically after the test finishes to undo all changes. Read more in the
documentation of the <a class="reference external" href="https://github.com/dmaicher/doctrine-test-bundle">DAMADoctrineTestBundle</a><span class="link-target"> [https://github.com/dmaicher/doctrine-test-bundle]</span>.</p>
</div>
<div class="section" id="dummy-data-fixtures">
<span id="doctrine-fixtures"></span><h2>Dummy Data Fixtures</h2>
<p>Instead of using the real data from the production database, it’s common to use
fake or dummy data in the test database. This is usually called <em>“fixtures data”</em>
and Doctrine provides a library to create and load them. Install it with:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require --dev doctrine/doctrine-fixtures-bundle
</pre></div>
</td></tr></table></div>
<p>Then, use the <code class="docutils literal notranslate"><span class="pre">make:fixtures</span></code> command to generate an empty fixture class:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console make:fixtures

<span class="go">The class name of the fixtures to create (e.g. AppFixtures):</span>
<span class="gp">&gt;</span> ProductFixture
</pre></div>
</td></tr></table></div>
<p>Customize the new class to load <code class="docutils literal notranslate"><span class="pre">Product</span></code> objects into Doctrine:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/DataFixtures/ProductFixture.php</span>
<span class="k">namespace</span> <span class="nx">App\DataFixtures</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Entity\Product</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Doctrine\Bundle\FixturesBundle\Fixture</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Doctrine\Persistence\ObjectManager</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">ProductFixture</span> <span class="k">extends</span> <span class="nx">Fixture</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">load</span><span class="p">(</span><span class="nx">ObjectManager</span> <span class="nv">$manager</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$product</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Product</span><span class="p">();</span>
        <span class="nv">$product</span><span class="o">-&gt;</span><span class="na">setName</span><span class="p">(</span><span class="s1">&#39;Priceless widget&#39;</span><span class="p">);</span>
        <span class="nv">$product</span><span class="o">-&gt;</span><span class="na">setPrice</span><span class="p">(</span><span class="mf">14.50</span><span class="p">);</span>
        <span class="nv">$product</span><span class="o">-&gt;</span><span class="na">setDescription</span><span class="p">(</span><span class="s1">&#39;Ok, I guess it *does* have a price&#39;</span><span class="p">);</span>
        <span class="nv">$manager</span><span class="o">-&gt;</span><span class="na">persist</span><span class="p">(</span><span class="nv">$product</span><span class="p">);</span>

        <span class="c1">// add more products</span>

        <span class="nv">$manager</span><span class="o">-&gt;</span><span class="na">flush</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Empty the database and reload <em>all</em> the fixture classes with:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console doctrine:fixtures:load
</pre></div>
</td></tr></table></div>
<p>For more information, read the <a class="reference external" href="https://symfony.com/doc/current/bundles/DoctrineFixturesBundle/index.html">DoctrineFixturesBundle documentation</a><span class="link-target"> [https://symfony.com/doc/current/bundles/DoctrineFixturesBundle/index.html]</span>.</p>
</div>
<div class="section" id="mocking-a-doctrine-repository-in-unit-tests">
<h2>Mocking a Doctrine Repository in Unit Tests</h2>
<p><strong>Unit testing Doctrine repositories is not recommended</strong>. Repositories are
meant to be tested against a real database connection. However, in case you
still need to do this, look at the following example.</p>
<p>Suppose the class you want to test looks like this:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Salary/SalaryCalculator.php</span>
<span class="k">namespace</span> <span class="nx">App\Salary</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Entity\Employee</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Doctrine\Persistence\ObjectManager</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">SalaryCalculator</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$objectManager</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nx">ObjectManager</span> <span class="nv">$objectManager</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">objectManager</span> <span class="o">=</span> <span class="nv">$objectManager</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">calculateTotalSalary</span><span class="p">(</span><span class="nv">$id</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$employeeRepository</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">objectManager</span>
            <span class="o">-&gt;</span><span class="na">getRepository</span><span class="p">(</span><span class="nx">Employee</span><span class="o">::</span><span class="na">class</span><span class="p">);</span>
        <span class="nv">$employee</span> <span class="o">=</span> <span class="nv">$employeeRepository</span><span class="o">-&gt;</span><span class="na">find</span><span class="p">(</span><span class="nv">$id</span><span class="p">);</span>

        <span class="k">return</span> <span class="nv">$employee</span><span class="o">-&gt;</span><span class="na">getSalary</span><span class="p">()</span> <span class="o">+</span> <span class="nv">$employee</span><span class="o">-&gt;</span><span class="na">getBonus</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Since the <code class="docutils literal notranslate"><span class="pre">EntityManagerInterface</span></code> gets injected into the class through the
constructor, you can pass a mock object within a test:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// tests/Salary/SalaryCalculatorTest.php</span>
<span class="k">namespace</span> <span class="nx">App\Tests\Salary</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Entity\Employee</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">App\Salary\SalaryCalculator</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Doctrine\Persistence\ObjectManager</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Doctrine\Persistence\ObjectRepository</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">PHPUnit\Framework\TestCase</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">SalaryCalculatorTest</span> <span class="k">extends</span> <span class="nx">TestCase</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">testCalculateTotalSalary</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$employee</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Employee</span><span class="p">();</span>
        <span class="nv">$employee</span><span class="o">-&gt;</span><span class="na">setSalary</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
        <span class="nv">$employee</span><span class="o">-&gt;</span><span class="na">setBonus</span><span class="p">(</span><span class="mi">1100</span><span class="p">);</span>

        <span class="c1">// Now, mock the repository so it returns the mock of the employee</span>
        <span class="nv">$employeeRepository</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createMock</span><span class="p">(</span><span class="nx">ObjectRepository</span><span class="o">::</span><span class="na">class</span><span class="p">);</span>
        <span class="c1">// use getMock() on PHPUnit 5.3 or below</span>
        <span class="c1">// $employeeRepository = $this-&gt;getMock(ObjectRepository::class);</span>
        <span class="nv">$employeeRepository</span><span class="o">-&gt;</span><span class="na">expects</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">any</span><span class="p">())</span>
            <span class="o">-&gt;</span><span class="na">method</span><span class="p">(</span><span class="s1">&#39;find&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">willReturn</span><span class="p">(</span><span class="nv">$employee</span><span class="p">);</span>

        <span class="c1">// Last, mock the EntityManager to return the mock of the repository</span>
        <span class="c1">// (this is not needed if the class being tested injects the</span>
        <span class="c1">// repository it uses instead of the entire object manager)</span>
        <span class="nv">$objectManager</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createMock</span><span class="p">(</span><span class="nx">ObjectManager</span><span class="o">::</span><span class="na">class</span><span class="p">);</span>
        <span class="c1">// use getMock() on PHPUnit 5.3 or below</span>
        <span class="c1">// $objectManager = $this-&gt;getMock(ObjectManager::class);</span>
        <span class="nv">$objectManager</span><span class="o">-&gt;</span><span class="na">expects</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">any</span><span class="p">())</span>
            <span class="o">-&gt;</span><span class="na">method</span><span class="p">(</span><span class="s1">&#39;getRepository&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">willReturn</span><span class="p">(</span><span class="nv">$employeeRepository</span><span class="p">);</span>

        <span class="nv">$salaryCalculator</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SalaryCalculator</span><span class="p">(</span><span class="nv">$objectManager</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="mi">2100</span><span class="p">,</span> <span class="nv">$salaryCalculator</span><span class="o">-&gt;</span><span class="na">calculateTotalSalary</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>In this example, you are building the mocks from the inside out, first creating
the employee which gets returned by the <code class="docutils literal notranslate"><span class="pre">Repository</span></code>, which itself gets
returned by the <code class="docutils literal notranslate"><span class="pre">EntityManager</span></code>. This way, no real class is involved in
testing.</p>
</div>
<div class="section" id="functional-testing-of-a-doctrine-repository">
<h2>Functional Testing of A Doctrine Repository</h2>
<p>In <a class="reference internal" href="../testing.xhtml#functional-tests"><span class="std std-ref">functional tests</span></a> you’ll make queries to the
database using the actual Doctrine repositories, instead of mocking them. To do
so, get the entity manager via the service container as follows:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// tests/Repository/ProductRepositoryTest.php</span>
<span class="k">namespace</span> <span class="nx">App\Tests\Repository</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Entity\Product</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Test\KernelTestCase</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">ProductRepositoryTest</span> <span class="k">extends</span> <span class="nx">KernelTestCase</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @var \Doctrine\ORM\EntityManager</span>
<span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$entityManager</span><span class="p">;</span>

    <span class="k">protected</span> <span class="k">function</span> <span class="nf">setUp</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$kernel</span> <span class="o">=</span> <span class="nx">self</span><span class="o">::</span><span class="na">bootKernel</span><span class="p">();</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">entityManager</span> <span class="o">=</span> <span class="nv">$kernel</span><span class="o">-&gt;</span><span class="na">getContainer</span><span class="p">()</span>
            <span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;doctrine&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">getManager</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">testSearchByName</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$product</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">entityManager</span>
            <span class="o">-&gt;</span><span class="na">getRepository</span><span class="p">(</span><span class="nx">Product</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">findOneBy</span><span class="p">([</span><span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Priceless widget&#39;</span><span class="p">])</span>
        <span class="p">;</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertSame</span><span class="p">(</span><span class="mf">14.50</span><span class="p">,</span> <span class="nv">$product</span><span class="o">-&gt;</span><span class="na">getPrice</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="k">protected</span> <span class="k">function</span> <span class="nf">tearDown</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">parent</span><span class="o">::</span><span class="na">tearDown</span><span class="p">();</span>

        <span class="c1">// doing this is recommended to avoid memory leaks</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">entityManager</span><span class="o">-&gt;</span><span class="na">close</span><span class="p">();</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">entityManager</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>