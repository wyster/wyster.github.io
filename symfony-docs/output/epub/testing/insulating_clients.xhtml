<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Test the Interaction of several Clients</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-test-the-interaction-of-several-clients">
<span id="index-0"></span><h1>How to Test the Interaction of several Clients</h1>
<p>If you need to simulate an interaction between different clients (think of a
chat for instance), create several clients:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>

<span class="nv">$harry</span> <span class="o">=</span> <span class="k">static</span><span class="o">::</span><span class="na">createClient</span><span class="p">();</span>
<span class="nv">$sally</span> <span class="o">=</span> <span class="k">static</span><span class="o">::</span><span class="na">createClient</span><span class="p">();</span>

<span class="nv">$harry</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;POST&#39;</span><span class="p">,</span> <span class="s1">&#39;/say/sally/Hello&#39;</span><span class="p">);</span>
<span class="nv">$sally</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;/messages&#39;</span><span class="p">);</span>

<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="nx">Response</span><span class="o">::</span><span class="na">HTTP_CREATED</span><span class="p">,</span> <span class="nv">$harry</span><span class="o">-&gt;</span><span class="na">getResponse</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getStatusCode</span><span class="p">());</span>
<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertRegExp</span><span class="p">(</span><span class="s1">&#39;/Hello/&#39;</span><span class="p">,</span> <span class="nv">$sally</span><span class="o">-&gt;</span><span class="na">getResponse</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getContent</span><span class="p">());</span>
</pre></div>
</div>
<p>This works except when your code maintains a global state or if it depends on
a third-party library that has some kind of global state. In such a case, you
can insulate your clients:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>

<span class="nv">$harry</span> <span class="o">=</span> <span class="k">static</span><span class="o">::</span><span class="na">createClient</span><span class="p">();</span>
<span class="nv">$sally</span> <span class="o">=</span> <span class="k">static</span><span class="o">::</span><span class="na">createClient</span><span class="p">();</span>

<span class="nv">$harry</span><span class="o">-&gt;</span><span class="na">insulate</span><span class="p">();</span>
<span class="nv">$sally</span><span class="o">-&gt;</span><span class="na">insulate</span><span class="p">();</span>

<span class="nv">$harry</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;POST&#39;</span><span class="p">,</span> <span class="s1">&#39;/say/sally/Hello&#39;</span><span class="p">);</span>
<span class="nv">$sally</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;/messages&#39;</span><span class="p">);</span>

<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="nx">Response</span><span class="o">::</span><span class="na">HTTP_CREATED</span><span class="p">,</span> <span class="nv">$harry</span><span class="o">-&gt;</span><span class="na">getResponse</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getStatusCode</span><span class="p">());</span>
<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertRegExp</span><span class="p">(</span><span class="s1">&#39;/Hello/&#39;</span><span class="p">,</span> <span class="nv">$sally</span><span class="o">-&gt;</span><span class="na">getResponse</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getContent</span><span class="p">());</span>
</pre></div>
</div>
<p>Insulated clients transparently run their requests in a dedicated and
clean PHP process, thus avoiding any side effects.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>As an insulated client is slower, you can keep one client in the main
process, and insulate the other ones.</p>
</div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>Insulating tests requires some serializing and unserializing operations. If
your test includes data that can’t be serialized, such as file streams when
using the <code class="docutils literal notranslate"><span class="pre">UploadedFile</span></code> class, you’ll see an exception about
<em>“serialization is not allowed”</em>. This is a technical limitation of PHP, so
the only solution is to disable insulation for those tests.</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>