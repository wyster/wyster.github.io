<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>HTTP Client</title>
    <link rel="stylesheet" href="_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="http-client">
<span id="index-0"></span><h1>HTTP Client</h1>
<div class="section" id="installation">
<h2>Installation</h2>
<p>The HttpClient component is a low-level HTTP client with support for both
PHP stream wrappers and cURL. It provides utilities to consume APIs and
supports synchronous and asynchronous operations. You can install it with:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require symfony/http-client
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="basic-usage">
<h2>Basic Usage</h2>
<p>Use the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpClient/HttpClient.php" title="Symfony\Component\HttpClient\HttpClient"><span class="pre">HttpClient</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpClient/HttpClient.php]</span></span></code> class to make
requests. In the Symfony framework, this class is available as the
<code class="docutils literal notranslate"><span class="pre">http_client</span></code> service. This service will be <a class="reference internal" href="service_container/autowiring.xhtml"><span class="doc">autowired</span></a>
automatically when type-hinting for <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Contracts/HttpClient/HttpClientInterface.php" title="Symfony\Contracts\HttpClient\HttpClientInterface"><span class="pre">HttpClientInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Contracts/HttpClient/HttpClientInterface.php]</span></span></code>:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Framework Use</em><div class="highlight-php-symfony notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Contracts\HttpClient\HttpClientInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">SymfonyDocs</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$client</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nx">HttpClientInterface</span> <span class="nv">$client</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">client</span> <span class="o">=</span> <span class="nv">$client</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">fetchGitHubInformation</span><span class="p">()</span><span class="o">:</span> <span class="k">array</span>
    <span class="p">{</span>
        <span class="nv">$response</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span>
            <span class="s1">&#39;GET&#39;</span><span class="p">,</span>
            <span class="s1">&#39;https://api.github.com/repos/symfony/symfony-docs&#39;</span>
        <span class="p">);</span>

        <span class="nv">$statusCode</span> <span class="o">=</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getStatusCode</span><span class="p">();</span>
        <span class="c1">// $statusCode = 200</span>
        <span class="nv">$contentType</span> <span class="o">=</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getHeaders</span><span class="p">()[</span><span class="s1">&#39;content-type&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
        <span class="c1">// $contentType = &#39;application/json&#39;</span>
        <span class="nv">$content</span> <span class="o">=</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getContent</span><span class="p">();</span>
        <span class="c1">// $content = &#39;{&quot;id&quot;:521583, &quot;name&quot;:&quot;symfony-docs&quot;, ...}&#39;</span>
        <span class="nv">$content</span> <span class="o">=</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">toArray</span><span class="p">();</span>
        <span class="c1">// $content = [&#39;id&#39; =&gt; 521583, &#39;name&#39; =&gt; &#39;symfony-docs&#39;, ...]</span>

        <span class="k">return</span> <span class="nv">$content</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>Standalone Use</em><div class="highlight-php-standalone notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpClient\HttpClient</span><span class="p">;</span>

<span class="nv">$client</span> <span class="o">=</span> <span class="nx">HttpClient</span><span class="o">::</span><span class="na">create</span><span class="p">();</span>
<span class="nv">$response</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;https://api.github.com/repos/symfony/symfony-docs&#39;</span><span class="p">);</span>

<span class="nv">$statusCode</span> <span class="o">=</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getStatusCode</span><span class="p">();</span>
<span class="c1">// $statusCode = 200</span>
<span class="nv">$contentType</span> <span class="o">=</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getHeaders</span><span class="p">()[</span><span class="s1">&#39;content-type&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
<span class="c1">// $contentType = &#39;application/json&#39;</span>
<span class="nv">$content</span> <span class="o">=</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getContent</span><span class="p">();</span>
<span class="c1">// $content = &#39;{&quot;id&quot;:521583, &quot;name&quot;:&quot;symfony-docs&quot;, ...}&#39;</span>
<span class="nv">$content</span> <span class="o">=</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">toArray</span><span class="p">();</span>
<span class="c1">// $content = [&#39;id&#39; =&gt; 521583, &#39;name&#39; =&gt; &#39;symfony-docs&#39;, ...]</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The HTTP client is interoperable with many common HTTP client abstractions in
PHP. You can also use any of these abstractions to profit from autowirings.
See <a class="reference internal" href="#interoperability">Interoperability</a> for more information.</p>
</div>
</div>
<div class="section" id="configuration">
<h2>Configuration</h2>
<p>The HTTP client contains many options you might need to take full control of
the way the request is performed, including DNS pre-resolution, SSL parameters,
public key pinning, etc. They can be defined globally in the configuration (to
apply it to all requests) and to each request (which overrides any global
configuration).</p>
<p>You can configure the global options using the <code class="docutils literal notranslate"><span class="pre">default_options</span></code> option:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/packages/framework.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">framework</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">http_client</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">default_options</span><span class="p p-Indicator">:</span>
            <span class="l l-Scalar l-Scalar-Plain">max_redirects</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">7</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/packages/framework.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xmlns:framework=</span><span class="s">&quot;http://symfony.com/schema/dic/symfony&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd</span>
<span class="s">        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;framework:config&gt;</span>
        <span class="nt">&lt;framework:http-client&gt;</span>
            <span class="nt">&lt;framework:default-options</span> <span class="na">max-redirects=</span><span class="s">&quot;7&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/framework-http-client&gt;</span>
    <span class="nt">&lt;/framework:config&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/packages/framework.php</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;framework&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;http_client&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;default_options&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
            <span class="s1">&#39;max_redirects&#39;</span> <span class="o">=&gt;</span> <span class="mi">7</span><span class="p">,</span>
        <span class="p">],</span>
    <span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>Standalone Use</em><div class="highlight-php-standalone notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="nv">$client</span> <span class="o">=</span> <span class="nx">HttpClient</span><span class="o">::</span><span class="na">create</span><span class="p">([</span>
     <span class="s1">&#39;max_redirects&#39;</span> <span class="o">=&gt;</span> <span class="mi">7</span><span class="p">,</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>Some options are described in this guide:</p>
<ul class="simple">
<li><p><a class="reference internal" href="#authentication">Authentication</a></p></li>
<li><p><a class="reference internal" href="#query-string-parameters">Query String Parameters</a></p></li>
<li><p><a class="reference internal" href="#headers">Headers</a></p></li>
<li><p><a class="reference internal" href="#redirects">Redirects</a></p></li>
<li><p><a class="reference internal" href="#retry-failed-requests">Retry Failed Requests</a></p></li>
<li><p><a class="reference internal" href="#http-proxies">HTTP Proxies</a></p></li>
</ul>
<p>Check out the full <a class="reference internal" href="reference/configuration/framework.xhtml#reference-http-client"><span class="std std-ref">http_client config reference</span></a>
to learn about all the options.</p>
<p>The HTTP client also has one configuration option called
<code class="docutils literal notranslate"><span class="pre">max_host_connections</span></code>, this option can not be overridden by a request:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/packages/framework.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">framework</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">http_client</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">max_host_connections</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">10</span>
        <span class="c1"># ...</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/packages/framework.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xmlns:framework=</span><span class="s">&quot;http://symfony.com/schema/dic/symfony&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd</span>
<span class="s">        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;framework:config&gt;</span>
        <span class="nt">&lt;framework:http-client</span> <span class="na">max-host-connections=</span><span class="s">&quot;10&quot;</span><span class="nt">&gt;</span>
            <span class="c">&lt;!-- ... --&gt;</span>
        <span class="nt">&lt;/framework-http-client&gt;</span>
    <span class="nt">&lt;/framework:config&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/packages/framework.php</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;framework&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;http_client&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;max_host_connections&#39;</span> <span class="o">=&gt;</span> <span class="mi">10</span><span class="p">,</span>
        <span class="c1">// ...</span>
    <span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>Standalone Use</em><div class="highlight-php-standalone notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="nv">$client</span> <span class="o">=</span> <span class="nx">HttpClient</span><span class="o">::</span><span class="na">create</span><span class="p">([],</span> <span class="mi">10</span><span class="p">);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<div class="section" id="scoping-client">
<h3>Scoping Client</h3>
<p>It’s common that some of the HTTP client options depend on the URL of the
request (e.g. you must set some headers when making requests to GitHub API but
not for other hosts). If that’s your case, the component provides scoped
clients (using <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpClient/ScopingHttpClient.php" title="Symfony\Component\HttpClient\ScopingHttpClient"><span class="pre">ScopingHttpClient</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpClient/ScopingHttpClient.php]</span></span></code>) to
autoconfigure the HTTP client based on the requested URL:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/packages/framework.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">framework</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">http_client</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">scoped_clients</span><span class="p p-Indicator">:</span>
            <span class="c1"># only requests matching scope will use these options</span>
            <span class="l l-Scalar l-Scalar-Plain">github</span><span class="p p-Indicator">:</span>
                <span class="l l-Scalar l-Scalar-Plain">scope</span><span class="p p-Indicator">:</span> <span class="s">&#39;https://api\.github\.com&#39;</span>
                <span class="l l-Scalar l-Scalar-Plain">headers</span><span class="p p-Indicator">:</span>
                    <span class="l l-Scalar l-Scalar-Plain">Accept</span><span class="p p-Indicator">:</span> <span class="s">&#39;application/vnd.github.v3+json&#39;</span>
                    <span class="l l-Scalar l-Scalar-Plain">Authorization</span><span class="p p-Indicator">:</span> <span class="s">&#39;token</span><span class="nv"> </span><span class="s">%env(GITHUB_API_TOKEN)%&#39;</span>
                <span class="c1"># ...</span>

            <span class="c1"># using base_uri, relative URLs (e.g. request(&quot;GET&quot;, &quot;/repos/symfony/symfony-docs&quot;))</span>
            <span class="c1"># will default to these options</span>
            <span class="l l-Scalar l-Scalar-Plain">github</span><span class="p p-Indicator">:</span>
                <span class="l l-Scalar l-Scalar-Plain">base_uri</span><span class="p p-Indicator">:</span> <span class="s">&#39;https://api.github.com&#39;</span>
                <span class="l l-Scalar l-Scalar-Plain">headers</span><span class="p p-Indicator">:</span>
                    <span class="l l-Scalar l-Scalar-Plain">Accept</span><span class="p p-Indicator">:</span> <span class="s">&#39;application/vnd.github.v3+json&#39;</span>
                    <span class="l l-Scalar l-Scalar-Plain">Authorization</span><span class="p p-Indicator">:</span> <span class="s">&#39;token</span><span class="nv"> </span><span class="s">%env(GITHUB_API_TOKEN)%&#39;</span>
                <span class="c1"># ...</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/packages/framework.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xmlns:framework=</span><span class="s">&quot;http://symfony.com/schema/dic/symfony&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd</span>
<span class="s">        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;framework:config&gt;</span>
        <span class="nt">&lt;framework:http-client&gt;</span>
            <span class="c">&lt;!-- only requests matching scope will use these options --&gt;</span>
            <span class="nt">&lt;framework:scoped-client</span> <span class="na">name=</span><span class="s">&quot;github&quot;</span>
                <span class="na">scope=</span><span class="s">&quot;https://api\.github\.com&quot;</span>
            <span class="nt">&gt;</span>
                <span class="nt">&lt;framework:header</span> <span class="na">name=</span><span class="s">&quot;Accept&quot;</span><span class="nt">&gt;</span>application/vnd.github.v3+json<span class="nt">&lt;/framework:header&gt;</span>
                <span class="nt">&lt;framework:header</span> <span class="na">name=</span><span class="s">&quot;Authorization&quot;</span><span class="nt">&gt;</span>token %env(GITHUB_API_TOKEN)%<span class="nt">&lt;/framework:header&gt;</span>
            <span class="nt">&lt;/framework:scoped-client&gt;</span>

            <span class="c">&lt;!-- using base-uri, relative URLs (e.g. request(&quot;GET&quot;, &quot;/repos/symfony/symfony-docs&quot;))</span>
<span class="c">                 will default to these options --&gt;</span>
            <span class="nt">&lt;framework:scoped-client</span> <span class="na">name=</span><span class="s">&quot;github&quot;</span>
                <span class="na">base-uri=</span><span class="s">&quot;https://api.github.com&quot;</span>
            <span class="nt">&gt;</span>
                <span class="nt">&lt;framework:header</span> <span class="na">name=</span><span class="s">&quot;Accept&quot;</span><span class="nt">&gt;</span>application/vnd.github.v3+json<span class="nt">&lt;/framework:header&gt;</span>
                <span class="nt">&lt;framework:header</span> <span class="na">name=</span><span class="s">&quot;Authorization&quot;</span><span class="nt">&gt;</span>token %env(GITHUB_API_TOKEN)%<span class="nt">&lt;/framework:header&gt;</span>
            <span class="nt">&lt;/framework:scoped-client&gt;</span>
        <span class="nt">&lt;/framework:http-client&gt;</span>
    <span class="nt">&lt;/framework:config&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/packages/framework.php</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;framework&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;http_client&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;scoped_clients&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
            <span class="c1">// only requests matching scope will use these options</span>
            <span class="s1">&#39;github&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
                <span class="s1">&#39;scope&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;https://api\.github\.com&#39;</span><span class="p">,</span>
                <span class="s1">&#39;headers&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
                    <span class="s1">&#39;Accept&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;application/vnd.github.v3+json&#39;</span><span class="p">,</span>
                    <span class="s1">&#39;Authorization&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;token %env(GITHUB_API_TOKEN)%&#39;</span><span class="p">,</span>
                <span class="p">],</span>
                <span class="c1">// ...</span>
            <span class="p">],</span>

            <span class="c1">// using base_url, relative URLs (e.g. request(&quot;GET&quot;, &quot;/repos/symfony/symfony-docs&quot;))</span>
            <span class="c1">// will default to these options</span>
            <span class="s1">&#39;github&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
                <span class="s1">&#39;base_uri&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;https://api.github.com&#39;</span><span class="p">,</span>
                <span class="s1">&#39;headers&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
                    <span class="s1">&#39;Accept&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;application/vnd.github.v3+json&#39;</span><span class="p">,</span>
                    <span class="s1">&#39;Authorization&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;token %env(GITHUB_API_TOKEN)%&#39;</span><span class="p">,</span>
                <span class="p">],</span>
                <span class="c1">// ...</span>
            <span class="p">],</span>
        <span class="p">],</span>
    <span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>Standalone Use</em><div class="highlight-php-standalone notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpClient\HttpClient</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpClient\ScopingHttpClient</span><span class="p">;</span>

<span class="nv">$client</span> <span class="o">=</span> <span class="nx">HttpClient</span><span class="o">::</span><span class="na">create</span><span class="p">();</span>
<span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ScopingHttpClient</span><span class="p">(</span><span class="nv">$client</span><span class="p">,</span> <span class="p">[</span>
    <span class="c1">// the options defined as values apply only to the URLs matching</span>
    <span class="c1">// the regular expressions defined as keys</span>
    <span class="s1">&#39;https://api\.github\.com/&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;headers&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
            <span class="s1">&#39;Accept&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;application/vnd.github.v3+json&#39;</span><span class="p">,</span>
            <span class="s1">&#39;Authorization&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;token &#39;</span><span class="o">.</span><span class="nv">$githubToken</span><span class="p">,</span>
        <span class="p">],</span>
    <span class="p">],</span>
    <span class="c1">// ...</span>
<span class="p">]);</span>

<span class="c1">// relative URLs will use the 2nd argument as base URI and use the options of the 3rd argument</span>
<span class="nv">$client</span> <span class="o">=</span> <span class="nx">ScopingHttpClient</span><span class="o">::</span><span class="na">forBaseUri</span><span class="p">(</span><span class="nv">$client</span><span class="p">,</span> <span class="s1">&#39;https://api.github.com/&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;headers&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;Accept&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;application/vnd.github.v3+json&#39;</span><span class="p">,</span>
        <span class="s1">&#39;Authorization&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;token &#39;</span><span class="o">.</span><span class="nv">$githubToken</span><span class="p">,</span>
    <span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>You can define several scopes, so that each set of options is added only if a
requested URL matches one of the regular expressions set by the <code class="docutils literal notranslate"><span class="pre">scope</span></code> option.</p>
<p>If you use scoped clients in the Symfony framework, you must use any of the
methods defined by Symfony to <a class="reference internal" href="service_container.xhtml#services-wire-specific-service"><span class="std std-ref">choose a specific service</span></a>.
Each client has a unique service named after its configuration.</p>
<p>Each scoped client also defines a corresponding named autowiring alias.
If you use for example
<code class="docutils literal notranslate"><span class="pre">Symfony\Contracts\HttpClient\HttpClientInterface</span> <span class="pre">$myApiClient</span></code>
as the type and name of an argument, autowiring will inject the <code class="docutils literal notranslate"><span class="pre">my_api.client</span></code>
service into your autowired classes.</p>
</div>
</div>
<div class="section" id="making-requests">
<h2>Making Requests</h2>
<p>The HTTP client provides a single <code class="docutils literal notranslate"><span class="pre">request()</span></code> method to perform all kinds of
HTTP requests:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$response</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;https://...&#39;</span><span class="p">);</span>
<span class="nv">$response</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;POST&#39;</span><span class="p">,</span> <span class="s1">&#39;https://...&#39;</span><span class="p">);</span>
<span class="nv">$response</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;PUT&#39;</span><span class="p">,</span> <span class="s1">&#39;https://...&#39;</span><span class="p">);</span>
<span class="c1">// ...</span>

<span class="c1">// you can add request options (or override global ones) using the 3rd argument</span>
<span class="nv">$response</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;https://...&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;headers&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;Accept&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;application/json&#39;</span><span class="p">,</span>
    <span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</div>
<p>Responses are always asynchronous, so that the call to the method returns
immediately instead of waiting to receive the response:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// code execution continues immediately; it doesn&#39;t wait to receive the response</span>
<span class="nv">$response</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;http://releases.ubuntu.com/18.04.2/ubuntu-18.04.2-desktop-amd64.iso&#39;</span><span class="p">);</span>

<span class="c1">// getting the response headers waits until they arrive</span>
<span class="nv">$contentType</span> <span class="o">=</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getHeaders</span><span class="p">()[</span><span class="s1">&#39;content-type&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>

<span class="c1">// trying to get the response content will block the execution until</span>
<span class="c1">// the full response content is received</span>
<span class="nv">$content</span> <span class="o">=</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getContent</span><span class="p">();</span>
</pre></div>
</div>
<p>This component also supports <a class="reference internal" href="#http-client-streaming-responses"><span class="std std-ref">streaming responses</span></a>
for full asynchronous applications.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>HTTP compression and chunked transfer encoding are automatically enabled when
both your PHP runtime and the remote server support them.</p>
</div>
<div class="section" id="authentication">
<h3>Authentication</h3>
<p>The HTTP client supports different authentication mechanisms. They can be
defined globally in the configuration (to apply it to all requests) and to
each request (which overrides any global authentication):</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/packages/framework.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">framework</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">http_client</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">scoped_clients</span><span class="p p-Indicator">:</span>
            <span class="l l-Scalar l-Scalar-Plain">example_api</span><span class="p p-Indicator">:</span>
                <span class="l l-Scalar l-Scalar-Plain">base_uri</span><span class="p p-Indicator">:</span> <span class="s">&#39;https://example.com/&#39;</span>

                <span class="c1"># HTTP Basic authentication</span>
                <span class="l l-Scalar l-Scalar-Plain">auth_basic</span><span class="p p-Indicator">:</span> <span class="s">&#39;the-username:the-password&#39;</span>

                <span class="c1"># HTTP Bearer authentication (also called token authentication)</span>
                <span class="l l-Scalar l-Scalar-Plain">auth_bearer</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">the-bearer-token</span>

                <span class="c1"># Microsoft NTLM authentication</span>
                <span class="l l-Scalar l-Scalar-Plain">auth_ntlm</span><span class="p p-Indicator">:</span> <span class="s">&#39;the-username:the-password&#39;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/packages/framework.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xmlns:framework=</span><span class="s">&quot;http://symfony.com/schema/dic/symfony&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd</span>
<span class="s">        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;framework:config&gt;</span>
        <span class="nt">&lt;framework:http-client&gt;</span>
            <span class="c">&lt;!-- Available authentication options:</span>
<span class="c">                 auth-basic: HTTP Basic authentication</span>
<span class="c">                 auth-bearer: HTTP Bearer authentication (also called token authentication)</span>
<span class="c">                 auth-ntlm: Microsoft NTLM authentication --&gt;</span>
            <span class="nt">&lt;framework:scoped-client</span> <span class="na">name=</span><span class="s">&quot;example_api&quot;</span>
                <span class="na">base-uri=</span><span class="s">&quot;https://example.com/&quot;</span>
                <span class="na">auth-basic=</span><span class="s">&quot;the-username:the-password&quot;</span>
                <span class="na">auth-bearer=</span><span class="s">&quot;the-bearer-token&quot;</span>
                <span class="na">auth-ntlm=</span><span class="s">&quot;the-username:the-password&quot;</span>
            <span class="nt">/&gt;</span>
        <span class="nt">&lt;/framework-http-client&gt;</span>
    <span class="nt">&lt;/framework:config&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/packages/framework.php</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;framework&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;http_client&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;scoped_clients&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
            <span class="s1">&#39;example_api&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
                <span class="s1">&#39;base_uri&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;https://example.com/&#39;</span><span class="p">,</span>

                <span class="c1">// HTTP Basic authentication</span>
                <span class="s1">&#39;auth_basic&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;the-username:the-password&#39;</span><span class="p">,</span>

                <span class="c1">// HTTP Bearer authentication (also called token authentication)</span>
                <span class="s1">&#39;auth_bearer&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;the-bearer-token&#39;</span><span class="p">,</span>

                <span class="c1">// Microsoft NTLM authentication</span>
                <span class="s1">&#39;auth_ntlm&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;the-username:the-password&#39;</span><span class="p">,</span>
            <span class="p">],</span>
        <span class="p">],</span>
    <span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>Standalone Use</em><div class="highlight-php-standalone notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="nv">$client</span> <span class="o">=</span> <span class="nx">HttpClient</span><span class="o">::</span><span class="na">createForBaseUri</span><span class="p">(</span><span class="s1">&#39;https://example.com/&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="c1">// HTTP Basic authentication (there are multiple ways of configuring it)</span>
    <span class="s1">&#39;auth_basic&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;the-username&#39;</span><span class="p">],</span>
    <span class="s1">&#39;auth_basic&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;the-username&#39;</span><span class="p">,</span> <span class="s1">&#39;the-password&#39;</span><span class="p">],</span>
    <span class="s1">&#39;auth_basic&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;the-username:the-password&#39;</span><span class="p">,</span>

    <span class="c1">// HTTP Bearer authentication (also called token authentication)</span>
    <span class="s1">&#39;auth_bearer&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;the-bearer-token&#39;</span><span class="p">,</span>

    <span class="c1">// Microsoft NTLM authentication (there are multiple ways of configuring it)</span>
    <span class="s1">&#39;auth_ntlm&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;the-username&#39;</span><span class="p">],</span>
    <span class="s1">&#39;auth_ntlm&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;the-username&#39;</span><span class="p">,</span> <span class="s1">&#39;the-password&#39;</span><span class="p">],</span>
    <span class="s1">&#39;auth_ntlm&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;the-username:the-password&#39;</span><span class="p">,</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="nv">$response</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;https://...&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="c1">// use a different HTTP Basic authentication only for this request</span>
    <span class="s1">&#39;auth_basic&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;the-username&#39;</span><span class="p">,</span> <span class="s1">&#39;the-password&#39;</span><span class="p">],</span>

    <span class="c1">// ...</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The NTLM authentication mechanism requires using the cURL transport.
By using <code class="docutils literal notranslate"><span class="pre">HttpClient::createForBaseUri()</span></code>, we ensure that the auth credentials
won’t be sent to any other hosts than <a class="reference external" href="https://example.com/">https://example.com/</a>.</p>
</div>
</div>
<div class="section" id="query-string-parameters">
<h3>Query String Parameters</h3>
<p>You can either append them manually to the requested URL, or define them as an
associative array via the <code class="docutils literal notranslate"><span class="pre">query</span></code> option, that will be merged with the URL:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// it makes an HTTP GET request to https://httpbin.org/get?token=...&amp;name=...</span>
<span class="nv">$response</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;https://httpbin.org/get&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="c1">// these values are automatically encoded before including them in the URL</span>
    <span class="s1">&#39;query&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;token&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;...&#39;</span><span class="p">,</span>
        <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;...&#39;</span><span class="p">,</span>
    <span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</div>
</div>
<div class="section" id="headers">
<h3>Headers</h3>
<p>Use the <code class="docutils literal notranslate"><span class="pre">headers</span></code> option to define both the default headers added to all
requests and the specific headers for each request:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/packages/framework.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">framework</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">http_client</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">headers</span><span class="p p-Indicator">:</span>
            <span class="s">&#39;User-Agent&#39;</span><span class="p p-Indicator">:</span> <span class="s">&#39;My</span><span class="nv"> </span><span class="s">Fancy</span><span class="nv"> </span><span class="s">App&#39;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/packages/framework.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xmlns:framework=</span><span class="s">&quot;http://symfony.com/schema/dic/symfony&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd</span>
<span class="s">        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;framework:config&gt;</span>
        <span class="nt">&lt;framework:http-client&gt;</span>
            <span class="nt">&lt;framework:header</span> <span class="na">name=</span><span class="s">&quot;User-Agent&quot;</span><span class="nt">&gt;</span>My Fancy App<span class="nt">&lt;/framework:header&gt;</span>
        <span class="nt">&lt;/framework-http-client&gt;</span>
    <span class="nt">&lt;/framework:config&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/packages/framework.php</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;framework&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;http_client&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;headers&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
            <span class="s1">&#39;User-Agent&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;My Fancy App&#39;</span><span class="p">,</span>
        <span class="p">],</span>
    <span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>Standalone Use</em><div class="highlight-php-standalone notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// this header is added to all requests made by this client</span>
<span class="nv">$client</span> <span class="o">=</span> <span class="nx">HttpClient</span><span class="o">::</span><span class="na">create</span><span class="p">([</span>
    <span class="s1">&#39;headers&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;User-Agent&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;My Fancy App&#39;</span><span class="p">,</span>
    <span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// this header is only included in this request and overrides the value</span>
<span class="c1">// of the same header if defined globally by the HTTP client</span>
<span class="nv">$response</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;POST&#39;</span><span class="p">,</span> <span class="s1">&#39;https://...&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;headers&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/plain&#39;</span><span class="p">,</span>
    <span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="uploading-data">
<h3>Uploading Data</h3>
<p>This component provides several methods for uploading data using the <code class="docutils literal notranslate"><span class="pre">body</span></code>
option. You can use regular strings, closures, iterables and resources and they’ll be
processed automatically when making the requests:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$response</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;POST&#39;</span><span class="p">,</span> <span class="s1">&#39;https://...&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="c1">// defining data using a regular string</span>
    <span class="s1">&#39;body&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;raw data&#39;</span><span class="p">,</span>

    <span class="c1">// defining data using an array of parameters</span>
    <span class="s1">&#39;body&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;parameter1&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;value1&#39;</span><span class="p">,</span> <span class="s1">&#39;...&#39;</span><span class="p">],</span>

    <span class="c1">// using a closure to generate the uploaded data</span>
    <span class="s1">&#39;body&#39;</span> <span class="o">=&gt;</span> <span class="k">function</span> <span class="p">(</span><span class="nx">int</span> <span class="nv">$size</span><span class="p">)</span><span class="o">:</span> <span class="nx">string</span> <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">},</span>

    <span class="c1">// using a resource to get the data from it</span>
    <span class="s1">&#39;body&#39;</span> <span class="o">=&gt;</span> <span class="nb">fopen</span><span class="p">(</span><span class="s1">&#39;/path/to/file&#39;</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">),</span>
<span class="p">]);</span>
</pre></div>
</div>
<p>When uploading data with the <code class="docutils literal notranslate"><span class="pre">POST</span></code> method, if you don’t define the
<code class="docutils literal notranslate"><span class="pre">Content-Type</span></code> HTTP header explicitly, Symfony assumes that you’re uploading
form data and adds the required
<code class="docutils literal notranslate"><span class="pre">'Content-Type:</span> <span class="pre">application/x-www-form-urlencoded'</span></code> header for you.</p>
<p>When the <code class="docutils literal notranslate"><span class="pre">body</span></code> option is set as a closure, it will be called several times until
it returns the empty string, which signals the end of the body. Each time, the
closure should return a string smaller than the amount requested as argument.</p>
<p>A generator or any <code class="docutils literal notranslate"><span class="pre">Traversable</span></code> can also be used instead of a closure.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>When uploading JSON payloads, use the <code class="docutils literal notranslate"><span class="pre">json</span></code> option instead of <code class="docutils literal notranslate"><span class="pre">body</span></code>. The
given content will be JSON-encoded automatically and the request will add the
<code class="docutils literal notranslate"><span class="pre">Content-Type:</span> <span class="pre">application/json</span></code> automatically too:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$response</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;POST&#39;</span><span class="p">,</span> <span class="s1">&#39;https://...&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;json&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;param1&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;value1&#39;</span><span class="p">,</span> <span class="s1">&#39;...&#39;</span><span class="p">],</span>
<span class="p">]);</span>

<span class="nv">$decodedPayload</span> <span class="o">=</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">toArray</span><span class="p">();</span>
</pre></div>
</div>
</div>
<p>To submit a form with file uploads, it is your responsibility to encode the body
according to the <code class="docutils literal notranslate"><span class="pre">multipart/form-data</span></code> content-type. The
<a class="reference internal" href="components/mime.xhtml"><span class="doc">Symfony Mime</span></a> component makes it a few lines of code:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Mime\Part\DataPart</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Mime\Part\Multipart\FormDataPart</span><span class="p">;</span>

<span class="nv">$formFields</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s1">&#39;regular_field&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;some value&#39;</span><span class="p">,</span>
    <span class="s1">&#39;file_field&#39;</span> <span class="o">=&gt;</span> <span class="nx">DataPart</span><span class="o">::</span><span class="na">fromPath</span><span class="p">(</span><span class="s1">&#39;/path/to/uploaded/file&#39;</span><span class="p">),</span>
<span class="p">];</span>
<span class="nv">$formData</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FormDataPart</span><span class="p">(</span><span class="nv">$formFields</span><span class="p">);</span>
<span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;POST&#39;</span><span class="p">,</span> <span class="s1">&#39;https://...&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;headers&#39;</span> <span class="o">=&gt;</span> <span class="nv">$formData</span><span class="o">-&gt;</span><span class="na">getPreparedHeaders</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">toArray</span><span class="p">(),</span>
    <span class="s1">&#39;body&#39;</span> <span class="o">=&gt;</span> <span class="nv">$formData</span><span class="o">-&gt;</span><span class="na">bodyToIterable</span><span class="p">(),</span>
<span class="p">]);</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>When using multidimensional arrays the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Mime/Part/Multipart/FormDataPart.php" title="Symfony\Component\Mime\Part\Multipart\FormDataPart"><span class="pre">FormDataPart</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Mime/Part/Multipart/FormDataPart.php]</span></span></code>
class automatically appends <code class="docutils literal notranslate"><span class="pre">[key]</span></code> to the name of the field:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$formData</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FormDataPart</span><span class="p">([</span>
    <span class="s1">&#39;array_field&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;some value&#39;</span><span class="p">,</span>
        <span class="s1">&#39;other value&#39;</span><span class="p">,</span>
    <span class="p">],</span>
<span class="p">]);</span>

<span class="nv">$formData</span><span class="o">-&gt;</span><span class="na">getParts</span><span class="p">();</span> <span class="c1">// Returns two instances of TextPart</span>
                       <span class="c1">// with the names &quot;array_field[0]&quot; and &quot;array_field[1]&quot;</span>
</pre></div>
</div>
<p>This behavior can be bypassed by using the following array structure:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$formData</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FormDataPart</span><span class="p">([</span>
    <span class="p">[</span><span class="s1">&#39;array_field&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;some value&#39;</span><span class="p">],</span>
    <span class="p">[</span><span class="s1">&#39;array_field&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;other value&#39;</span><span class="p">],</span>
<span class="p">]);</span>

<span class="nv">$formData</span><span class="o">-&gt;</span><span class="na">getParts</span><span class="p">();</span> <span class="c1">// Returns two instances of TextPart both</span>
                       <span class="c1">// with the name &quot;array_field&quot;</span>
</pre></div>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 5.2: </span>The alternative array structure was introduced in Symfony 5.2.</p>
</div>
</div>
<p>By default, HttpClient streams the body contents when uploading them. This might
not work with all servers, resulting in HTTP status code 411 (“Length Required”)
because there is no <code class="docutils literal notranslate"><span class="pre">Content-Length</span></code> header. The solution is to turn the body
into a string with the following method (which will increase memory consumption
when the streams are large):</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;POST&#39;</span><span class="p">,</span> <span class="s1">&#39;https://...&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="c1">// ...</span>
    <span class="s1">&#39;body&#39;</span> <span class="o">=&gt;</span> <span class="nv">$formData</span><span class="o">-&gt;</span><span class="na">bodyToString</span><span class="p">(),</span>
<span class="p">]);</span>
</pre></div>
</div>
<p>If you need to add a custom HTTP header to the upload, you can do:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$headers</span> <span class="o">=</span> <span class="nv">$formData</span><span class="o">-&gt;</span><span class="na">getPreparedHeaders</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">toArray</span><span class="p">();</span>
<span class="nv">$headers</span><span class="p">[]</span> <span class="o">=</span> <span class="s1">&#39;X-Foo: bar&#39;</span><span class="p">;</span>
</pre></div>
</div>
</div>
<div class="section" id="cookies">
<h3>Cookies</h3>
<p>The HTTP client provided by this component is stateless but handling cookies
requires a stateful storage (because responses can update cookies and they must
be used for subsequent requests). That’s why this component doesn’t handle
cookies automatically.</p>
<p>You can either handle cookies yourself using the <code class="docutils literal notranslate"><span class="pre">Cookie</span></code> HTTP header or use
the <a class="reference internal" href="components/browser_kit.xhtml"><span class="doc">BrowserKit component</span></a> which provides this
feature and integrates seamlessly with the HttpClient component.</p>
</div>
<div class="section" id="redirects">
<h3>Redirects</h3>
<p>By default, the HTTP client follows redirects, up to a maximum of 20, when
making a request. Use the <code class="docutils literal notranslate"><span class="pre">max_redirects</span></code> setting to configure this behavior
(if the number of redirects is higher than the configured value, you’ll get a
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpClient/Exception/RedirectionException.php" title="Symfony\Component\HttpClient\Exception\RedirectionException"><span class="pre">RedirectionException</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpClient/Exception/RedirectionException.php]</span></span></code>):</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$response</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;https://...&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="c1">// 0 means to not follow any redirect</span>
    <span class="s1">&#39;max_redirects&#39;</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">,</span>
<span class="p">]);</span>
</pre></div>
</div>
</div>
<div class="section" id="retry-failed-requests">
<h3>Retry Failed Requests</h3>
<div class="versionadded">
<p><span class="versionmodified">New in version 5.2: </span>The feature to retry failed HTTP requests was introduced in Symfony 5.2.</p>
</div>
<p>Sometimes, requests fail because of network issues or temporary server errors.
Symfony’s HttpClient allows to retry failed requests automatically using the
<a class="reference internal" href="reference/configuration/framework.xhtml#reference-http-client-retry-failed"><span class="std std-ref">retry_failed option</span></a>.</p>
<p>By default, failed requests are retried up to 3 times, with an exponential delay
between retries (first retry = 1 second; third retry: 4 seconds) and only for
the following HTTP status codes: <code class="docutils literal notranslate"><span class="pre">423</span></code>, <code class="docutils literal notranslate"><span class="pre">425</span></code>, <code class="docutils literal notranslate"><span class="pre">429</span></code>, <code class="docutils literal notranslate"><span class="pre">502</span></code> and <code class="docutils literal notranslate"><span class="pre">503</span></code>
when using any HTTP method and <code class="docutils literal notranslate"><span class="pre">500</span></code>, <code class="docutils literal notranslate"><span class="pre">504</span></code>, <code class="docutils literal notranslate"><span class="pre">507</span></code> and <code class="docutils literal notranslate"><span class="pre">510</span></code> when using
an HTTP <a class="reference external" href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Idempotent_methods_and_web_applications">idempotent method</a><span class="link-target"> [https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Idempotent_methods_and_web_applications]</span>.</p>
<p>Check out the full list of configurable <a class="reference internal" href="reference/configuration/framework.xhtml#reference-http-client-retry-failed"><span class="std std-ref">retry_failed options</span></a>
to learn how to tweak each of them to fit your application needs.</p>
<p>When using the HttpClient outside of a Symfony application, use the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpClient/RetryableHttpClient.php" title="Symfony\Component\HttpClient\RetryableHttpClient"><span class="pre">RetryableHttpClient</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpClient/RetryableHttpClient.php]</span></span></code> class to wrap your
original HTTP client:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpClient\RetryableHttpClient</span><span class="p">;</span>

<span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">RetryableHttpClient</span><span class="p">(</span><span class="nx">HttpClient</span><span class="o">::</span><span class="na">create</span><span class="p">());</span>
</pre></div>
</div>
<p>The <code class="docutils literal notranslate"><span class="pre">RetryableHttpClient</span></code> uses a
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpClient/Retry/RetryStrategyInterface.php" title="Symfony\Component\HttpClient\Retry\RetryStrategyInterface"><span class="pre">RetryStrategyInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpClient/Retry/RetryStrategyInterface.php]</span></span></code> to
decide if the request should be retried, and to define the waiting time between
each retry.</p>
</div>
<div class="section" id="http-proxies">
<h3>HTTP Proxies</h3>
<p>By default, this component honors the standard environment variables that your
Operating System defines to direct the HTTP traffic through your local proxy.
This means there is usually nothing to configure to have the client work with
proxies, provided these env vars are properly configured.</p>
<p>You can still set or override these settings using the <code class="docutils literal notranslate"><span class="pre">proxy</span></code> and <code class="docutils literal notranslate"><span class="pre">no_proxy</span></code>
options:</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">proxy</span></code> should be set to the <code class="docutils literal notranslate"><span class="pre">http://...</span></code> URL of the proxy to get through</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">no_proxy</span></code> disables the proxy for a comma-separated list of hosts that do not
require it to get reached.</p></li>
</ul>
</div>
<div class="section" id="progress-callback">
<h3>Progress Callback</h3>
<p>By providing a callable to the <code class="docutils literal notranslate"><span class="pre">on_progress</span></code> option, one can track
uploads/downloads as they complete. This callback is guaranteed to be called on
DNS resolution, on arrival of headers and on completion; additionally it is
called when new data is uploaded or downloaded and at least once per second:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$response</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;https://...&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;on_progress&#39;</span> <span class="o">=&gt;</span> <span class="k">function</span> <span class="p">(</span><span class="nx">int</span> <span class="nv">$dlNow</span><span class="p">,</span> <span class="nx">int</span> <span class="nv">$dlSize</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$info</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span> <span class="p">{</span>
        <span class="c1">// $dlNow is the number of bytes downloaded so far</span>
        <span class="c1">// $dlSize is the total size to be downloaded or -1 if it is unknown</span>
        <span class="c1">// $info is what $response-&gt;getInfo() would return at this very time</span>
    <span class="p">},</span>
<span class="p">]);</span>
</pre></div>
</div>
<p>Any exceptions thrown from the callback will be wrapped in an instance of
<code class="docutils literal notranslate"><span class="pre">TransportExceptionInterface</span></code> and will abort the request.</p>
</div>
</div>
<div class="section" id="performance">
<h2>Performance</h2>
<p>The component is built for maximum HTTP performance. By design, it is compatible
with HTTP/2 and with doing concurrent asynchronous streamed and multiplexed
requests/responses. Even when doing regular synchronous calls, this design
allows keeping connections to remote hosts open between requests, improving
performance by saving repetitive DNS resolution, SSL negotiation, etc.
To leverage all these design benefits, the cURL extension is needed.</p>
<div class="section" id="enabling-curl-support">
<h3>Enabling cURL Support</h3>
<p>This component supports both the native PHP streams and cURL to make the HTTP
requests. Although both are interchangeable and provide the same features,
including concurrent requests, HTTP/2 is only supported when using cURL.</p>
<p><code class="docutils literal notranslate"><span class="pre">HttpClient::create()</span></code> selects the cURL transport if the <a class="reference external" href="https://www.php.net/curl">cURL PHP extension</a><span class="link-target"> [https://www.php.net/curl]</span>
is enabled and falls back to PHP streams otherwise. If you prefer to select
the transport explicitly, use the following classes to create the client:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpClient\CurlHttpClient</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpClient\NativeHttpClient</span><span class="p">;</span>

<span class="c1">// uses native PHP streams</span>
<span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">NativeHttpClient</span><span class="p">();</span>

<span class="c1">// uses the cURL PHP extension</span>
<span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CurlHttpClient</span><span class="p">();</span>
</pre></div>
</div>
<p>When using this component in a full-stack Symfony application, this behavior is
not configurable and cURL will be used automatically if the cURL PHP extension
is installed and enabled. Otherwise, the native PHP streams will be used.</p>
</div>
<div class="section" id="configuring-curlhttpclient-options">
<h3>Configuring CurlHttpClient Options</h3>
<div class="versionadded">
<p><span class="versionmodified">New in version 5.2: </span>The feature to configure extra cURL options was introduced in Symfony 5.2.</p>
</div>
<p>PHP allows to configure lots of <a class="reference external" href="https://www.php.net/manual/en/function.curl-setopt.php">cURL options</a><span class="link-target"> [https://www.php.net/manual/en/function.curl-setopt.php]</span> via the <code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/function.curl-setopt.php" title="curl_setopt"><span class="pre">curl_setopt</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/function.curl-setopt.php]</span></span></code>
function. In order to make the component more portable when not using cURL, the
<code class="docutils literal notranslate"><span class="pre">CurlHttpClient</span></code> only uses some of those options (and they are ignored in the
rest of clients).</p>
<p>Add an <code class="docutils literal notranslate"><span class="pre">extra.curl</span></code> option in your configuration to pass those extra options:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpClient\CurlHttpClient</span><span class="p">;</span>

<span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CurlHttpClient</span><span class="p">();</span>

<span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;POST&#39;</span><span class="p">,</span> <span class="s1">&#39;https://...&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="c1">// ...</span>
    <span class="s1">&#39;extra&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;curl&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
            <span class="nx">CURLOPT_IPRESOLVE</span> <span class="o">=&gt;</span> <span class="nx">CURL_IPRESOLVE_V6</span>
        <span class="p">]</span>
    <span class="p">]</span>
<span class="p">]);</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Some cURL options are impossible to override (e.g. because of thread safety)
and you’ll get an exception when trying to override them.</p>
</div>
</div>
<div class="section" id="http-2-support">
<h3>HTTP/2 Support</h3>
<p>When requesting an <code class="docutils literal notranslate"><span class="pre">https</span></code> URL, HTTP/2 is enabled by default if one of the
following tools is installed:</p>
<ul class="simple">
<li><p>The <a class="reference external" href="https://curl.haxx.se/libcurl/">libcurl</a><span class="link-target"> [https://curl.haxx.se/libcurl/]</span> package version 7.36 or higher;</p></li>
<li><p>The <a class="reference external" href="https://packagist.org/packages/amphp/http-client">amphp/http-client</a><span class="link-target"> [https://packagist.org/packages/amphp/http-client]</span> Packagist package version 4.2 or higher.</p></li>
</ul>
<div class="versionadded">
<p><span class="versionmodified">New in version 5.1: </span>Integration with <code class="docutils literal notranslate"><span class="pre">amphp/http-client</span></code> was introduced in Symfony 5.1.
Prior to this version, HTTP/2 was only supported when <code class="docutils literal notranslate"><span class="pre">libcurl</span></code> was
installed.</p>
</div>
<p>To force HTTP/2 for <code class="docutils literal notranslate"><span class="pre">http</span></code> URLs, you need to enable it explicitly via the
<code class="docutils literal notranslate"><span class="pre">http_version</span></code> option:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/packages/framework.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">framework</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">http_client</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">http_version</span><span class="p p-Indicator">:</span> <span class="s">&#39;2.0&#39;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/packages/framework.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xmlns:framework=</span><span class="s">&quot;http://symfony.com/schema/dic/symfony&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd</span>
<span class="s">        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;framework:config&gt;</span>
        <span class="nt">&lt;framework:http-client</span> <span class="na">http-version=</span><span class="s">&quot;2.0&quot;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/framework:config&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/packages/framework.php</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;framework&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;http_client&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;http_version&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;2.0&#39;</span><span class="p">,</span>
    <span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>Standalone Use</em><div class="highlight-php-standalone notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="nv">$client</span> <span class="o">=</span> <span class="nx">HttpClient</span><span class="o">::</span><span class="na">create</span><span class="p">([</span><span class="s1">&#39;http_version&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;2.0&#39;</span><span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>Support for HTTP/2 PUSH works out of the box when libcurl &gt;= 7.61 is used with
PHP &gt;= 7.2.17 / 7.3.4: pushed responses are put into a temporary cache and are
used when a subsequent request is triggered for the corresponding URLs.</p>
</div>
</div>
<div class="section" id="processing-responses">
<h2>Processing Responses</h2>
<p>The response returned by all HTTP clients is an object of type
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Contracts/HttpClient/ResponseInterface.php" title="Symfony\Contracts\HttpClient\ResponseInterface"><span class="pre">ResponseInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Contracts/HttpClient/ResponseInterface.php]</span></span></code> which provides the
following methods:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$response</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;https://...&#39;</span><span class="p">);</span>

<span class="c1">// gets the HTTP status code of the response</span>
<span class="nv">$statusCode</span> <span class="o">=</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getStatusCode</span><span class="p">();</span>

<span class="c1">// gets the HTTP headers as string[][] with the header names lower-cased</span>
<span class="nv">$headers</span> <span class="o">=</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getHeaders</span><span class="p">();</span>

<span class="c1">// gets the response body as a string</span>
<span class="nv">$content</span> <span class="o">=</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getContent</span><span class="p">();</span>

<span class="c1">// casts the response JSON content to a PHP array</span>
<span class="nv">$content</span> <span class="o">=</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">toArray</span><span class="p">();</span>

<span class="c1">// casts the response content to a PHP stream resource</span>
<span class="nv">$content</span> <span class="o">=</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">toStream</span><span class="p">();</span>

<span class="c1">// cancels the request/response</span>
<span class="nv">$response</span><span class="o">-&gt;</span><span class="na">cancel</span><span class="p">();</span>

<span class="c1">// returns info coming from the transport layer, such as &quot;response_headers&quot;,</span>
<span class="c1">// &quot;redirect_count&quot;, &quot;start_time&quot;, &quot;redirect_url&quot;, etc.</span>
<span class="nv">$httpInfo</span> <span class="o">=</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getInfo</span><span class="p">();</span>

<span class="c1">// you can get individual info too</span>
<span class="nv">$startTime</span> <span class="o">=</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getInfo</span><span class="p">(</span><span class="s1">&#39;start_time&#39;</span><span class="p">);</span>

<span class="c1">// returns detailed logs about the requests and responses of the HTTP transaction</span>
<span class="nv">$httpLogs</span> <span class="o">=</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getInfo</span><span class="p">(</span><span class="s1">&#39;debug&#39;</span><span class="p">);</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p><code class="docutils literal notranslate"><span class="pre">$response-&gt;getInfo()</span></code> is non-blocking: it returns <em>live</em> information
about the response. Some of them might not be known yet (e.g. <code class="docutils literal notranslate"><span class="pre">http_code</span></code>)
when you’ll call it.</p>
</div>
<div class="section" id="streaming-responses">
<span id="http-client-streaming-responses"></span><h3>Streaming Responses</h3>
<p>Call the <code class="docutils literal notranslate"><span class="pre">stream()</span></code> method of the HTTP client to get <em>chunks</em> of the
response sequentially instead of waiting for the entire response:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$url</span> <span class="o">=</span> <span class="s1">&#39;https://releases.ubuntu.com/18.04.1/ubuntu-18.04.1-desktop-amd64.iso&#39;</span><span class="p">;</span>
<span class="nv">$response</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="nv">$url</span><span class="p">);</span>

<span class="c1">// Responses are lazy: this code is executed as soon as headers are received</span>
<span class="k">if</span> <span class="p">(</span><span class="mi">200</span> <span class="o">!==</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getStatusCode</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nx">\Exception</span><span class="p">(</span><span class="s1">&#39;...&#39;</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// get the response content in chunks and save them in a file</span>
<span class="c1">// response chunks implement Symfony\Contracts\HttpClient\ChunkInterface</span>
<span class="nv">$fileHandler</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="s1">&#39;/ubuntu.iso&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">);</span>
<span class="k">foreach</span> <span class="p">(</span><span class="nv">$client</span><span class="o">-&gt;</span><span class="na">stream</span><span class="p">(</span><span class="nv">$response</span><span class="p">)</span> <span class="k">as</span> <span class="nv">$chunk</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">fwrite</span><span class="p">(</span><span class="nv">$fileHandler</span><span class="p">,</span> <span class="nv">$chunk</span><span class="o">-&gt;</span><span class="na">getContent</span><span class="p">());</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>By default, <code class="docutils literal notranslate"><span class="pre">text/*</span></code>, JSON and XML response bodies are buffered in a local
<code class="docutils literal notranslate"><span class="pre">php://temp</span></code> stream. You can control this behavior by using the <code class="docutils literal notranslate"><span class="pre">buffer</span></code>
option: set it to <code class="docutils literal notranslate"><span class="pre">true</span></code>/<code class="docutils literal notranslate"><span class="pre">false</span></code> to enable/disable buffering, or to a
closure that should return the same based on the response headers it receives
as argument.</p>
</div>
</div>
<div class="section" id="canceling-responses">
<h3>Canceling Responses</h3>
<p>To abort a request (e.g. because it didn’t complete in due time, or you want to
fetch only the first bytes of the response, etc.), you can either use the
<code class="docutils literal notranslate"><span class="pre">cancel()</span></code> method of <code class="docutils literal notranslate"><span class="pre">ResponseInterface</span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$response</span><span class="o">-&gt;</span><span class="na">cancel</span><span class="p">()</span>
</pre></div>
</div>
<p>Or throw an exception from a progress callback:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$response</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;https://...&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;on_progress&#39;</span> <span class="o">=&gt;</span> <span class="k">function</span> <span class="p">(</span><span class="nx">int</span> <span class="nv">$dlNow</span><span class="p">,</span> <span class="nx">int</span> <span class="nv">$dlSize</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$info</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span> <span class="p">{</span>
        <span class="c1">// ...</span>

        <span class="k">throw</span> <span class="k">new</span> <span class="nx">\MyException</span><span class="p">();</span>
    <span class="p">},</span>
<span class="p">]);</span>
</pre></div>
</div>
<p>The exception will be wrapped in an instance of <code class="docutils literal notranslate"><span class="pre">TransportExceptionInterface</span></code>
and will abort the request.</p>
<p>In case the response was canceled using <code class="docutils literal notranslate"><span class="pre">$response-&gt;cancel()</span></code>,
<code class="docutils literal notranslate"><span class="pre">$response-&gt;getInfo('canceled')</span></code> will return <code class="docutils literal notranslate"><span class="pre">true</span></code>.</p>
</div>
<div class="section" id="handling-exceptions">
<h3>Handling Exceptions</h3>
<p>When the HTTP status code of the response is in the 300-599 range (i.e. 3xx,
4xx or 5xx) your code is expected to handle it. If you don’t do that, the
<code class="docutils literal notranslate"><span class="pre">getHeaders()</span></code>, <code class="docutils literal notranslate"><span class="pre">getContent()</span></code> and <code class="docutils literal notranslate"><span class="pre">toArray()</span></code> methods throw an appropriate exception, all of
which implement the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Contracts/HttpClient/Exception/HttpExceptionInterface.php" title="Symfony\Contracts\HttpClient\Exception\HttpExceptionInterface"><span class="pre">HttpExceptionInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Contracts/HttpClient/Exception/HttpExceptionInterface.php]</span></span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// the response of this request will be a 403 HTTP error</span>
<span class="nv">$response</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;https://httpbin.org/status/403&#39;</span><span class="p">);</span>

<span class="c1">// this code results in a Symfony\Component\HttpClient\Exception\ClientException</span>
<span class="c1">// because it doesn&#39;t check the status code of the response</span>
<span class="nv">$content</span> <span class="o">=</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getContent</span><span class="p">();</span>

<span class="c1">// pass FALSE as the optional argument to not throw an exception and return</span>
<span class="c1">// instead the original response content (even if it&#39;s an error message)</span>
<span class="nv">$content</span> <span class="o">=</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getContent</span><span class="p">(</span><span class="k">false</span><span class="p">);</span>
</pre></div>
</div>
<p>While responses are lazy, their destructor will always wait for headers to come
back. This means that the following request <em>will</em> complete; and if e.g. a 404
is returned, an exception will be thrown:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// because the returned value is not assigned to a variable, the destructor</span>
<span class="c1">// of the returned response will be called immediately and will throw if the</span>
<span class="c1">// status code is in the 300-599 range</span>
<span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;POST&#39;</span><span class="p">,</span> <span class="s1">&#39;https://...&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>This in turn means that unassigned responses will fallback to synchronous requests.
If you want to make these requests concurrent, you can store their corresponding
responses in an array:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$responses</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;POST&#39;</span><span class="p">,</span> <span class="s1">&#39;https://.../path1&#39;</span><span class="p">);</span>
<span class="nv">$responses</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;POST&#39;</span><span class="p">,</span> <span class="s1">&#39;https://.../path2&#39;</span><span class="p">);</span>
<span class="c1">// ...</span>

<span class="c1">// This line will trigger the destructor of all responses stored in the array;</span>
<span class="c1">// they will complete concurrently and an exception will be thrown in case a</span>
<span class="c1">// status code in the 300-599 range is returned</span>
<span class="nb">unset</span><span class="p">(</span><span class="nv">$responses</span><span class="p">);</span>
</pre></div>
</div>
<p>This behavior provided at destruction-time is part of the fail-safe design of the
component. No errors will be unnoticed: if you don’t write the code to handle
errors, exceptions will notify you when needed. On the other hand, if you write
the error-handling code, you will opt-out from these fallback mechanisms as the
destructor won’t have anything remaining to do.</p>
<p>There are three types of exceptions:</p>
<ul class="simple">
<li><p>Exceptions implementing the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Contracts/HttpClient/Exception/HttpExceptionInterface.php" title="Symfony\Contracts\HttpClient\Exception\HttpExceptionInterface"><span class="pre">HttpExceptionInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Contracts/HttpClient/Exception/HttpExceptionInterface.php]</span></span></code>
are thrown when your code does not handle the status codes in the 300-599 range.</p></li>
<li><p>Exceptions implementing the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Contracts/HttpClient/Exception/TransportExceptionInterface.php" title="Symfony\Contracts\HttpClient\Exception\TransportExceptionInterface"><span class="pre">TransportExceptionInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Contracts/HttpClient/Exception/TransportExceptionInterface.php]</span></span></code>
are thrown when a lower level issue occurs.</p></li>
<li><p>Exceptions implementing the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Contracts/HttpClient/Exception/DecodingExceptionInterface.php" title="Symfony\Contracts\HttpClient\Exception\DecodingExceptionInterface"><span class="pre">DecodingExceptionInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Contracts/HttpClient/Exception/DecodingExceptionInterface.php]</span></span></code>
are thrown when a content-type cannot be decoded to the expected representation.</p></li>
</ul>
</div>
</div>
<div class="section" id="concurrent-requests">
<h2>Concurrent Requests</h2>
<p>Thanks to responses being lazy, requests are always managed concurrently.
On a fast enough network, the following code makes 379 requests in less than
half a second when cURL is used:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$responses</span> <span class="o">=</span> <span class="p">[];</span>
<span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="mi">379</span><span class="p">;</span> <span class="o">++</span><span class="nv">$i</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$uri</span> <span class="o">=</span> <span class="s2">&quot;https://http2.akamai.com/demo/tile-</span><span class="si">$i</span><span class="s2">.png&quot;</span><span class="p">;</span>
    <span class="nv">$responses</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="nv">$uri</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">foreach</span> <span class="p">(</span><span class="nv">$responses</span> <span class="k">as</span> <span class="nv">$response</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$content</span> <span class="o">=</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getContent</span><span class="p">();</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>As you can read in the first “for” loop, requests are issued but are not consumed
yet. That’s the trick when concurrency is desired: requests should be sent
first and be read later on. This will allow the client to monitor all pending
requests while your code waits for a specific one, as done in each iteration of
the above “foreach” loop.</p>
<div class="section" id="multiplexing-responses">
<h3>Multiplexing Responses</h3>
<p>If you look again at the snippet above, responses are read in requests’ order.
But maybe the 2nd response came back before the 1st? Fully asynchronous operations
require being able to deal with the responses in whatever order they come back.</p>
<p>In order to do so, the <code class="docutils literal notranslate"><span class="pre">stream()</span></code> method of HTTP clients accepts a list of
responses to monitor. As mentioned <a class="reference internal" href="#http-client-streaming-responses"><span class="std std-ref">previously</span></a>,
this method yields response chunks as they arrive from the network. By replacing
the “foreach” in the snippet with this one, the code becomes fully async:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">foreach</span> <span class="p">(</span><span class="nv">$client</span><span class="o">-&gt;</span><span class="na">stream</span><span class="p">(</span><span class="nv">$responses</span><span class="p">)</span> <span class="k">as</span> <span class="nv">$response</span> <span class="o">=&gt;</span> <span class="nv">$chunk</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$chunk</span><span class="o">-&gt;</span><span class="na">isFirst</span><span class="p">())</span> <span class="p">{</span>
        <span class="c1">// headers of $response just arrived</span>
        <span class="c1">// $response-&gt;getHeaders() is now a non-blocking call</span>
    <span class="p">}</span> <span class="k">elseif</span> <span class="p">(</span><span class="nv">$chunk</span><span class="o">-&gt;</span><span class="na">isLast</span><span class="p">())</span> <span class="p">{</span>
        <span class="c1">// the full content of $response just completed</span>
        <span class="c1">// $response-&gt;getContent() is now a non-blocking call</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="c1">// $chunk-&gt;getContent() will return a piece</span>
        <span class="c1">// of the response body that just arrived</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Use the <code class="docutils literal notranslate"><span class="pre">user_data</span></code> option combined with <code class="docutils literal notranslate"><span class="pre">$response-&gt;getInfo('user_data')</span></code>
to track the identity of the responses in your foreach loops.</p>
</div>
</div>
<div class="section" id="dealing-with-network-timeouts">
<h3>Dealing with Network Timeouts</h3>
<p>This component allows dealing with both request and response timeouts.</p>
<p>A timeout can happen when e.g. DNS resolution takes too much time, when the TCP
connection cannot be opened in the given time budget, or when the response
content pauses for too long. This can be configured with the <code class="docutils literal notranslate"><span class="pre">timeout</span></code> request
option:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// A TransportExceptionInterface will be issued if nothing</span>
<span class="c1">// happens for 2.5 seconds when accessing from the $response</span>
<span class="nv">$response</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;https://...&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;timeout&#39;</span> <span class="o">=&gt;</span> <span class="mf">2.5</span><span class="p">]);</span>
</pre></div>
</div>
<p>The <code class="docutils literal notranslate"><span class="pre">default_socket_timeout</span></code> PHP ini setting is used if the option is not set.</p>
<p>The option can be overridden by using the 2nd argument of the <code class="docutils literal notranslate"><span class="pre">stream()</span></code> method.
This allows monitoring several responses at once and applying the timeout to all
of them in a group. If all responses become inactive for the given duration, the
method will yield a special chunk whose <code class="docutils literal notranslate"><span class="pre">isTimeout()</span></code> will return <code class="docutils literal notranslate"><span class="pre">true</span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">foreach</span> <span class="p">(</span><span class="nv">$client</span><span class="o">-&gt;</span><span class="na">stream</span><span class="p">(</span><span class="nv">$responses</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">)</span> <span class="k">as</span> <span class="nv">$response</span> <span class="o">=&gt;</span> <span class="nv">$chunk</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$chunk</span><span class="o">-&gt;</span><span class="na">isTimeout</span><span class="p">())</span> <span class="p">{</span>
        <span class="c1">// $response staled for more than 1.5 seconds</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>A timeout is not necessarily an error: you can decide to stream again the
response and get remaining contents that might come back in a new timeout, etc.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Passing <code class="docutils literal notranslate"><span class="pre">0</span></code> as timeout allows monitoring responses in a non-blocking way.</p>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Timeouts control how long one is willing to wait <em>while the HTTP transaction
is idle</em>. Big responses can last as long as needed to complete, provided they
remain active during the transfer and never pause for longer than specified.</p>
<p>Use the <code class="docutils literal notranslate"><span class="pre">max_duration</span></code> option to limit the time a full request/response can last.</p>
</div>
</div>
<div class="section" id="dealing-with-network-errors">
<h3>Dealing with Network Errors</h3>
<p>Network errors (broken pipe, failed DNS resolution, etc.) are thrown as instances
of <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Contracts/HttpClient/Exception/TransportExceptionInterface.php" title="Symfony\Contracts\HttpClient\Exception\TransportExceptionInterface"><span class="pre">TransportExceptionInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Contracts/HttpClient/Exception/TransportExceptionInterface.php]</span></span></code>.</p>
<p>First of all, you don’t <em>have</em> to deal with them: letting errors bubble to your
generic exception-handling stack might be really fine in most use cases.</p>
<p>If you want to handle them, here is what you need to know:</p>
<p>To catch errors, you need to wrap calls to <code class="docutils literal notranslate"><span class="pre">$client-&gt;request()</span></code> but also calls
to any methods of the returned responses. This is because responses are lazy, so
that network errors can happen when calling e.g. <code class="docutils literal notranslate"><span class="pre">getStatusCode()</span></code> too:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Contracts\HttpClient\Exception\TransportExceptionInterface</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">try</span> <span class="p">{</span>
    <span class="c1">// both lines can potentially throw</span>
    <span class="nv">$response</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="o">...</span><span class="p">);</span>
    <span class="nv">$headers</span> <span class="o">=</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getHeaders</span><span class="p">();</span>
    <span class="c1">// ...</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">TransportExceptionInterface</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Because <code class="docutils literal notranslate"><span class="pre">$response-&gt;getInfo()</span></code> is non-blocking, it shouldn’t throw by design.</p>
</div>
<p>When multiplexing responses, you can deal with errors for individual streams by
catching <code class="docutils literal notranslate"><span class="pre">TransportExceptionInterface</span></code> in the foreach loop:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">foreach</span> <span class="p">(</span><span class="nv">$client</span><span class="o">-&gt;</span><span class="na">stream</span><span class="p">(</span><span class="nv">$responses</span><span class="p">)</span> <span class="k">as</span> <span class="nv">$response</span> <span class="o">=&gt;</span> <span class="nv">$chunk</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$chunk</span><span class="o">-&gt;</span><span class="na">isTimeout</span><span class="p">())</span> <span class="p">{</span>
            <span class="c1">// ... decide what to do when a timeout occurs</span>
            <span class="c1">// if you want to stop a response that timed out, don&#39;t miss</span>
            <span class="c1">// calling $response-&gt;cancel() or the destructor of the response</span>
            <span class="c1">// will try to complete it one more time</span>
        <span class="p">}</span> <span class="k">elseif</span> <span class="p">(</span><span class="nv">$chunk</span><span class="o">-&gt;</span><span class="na">isFirst</span><span class="p">())</span> <span class="p">{</span>
            <span class="c1">// if you want to check the status code, you must do it when the</span>
            <span class="c1">// first chunk arrived, using $response-&gt;getStatusCode();</span>
            <span class="c1">// not doing so might trigger an HttpExceptionInterface</span>
        <span class="p">}</span> <span class="k">elseif</span> <span class="p">(</span><span class="nv">$chunk</span><span class="o">-&gt;</span><span class="na">isLast</span><span class="p">())</span> <span class="p">{</span>
            <span class="c1">// ... do something with $response</span>
        <span class="p">}</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">TransportExceptionInterface</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="caching-requests-and-responses">
<h2>Caching Requests and Responses</h2>
<p>This component provides a <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpClient/CachingHttpClient.php" title="Symfony\Component\HttpClient\CachingHttpClient"><span class="pre">CachingHttpClient</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpClient/CachingHttpClient.php]</span></span></code>
decorator that allows caching responses and serving them from the local storage
for next requests. The implementation leverages the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php" title="Symfony\Component\HttpKernel\HttpCache\HttpCache"><span class="pre">HttpCache</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php]</span></span></code> class under the hood
so that the <a class="reference internal" href="components/http_kernel.xhtml"><span class="doc">HttpKernel component</span></a> needs to be
installed in your application:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpClient\CachingHttpClient</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpClient\HttpClient</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\HttpCache\Store</span><span class="p">;</span>

<span class="nv">$store</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Store</span><span class="p">(</span><span class="s1">&#39;/path/to/cache/storage/&#39;</span><span class="p">);</span>
<span class="nv">$client</span> <span class="o">=</span> <span class="nx">HttpClient</span><span class="o">::</span><span class="na">create</span><span class="p">();</span>
<span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CachingHttpClient</span><span class="p">(</span><span class="nv">$client</span><span class="p">,</span> <span class="nv">$store</span><span class="p">);</span>

<span class="c1">// this won&#39;t hit the network if the resource is already in the cache</span>
<span class="nv">$response</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;https://example.com/cacheable-resource&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p><code class="docutils literal notranslate"><span class="pre">CachingHttpClient</span></code> accepts a third argument to set the options of the <code class="docutils literal notranslate"><span class="pre">HttpCache</span></code>.</p>
</div>
<div class="section" id="consuming-server-sent-events">
<h2>Consuming Server-Sent Events</h2>
<div class="versionadded">
<p><span class="versionmodified">New in version 5.2: </span>The feature to consume server-sent events was introduced in Symfony 5.2.</p>
</div>
<p><a class="reference external" href="https://html.spec.whatwg.org/multipage/server-sent-events.html">Server-sent events</a><span class="link-target"> [https://html.spec.whatwg.org/multipage/server-sent-events.html]</span> is an Internet standard used to push data to web pages.
Its JavaScript API is built around an <a class="reference external" href="https://www.w3.org/TR/eventsource/#eventsource">EventSource</a><span class="link-target"> [https://www.w3.org/TR/eventsource/#eventsource]</span> object, which listens to
the events sent from some URL. The events are a stream of data (served with the
<code class="docutils literal notranslate"><span class="pre">text/event-stream</span></code> MIME type) with the following format:</p>
<div class="highlight-text notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span>data: This is the first message.

data: This is the second message, it
data: has two lines.

data: This is the third message.
</pre></div>
</td></tr></table></div>
<p>Symfony’s HTTP client provides an EventSource implementation to consume these
server-sent events. Use the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpClient/EventSourceHttpClient.php" title="Symfony\Component\HttpClient\EventSourceHttpClient"><span class="pre">EventSourceHttpClient</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpClient/EventSourceHttpClient.php]</span></span></code>
to wrap your HTTP client, open a connection to a server that responds with a
<code class="docutils literal notranslate"><span class="pre">text/event-stream</span></code> content type and consume the stream as follows:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpClient\EventSourceHttpClient</span><span class="p">;</span>

<span class="c1">// the second optional argument is the reconnection time in seconds (default = 10)</span>
<span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventSourceHttpClient</span><span class="p">(</span><span class="nv">$client</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
<span class="nv">$source</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">connect</span><span class="p">(</span><span class="s1">&#39;https://localhost:8080/events&#39;</span><span class="p">);</span>
<span class="k">while</span> <span class="p">(</span><span class="nv">$source</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$client</span><span class="o">-&gt;</span><span class="na">stream</span><span class="p">(</span><span class="nv">$source</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="k">as</span> <span class="nv">$r</span> <span class="o">=&gt;</span> <span class="nv">$chunk</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$chunk</span><span class="o">-&gt;</span><span class="na">isTimeout</span><span class="p">())</span> <span class="p">{</span>
            <span class="c1">// ...</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$chunk</span><span class="o">-&gt;</span><span class="na">isLast</span><span class="p">())</span> <span class="p">{</span>
            <span class="c1">// ...</span>

            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// this is a special ServerSentEvent chunk holding the pushed message</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$chunk</span> <span class="nx">instanceof</span> <span class="nx">ServerSentEvent</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// do something with the server event ...</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="interoperability">
<h2>Interoperability</h2>
<p>The component is interoperable with four different abstractions for HTTP
clients: <a class="reference external" href="https://github.com/symfony/contracts">Symfony Contracts</a><span class="link-target"> [https://github.com/symfony/contracts]</span>, <a class="reference external" href="https://www.php-fig.org/psr/psr-18/">PSR-18</a><span class="link-target"> [https://www.php-fig.org/psr/psr-18/]</span>, <a class="reference external" href="https://github.com/php-http/httplug/#readme">HTTPlug</a><span class="link-target"> [https://github.com/php-http/httplug/#readme]</span> v1/v2 and native PHP streams.
If your application uses libraries that need any of them, the component is compatible
with all of them. They also benefit from <a class="reference internal" href="service_container/autowiring.xhtml#service-autowiring-alias"><span class="std std-ref">autowiring aliases</span></a>
when the <a class="reference internal" href="reference/configuration/framework.xhtml#framework-bundle-configuration"><span class="std std-ref">framework bundle</span></a> is used.</p>
<p>If you are writing or maintaining a library that makes HTTP requests, you can
decouple it from any specific HTTP client implementations by coding against
either Symfony Contracts (recommended), PSR-18 or HTTPlug v2.</p>
<div class="section" id="symfony-contracts">
<h3>Symfony Contracts</h3>
<p>The interfaces found in the <code class="docutils literal notranslate"><span class="pre">symfony/http-client-contracts</span></code> package define
the primary abstractions implemented by the component. Its entry point is the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Contracts/HttpClient/HttpClientInterface.php" title="Symfony\Contracts\HttpClient\HttpClientInterface"><span class="pre">HttpClientInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Contracts/HttpClient/HttpClientInterface.php]</span></span></code>. That’s the
interface you need to code against when a client is needed:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Contracts\HttpClient\HttpClientInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">MyApiLayer</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$client</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nx">HttpClientInterface</span> <span class="nv">$client</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">client</span> <span class="o">=</span> <span class="nv">$client</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// [...]</span>
<span class="p">}</span>
</pre></div>
</div>
<p>All request options mentioned above (e.g. timeout management) are also defined
in the wordings of the interface, so that any compliant implementations (like
this component) is guaranteed to provide them. That’s a major difference with
the other abstractions, which provide none related to the transport itself.</p>
<p>Another major feature covered by the Symfony Contracts is async/multiplexing,
as described in the previous sections.</p>
</div>
<div class="section" id="psr-18-and-psr-17">
<h3>PSR-18 and PSR-17</h3>
<p>This component implements the <a class="reference external" href="https://www.php-fig.org/psr/psr-18/">PSR-18</a><span class="link-target"> [https://www.php-fig.org/psr/psr-18/]</span> (HTTP Client) specifications via the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpClient/Psr18Client.php" title="Symfony\Component\HttpClient\Psr18Client"><span class="pre">Psr18Client</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpClient/Psr18Client.php]</span></span></code> class, which is an adapter
to turn a Symfony <code class="docutils literal notranslate"><span class="pre">HttpClientInterface</span></code> into a PSR-18 <code class="docutils literal notranslate"><span class="pre">ClientInterface</span></code>.
This class also implements the relevant methods of <a class="reference external" href="https://www.php-fig.org/psr/psr-17/">PSR-17</a><span class="link-target"> [https://www.php-fig.org/psr/psr-17/]</span> to ease creating
request objects.</p>
<p>To use it, you need the <code class="docutils literal notranslate"><span class="pre">psr/http-client</span></code> package and a <a class="reference external" href="https://www.php-fig.org/psr/psr-17/">PSR-17</a><span class="link-target"> [https://www.php-fig.org/psr/psr-17/]</span> implementation:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># installs the PSR-18 ClientInterface</span>
<span class="gp">$</span> composer require psr/http-client

<span class="c1"># installs an efficient implementation of response and stream factories</span>
<span class="c1"># with autowiring aliases provided by Symfony Flex</span>
<span class="gp">$</span> composer require nyholm/psr7

<span class="c1"># alternatively, install the php-http/discovery package to auto-discover</span>
<span class="c1"># any already installed implementations from common vendors:</span>
<span class="c1"># composer require php-http/discovery</span>
</pre></div>
</td></tr></table></div>
<p>Now you can make HTTP requests with the PSR-18 client as follows:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Framework Use</em><div class="highlight-php-symfony notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Psr\Http\Client\ClientInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Symfony</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$client</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nx">ClientInterface</span> <span class="nv">$client</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">client</span> <span class="o">=</span> <span class="nv">$client</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">getAvailableVersions</span><span class="p">()</span><span class="o">:</span> <span class="k">array</span>
    <span class="p">{</span>
        <span class="nv">$request</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">client</span><span class="o">-&gt;</span><span class="na">createRequest</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;https://symfony.com/versions.json&#39;</span><span class="p">);</span>
        <span class="nv">$response</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">client</span><span class="o">-&gt;</span><span class="na">sendRequest</span><span class="p">(</span><span class="nv">$request</span><span class="p">);</span>

        <span class="k">return</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getBody</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getContents</span><span class="p">(),</span> <span class="k">true</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>Standalone Use</em><div class="highlight-php-standalone notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpClient\Psr18Client</span><span class="p">;</span>

<span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Psr18Client</span><span class="p">();</span>

<span class="nv">$request</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">createRequest</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;https://symfony.com/versions.json&#39;</span><span class="p">);</span>
<span class="nv">$response</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">sendRequest</span><span class="p">(</span><span class="nv">$request</span><span class="p">);</span>

<span class="nv">$content</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getBody</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getContents</span><span class="p">(),</span> <span class="k">true</span><span class="p">);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
<div class="section" id="httplug">
<h3>HTTPlug</h3>
<p>The <a class="reference external" href="https://github.com/php-http/httplug/#readme">HTTPlug</a><span class="link-target"> [https://github.com/php-http/httplug/#readme]</span> v1 specification was published before PSR-18 and is superseded by
it. As such, you should not use it in newly written code. The component is still
interoperable with libraries that require it thanks to the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpClient/HttplugClient.php" title="Symfony\Component\HttpClient\HttplugClient"><span class="pre">HttplugClient</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpClient/HttplugClient.php]</span></span></code> class. Similarly to
<code class="docutils literal notranslate"><span class="pre">Psr18Client</span></code> implementing relevant parts of PSR-17, <code class="docutils literal notranslate"><span class="pre">HttplugClient</span></code> also
implements the factory methods defined in the related <code class="docutils literal notranslate"><span class="pre">php-http/message-factory</span></code>
package.</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># Let&#39;s suppose php-http/httplug is already required by the lib you want to use</span>

<span class="c1"># installs an efficient implementation of response and stream factories</span>
<span class="c1"># with autowiring aliases provided by Symfony Flex</span>
<span class="gp">$</span> composer require nyholm/psr7

<span class="c1"># alternatively, install the php-http/discovery package to auto-discover</span>
<span class="c1"># any already installed implementations from common vendors:</span>
<span class="c1"># composer require php-http/discovery</span>
</pre></div>
</td></tr></table></div>
<p>Let’s say you want to instantiate a class with the following constructor,
that requires HTTPlug dependencies:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Http\Client\HttpClient</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Http\Message\RequestFactory</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Http\Message\StreamFactory</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">SomeSdk</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span>
        <span class="nx">HttpClient</span> <span class="nv">$httpClient</span><span class="p">,</span>
        <span class="nx">RequestFactory</span> <span class="nv">$requestFactory</span><span class="p">,</span>
        <span class="nx">StreamFactory</span> <span class="nv">$streamFactory</span>
    <span class="p">)</span>
    <span class="c1">// [...]</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Because <code class="docutils literal notranslate"><span class="pre">HttplugClient</span></code> implements the three interfaces, you can use it this way:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpClient\HttplugClient</span><span class="p">;</span>

<span class="nv">$httpClient</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">HttplugClient</span><span class="p">();</span>
<span class="nv">$apiClient</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SomeSdk</span><span class="p">(</span><span class="nv">$httpClient</span><span class="p">,</span> <span class="nv">$httpClient</span><span class="p">,</span> <span class="nv">$httpClient</span><span class="p">);</span>
</pre></div>
</div>
<p>If you’d like to work with promises, <code class="docutils literal notranslate"><span class="pre">HttplugClient</span></code> also implements the
<code class="docutils literal notranslate"><span class="pre">HttpAsyncClient</span></code> interface. To use it, you need to install the
<code class="docutils literal notranslate"><span class="pre">guzzlehttp/promises</span></code> package:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require guzzlehttp/promises
</pre></div>
</td></tr></table></div>
<p>Then you’re ready to go:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Psr\Http\Message\ResponseInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpClient\HttplugClient</span><span class="p">;</span>

<span class="nv">$httpClient</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">HttplugClient</span><span class="p">();</span>
<span class="nv">$request</span> <span class="o">=</span> <span class="nv">$httpClient</span><span class="o">-&gt;</span><span class="na">createRequest</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;https://my.api.com/&#39;</span><span class="p">);</span>
<span class="nv">$promise</span> <span class="o">=</span> <span class="nv">$httpClient</span><span class="o">-&gt;</span><span class="na">sendAsyncRequest</span><span class="p">(</span><span class="nv">$request</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="na">then</span><span class="p">(</span>
        <span class="k">function</span> <span class="p">(</span><span class="nx">ResponseInterface</span> <span class="nv">$response</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">echo</span> <span class="s1">&#39;Got status &#39;</span><span class="o">.</span><span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getStatusCode</span><span class="p">();</span>

            <span class="k">return</span> <span class="nv">$response</span><span class="p">;</span>
        <span class="p">},</span>
        <span class="k">function</span> <span class="p">(</span><span class="nx">\Throwable</span> <span class="nv">$exception</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">echo</span> <span class="s1">&#39;Error: &#39;</span><span class="o">.</span><span class="nv">$exception</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">();</span>

            <span class="k">throw</span> <span class="nv">$exception</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">);</span>

<span class="c1">// after you&#39;re done with sending several requests,</span>
<span class="c1">// you must wait for them to complete concurrently</span>

<span class="c1">// wait for a specific promise to resolve while monitoring them all</span>
<span class="nv">$response</span> <span class="o">=</span> <span class="nv">$promise</span><span class="o">-&gt;</span><span class="na">wait</span><span class="p">();</span>

<span class="c1">// wait maximum 1 second for pending promises to resolve</span>
<span class="nv">$httpClient</span><span class="o">-&gt;</span><span class="na">wait</span><span class="p">(</span><span class="mf">1.0</span><span class="p">);</span>

<span class="c1">// wait for all remaining promises to resolve</span>
<span class="nv">$httpClient</span><span class="o">-&gt;</span><span class="na">wait</span><span class="p">();</span>
</pre></div>
</div>
</div>
<div class="section" id="native-php-streams">
<h3>Native PHP Streams</h3>
<p>Responses implementing <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Contracts/HttpClient/ResponseInterface.php" title="Symfony\Contracts\HttpClient\ResponseInterface"><span class="pre">ResponseInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Contracts/HttpClient/ResponseInterface.php]</span></span></code>
can be cast to native PHP streams with
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpClient/Response/StreamWrapper.php" title="Symfony\Component\HttpClient\Response\StreamWrapper::createResource()"><span class="pre">createResource()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpClient/Response/StreamWrapper.php]</span></span></code>.
This allows using them where native PHP streams are needed:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpClient\HttpClient</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpClient\Response\StreamWrapper</span><span class="p">;</span>

<span class="nv">$client</span> <span class="o">=</span> <span class="nx">HttpClient</span><span class="o">::</span><span class="na">create</span><span class="p">();</span>
<span class="nv">$response</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;https://symfony.com/versions.json&#39;</span><span class="p">);</span>

<span class="nv">$streamResource</span> <span class="o">=</span> <span class="nx">StreamWrapper</span><span class="o">::</span><span class="na">createResource</span><span class="p">(</span><span class="nv">$response</span><span class="p">,</span> <span class="nv">$client</span><span class="p">);</span>

<span class="c1">// alternatively and contrary to the previous one, this returns</span>
<span class="c1">// a resource that is seekable and potentially stream_select()-able</span>
<span class="nv">$streamResource</span> <span class="o">=</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">toStream</span><span class="p">();</span>

<span class="k">echo</span> <span class="nb">stream_get_contents</span><span class="p">(</span><span class="nv">$streamResource</span><span class="p">);</span> <span class="c1">// outputs the content of the response</span>

<span class="c1">// later on if you need to, you can access the response from the stream</span>
<span class="nv">$response</span> <span class="o">=</span> <span class="nb">stream_get_meta_data</span><span class="p">(</span><span class="nv">$streamResource</span><span class="p">)[</span><span class="s1">&#39;wrapper_data&#39;</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">getResponse</span><span class="p">();</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="testing-http-clients-and-responses">
<h2>Testing HTTP Clients and Responses</h2>
<p>This component includes the <code class="docutils literal notranslate"><span class="pre">MockHttpClient</span></code> and <code class="docutils literal notranslate"><span class="pre">MockResponse</span></code> classes to
use them in tests that need an HTTP client which doesn’t make actual HTTP
requests.</p>
<p>The first way of using <code class="docutils literal notranslate"><span class="pre">MockHttpClient</span></code> is to pass a list of responses to its
constructor. These will be yielded in order when requests are made:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpClient\MockHttpClient</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpClient\Response\MockResponse</span><span class="p">;</span>

<span class="nv">$responses</span> <span class="o">=</span> <span class="p">[</span>
    <span class="k">new</span> <span class="nx">MockResponse</span><span class="p">(</span><span class="nv">$body1</span><span class="p">,</span> <span class="nv">$info1</span><span class="p">),</span>
    <span class="k">new</span> <span class="nx">MockResponse</span><span class="p">(</span><span class="nv">$body2</span><span class="p">,</span> <span class="nv">$info2</span><span class="p">),</span>
<span class="p">];</span>

<span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MockHttpClient</span><span class="p">(</span><span class="nv">$responses</span><span class="p">);</span>
<span class="c1">// responses are returned in the same order as passed to MockHttpClient</span>
<span class="nv">$response1</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;...&#39;</span><span class="p">);</span> <span class="c1">// returns $responses[0]</span>
<span class="nv">$response2</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;...&#39;</span><span class="p">);</span> <span class="c1">// returns $responses[1]</span>
</pre></div>
</div>
<p>Another way of using <code class="docutils literal notranslate"><span class="pre">MockHttpClient</span></code> is to pass a callback that generates the
responses dynamically when it’s called:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpClient\MockHttpClient</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpClient\Response\MockResponse</span><span class="p">;</span>

<span class="nv">$callback</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$method</span><span class="p">,</span> <span class="nv">$url</span><span class="p">,</span> <span class="nv">$options</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nx">MockResponse</span><span class="p">(</span><span class="s1">&#39;...&#39;</span><span class="p">);</span>
<span class="p">};</span>

<span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MockHttpClient</span><span class="p">(</span><span class="nv">$callback</span><span class="p">);</span>
<span class="nv">$response</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;...&#39;</span><span class="p">);</span> <span class="c1">// calls $callback to get the response</span>
</pre></div>
</div>
<p>The responses provided to the mock client don’t have to be instances of
<code class="docutils literal notranslate"><span class="pre">MockResponse</span></code>. Any class implementing <code class="docutils literal notranslate"><span class="pre">ResponseInterface</span></code> will work (e.g.
<code class="docutils literal notranslate"><span class="pre">$this-&gt;createMock(ResponseInterface::class)</span></code>).</p>
<p>However, using <code class="docutils literal notranslate"><span class="pre">MockResponse</span></code> allows simulating chunked responses and timeouts:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$body</span> <span class="o">=</span> <span class="k">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">yield</span> <span class="s1">&#39;hello&#39;</span><span class="p">;</span>
    <span class="c1">// empty strings are turned into timeouts so that they are easy to test</span>
    <span class="k">yield</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
    <span class="k">yield</span> <span class="s1">&#39;world&#39;</span><span class="p">;</span>
<span class="p">};</span>

<span class="nv">$mockResponse</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MockResponse</span><span class="p">(</span><span class="nv">$body</span><span class="p">());</span>
</pre></div>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 5.2: </span>The feature explained below was introduced in Symfony 5.2.</p>
</div>
<p>Finally, you can also create an invokable or iterable class that generates the
responses and use it as a callback in functional tests:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">namespace</span> <span class="nx">App\Tests</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\HttpClient\Response\MockResponse</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Contracts\HttpClient\ResponseInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">MockClientCallback</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__invoke</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$method</span><span class="p">,</span> <span class="nx">string</span> <span class="nv">$url</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$options</span> <span class="o">=</span> <span class="p">[])</span><span class="o">:</span> <span class="nx">ResponseInterface</span>
    <span class="p">{</span>
        <span class="c1">// load a fixture file or generate data</span>
        <span class="c1">// ...</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nx">MockResponse</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Then configure Symfony to use your callback:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services_test.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="c1"># ...</span>
    <span class="l l-Scalar l-Scalar-Plain">App\Tests\MockClientCallback</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">~</span>

<span class="c1"># config/packages/test/framework.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">framework</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">http_client</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">mock_response_factory</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">App\Tests\MockClientCallback</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services_test.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsd=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsd:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\Tests\MockClientCallback&quot;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>

<span class="c">&lt;!-- config/packages/framework.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xmlns:framework=</span><span class="s">&quot;http://symfony.com/schema/dic/symfony&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd</span>
<span class="s">        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;framework:config&gt;</span>
        <span class="nt">&lt;framework:http-client</span> <span class="na">mock-response-factory=</span><span class="s">&quot;App\Tests\MockClientCallback&quot;</span><span class="nt">&gt;</span>
            <span class="c">&lt;!-- ... --&gt;</span>
        <span class="nt">&lt;/framework-http-client&gt;</span>
    <span class="nt">&lt;/framework:config&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/packages/framework.php</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;framework&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;http_client&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;mock_response_factory&#39;</span> <span class="o">=&gt;</span> <span class="nx">MockClientCallback</span><span class="o">::</span><span class="na">class</span><span class="p">,</span>
    <span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>