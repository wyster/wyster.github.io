<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Routing</title>
    <link rel="stylesheet" href="_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="routing">
<span id="index-0"></span><h1>Routing</h1>
<p>When your application receives a request, it calls a
<a class="reference internal" href="controller.xhtml"><span class="doc">controller action</span></a> to generate the response. The routing
configuration defines which action to run for each incoming URL. It also
provides other useful features, like generating SEO-friendly URLs (e.g.
<code class="docutils literal notranslate"><span class="pre">/read/intro-to-symfony</span></code> instead of <code class="docutils literal notranslate"><span class="pre">index.php?article_id=57</span></code>).</p>
<div class="section" id="creating-routes">
<span id="routing-creating-routes"></span><h2>Creating Routes</h2>
<p>Routes can be configured in YAML, XML, PHP or using annotations. All formats
provide the same features and performance, so choose your favorite.
<a class="reference internal" href="best_practices.xhtml#best-practice-controller-annotations"><span class="std std-ref">Symfony recommends annotations</span></a>
because it’s convenient to put the route and controller in the same place.</p>
<div class="section" id="creating-routes-as-annotations">
<h3>Creating Routes as Annotations</h3>
<p>Run this command once in your application to add support for annotations:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require doctrine/annotations
</pre></div>
</td></tr></table></div>
<p>In addition to installing the needed dependencies, this command creates the
following configuration file:</p>
<div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/routes/annotations.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">controllers</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">resource</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">../../src/Controller/</span>
    <span class="l l-Scalar l-Scalar-Plain">type</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">annotation</span>

<span class="l l-Scalar l-Scalar-Plain">kernel</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">resource</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">../../src/Kernel.php</span>
    <span class="l l-Scalar l-Scalar-Plain">type</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">annotation</span>
</pre></div>
</td></tr></table></div>
<p>This configuration tells Symfony to look for routes defined as annotations in
any PHP class stored in the <code class="docutils literal notranslate"><span class="pre">src/Controller/</span></code> directory.</p>
<p>Suppose you want to define a route for the <code class="docutils literal notranslate"><span class="pre">/blog</span></code> URL in your application. To
do so, create a <a class="reference internal" href="controller.xhtml"><span class="doc">controller class</span></a> like the following:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/BlogController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Annotation\Route</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">BlogController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @Route(&quot;/blog&quot;, name=&quot;blog_list&quot;)</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">list</span><span class="p">()</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>This configuration defines a route called <code class="docutils literal notranslate"><span class="pre">blog_list</span></code> that matches when the
user requests the <code class="docutils literal notranslate"><span class="pre">/blog</span></code> URL. When the match occurs, the application runs
the <code class="docutils literal notranslate"><span class="pre">list()</span></code> method of the <code class="docutils literal notranslate"><span class="pre">BlogController</span></code> class.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The query string of a URL is not considered when matching routes. In this
example, URLs like <code class="docutils literal notranslate"><span class="pre">/blog?foo=bar</span></code> and <code class="docutils literal notranslate"><span class="pre">/blog?foo=bar&amp;bar=foo</span></code> will
also match the <code class="docutils literal notranslate"><span class="pre">blog_list</span></code> route.</p>
</div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>If you define multiple PHP classes in the same file, Symfony only loads the
routes of the first class, ignoring all the other routes.</p>
</div>
<p>The route name (<code class="docutils literal notranslate"><span class="pre">blog_list</span></code>) is not important for now, but it will be
essential later when <a class="reference internal" href="#routing-generating-urls"><span class="std std-ref">generating URLs</span></a>. You only
have to keep in mind that each route name must be unique in the application.</p>
</div>
<div class="section" id="creating-routes-in-yaml-xml-or-php-files">
<h3>Creating Routes in YAML, XML or PHP Files</h3>
<p>Instead of defining routes in the controller classes, you can define them in a
separate YAML, XML or PHP file. The main advantage is that they don’t require
any extra dependency. The main drawback is that you have to work with multiple
files when checking the routing of some controller action.</p>
<p>The following example shows how to define in YAML/XML/PHP a route called
<code class="docutils literal notranslate"><span class="pre">blog_list</span></code> that associates the <code class="docutils literal notranslate"><span class="pre">/blog</span></code> URL with the <code class="docutils literal notranslate"><span class="pre">list()</span></code> action of
the <code class="docutils literal notranslate"><span class="pre">BlogController</span></code>:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/routes.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">blog_list</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">path</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">/blog</span>
    <span class="c1"># the controller value has the format &#39;controller_class::method_name&#39;</span>
    <span class="l l-Scalar l-Scalar-Plain">controller</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">App\Controller\BlogController::list</span>

    <span class="c1"># if the action is implemented as the __invoke() method of the</span>
    <span class="c1"># controller class, you can skip the &#39;::method_name&#39; part:</span>
    <span class="c1"># controller: App\Controller\BlogController</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/routes.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;routes</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/routing&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/routing</span>
<span class="s">        https://symfony.com/schema/routing/routing-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="c">&lt;!-- the controller value has the format &#39;controller_class::method_name&#39; --&gt;</span>
    <span class="nt">&lt;route</span> <span class="na">id=</span><span class="s">&quot;blog_list&quot;</span> <span class="na">path=</span><span class="s">&quot;/blog&quot;</span>
           <span class="na">controller=</span><span class="s">&quot;App\Controller\BlogController::list&quot;</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!-- if the action is implemented as the __invoke() method of the</span>
<span class="c">         controller class, you can skip the &#39;::method_name&#39; part:</span>
<span class="c">         controller=&quot;App\Controller\BlogController&quot;/&gt; --&gt;</span>
<span class="nt">&lt;/routes&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/routes.php</span>
<span class="k">use</span> <span class="nx">App\Controller\BlogController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nx">RoutingConfigurator</span> <span class="nv">$routes</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;blog_list&#39;</span><span class="p">,</span> <span class="s1">&#39;/blog&#39;</span><span class="p">)</span>
        <span class="c1">// the controller value has the format [controller_class, method_name]</span>
        <span class="o">-&gt;</span><span class="na">controller</span><span class="p">([</span><span class="nx">BlogController</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="s1">&#39;list&#39;</span><span class="p">])</span>

        <span class="c1">// if the action is implemented as the __invoke() method of the</span>
        <span class="c1">// controller class, you can skip the &#39;method_name&#39; part:</span>
        <span class="c1">// -&gt;controller(BlogController::class)</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
<div class="section" id="matching-http-methods">
<span id="routing-matching-http-methods"></span><h3>Matching HTTP Methods</h3>
<p>By default, routes match any HTTP verb (<code class="docutils literal notranslate"><span class="pre">GET</span></code>, <code class="docutils literal notranslate"><span class="pre">POST</span></code>, <code class="docutils literal notranslate"><span class="pre">PUT</span></code>, etc.)
Use the <code class="docutils literal notranslate"><span class="pre">methods</span></code> option to restrict the verbs each route should respond to:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Annotations</em><div class="highlight-php-annotations notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/BlogApiController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Annotation\Route</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">BlogApiController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @Route(&quot;/api/posts/{id}&quot;, methods={&quot;GET&quot;,&quot;HEAD&quot;})</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">show</span><span class="p">(</span><span class="nx">int</span> <span class="nv">$id</span><span class="p">)</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="c1">// ... return a JSON response with the post</span>
    <span class="p">}</span>

    <span class="sd">/**</span>
<span class="sd">     * @Route(&quot;/api/posts/{id}&quot;, methods={&quot;PUT&quot;})</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">edit</span><span class="p">(</span><span class="nx">int</span> <span class="nv">$id</span><span class="p">)</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="c1">// ... edit a post</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/routes.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">api_post_show</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">path</span><span class="p p-Indicator">:</span>       <span class="l l-Scalar l-Scalar-Plain">/api/posts/{id}</span>
    <span class="l l-Scalar l-Scalar-Plain">controller</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">App\Controller\BlogApiController::show</span>
    <span class="l l-Scalar l-Scalar-Plain">methods</span><span class="p p-Indicator">:</span>    <span class="l l-Scalar l-Scalar-Plain">GET|HEAD</span>

<span class="l l-Scalar l-Scalar-Plain">api_post_edit</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">path</span><span class="p p-Indicator">:</span>       <span class="l l-Scalar l-Scalar-Plain">/api/posts/{id}</span>
    <span class="l l-Scalar l-Scalar-Plain">controller</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">App\Controller\BlogApiController::edit</span>
    <span class="l l-Scalar l-Scalar-Plain">methods</span><span class="p p-Indicator">:</span>    <span class="l l-Scalar l-Scalar-Plain">PUT</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/routes.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;routes</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/routing&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/routing</span>
<span class="s">        https://symfony.com/schema/routing/routing-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;route</span> <span class="na">id=</span><span class="s">&quot;api_post_show&quot;</span> <span class="na">path=</span><span class="s">&quot;/api/posts/{id}&quot;</span>
        <span class="na">controller=</span><span class="s">&quot;App\Controller\BlogApiController::show&quot;</span>
        <span class="na">methods=</span><span class="s">&quot;GET|HEAD&quot;</span><span class="nt">/&gt;</span>

    <span class="nt">&lt;route</span> <span class="na">id=</span><span class="s">&quot;api_post_edit&quot;</span> <span class="na">path=</span><span class="s">&quot;/api/posts/{id}&quot;</span>
        <span class="na">controller=</span><span class="s">&quot;App\Controller\BlogApiController::edit&quot;</span>
        <span class="na">methods=</span><span class="s">&quot;PUT&quot;</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/routes&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/routes.php</span>
<span class="k">use</span> <span class="nx">App\Controller\BlogApiController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nx">RoutingConfigurator</span> <span class="nv">$routes</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;api_post_show&#39;</span><span class="p">,</span> <span class="s1">&#39;/api/posts/{id}&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">controller</span><span class="p">([</span><span class="nx">BlogApiController</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="s1">&#39;show&#39;</span><span class="p">])</span>
        <span class="o">-&gt;</span><span class="na">methods</span><span class="p">([</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;HEAD&#39;</span><span class="p">])</span>
    <span class="p">;</span>
    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;api_post_edit&#39;</span><span class="p">,</span> <span class="s1">&#39;/api/posts/{id}&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">controller</span><span class="p">([</span><span class="nx">BlogApiController</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="s1">&#39;edit&#39;</span><span class="p">])</span>
        <span class="o">-&gt;</span><span class="na">methods</span><span class="p">([</span><span class="s1">&#39;PUT&#39;</span><span class="p">])</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>HTML forms only support <code class="docutils literal notranslate"><span class="pre">GET</span></code> and <code class="docutils literal notranslate"><span class="pre">POST</span></code> methods. If you’re calling a
route with a different method from an HTML form, add a hidden field called
<code class="docutils literal notranslate"><span class="pre">_method</span></code> with the method to use (e.g. <code class="docutils literal notranslate"><span class="pre">&lt;input</span> <span class="pre">type=&quot;hidden&quot;</span> <span class="pre">name=&quot;_method&quot;</span> <span class="pre">value=&quot;PUT&quot;/&gt;</span></code>).
If you create your forms with <a class="reference internal" href="forms.xhtml"><span class="doc">Symfony Forms</span></a> this is done
automatically for you.</p>
</div>
</div>
<div class="section" id="matching-expressions">
<span id="routing-matching-expressions"></span><h3>Matching Expressions</h3>
<p>Use the <code class="docutils literal notranslate"><span class="pre">condition</span></code> option if you need some route to match based on some
arbitrary matching logic:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Annotations</em><div class="highlight-php-annotations notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/DefaultController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Annotation\Route</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">DefaultController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @Route(</span>
<span class="sd">     *     &quot;/contact&quot;,</span>
<span class="sd">     *     name=&quot;contact&quot;,</span>
<span class="sd">     *     condition=&quot;context.getMethod() in [&#39;GET&#39;, &#39;HEAD&#39;] and request.headers.get(&#39;User-Agent&#39;) matches &#39;/firefox/i&#39;&quot;</span>
<span class="sd">     * )</span>
<span class="sd">     *</span>
<span class="sd">     * expressions can also include config parameters:</span>
<span class="sd">     * condition: &quot;request.headers.get(&#39;User-Agent&#39;) matches &#39;%app.allowed_browsers%&#39;&quot;</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">contact</span><span class="p">()</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/routes.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">contact</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">path</span><span class="p p-Indicator">:</span>       <span class="l l-Scalar l-Scalar-Plain">/contact</span>
    <span class="l l-Scalar l-Scalar-Plain">controller</span><span class="p p-Indicator">:</span> <span class="s">&#39;App\Controller\DefaultController::contact&#39;</span>
    <span class="l l-Scalar l-Scalar-Plain">condition</span><span class="p p-Indicator">:</span>  <span class="s">&quot;context.getMethod()</span><span class="nv"> </span><span class="s">in</span><span class="nv"> </span><span class="s">[&#39;GET&#39;,</span><span class="nv"> </span><span class="s">&#39;HEAD&#39;]</span><span class="nv"> </span><span class="s">and</span><span class="nv"> </span><span class="s">request.headers.get(&#39;User-Agent&#39;)</span><span class="nv"> </span><span class="s">matches</span><span class="nv"> </span><span class="s">&#39;/firefox/i&#39;&quot;</span>
    <span class="c1"># expressions can also include config parameters:</span>
    <span class="c1"># condition: &quot;request.headers.get(&#39;User-Agent&#39;) matches &#39;%app.allowed_browsers%&#39;&quot;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/routes.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;routes</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/routing&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/routing</span>
<span class="s">        https://symfony.com/schema/routing/routing-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;route</span> <span class="na">id=</span><span class="s">&quot;contact&quot;</span> <span class="na">path=</span><span class="s">&quot;/contact&quot;</span> <span class="na">controller=</span><span class="s">&quot;App\Controller\DefaultController::contact&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;condition&gt;</span>context.getMethod() in [&#39;GET&#39;, &#39;HEAD&#39;] and request.headers.get(&#39;User-Agent&#39;) matches &#39;/firefox/i&#39;<span class="nt">&lt;/condition&gt;</span>
        <span class="c">&lt;!-- expressions can also include config parameters: --&gt;</span>
        <span class="c">&lt;!-- &lt;condition&gt;request.headers.get(&#39;User-Agent&#39;) matches &#39;%app.allowed_browsers%&#39;&lt;/condition&gt; --&gt;</span>
    <span class="nt">&lt;/route&gt;</span>
<span class="nt">&lt;/routes&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/routes.php</span>
<span class="k">use</span> <span class="nx">App\Controller\DefaultController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nx">RoutingConfigurator</span> <span class="nv">$routes</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;contact&#39;</span><span class="p">,</span> <span class="s1">&#39;/contact&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">controller</span><span class="p">([</span><span class="nx">DefaultController</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="s1">&#39;contact&#39;</span><span class="p">])</span>
        <span class="o">-&gt;</span><span class="na">condition</span><span class="p">(</span><span class="s1">&#39;context.getMethod() in [&quot;GET&quot;, &quot;HEAD&quot;] and request.headers.get(&quot;User-Agent&quot;) matches &quot;/firefox/i&quot;&#39;</span><span class="p">)</span>
        <span class="c1">// expressions can also include config parameters:</span>
        <span class="c1">// &#39;request.headers.get(&quot;User-Agent&quot;) matches &quot;%app.allowed_browsers%&quot;&#39;</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>The value of the <code class="docutils literal notranslate"><span class="pre">condition</span></code> option is any valid
<a class="reference internal" href="components/expression_language/syntax.xhtml"><span class="doc">ExpressionLanguage expression</span></a>
and can use any of these variables created by Symfony:</p>
<dl class="simple">
<dt><code class="docutils literal notranslate"><span class="pre">context</span></code></dt>
<dd><p>An instance of <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Routing/RequestContext.php" title="Symfony\Component\Routing\RequestContext"><span class="pre">RequestContext</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Routing/RequestContext.php]</span></span></code>,
which holds the most fundamental information about the route being matched.</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">request</span></code></dt>
<dd><p>The <a class="reference internal" href="components/http_foundation.xhtml#component-http-foundation-request"><span class="std std-ref">Symfony Request</span></a> object that
represents the current request.</p>
</dd>
</dl>
<p>Behind the scenes, expressions are compiled down to raw PHP. Because of this,
using the <code class="docutils literal notranslate"><span class="pre">condition</span></code> key causes no extra overhead beyond the time it takes
for the underlying PHP to execute.</p>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>Conditions are <em>not</em> taken into account when generating URLs (which is
explained later in this article).</p>
</div>
</div>
<div class="section" id="debugging-routes">
<h3>Debugging Routes</h3>
<p>As your application grows, you’ll eventually have a <em>lot</em> of routes. Symfony
includes some commands to help you debug routing issues. First, the <code class="docutils literal notranslate"><span class="pre">debug:router</span></code>
command lists all your application routes in the same order in which Symfony
evaluates them:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console debug:router

<span class="go">----------------  -------  -------  -----  --------------------------------------------</span>
<span class="go">Name              Method   Scheme   Host   Path</span>
<span class="go">----------------  -------  -------  -----  --------------------------------------------</span>
<span class="go">homepage          ANY      ANY      ANY    /</span>
<span class="go">contact           GET      ANY      ANY    /contact</span>
<span class="go">contact_process   POST     ANY      ANY    /contact</span>
<span class="go">article_show      ANY      ANY      ANY    /articles/{_locale}/{year}/{title}.{_format}</span>
<span class="go">blog              ANY      ANY      ANY    /blog/{page}</span>
<span class="go">blog_show         ANY      ANY      ANY    /blog/{slug}</span>
<span class="go">----------------  -------  -------  -----  --------------------------------------------</span>
</pre></div>
</td></tr></table></div>
<p>Pass the name (or part of the name) of some route to this argument to print the
route details:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console debug:router app_lucky_number

<span class="go">+-------------+---------------------------------------------------------+</span>
<span class="go">| Property    | Value                                                   |</span>
<span class="go">+-------------+---------------------------------------------------------+</span>
<span class="go">| Route Name  | app_lucky_number                                        |</span>
<span class="go">| Path        | /lucky/number/{max}                                     |</span>
<span class="go">| ...         | ...                                                     |</span>
<span class="go">| Options     | compiler_class: Symfony\Component\Routing\RouteCompiler |</span>
<span class="go">|             | utf8: true                                              |</span>
<span class="go">+-------------+---------------------------------------------------------+</span>
</pre></div>
</td></tr></table></div>
<p>The other command is called <code class="docutils literal notranslate"><span class="pre">router:match</span></code> and it shows which route will match
the given URL. It’s useful to find out why some URL is not executing the
controller action that you expect:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console router:match /lucky/number/8

<span class="go">  [OK] Route &quot;app_lucky_number&quot; matches</span>
</pre></div>
</td></tr></table></div>
</div>
</div>
<div class="section" id="route-parameters">
<h2>Route Parameters</h2>
<p>The previous examples defined routes where the URL never changes (e.g. <code class="docutils literal notranslate"><span class="pre">/blog</span></code>).
However, it’s common to define routes where some parts are variable. For example,
the URL to display some blog post will probably include the title or slug
(e.g. <code class="docutils literal notranslate"><span class="pre">/blog/my-first-post</span></code> or <code class="docutils literal notranslate"><span class="pre">/blog/all-about-symfony</span></code>).</p>
<p>In Symfony routes, variable parts are wrapped in <code class="docutils literal notranslate"><span class="pre">{</span> <span class="pre">...</span> <span class="pre">}</span></code> and they must have
a unique name. For example, the route to display the blog post contents is
defined as <code class="docutils literal notranslate"><span class="pre">/blog/{slug}</span></code>:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Annotations</em><div class="highlight-php-annotations notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/BlogController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Annotation\Route</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">BlogController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="sd">/**</span>
<span class="sd">     * @Route(&quot;/blog/{slug}&quot;, name=&quot;blog_show&quot;)</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">show</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$slug</span><span class="p">)</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="c1">// $slug will equal the dynamic part of the URL</span>
        <span class="c1">// e.g. at /blog/yay-routing, then $slug=&#39;yay-routing&#39;</span>

        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/routes.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">blog_show</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">path</span><span class="p p-Indicator">:</span>       <span class="l l-Scalar l-Scalar-Plain">/blog/{slug}</span>
    <span class="l l-Scalar l-Scalar-Plain">controller</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">App\Controller\BlogController::show</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/routes.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;routes</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/routing&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/routing</span>
<span class="s">        https://symfony.com/schema/routing/routing-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;route</span> <span class="na">id=</span><span class="s">&quot;blog_show&quot;</span> <span class="na">path=</span><span class="s">&quot;/blog/{slug}&quot;</span>
           <span class="na">controller=</span><span class="s">&quot;App\Controller\BlogController::show&quot;</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/routes&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/routes.php</span>
<span class="k">use</span> <span class="nx">App\Controller\BlogController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nx">RoutingConfigurator</span> <span class="nv">$routes</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;blog_show&#39;</span><span class="p">,</span> <span class="s1">&#39;/blog/{slug}&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">controller</span><span class="p">([</span><span class="nx">BlogController</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="s1">&#39;show&#39;</span><span class="p">])</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>The name of the variable part (<code class="docutils literal notranslate"><span class="pre">{slug}</span></code> in this example) is used to create a
PHP variable where that route content is stored and passed to the controller.
If a user visits the <code class="docutils literal notranslate"><span class="pre">/blog/my-first-post</span></code> URL, Symfony executes the <code class="docutils literal notranslate"><span class="pre">show()</span></code>
method in the <code class="docutils literal notranslate"><span class="pre">BlogController</span></code> class and passes a <code class="docutils literal notranslate"><span class="pre">$slug</span> <span class="pre">=</span> <span class="pre">'my-first-post'</span></code>
argument to the <code class="docutils literal notranslate"><span class="pre">show()</span></code> method.</p>
<p>Routes can define any number of parameters, but each of them can only be used
once on each route (e.g. <code class="docutils literal notranslate"><span class="pre">/blog/posts-about-{category}/page/{pageNumber}</span></code>).</p>
<div class="section" id="parameters-validation">
<span id="routing-requirements"></span><h3>Parameters Validation</h3>
<p>Imagine that your application has a <code class="docutils literal notranslate"><span class="pre">blog_show</span></code> route (URL: <code class="docutils literal notranslate"><span class="pre">/blog/{slug}</span></code>)
and a <code class="docutils literal notranslate"><span class="pre">blog_list</span></code> route (URL: <code class="docutils literal notranslate"><span class="pre">/blog/{page}</span></code>). Given that route parameters
accept any value, there’s no way to differentiate both routes.</p>
<p>If the user requests <code class="docutils literal notranslate"><span class="pre">/blog/my-first-post</span></code>, both routes will match and Symfony
will use the route which was defined first. To fix this, add some validation to
the <code class="docutils literal notranslate"><span class="pre">{page}</span></code> parameter using the <code class="docutils literal notranslate"><span class="pre">requirements</span></code> option:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Annotations</em><div class="highlight-php-annotations notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/BlogController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Annotation\Route</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">BlogController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @Route(&quot;/blog/{page}&quot;, name=&quot;blog_list&quot;, requirements={&quot;page&quot;=&quot;\d+&quot;})</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">list</span><span class="p">(</span><span class="nx">int</span> <span class="nv">$page</span><span class="p">)</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>

    <span class="sd">/**</span>
<span class="sd">     * @Route(&quot;/blog/{slug}&quot;, name=&quot;blog_show&quot;)</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">show</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$slug</span><span class="p">)</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/routes.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">blog_list</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">path</span><span class="p p-Indicator">:</span>       <span class="l l-Scalar l-Scalar-Plain">/blog/{page}</span>
    <span class="l l-Scalar l-Scalar-Plain">controller</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">App\Controller\BlogController::list</span>
    <span class="l l-Scalar l-Scalar-Plain">requirements</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">page</span><span class="p p-Indicator">:</span> <span class="s">&#39;\d+&#39;</span>

<span class="l l-Scalar l-Scalar-Plain">blog_show</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">path</span><span class="p p-Indicator">:</span>       <span class="l l-Scalar l-Scalar-Plain">/blog/{slug}</span>
    <span class="l l-Scalar l-Scalar-Plain">controller</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">App\Controller\BlogController::show</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/routes.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;routes</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/routing&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/routing</span>
<span class="s">        https://symfony.com/schema/routing/routing-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;route</span> <span class="na">id=</span><span class="s">&quot;blog_list&quot;</span> <span class="na">path=</span><span class="s">&quot;/blog/{page}&quot;</span> <span class="na">controller=</span><span class="s">&quot;App\Controller\BlogController::list&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;requirement</span> <span class="na">key=</span><span class="s">&quot;page&quot;</span><span class="nt">&gt;</span>\d+<span class="nt">&lt;/requirement&gt;</span>
    <span class="nt">&lt;/route&gt;</span>

    <span class="nt">&lt;route</span> <span class="na">id=</span><span class="s">&quot;blog_show&quot;</span> <span class="na">path=</span><span class="s">&quot;/blog/{slug}&quot;</span>
           <span class="na">controller=</span><span class="s">&quot;App\Controller\BlogController::show&quot;</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/routes&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/routes.php</span>
<span class="k">use</span> <span class="nx">App\Controller\BlogController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nx">RoutingConfigurator</span> <span class="nv">$routes</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;blog_list&#39;</span><span class="p">,</span> <span class="s1">&#39;/blog/{page}&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">controller</span><span class="p">([</span><span class="nx">BlogController</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="s1">&#39;list&#39;</span><span class="p">])</span>
        <span class="o">-&gt;</span><span class="na">requirements</span><span class="p">([</span><span class="s1">&#39;page&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;\d+&#39;</span><span class="p">])</span>
    <span class="p">;</span>

    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;blog_show&#39;</span><span class="p">,</span> <span class="s1">&#39;/blog/{slug}&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">controller</span><span class="p">([</span><span class="nx">BlogController</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="s1">&#39;show&#39;</span><span class="p">])</span>
    <span class="p">;</span>
    <span class="c1">// ...</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>The <code class="docutils literal notranslate"><span class="pre">requirements</span></code> option defines the <a class="reference external" href="https://www.php.net/manual/en/book.pcre.php">PHP regular expressions</a><span class="link-target"> [https://www.php.net/manual/en/book.pcre.php]</span> that route
parameters must match for the entire route to match. In this example, <code class="docutils literal notranslate"><span class="pre">\d+</span></code> is
a regular expression that matches a <em>digit</em> of any length. Now:</p>
<table class="docutils">
<colgroup>
<col style="width: 35%" />
<col style="width: 19%" />
<col style="width: 46%" />
</colgroup>
<thead>
<tr class="row-odd"><th class="head"><p>URL</p></th>
<th class="head"><p>Route</p></th>
<th class="head"><p>Parameters</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">/blog/2</span></code></p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">blog_list</span></code></p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">$page</span></code> = <code class="docutils literal notranslate"><span class="pre">2</span></code></p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">/blog/my-first-post</span></code></p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">blog_show</span></code></p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">$slug</span></code> = <code class="docutils literal notranslate"><span class="pre">my-first-post</span></code></p></td>
</tr>
</tbody>
</table>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Route requirements (and route paths too) can include
<a class="reference internal" href="configuration.xhtml#configuration-parameters"><span class="std std-ref">container parameters</span></a>, which is useful to
define complex regular expressions once and reuse them in multiple routes.</p>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Parameters also support <a class="reference external" href="https://www.php.net/manual/en/regexp.reference.unicode.php">PCRE Unicode properties</a><span class="link-target"> [https://www.php.net/manual/en/regexp.reference.unicode.php]</span>, which are escape
sequences that match generic character types. For example, <code class="docutils literal notranslate"><span class="pre">\p{Lu}</span></code>
matches any uppercase character in any language, <code class="docutils literal notranslate"><span class="pre">\p{Greek}</span></code> matches any
Greek character, etc.</p>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>When using regular expressions in route parameters, you can set the <code class="docutils literal notranslate"><span class="pre">utf8</span></code>
route option to <code class="docutils literal notranslate"><span class="pre">true</span></code> to make any <code class="docutils literal notranslate"><span class="pre">.</span></code> character match any UTF-8
characters instead of just a single byte.</p>
</div>
<p>If you prefer, requirements can be inlined in each parameter using the syntax
<code class="docutils literal notranslate"><span class="pre">{parameter_name&lt;requirements&gt;}</span></code>. This feature makes configuration more
concise, but it can decrease route readability when requirements are complex:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Annotations</em><div class="highlight-php-annotations notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/BlogController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Annotation\Route</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">BlogController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @Route(&quot;/blog/{page&lt;\d+&gt;}&quot;, name=&quot;blog_list&quot;)</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">list</span><span class="p">(</span><span class="nx">int</span> <span class="nv">$page</span><span class="p">)</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/routes.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">blog_list</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">path</span><span class="p p-Indicator">:</span>       <span class="l l-Scalar l-Scalar-Plain">/blog/{page&lt;\d+&gt;}</span>
    <span class="l l-Scalar l-Scalar-Plain">controller</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">App\Controller\BlogController::list</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/routes.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;routes</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/routing&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/routing</span>
<span class="s">        https://symfony.com/schema/routing/routing-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;route</span> <span class="na">id=</span><span class="s">&quot;blog_list&quot;</span> <span class="na">path=</span><span class="s">&quot;/blog/{page&lt;\d+&gt;}&quot;</span>
           <span class="na">controller=</span><span class="s">&quot;App\Controller\BlogController::list&quot;</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!-- ... --&gt;</span>
<span class="nt">&lt;/routes&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/routes.php</span>
<span class="k">use</span> <span class="nx">App\Controller\BlogController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nx">RoutingConfigurator</span> <span class="nv">$routes</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;blog_list&#39;</span><span class="p">,</span> <span class="s1">&#39;/blog/{page&lt;\d+&gt;}&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">controller</span><span class="p">([</span><span class="nx">BlogController</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="s1">&#39;list&#39;</span><span class="p">])</span>
    <span class="p">;</span>
    <span class="c1">// ...</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
<div class="section" id="optional-parameters">
<h3>Optional Parameters</h3>
<p>In the previous example, the URL of <code class="docutils literal notranslate"><span class="pre">blog_list</span></code> is <code class="docutils literal notranslate"><span class="pre">/blog/{page}</span></code>. If users
visit <code class="docutils literal notranslate"><span class="pre">/blog/1</span></code>, it will match. But if they visit <code class="docutils literal notranslate"><span class="pre">/blog</span></code>, it will <strong>not</strong>
match. As soon as you add a parameter to a route, it must have a value.</p>
<p>You can make <code class="docutils literal notranslate"><span class="pre">blog_list</span></code> once again match when the user visits <code class="docutils literal notranslate"><span class="pre">/blog</span></code> by
adding a default value for the <code class="docutils literal notranslate"><span class="pre">{page}</span></code> parameter. When using annotations,
default values are defined in the arguments of the controller action. In the
other configuration formats they are defined with the <code class="docutils literal notranslate"><span class="pre">defaults</span></code> option:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Annotations</em><div class="highlight-php-annotations notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/BlogController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Annotation\Route</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">BlogController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @Route(&quot;/blog/{page}&quot;, name=&quot;blog_list&quot;, requirements={&quot;page&quot;=&quot;\d+&quot;})</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">list</span><span class="p">(</span><span class="nx">int</span> <span class="nv">$page</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/routes.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">blog_list</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">path</span><span class="p p-Indicator">:</span>       <span class="l l-Scalar l-Scalar-Plain">/blog/{page}</span>
    <span class="l l-Scalar l-Scalar-Plain">controller</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">App\Controller\BlogController::list</span>
    <span class="l l-Scalar l-Scalar-Plain">defaults</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">page</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">1</span>
    <span class="l l-Scalar l-Scalar-Plain">requirements</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">page</span><span class="p p-Indicator">:</span> <span class="s">&#39;\d+&#39;</span>

<span class="l l-Scalar l-Scalar-Plain">blog_show</span><span class="p p-Indicator">:</span>
    <span class="c1"># ...</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/routes.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;routes</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/routing&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/routing</span>
<span class="s">        https://symfony.com/schema/routing/routing-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;route</span> <span class="na">id=</span><span class="s">&quot;blog_list&quot;</span> <span class="na">path=</span><span class="s">&quot;/blog/{page}&quot;</span> <span class="na">controller=</span><span class="s">&quot;App\Controller\BlogController::list&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;default</span> <span class="na">key=</span><span class="s">&quot;page&quot;</span><span class="nt">&gt;</span>1<span class="nt">&lt;/default&gt;</span>

        <span class="nt">&lt;requirement</span> <span class="na">key=</span><span class="s">&quot;page&quot;</span><span class="nt">&gt;</span>\d+<span class="nt">&lt;/requirement&gt;</span>
    <span class="nt">&lt;/route&gt;</span>

    <span class="c">&lt;!-- ... --&gt;</span>
<span class="nt">&lt;/routes&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/routes.php</span>
<span class="k">use</span> <span class="nx">App\Controller\BlogController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nx">RoutingConfigurator</span> <span class="nv">$routes</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;blog_list&#39;</span><span class="p">,</span> <span class="s1">&#39;/blog/{page}&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">controller</span><span class="p">([</span><span class="nx">BlogController</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="s1">&#39;list&#39;</span><span class="p">])</span>
        <span class="o">-&gt;</span><span class="na">defaults</span><span class="p">([</span><span class="s1">&#39;page&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">])</span>
        <span class="o">-&gt;</span><span class="na">requirements</span><span class="p">([</span><span class="s1">&#39;page&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;\d+&#39;</span><span class="p">])</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>Now, when the user visits <code class="docutils literal notranslate"><span class="pre">/blog</span></code>, the <code class="docutils literal notranslate"><span class="pre">blog_list</span></code> route will match and
<code class="docutils literal notranslate"><span class="pre">$page</span></code> will default to a value of <code class="docutils literal notranslate"><span class="pre">1</span></code>.</p>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>You can have more than one optional parameter (e.g. <code class="docutils literal notranslate"><span class="pre">/blog/{slug}/{page}</span></code>),
but everything after an optional parameter must be optional. For example,
<code class="docutils literal notranslate"><span class="pre">/{page}/blog</span></code> is a valid path, but <code class="docutils literal notranslate"><span class="pre">page</span></code> will always be required
(i.e. <code class="docutils literal notranslate"><span class="pre">/blog</span></code> will not match this route).</p>
</div>
<p>If you want to always include some default value in the generated URL (for
example to force the generation of <code class="docutils literal notranslate"><span class="pre">/blog/1</span></code> instead of <code class="docutils literal notranslate"><span class="pre">/blog</span></code> in the
previous example) add the <code class="docutils literal notranslate"><span class="pre">!</span></code> character before the parameter name: <code class="docutils literal notranslate"><span class="pre">/blog/{!page}</span></code></p>
<div class="versionadded">
<p><span class="versionmodified">New in version 4.3: </span>The feature to force the inclusion of default values in generated URLs was
introduced in Symfony 4.3.</p>
</div>
<p>As it happens with requirements, default values can also be inlined in each
parameter using the syntax <code class="docutils literal notranslate"><span class="pre">{parameter_name?default_value}</span></code>. This feature
is compatible with inlined requirements, so you can inline both in a single
parameter:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Annotations</em><div class="highlight-php-annotations notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/BlogController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Annotation\Route</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">BlogController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @Route(&quot;/blog/{page&lt;\d+&gt;?1}&quot;, name=&quot;blog_list&quot;)</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">list</span><span class="p">(</span><span class="nx">int</span> <span class="nv">$page</span><span class="p">)</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/routes.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">blog_list</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">path</span><span class="p p-Indicator">:</span>       <span class="l l-Scalar l-Scalar-Plain">/blog/{page&lt;\d+&gt;?1}</span>
    <span class="l l-Scalar l-Scalar-Plain">controller</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">App\Controller\BlogController::list</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/routes.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;routes</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/routing&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/routing</span>
<span class="s">        https://symfony.com/schema/routing/routing-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;route</span> <span class="na">id=</span><span class="s">&quot;blog_list&quot;</span> <span class="na">path=</span><span class="s">&quot;/blog/{page&lt;\d+&gt;?1}&quot;</span>
           <span class="na">controller=</span><span class="s">&quot;App\Controller\BlogController::list&quot;</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!-- ... --&gt;</span>
<span class="nt">&lt;/routes&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/routes.php</span>
<span class="k">use</span> <span class="nx">App\Controller\BlogController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nx">RoutingConfigurator</span> <span class="nv">$routes</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;blog_list&#39;</span><span class="p">,</span> <span class="s1">&#39;/blog/{page&lt;\d+&gt;?1}&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">controller</span><span class="p">([</span><span class="nx">BlogController</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="s1">&#39;list&#39;</span><span class="p">])</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>To give a <code class="docutils literal notranslate"><span class="pre">null</span></code> default value to any parameter, add nothing after the
<code class="docutils literal notranslate"><span class="pre">?</span></code> character (e.g. <code class="docutils literal notranslate"><span class="pre">/blog/{page?}</span></code>).</p>
</div>
</div>
<div class="section" id="parameter-conversion">
<h3>Parameter Conversion</h3>
<p>A common routing need is to convert the value stored in some parameter (e.g. an
integer acting as the user ID) into another value (e.g. the object that
represents the user). This feature is called “param converter” and is only
available when using annotations to define routes.</p>
<p>In case you didn’t run this command before, run it now to add support for
annotations and “param converters”:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require annotations
</pre></div>
</td></tr></table></div>
<p>Now, keep the previous route configuration, but change the arguments of the
controller action. Instead of <code class="docutils literal notranslate"><span class="pre">string</span> <span class="pre">$slug</span></code>, add <code class="docutils literal notranslate"><span class="pre">BlogPost</span> <span class="pre">$post</span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/BlogController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Entity\BlogPost</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Annotation\Route</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">BlogController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="sd">/**</span>
<span class="sd">     * @Route(&quot;/blog/{slug}&quot;, name=&quot;blog_show&quot;)</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">show</span><span class="p">(</span><span class="nx">BlogPost</span> <span class="nv">$post</span><span class="p">)</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="c1">// $post is the object whose slug matches the routing parameter</span>

        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>If your controller arguments include type-hints for objects (<code class="docutils literal notranslate"><span class="pre">BlogPost</span></code> in
this case), the “param converter” makes a database request to find the object
using the request parameters (<code class="docutils literal notranslate"><span class="pre">slug</span></code> in this case). If no object is found,
Symfony generates a 404 response automatically.</p>
<p>Read the <a class="reference external" href="https://symfony.com/doc/current/bundles/SensioFrameworkExtraBundle/annotations/converters.html">full param converter documentation</a><span class="link-target"> [https://symfony.com/doc/current/bundles/SensioFrameworkExtraBundle/annotations/converters.html]</span> to learn about the converters
provided by Symfony and how to configure them.</p>
</div>
<div class="section" id="special-parameters">
<h3>Special Parameters</h3>
<p>In addition to your own parameters, routes can include any of the following
special parameters created by Symfony:</p>
<dl class="simple">
<dt><code class="docutils literal notranslate"><span class="pre">_controller</span></code></dt>
<dd><p>This parameter is used to determine which controller and action is executed
when the route is matched.</p>
</dd>
</dl>
<dl class="simple" id="routing-format-parameter">
<dt><code class="docutils literal notranslate"><span class="pre">_format</span></code></dt>
<dd><p>The matched value is used to set the “request format” of the <code class="docutils literal notranslate"><span class="pre">Request</span></code> object.
This is used for such things as setting the <code class="docutils literal notranslate"><span class="pre">Content-Type</span></code> of the response
(e.g. a <code class="docutils literal notranslate"><span class="pre">json</span></code> format translates into a <code class="docutils literal notranslate"><span class="pre">Content-Type</span></code> of <code class="docutils literal notranslate"><span class="pre">application/json</span></code>).</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">_fragment</span></code></dt>
<dd><p>Used to set the fragment identifier, which is the optional last part of a URL that
starts with a <code class="docutils literal notranslate"><span class="pre">#</span></code> character and is used to identify a portion of a document.</p>
</dd>
</dl>
<dl class="simple" id="routing-locale-parameter">
<dt><code class="docutils literal notranslate"><span class="pre">_locale</span></code></dt>
<dd><p>Used to set the <a class="reference internal" href="translation/locale.xhtml#translation-locale-url"><span class="std std-ref">locale</span></a> on the request.</p>
</dd>
</dl>
<p>You can include these attributes (except <code class="docutils literal notranslate"><span class="pre">_fragment</span></code>) both in individual routes
and in route imports. Symfony defines some special attributes with the same name
(except for the leading underscore) so you can define them easier:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Annotations</em><div class="highlight-php-annotations notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/ArticleController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Annotation\Route</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">ArticleController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @Route(</span>
<span class="sd">     *     &quot;/articles/{_locale}/search.{_format}&quot;,</span>
<span class="sd">     *     locale=&quot;en&quot;,</span>
<span class="sd">     *     format=&quot;html&quot;,</span>
<span class="sd">     *     requirements={</span>
<span class="sd">     *         &quot;_locale&quot;: &quot;en|fr&quot;,</span>
<span class="sd">     *         &quot;_format&quot;: &quot;html|xml&quot;,</span>
<span class="sd">     *     }</span>
<span class="sd">     * )</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">search</span><span class="p">()</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/routes.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">article_search</span><span class="p p-Indicator">:</span>
  <span class="l l-Scalar l-Scalar-Plain">path</span><span class="p p-Indicator">:</span>        <span class="l l-Scalar l-Scalar-Plain">/articles/{_locale}/search.{_format}</span>
  <span class="l l-Scalar l-Scalar-Plain">controller</span><span class="p p-Indicator">:</span>  <span class="l l-Scalar l-Scalar-Plain">App\Controller\ArticleController::search</span>
  <span class="l l-Scalar l-Scalar-Plain">locale</span><span class="p p-Indicator">:</span>      <span class="l l-Scalar l-Scalar-Plain">en</span>
  <span class="l l-Scalar l-Scalar-Plain">format</span><span class="p p-Indicator">:</span>      <span class="l l-Scalar l-Scalar-Plain">html</span>
  <span class="l l-Scalar l-Scalar-Plain">requirements</span><span class="p p-Indicator">:</span>
      <span class="l l-Scalar l-Scalar-Plain">_locale</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">en|fr</span>
      <span class="l l-Scalar l-Scalar-Plain">_format</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">html|xml</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/routes.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;routes</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/routing&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/routing</span>
<span class="s">        https://symfony.com/schema/routing/routing-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;route</span> <span class="na">id=</span><span class="s">&quot;article_search&quot;</span>
        <span class="na">path=</span><span class="s">&quot;/articles/{_locale}/search.{_format}&quot;</span>
        <span class="na">controller=</span><span class="s">&quot;App\Controller\ArticleController::search&quot;</span>
        <span class="na">locale=</span><span class="s">&quot;en&quot;</span>
        <span class="na">format=</span><span class="s">&quot;html&quot;</span><span class="nt">&gt;</span>

        <span class="nt">&lt;requirement</span> <span class="na">key=</span><span class="s">&quot;_locale&quot;</span><span class="nt">&gt;</span>en|fr<span class="nt">&lt;/requirement&gt;</span>
        <span class="nt">&lt;requirement</span> <span class="na">key=</span><span class="s">&quot;_format&quot;</span><span class="nt">&gt;</span>html|rss<span class="nt">&lt;/requirement&gt;</span>

    <span class="nt">&lt;/route&gt;</span>
<span class="nt">&lt;/routes&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/routes.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\Routing\Loader\Configurator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Controller\ArticleController</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nx">RoutingConfigurator</span> <span class="nv">$routes</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;article_show&#39;</span><span class="p">,</span> <span class="s1">&#39;/articles/{_locale}/search.{_format}&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">controller</span><span class="p">([</span><span class="nx">ArticleController</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="s1">&#39;search&#39;</span><span class="p">])</span>
        <span class="o">-&gt;</span><span class="na">locale</span><span class="p">(</span><span class="s1">&#39;en&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">format</span><span class="p">(</span><span class="s1">&#39;html&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">requirements</span><span class="p">([</span>
            <span class="s1">&#39;_locale&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;en|fr&#39;</span><span class="p">,</span>
            <span class="s1">&#39;_format&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;html|rss&#39;</span><span class="p">,</span>
        <span class="p">])</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 4.3: </span>The special attributes were introduced in Symfony 4.3.</p>
</div>
</div>
<div class="section" id="extra-parameters">
<h3>Extra Parameters</h3>
<p>In the <code class="docutils literal notranslate"><span class="pre">defaults</span></code> option of a route you can optionally define parameters not
included in the route configuration. This is useful to pass extra arguments to
the controllers of the routes:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Annotations</em><div class="highlight-php-annotations notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/BlogController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Annotation\Route</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">BlogController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @Route(&quot;/blog/{page}&quot;, name=&quot;blog_index&quot;, defaults={&quot;page&quot;: 1, &quot;title&quot;: &quot;Hello world!&quot;})</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">(</span><span class="nx">int</span> <span class="nv">$page</span><span class="p">,</span> <span class="nx">string</span> <span class="nv">$title</span><span class="p">)</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/routes.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">blog_index</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">path</span><span class="p p-Indicator">:</span>       <span class="l l-Scalar l-Scalar-Plain">/blog/{page}</span>
    <span class="l l-Scalar l-Scalar-Plain">controller</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">App\Controller\BlogController::index</span>
    <span class="l l-Scalar l-Scalar-Plain">defaults</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">page</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">1</span>
        <span class="l l-Scalar l-Scalar-Plain">title</span><span class="p p-Indicator">:</span> <span class="s">&quot;Hello</span><span class="nv"> </span><span class="s">world!&quot;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/routes.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;routes</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/routing&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/routing</span>
<span class="s">        https://symfony.com/schema/routing/routing-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;route</span> <span class="na">id=</span><span class="s">&quot;blog_index&quot;</span> <span class="na">path=</span><span class="s">&quot;/blog/{page}&quot;</span> <span class="na">controller=</span><span class="s">&quot;App\Controller\BlogController::index&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;default</span> <span class="na">key=</span><span class="s">&quot;page&quot;</span><span class="nt">&gt;</span>1<span class="nt">&lt;/default&gt;</span>
        <span class="nt">&lt;default</span> <span class="na">key=</span><span class="s">&quot;title&quot;</span><span class="nt">&gt;</span>Hello world!<span class="nt">&lt;/default&gt;</span>
    <span class="nt">&lt;/route&gt;</span>
<span class="nt">&lt;/routes&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/routes.php</span>
<span class="k">use</span> <span class="nx">App\Controller\BlogController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nx">RoutingConfigurator</span> <span class="nv">$routes</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;blog_index&#39;</span><span class="p">,</span> <span class="s1">&#39;/blog/{page}&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">controller</span><span class="p">([</span><span class="nx">BlogController</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="s1">&#39;index&#39;</span><span class="p">])</span>
        <span class="o">-&gt;</span><span class="na">defaults</span><span class="p">([</span>
            <span class="s1">&#39;page&#39;</span>  <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
            <span class="s1">&#39;title&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Hello world!&#39;</span><span class="p">,</span>
        <span class="p">])</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
<div class="section" id="slash-characters-in-route-parameters">
<span id="routing-slash-in-parameters"></span><h3>Slash Characters in Route Parameters</h3>
<p>Route parameters can contain any values except the <code class="docutils literal notranslate"><span class="pre">/</span></code> slash character,
because that’s the character used to separate the different parts of the URLs.
For example, if the <code class="docutils literal notranslate"><span class="pre">token</span></code> value in the <code class="docutils literal notranslate"><span class="pre">/share/{token}</span></code> route contains a
<code class="docutils literal notranslate"><span class="pre">/</span></code> character, this route won’t match.</p>
<p>A possible solution is to change the parameter requirements to be more permissive:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Annotations</em><div class="highlight-php-annotations notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/DefaultController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Annotation\Route</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">DefaultController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @Route(&quot;/share/{token}&quot;, name=&quot;share&quot;, requirements={&quot;token&quot;=&quot;.+&quot;})</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">share</span><span class="p">(</span><span class="nv">$token</span><span class="p">)</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/routes.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">share</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">path</span><span class="p p-Indicator">:</span>       <span class="l l-Scalar l-Scalar-Plain">/share/{token}</span>
    <span class="l l-Scalar l-Scalar-Plain">controller</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">App\Controller\DefaultController::share</span>
    <span class="l l-Scalar l-Scalar-Plain">requirements</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">token</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">.+</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/routes.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;routes</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/routing&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/routing</span>
<span class="s">        https://symfony.com/schema/routing/routing-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;route</span> <span class="na">id=</span><span class="s">&quot;share&quot;</span> <span class="na">path=</span><span class="s">&quot;/share/{token}&quot;</span> <span class="na">controller=</span><span class="s">&quot;App\Controller\DefaultController::share&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;requirement</span> <span class="na">key=</span><span class="s">&quot;token&quot;</span><span class="nt">&gt;</span>.+<span class="nt">&lt;/requirement&gt;</span>
    <span class="nt">&lt;/route&gt;</span>
<span class="nt">&lt;/routes&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/routes.php</span>
<span class="k">use</span> <span class="nx">App\Controller\DefaultController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nx">RoutingConfigurator</span> <span class="nv">$routes</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;share&#39;</span><span class="p">,</span> <span class="s1">&#39;/share/{token}&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">controller</span><span class="p">([</span><span class="nx">DefaultController</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="s1">&#39;share&#39;</span><span class="p">])</span>
        <span class="o">-&gt;</span><span class="na">requirements</span><span class="p">([</span>
            <span class="s1">&#39;token&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;.+&#39;</span><span class="p">,</span>
        <span class="p">])</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If the route defines several parameter and you apply this permissive
regular expression to all of them, you might get unexpected results. For
example, if the route definition is <code class="docutils literal notranslate"><span class="pre">/share/{path}/{token}</span></code> and both
<code class="docutils literal notranslate"><span class="pre">path</span></code> and <code class="docutils literal notranslate"><span class="pre">token</span></code> accept <code class="docutils literal notranslate"><span class="pre">/</span></code>. The <code class="docutils literal notranslate"><span class="pre">token</span></code> only get the last path
and the rest of the match is matched by the first argument (<code class="docutils literal notranslate"><span class="pre">path</span></code>).</p>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If the route includes the special <code class="docutils literal notranslate"><span class="pre">{_format}</span></code> parameter, you shouldn’t
use the <code class="docutils literal notranslate"><span class="pre">.+</span></code> requirement for the parameters that allow slashes. For example,
if the pattern is <code class="docutils literal notranslate"><span class="pre">/share/{token}.{_format}</span></code> and <code class="docutils literal notranslate"><span class="pre">{token}</span></code> allows any
character, the <code class="docutils literal notranslate"><span class="pre">/share/foo/bar.json</span></code> URL will consider <code class="docutils literal notranslate"><span class="pre">foo/bar.json</span></code>
as the token and the format will be empty. This can be solved by replacing
the <code class="docutils literal notranslate"><span class="pre">.+</span></code> requirement by <code class="docutils literal notranslate"><span class="pre">[^.]+</span></code> to allow any character except dots.</p>
</div>
</div>
</div>
<div class="section" id="route-groups-and-prefixes">
<span id="routing-route-groups"></span><h2>Route Groups and Prefixes</h2>
<p>It’s common for a group of routes to share some options (e.g. all routes related
to the blog start with <code class="docutils literal notranslate"><span class="pre">/blog</span></code>) That’s why Symfony includes a feature to share
route configuration.</p>
<p>When defining routes as annotations, put the common configuration in the
<code class="docutils literal notranslate"><span class="pre">&#64;Route</span></code> annotation of the controller class. In other routing formats, define
the common configuration using options when importing the routes.</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Annotations</em><div class="highlight-php-annotations notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/BlogController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Annotation\Route</span><span class="p">;</span>

<span class="sd">/**</span>
<span class="sd"> * @Route(&quot;/blog&quot;, requirements={&quot;_locale&quot;: &quot;en|es|fr&quot;}, name=&quot;blog_&quot;)</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">BlogController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @Route(&quot;/{_locale}&quot;, name=&quot;index&quot;)</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">()</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>

    <span class="sd">/**</span>
<span class="sd">     * @Route(&quot;/{_locale}/posts/{slug}&quot;, name=&quot;show&quot;)</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">show</span><span class="p">(</span><span class="nx">Post</span> <span class="nv">$post</span><span class="p">)</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/routes/annotations.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">controllers</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">resource</span><span class="p p-Indicator">:</span> <span class="s">&#39;../../src/Controller/&#39;</span>
    <span class="l l-Scalar l-Scalar-Plain">type</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">annotation</span>
    <span class="c1"># this is added to the beginning of all imported route URLs</span>
    <span class="l l-Scalar l-Scalar-Plain">prefix</span><span class="p p-Indicator">:</span> <span class="s">&#39;/blog&#39;</span>
    <span class="c1"># this is added to the beginning of all imported route names</span>
    <span class="l l-Scalar l-Scalar-Plain">name_prefix</span><span class="p p-Indicator">:</span> <span class="s">&#39;blog_&#39;</span>
    <span class="c1"># these requirements are added to all imported routes</span>
    <span class="l l-Scalar l-Scalar-Plain">requirements</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">_locale</span><span class="p p-Indicator">:</span> <span class="s">&#39;en|es|fr&#39;</span>
    <span class="c1"># An imported route with an empty URL will become &quot;/blog/&quot;</span>
    <span class="c1"># Uncomment this option to make that URL &quot;/blog&quot; instead</span>
    <span class="c1"># trailing_slash_on_root: false</span>
    <span class="c1"># you can optionally exclude some files/subdirectories when loading annotations</span>
    <span class="c1"># exclude: &#39;../../src/Controller/{DebugEmailController}.php&#39;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/routes/annotations.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;routes</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/routing&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/routing</span>
<span class="s">        https://symfony.com/schema/routing/routing-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="c">&lt;!--</span>
<span class="c">        the &#39;prefix&#39; value is added to the beginning of all imported route URLs</span>
<span class="c">        the &#39;name-prefix&#39; value is added to the beginning of all imported route names</span>
<span class="c">        the &#39;exclude&#39; option defines the files or subdirectories ignored when loading annotations</span>
<span class="c">    --&gt;</span>
    <span class="nt">&lt;import</span> <span class="na">resource=</span><span class="s">&quot;../../src/Controller/&quot;</span>
        <span class="na">type=</span><span class="s">&quot;annotation&quot;</span>
        <span class="na">prefix=</span><span class="s">&quot;/blog&quot;</span>
        <span class="na">name-prefix=</span><span class="s">&quot;blog_&quot;</span>
        <span class="na">exclude=</span><span class="s">&quot;../../src/Controller/{DebugEmailController}.php&quot;</span><span class="nt">&gt;</span>
        <span class="c">&lt;!-- these requirements are added to all imported routes --&gt;</span>
        <span class="nt">&lt;requirement</span> <span class="na">key=</span><span class="s">&quot;_locale&quot;</span><span class="nt">&gt;</span>en|es|fr<span class="nt">&lt;/requirement&gt;</span>
    <span class="nt">&lt;/import&gt;</span>

    <span class="c">&lt;!-- An imported route with an empty URL will become &quot;/blog/&quot;</span>
<span class="c">         Uncomment this option to make that URL &quot;/blog&quot; instead --&gt;</span>
    <span class="nt">&lt;import</span> <span class="na">resource=</span><span class="s">&quot;../../src/Controller/&quot;</span> <span class="na">type=</span><span class="s">&quot;annotation&quot;</span>
            <span class="na">prefix=</span><span class="s">&quot;/blog&quot;</span>
            <span class="na">trailing-slash-on-root=</span><span class="s">&quot;false&quot;</span><span class="nt">&gt;</span>
            <span class="c">&lt;!-- ... --&gt;</span>
    <span class="nt">&lt;/import&gt;</span>
<span class="nt">&lt;/routes&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/routes/annotations.php</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nx">RoutingConfigurator</span> <span class="nv">$routes</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// use the optional fourth argument of import() to exclude some files</span>
    <span class="c1">// or subdirectories when loading annotations</span>
    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">import</span><span class="p">(</span><span class="s1">&#39;../../src/Controller/&#39;</span><span class="p">,</span> <span class="s1">&#39;annotation&#39;</span><span class="p">)</span>
        <span class="c1">// this is added to the beginning of all imported route URLs</span>
        <span class="o">-&gt;</span><span class="na">prefix</span><span class="p">(</span><span class="s1">&#39;/blog&#39;</span><span class="p">)</span>
        <span class="c1">// An imported route with an empty URL will become &quot;/blog/&quot;</span>
        <span class="c1">// Pass FALSE as the second argument to make that URL &quot;/blog&quot; instead</span>
        <span class="c1">// -&gt;prefix(&#39;/blog&#39;, false)</span>
        <span class="c1">// this is added to the beginning of all imported route names</span>
        <span class="o">-&gt;</span><span class="na">namePrefix</span><span class="p">(</span><span class="s1">&#39;blog_&#39;</span><span class="p">)</span>
        <span class="c1">// these requirements are added to all imported routes</span>
        <span class="o">-&gt;</span><span class="na">requirements</span><span class="p">([</span><span class="s1">&#39;_locale&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;en|es|fr&#39;</span><span class="p">])</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 4.4: </span>The option to exclude some files or subdirectories when loading annotations
was introduced in Symfony 4.4.</p>
</div>
<p>In this example, the route of the <code class="docutils literal notranslate"><span class="pre">index()</span></code> action will be called <code class="docutils literal notranslate"><span class="pre">blog_index</span></code>
and its URL will be <code class="docutils literal notranslate"><span class="pre">/blog/</span></code>. The route of the <code class="docutils literal notranslate"><span class="pre">show()</span></code> action will be called
<code class="docutils literal notranslate"><span class="pre">blog_show</span></code> and its URL will be <code class="docutils literal notranslate"><span class="pre">/blog/{_locale}/posts/{slug}</span></code>. Both routes
will also validate that the <code class="docutils literal notranslate"><span class="pre">_locale</span></code> parameter matches the regular expression
defined in the class annotation.</p>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>Symfony can <a class="reference internal" href="routing/custom_route_loader.xhtml"><span class="doc">import routes from different sources</span></a>
and you can even create your own route loader.</p>
</div>
</div>
<div class="section" id="getting-the-route-name-and-parameters">
<h2>Getting the Route Name and Parameters</h2>
<p>The <code class="docutils literal notranslate"><span class="pre">Request</span></code> object created by Symfony stores all the route configuration
(such as the name and parameters) in the “request attributes”. You can get this
information in a controller via the <code class="docutils literal notranslate"><span class="pre">Request</span></code> object:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/BlogController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Request</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Annotation\Route</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">BlogController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @Route(&quot;/blog&quot;, name=&quot;blog_list&quot;)</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">list</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">)</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="nv">$routeName</span> <span class="o">=</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">attributes</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;_route&#39;</span><span class="p">);</span>
        <span class="nv">$routeParameters</span> <span class="o">=</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">attributes</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;_route_params&#39;</span><span class="p">);</span>

        <span class="c1">// use this to get all the available attributes (not only routing ones):</span>
        <span class="nv">$allAttributes</span> <span class="o">=</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">attributes</span><span class="o">-&gt;</span><span class="na">all</span><span class="p">();</span>

        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>You can get this information in services too injecting the <code class="docutils literal notranslate"><span class="pre">request_stack</span></code>
service to <a class="reference internal" href="service_container/request.xhtml"><span class="doc">get the Request object in a service</span></a>.
In templates, use the <a class="reference internal" href="templates.xhtml#twig-app-variable"><span class="std std-ref">Twig global app variable</span></a> to get
the request and its attributes:</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{%</span> <span class="k">set</span> <span class="nv">route_name</span> <span class="o">=</span> <span class="nv">app.request.attributes.get</span><span class="o">(</span><span class="s1">&#39;_route&#39;</span><span class="o">)</span> <span class="cp">%}</span><span class="x"></span>
<span class="cp">{%</span> <span class="k">set</span> <span class="nv">route_parameters</span> <span class="o">=</span> <span class="nv">app.request.attributes.get</span><span class="o">(</span><span class="s1">&#39;_route_params&#39;</span><span class="o">)</span> <span class="cp">%}</span><span class="x"></span>

<span class="c">{# use this to get all the available attributes (not only routing ones) #}</span><span class="x"></span>
<span class="cp">{%</span> <span class="k">set</span> <span class="nv">all_attributes</span> <span class="o">=</span> <span class="nv">app.request.attributes.all</span> <span class="cp">%}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="special-routes">
<h2>Special Routes</h2>
<p>Symfony defines some special controllers to render templates and redirect to
other routes from the route configuration so you don’t have to create a
controller action.</p>
<div class="section" id="rendering-a-template-directly-from-a-route">
<h3>Rendering a Template Directly from a Route</h3>
<p>Read the section about <a class="reference internal" href="templates.xhtml#templates-render-from-route"><span class="std std-ref">rendering a template from a route</span></a>
in the main article about Symfony templates.</p>
</div>
<div class="section" id="redirecting-to-urls-and-routes-directly-from-a-route">
<h3>Redirecting to URLs and Routes Directly from a Route</h3>
<p>Use the <code class="docutils literal notranslate"><span class="pre">RedirectController</span></code> to redirect to other routes and URLs:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/routes.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">doc_shortcut</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">path</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">/doc</span>
    <span class="l l-Scalar l-Scalar-Plain">controller</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">Symfony\Bundle\FrameworkBundle\Controller\RedirectController</span>
    <span class="l l-Scalar l-Scalar-Plain">defaults</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">route</span><span class="p p-Indicator">:</span> <span class="s">&#39;doc_page&#39;</span>
        <span class="c1"># optionally you can define some arguments passed to the route</span>
        <span class="l l-Scalar l-Scalar-Plain">page</span><span class="p p-Indicator">:</span> <span class="s">&#39;index&#39;</span>
        <span class="l l-Scalar l-Scalar-Plain">version</span><span class="p p-Indicator">:</span> <span class="s">&#39;current&#39;</span>
        <span class="c1"># redirections are temporary by default (code 302) but you can make them permanent (code 301)</span>
        <span class="l l-Scalar l-Scalar-Plain">permanent</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">true</span>
        <span class="c1"># add this to keep the original query string parameters when redirecting</span>
        <span class="l l-Scalar l-Scalar-Plain">keepQueryParams</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">true</span>
        <span class="c1"># add this to keep the HTTP method when redirecting. The redirect status changes</span>
        <span class="c1"># * for temporary redirects, it uses the 307 status code instead of 302</span>
        <span class="c1"># * for permanent redirects, it uses the 308 status code instead of 301</span>
        <span class="l l-Scalar l-Scalar-Plain">keepRequestMethod</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">true</span>

<span class="l l-Scalar l-Scalar-Plain">legacy_doc</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">path</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">/legacy/doc</span>
    <span class="l l-Scalar l-Scalar-Plain">controller</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">Symfony\Bundle\FrameworkBundle\Controller\RedirectController</span>
    <span class="l l-Scalar l-Scalar-Plain">defaults</span><span class="p p-Indicator">:</span>
        <span class="c1"># this value can be an absolute path or an absolute URL</span>
        <span class="l l-Scalar l-Scalar-Plain">path</span><span class="p p-Indicator">:</span> <span class="s">&#39;https://legacy.example.com/doc&#39;</span>
        <span class="l l-Scalar l-Scalar-Plain">permanent</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">true</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/routes.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;routes</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/routing&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/routing</span>
<span class="s">        https://symfony.com/schema/routing/routing-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;route</span> <span class="na">id=</span><span class="s">&quot;doc_shortcut&quot;</span> <span class="na">path=</span><span class="s">&quot;/doc&quot;</span>
           <span class="na">controller=</span><span class="s">&quot;Symfony\Bundle\FrameworkBundle\Controller\RedirectController&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;default</span> <span class="na">key=</span><span class="s">&quot;route&quot;</span><span class="nt">&gt;</span>doc_page<span class="nt">&lt;/default&gt;</span>
        <span class="c">&lt;!-- optionally you can define some arguments passed to the route --&gt;</span>
        <span class="nt">&lt;default</span> <span class="na">key=</span><span class="s">&quot;page&quot;</span><span class="nt">&gt;</span>index<span class="nt">&lt;/default&gt;</span>
        <span class="nt">&lt;default</span> <span class="na">key=</span><span class="s">&quot;version&quot;</span><span class="nt">&gt;</span>current<span class="nt">&lt;/default&gt;</span>
        <span class="c">&lt;!-- redirections are temporary by default (code 302) but you can make them permanent (code 301)--&gt;</span>
        <span class="nt">&lt;default</span> <span class="na">key=</span><span class="s">&quot;permanent&quot;</span><span class="nt">&gt;</span>true<span class="nt">&lt;/default&gt;</span>
        <span class="c">&lt;!-- add this to keep the original query string parameters when redirecting --&gt;</span>
        <span class="nt">&lt;default</span> <span class="na">key=</span><span class="s">&quot;keepQueryParams&quot;</span><span class="nt">&gt;</span>true<span class="nt">&lt;/default&gt;</span>
        <span class="c">&lt;!-- add this to keep the HTTP method when redirecting. The redirect status changes:</span>
<span class="c">             * for temporary redirects, it uses the 307 status code instead of 302</span>
<span class="c">             * for permanent redirects, it uses the 308 status code instead of 301 --&gt;</span>
        <span class="nt">&lt;default</span> <span class="na">key=</span><span class="s">&quot;keepRequestMethod&quot;</span><span class="nt">&gt;</span>true<span class="nt">&lt;/default&gt;</span>
    <span class="nt">&lt;/route&gt;</span>

    <span class="nt">&lt;route</span> <span class="na">id=</span><span class="s">&quot;legacy_doc&quot;</span> <span class="na">path=</span><span class="s">&quot;/legacy/doc&quot;</span>
           <span class="na">controller=</span><span class="s">&quot;Symfony\Bundle\FrameworkBundle\Controller\RedirectController&quot;</span><span class="nt">&gt;</span>
        <span class="c">&lt;!-- this value can be an absolute path or an absolute URL --&gt;</span>
        <span class="nt">&lt;default</span> <span class="na">key=</span><span class="s">&quot;path&quot;</span><span class="nt">&gt;</span>https://legacy.example.com/doc<span class="nt">&lt;/default&gt;</span>
        <span class="c">&lt;!-- redirections are temporary by default (code 302) but you can make them permanent (code 301)--&gt;</span>
        <span class="nt">&lt;default</span> <span class="na">key=</span><span class="s">&quot;permanent&quot;</span><span class="nt">&gt;</span>true<span class="nt">&lt;/default&gt;</span>
    <span class="nt">&lt;/route&gt;</span>
<span class="nt">&lt;/routes&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/routes.php</span>
<span class="k">use</span> <span class="nx">App\Controller\DefaultController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\RedirectController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nx">RoutingConfigurator</span> <span class="nv">$routes</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;doc_shortcut&#39;</span><span class="p">,</span> <span class="s1">&#39;/doc&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">controller</span><span class="p">(</span><span class="nx">RedirectController</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
         <span class="o">-&gt;</span><span class="na">defaults</span><span class="p">([</span>
            <span class="s1">&#39;route&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;doc_page&#39;</span><span class="p">,</span>
            <span class="c1">// optionally you can define some arguments passed to the route</span>
            <span class="s1">&#39;page&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;index&#39;</span><span class="p">,</span>
            <span class="s1">&#39;version&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;current&#39;</span><span class="p">,</span>
            <span class="c1">// redirections are temporary by default (code 302) but you can make them permanent (code 301)</span>
            <span class="s1">&#39;permanent&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span>
            <span class="c1">// add this to keep the original query string parameters when redirecting</span>
            <span class="s1">&#39;keepQueryParams&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span>
            <span class="c1">// add this to keep the HTTP method when redirecting. The redirect status changes:</span>
            <span class="c1">// * for temporary redirects, it uses the 307 status code instead of 302</span>
            <span class="c1">// * for permanent redirects, it uses the 308 status code instead of 301</span>
            <span class="s1">&#39;keepRequestMethod&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span>
        <span class="p">])</span>
    <span class="p">;</span>

    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;legacy_doc&#39;</span><span class="p">,</span> <span class="s1">&#39;/legacy/doc&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">controller</span><span class="p">(</span><span class="nx">RedirectController</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
         <span class="o">-&gt;</span><span class="na">defaults</span><span class="p">([</span>
            <span class="c1">// this value can be an absolute path or an absolute URL</span>
            <span class="s1">&#39;path&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;https://legacy.example.com/doc&#39;</span><span class="p">,</span>
            <span class="c1">// redirections are temporary by default (code 302) but you can make them permanent (code 301)</span>
            <span class="s1">&#39;permanent&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span>
        <span class="p">])</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Symfony also provides some utilities to
<a class="reference internal" href="controller.xhtml#controller-redirect"><span class="std std-ref">redirect inside controllers</span></a></p>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 4.4: </span>In Symfony versions prior to 4.4, you needed to define the specific
<code class="docutils literal notranslate"><span class="pre">RedirectController</span></code> method to use (either <code class="docutils literal notranslate"><span class="pre">redirectAction</span></code> or
<code class="docutils literal notranslate"><span class="pre">urlRedirectAction</span></code>). Starting from Symfony 4.4 this is no longer needed
because Symfony detects if the redirection is to a route or an URL.</p>
</div>
<div class="section" id="redirecting-urls-with-trailing-slashes">
<span id="routing-trailing-slash-redirection"></span><h4>Redirecting URLs with Trailing Slashes</h4>
<p>Historically, URLs have followed the UNIX convention of adding trailing slashes
for directories (e.g. <code class="docutils literal notranslate"><span class="pre">https://example.com/foo/</span></code>) and removing them to refer
to files (<code class="docutils literal notranslate"><span class="pre">https://example.com/foo</span></code>). Although serving different contents for
both URLs is OK, nowadays it’s common to treat both URLs as the same URL and
redirect between them.</p>
<p>Symfony follows this logic to redirect between URLs with and without trailing
slashes (but only for <code class="docutils literal notranslate"><span class="pre">GET</span></code> and <code class="docutils literal notranslate"><span class="pre">HEAD</span></code> requests):</p>
<table class="docutils">
<colgroup>
<col style="width: 11%" />
<col style="width: 43%" />
<col style="width: 46%" />
</colgroup>
<thead>
<tr class="row-odd"><th class="head"><p>Route URL</p></th>
<th class="head"><p>If the requested URL is <code class="docutils literal notranslate"><span class="pre">/foo</span></code></p></th>
<th class="head"><p>If the requested URL is <code class="docutils literal notranslate"><span class="pre">/foo/</span></code></p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">/foo</span></code></p></td>
<td><p>It matches (<code class="docutils literal notranslate"><span class="pre">200</span></code> status response)</p></td>
<td><p>It makes a <code class="docutils literal notranslate"><span class="pre">301</span></code> redirect to <code class="docutils literal notranslate"><span class="pre">/foo</span></code></p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">/foo/</span></code></p></td>
<td><p>It makes a <code class="docutils literal notranslate"><span class="pre">301</span></code> redirect to <code class="docutils literal notranslate"><span class="pre">/foo/</span></code></p></td>
<td><p>It matches (<code class="docutils literal notranslate"><span class="pre">200</span></code> status response)</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="section" id="sub-domain-routing">
<h2>Sub-Domain Routing</h2>
<p>Routes can configure a <code class="docutils literal notranslate"><span class="pre">host</span></code> option to require that the HTTP host of the
incoming requests matches some specific value. In the following example, both
routes match the same path (<code class="docutils literal notranslate"><span class="pre">/</span></code>) but one of them only responds to a specific
host name:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Annotations</em><div class="highlight-php-annotations notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/MainController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Annotation\Route</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">MainController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @Route(&quot;/&quot;, name=&quot;mobile_homepage&quot;, host=&quot;m.example.com&quot;)</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">mobileHomepage</span><span class="p">()</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>

    <span class="sd">/**</span>
<span class="sd">     * @Route(&quot;/&quot;, name=&quot;homepage&quot;)</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">homepage</span><span class="p">()</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/routes.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">mobile_homepage</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">path</span><span class="p p-Indicator">:</span>       <span class="l l-Scalar l-Scalar-Plain">/</span>
    <span class="l l-Scalar l-Scalar-Plain">host</span><span class="p p-Indicator">:</span>       <span class="l l-Scalar l-Scalar-Plain">m.example.com</span>
    <span class="l l-Scalar l-Scalar-Plain">controller</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">App\Controller\MainController::mobileHomepage</span>

<span class="l l-Scalar l-Scalar-Plain">homepage</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">path</span><span class="p p-Indicator">:</span>       <span class="l l-Scalar l-Scalar-Plain">/</span>
    <span class="l l-Scalar l-Scalar-Plain">controller</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">App\Controller\MainController::homepage</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/routes.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;routes</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/routing&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/routing</span>
<span class="s">        https://symfony.com/schema/routing/routing-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;route</span> <span class="na">id=</span><span class="s">&quot;mobile_homepage&quot;</span>
        <span class="na">path=</span><span class="s">&quot;/&quot;</span>
        <span class="na">host=</span><span class="s">&quot;m.example.com&quot;</span>
        <span class="na">controller=</span><span class="s">&quot;App\Controller\MainController::mobileHomepage&quot;</span><span class="nt">/&gt;</span>

    <span class="nt">&lt;route</span> <span class="na">id=</span><span class="s">&quot;homepage&quot;</span> <span class="na">path=</span><span class="s">&quot;/&quot;</span> <span class="na">controller=</span><span class="s">&quot;App\Controller\MainController::homepage&quot;</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/routes&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/routes.php</span>
<span class="k">use</span> <span class="nx">App\Controller\MainController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nx">RoutingConfigurator</span> <span class="nv">$routes</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;mobile_homepage&#39;</span><span class="p">,</span> <span class="s1">&#39;/&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">controller</span><span class="p">([</span><span class="nx">MainController</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="s1">&#39;mobileHomepage&#39;</span><span class="p">])</span>
        <span class="o">-&gt;</span><span class="na">host</span><span class="p">(</span><span class="s1">&#39;m.example.com&#39;</span><span class="p">)</span>
    <span class="p">;</span>
    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;homepage&#39;</span><span class="p">,</span> <span class="s1">&#39;/&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">controller</span><span class="p">([</span><span class="nx">MainController</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="s1">&#39;homepage&#39;</span><span class="p">])</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>The value of the <code class="docutils literal notranslate"><span class="pre">host</span></code> option can include parameters (which is useful in
multi-tenant applications) and these parameters can be validated too with
<code class="docutils literal notranslate"><span class="pre">requirements</span></code>:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Annotations</em><div class="highlight-php-annotations notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/MainController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Annotation\Route</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">MainController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @Route(</span>
<span class="sd">     *     &quot;/&quot;,</span>
<span class="sd">     *     name=&quot;mobile_homepage&quot;,</span>
<span class="sd">     *     host=&quot;{subdomain}.example.com&quot;,</span>
<span class="sd">     *     defaults={&quot;subdomain&quot;=&quot;m&quot;},</span>
<span class="sd">     *     requirements={&quot;subdomain&quot;=&quot;m|mobile&quot;}</span>
<span class="sd">     * )</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">mobileHomepage</span><span class="p">()</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>

    <span class="sd">/**</span>
<span class="sd">     * @Route(&quot;/&quot;, name=&quot;homepage&quot;)</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">homepage</span><span class="p">()</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/routes.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">mobile_homepage</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">path</span><span class="p p-Indicator">:</span>       <span class="l l-Scalar l-Scalar-Plain">/</span>
    <span class="l l-Scalar l-Scalar-Plain">host</span><span class="p p-Indicator">:</span>       <span class="s">&quot;{subdomain}.example.com&quot;</span>
    <span class="l l-Scalar l-Scalar-Plain">controller</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">App\Controller\MainController::mobileHomepage</span>
    <span class="l l-Scalar l-Scalar-Plain">defaults</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">subdomain</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">m</span>
    <span class="l l-Scalar l-Scalar-Plain">requirements</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">subdomain</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">m|mobile</span>

<span class="l l-Scalar l-Scalar-Plain">homepage</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">path</span><span class="p p-Indicator">:</span>       <span class="l l-Scalar l-Scalar-Plain">/</span>
    <span class="l l-Scalar l-Scalar-Plain">controller</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">App\Controller\MainController::homepage</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/routes.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;routes</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/routing&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/routing</span>
<span class="s">        https://symfony.com/schema/routing/routing-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;route</span> <span class="na">id=</span><span class="s">&quot;mobile_homepage&quot;</span>
        <span class="na">path=</span><span class="s">&quot;/&quot;</span>
        <span class="na">host=</span><span class="s">&quot;{subdomain}.example.com&quot;</span>
        <span class="na">controller=</span><span class="s">&quot;App\Controller\MainController::mobileHomepage&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;default</span> <span class="na">key=</span><span class="s">&quot;subdomain&quot;</span><span class="nt">&gt;</span>m<span class="nt">&lt;/default&gt;</span>
        <span class="nt">&lt;requirement</span> <span class="na">key=</span><span class="s">&quot;subdomain&quot;</span><span class="nt">&gt;</span>m|mobile<span class="nt">&lt;/requirement&gt;</span>
    <span class="nt">&lt;/route&gt;</span>

    <span class="nt">&lt;route</span> <span class="na">id=</span><span class="s">&quot;homepage&quot;</span> <span class="na">path=</span><span class="s">&quot;/&quot;</span> <span class="na">controller=</span><span class="s">&quot;App\Controller\MainController::homepage&quot;</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/routes&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/routes.php</span>
<span class="k">use</span> <span class="nx">App\Controller\MainController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nx">RoutingConfigurator</span> <span class="nv">$routes</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;mobile_homepage&#39;</span><span class="p">,</span> <span class="s1">&#39;/&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">controller</span><span class="p">([</span><span class="nx">MainController</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="s1">&#39;mobileHomepage&#39;</span><span class="p">])</span>
        <span class="o">-&gt;</span><span class="na">host</span><span class="p">(</span><span class="s1">&#39;{subdomain}.example.com&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">defaults</span><span class="p">([</span>
            <span class="s1">&#39;subdomain&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;m&#39;</span><span class="p">,</span>
        <span class="p">])</span>
        <span class="o">-&gt;</span><span class="na">requirements</span><span class="p">([</span>
            <span class="s1">&#39;subdomain&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;m|mobile&#39;</span><span class="p">,</span>
        <span class="p">])</span>
    <span class="p">;</span>
    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;homepage&#39;</span><span class="p">,</span> <span class="s1">&#39;/&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">controller</span><span class="p">([</span><span class="nx">MainController</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="s1">&#39;homepage&#39;</span><span class="p">])</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>In the above example, the <code class="docutils literal notranslate"><span class="pre">subdomain</span></code> parameter defines a default value because
otherwise you need to include a domain value each time you generate a URL using
these routes.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>You can also set the <code class="docutils literal notranslate"><span class="pre">host</span></code> option when <a class="reference internal" href="#routing-route-groups"><span class="std std-ref">importing routes</span></a>
to make all of them require that host name.</p>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>When using sub-domain routing, you must set the <code class="docutils literal notranslate"><span class="pre">Host</span></code> HTTP headers in
<a class="reference internal" href="testing.xhtml"><span class="doc">functional tests</span></a> or routes won’t match:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$crawler</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span>
    <span class="s1">&#39;GET&#39;</span><span class="p">,</span>
    <span class="s1">&#39;/&#39;</span><span class="p">,</span>
    <span class="p">[],</span>
    <span class="p">[],</span>
    <span class="p">[</span><span class="s1">&#39;HTTP_HOST&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;m.example.com&#39;</span><span class="p">]</span>
    <span class="c1">// or get the value from some container parameter:</span>
    <span class="c1">// [&#39;HTTP_HOST&#39; =&gt; &#39;m.&#39; . $client-&gt;getContainer()-&gt;getParameter(&#39;domain&#39;)]</span>
<span class="p">);</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="localized-routes-i18n">
<span id="i18n-routing"></span><h2>Localized Routes (i18n)</h2>
<div class="versionadded">
<p><span class="versionmodified">New in version 4.1: </span>The i18n routing was introduced in Symfony 4.1.</p>
</div>
<p>If your application is translated into multiple languages, each route can define
a different URL per each <a class="reference internal" href="translation/locale.xhtml"><span class="doc">translation locale</span></a>. This
avoids the need for duplicating routes, which also reduces the potential bugs:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Annotations</em><div class="highlight-php-annotations notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/CompanyController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Annotation\Route</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">CompanyController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @Route({</span>
<span class="sd">     *     &quot;en&quot;: &quot;/about-us&quot;,</span>
<span class="sd">     *     &quot;nl&quot;: &quot;/over-ons&quot;</span>
<span class="sd">     * }, name=&quot;about_us&quot;)</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">about</span><span class="p">()</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/routes.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">about_us</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">path</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">en</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">/about-us</span>
        <span class="l l-Scalar l-Scalar-Plain">nl</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">/over-ons</span>
    <span class="l l-Scalar l-Scalar-Plain">controller</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">App\Controller\CompanyController::about</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/routes.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;routes</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/routing&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/routing</span>
<span class="s">        https://symfony.com/schema/routing/routing-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;route</span> <span class="na">id=</span><span class="s">&quot;about_us&quot;</span> <span class="na">controller=</span><span class="s">&quot;App\Controller\CompanyController::about&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;path</span> <span class="na">locale=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>/about-us<span class="nt">&lt;/path&gt;</span>
        <span class="nt">&lt;path</span> <span class="na">locale=</span><span class="s">&quot;nl&quot;</span><span class="nt">&gt;</span>/over-ons<span class="nt">&lt;/path&gt;</span>
    <span class="nt">&lt;/route&gt;</span>
<span class="nt">&lt;/routes&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/routes.php</span>
<span class="k">use</span> <span class="nx">App\Controller\CompanyController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nx">RoutingConfigurator</span> <span class="nv">$routes</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;about_us&#39;</span><span class="p">,</span> <span class="p">[</span>
        <span class="s1">&#39;en&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;/about-us&#39;</span><span class="p">,</span>
        <span class="s1">&#39;nl&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;/over-ons&#39;</span><span class="p">,</span>
    <span class="p">])</span>
        <span class="o">-&gt;</span><span class="na">controller</span><span class="p">([</span><span class="nx">CompanyController</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="s1">&#39;about&#39;</span><span class="p">])</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>When a localized route is matched, Symfony uses the same locale automatically
during the entire request.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>When the application uses full “language + territory” locales (e.g. <code class="docutils literal notranslate"><span class="pre">fr_FR</span></code>,
<code class="docutils literal notranslate"><span class="pre">fr_BE</span></code>), if the URLs are the same in all related locales, routes can use
only the language part (e.g. <code class="docutils literal notranslate"><span class="pre">fr</span></code>) to avoid repeating the same URLs.</p>
</div>
<p>A common requirement for internationalized applications is to prefix all routes
with a locale. This can be done by defining a different prefix for each locale
(and setting an empty prefix for your default locale if you prefer it):</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/routes/annotations.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">controllers</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">resource</span><span class="p p-Indicator">:</span> <span class="s">&#39;../../src/Controller/&#39;</span>
    <span class="l l-Scalar l-Scalar-Plain">type</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">annotation</span>
    <span class="l l-Scalar l-Scalar-Plain">prefix</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">en</span><span class="p p-Indicator">:</span> <span class="s">&#39;&#39;</span> <span class="c1"># don&#39;t prefix URLs for English, the default locale</span>
        <span class="l l-Scalar l-Scalar-Plain">nl</span><span class="p p-Indicator">:</span> <span class="s">&#39;/nl&#39;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/routes/annotations.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;routes</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/routing&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/routing</span>
<span class="s">        https://symfony.com/schema/routing/routing-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;import</span> <span class="na">resource=</span><span class="s">&quot;../../src/Controller/&quot;</span> <span class="na">type=</span><span class="s">&quot;annotation&quot;</span><span class="nt">&gt;</span>
        <span class="c">&lt;!-- don&#39;t prefix URLs for English, the default locale --&gt;</span>
        <span class="nt">&lt;prefix</span> <span class="na">locale=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;&lt;/prefix&gt;</span>
        <span class="nt">&lt;prefix</span> <span class="na">locale=</span><span class="s">&quot;nl&quot;</span><span class="nt">&gt;</span>/nl<span class="nt">&lt;/prefix&gt;</span>
    <span class="nt">&lt;/import&gt;</span>
<span class="nt">&lt;/routes&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/routes/annotations.php</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nx">RoutingConfigurator</span> <span class="nv">$routes</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">import</span><span class="p">(</span><span class="s1">&#39;../../src/Controller/&#39;</span><span class="p">,</span> <span class="s1">&#39;annotation&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">prefix</span><span class="p">([</span>
            <span class="c1">// don&#39;t prefix URLs for English, the default locale</span>
            <span class="s1">&#39;en&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
            <span class="s1">&#39;nl&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;/nl&#39;</span>
        <span class="p">])</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
<div class="section" id="generating-urls">
<span id="routing-generating-urls"></span><h2>Generating URLs</h2>
<p>Routing systems are bidirectional: 1) they associate URLs with controllers (as
explained in the previous sections); 2) they generate URLs for a given route.
Generating URLs from routes allows you to not write the <code class="docutils literal notranslate"><span class="pre">&lt;a</span> <span class="pre">href=&quot;...&quot;&gt;</span></code>
values manually in your HTML templates. Also, if the URL of some route changes,
you only have to update the route configuration and all links will be updated.</p>
<p>To generate a URL, you need to specify the name of the route (e.g.
<code class="docutils literal notranslate"><span class="pre">blog_show</span></code>) and the values of the parameters defined by the route (e.g.
<code class="docutils literal notranslate"><span class="pre">slug</span> <span class="pre">=</span> <span class="pre">my-blog-post</span></code>).</p>
<p>For that reason each route has an internal name that must be unique in the
application. If you don’t set the route name explicitly with the <code class="docutils literal notranslate"><span class="pre">name</span></code>
option, Symfony generates an automatic name based on the controller and action.</p>
<div class="section" id="generating-urls-in-controllers">
<h3>Generating URLs in Controllers</h3>
<p>If your controller extends from the <a class="reference internal" href="controller.xhtml#the-base-controller-class-services"><span class="std std-ref">AbstractController</span></a>,
use the <code class="docutils literal notranslate"><span class="pre">generateUrl()</span></code> helper:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/BlogController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Annotation\Route</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Generator\UrlGeneratorInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">BlogController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @Route(&quot;/blog&quot;, name=&quot;blog_list&quot;)</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">list</span><span class="p">()</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="c1">// generate a URL with no route arguments</span>
        <span class="nv">$signUpPage</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">generateUrl</span><span class="p">(</span><span class="s1">&#39;sign_up&#39;</span><span class="p">);</span>

        <span class="c1">// generate a URL with route arguments</span>
        <span class="nv">$userProfilePage</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">generateUrl</span><span class="p">(</span><span class="s1">&#39;user_profile&#39;</span><span class="p">,</span> <span class="p">[</span>
            <span class="s1">&#39;username&#39;</span> <span class="o">=&gt;</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="na">getUsername</span><span class="p">(),</span>
        <span class="p">]);</span>

        <span class="c1">// generated URLs are &quot;absolute paths&quot; by default. Pass a third optional</span>
        <span class="c1">// argument to generate different URLs (e.g. an &quot;absolute URL&quot;)</span>
        <span class="nv">$signUpPage</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">generateUrl</span><span class="p">(</span><span class="s1">&#39;sign_up&#39;</span><span class="p">,</span> <span class="p">[],</span> <span class="nx">UrlGeneratorInterface</span><span class="o">::</span><span class="na">ABSOLUTE_URL</span><span class="p">);</span>

        <span class="c1">// when a route is localized, Symfony uses by default the current request locale</span>
        <span class="c1">// pass a different &#39;_locale&#39; value if you want to set the locale explicitly</span>
        <span class="nv">$signUpPageInDutch</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">generateUrl</span><span class="p">(</span><span class="s1">&#39;sign_up&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;_locale&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;nl&#39;</span><span class="p">]);</span>

        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If you pass to the <code class="docutils literal notranslate"><span class="pre">generateUrl()</span></code> method some parameters that are not
part of the route definition, they are included in the generated URL as a
query string::</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">generateUrl</span><span class="p">(</span><span class="s1">&#39;blog&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;page&#39;</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;category&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Symfony&#39;</span><span class="p">]);</span>
<span class="c1">// the &#39;blog&#39; route only defines the &#39;page&#39; parameter; the generated URL is:</span>
<span class="c1">// /blog/2?category=Symfony</span>
</pre></div>
</div>
</div>
<p>If your controller does not extend from <code class="docutils literal notranslate"><span class="pre">AbstractController</span></code>, you’ll need to
<a class="reference internal" href="controller.xhtml#controller-accessing-services"><span class="std std-ref">fetch services in your controller</span></a> and
follow the instructions of the next section.</p>
</div>
<div class="section" id="generating-urls-in-services">
<span id="routing-generating-urls-in-services"></span><h3>Generating URLs in Services</h3>
<p>Inject the <code class="docutils literal notranslate"><span class="pre">router</span></code> Symfony service into your own services and use its
<code class="docutils literal notranslate"><span class="pre">generate()</span></code> method. When using <a class="reference internal" href="service_container/autowiring.xhtml"><span class="doc">service autowiring</span></a>
you only need to add an argument in the service constructor and type-hint it with
the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Routing/Generator/UrlGeneratorInterface.php" title="Symfony\Component\Routing\Generator\UrlGeneratorInterface"><span class="pre">UrlGeneratorInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Routing/Generator/UrlGeneratorInterface.php]</span></span></code> class:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Service/SomeService.php</span>
<span class="k">namespace</span> <span class="nx">App\Service</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Generator\UrlGeneratorInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">SomeService</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$router</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nx">UrlGeneratorInterface</span> <span class="nv">$router</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">router</span> <span class="o">=</span> <span class="nv">$router</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">someMethod</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>

        <span class="c1">// generate a URL with no route arguments</span>
        <span class="nv">$signUpPage</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">router</span><span class="o">-&gt;</span><span class="na">generate</span><span class="p">(</span><span class="s1">&#39;sign_up&#39;</span><span class="p">);</span>

        <span class="c1">// generate a URL with route arguments</span>
        <span class="nv">$userProfilePage</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">router</span><span class="o">-&gt;</span><span class="na">generate</span><span class="p">(</span><span class="s1">&#39;user_profile&#39;</span><span class="p">,</span> <span class="p">[</span>
            <span class="s1">&#39;username&#39;</span> <span class="o">=&gt;</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="na">getUsername</span><span class="p">(),</span>
        <span class="p">]);</span>

        <span class="c1">// generated URLs are &quot;absolute paths&quot; by default. Pass a third optional</span>
        <span class="c1">// argument to generate different URLs (e.g. an &quot;absolute URL&quot;)</span>
        <span class="nv">$signUpPage</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">router</span><span class="o">-&gt;</span><span class="na">generate</span><span class="p">(</span><span class="s1">&#39;sign_up&#39;</span><span class="p">,</span> <span class="p">[],</span> <span class="nx">UrlGeneratorInterface</span><span class="o">::</span><span class="na">ABSOLUTE_URL</span><span class="p">);</span>

        <span class="c1">// when a route is localized, Symfony uses by default the current request locale</span>
        <span class="c1">// pass a different &#39;_locale&#39; value if you want to set the locale explicitly</span>
        <span class="nv">$signUpPageInDutch</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">router</span><span class="o">-&gt;</span><span class="na">generate</span><span class="p">(</span><span class="s1">&#39;sign_up&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;_locale&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;nl&#39;</span><span class="p">]);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="generating-urls-in-templates">
<h3>Generating URLs in Templates</h3>
<p>Read the section about <a class="reference internal" href="templates.xhtml#templates-link-to-pages"><span class="std std-ref">creating links between pages</span></a>
in the main article about Symfony templates.</p>
</div>
<div class="section" id="generating-urls-in-javascript">
<h3>Generating URLs in JavaScript</h3>
<p>If your JavaScript code is included in a Twig template, you can use the
<code class="docutils literal notranslate"><span class="pre">path()</span></code> and <code class="docutils literal notranslate"><span class="pre">url()</span></code> Twig functions to generate the URLs and store them in
JavaScript variables. The <code class="docutils literal notranslate"><span class="pre">escape()</span></code> filter is needed to escape any
non-JavaScript-safe values:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="kr">const</span> <span class="nx">route</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="cp">{{</span> <span class="nv">path</span><span class="o">(</span><span class="s1">&#39;blog_show&#39;</span><span class="o">,</span> <span class="o">{</span><span class="nv">slug</span><span class="o">:</span> <span class="s1">&#39;my-blog-post&#39;</span><span class="o">})|</span><span class="nf">escape</span><span class="o">(</span><span class="s1">&#39;js&#39;</span><span class="o">)</span> <span class="cp">}}</span><span class="s2">&quot;</span><span class="p">;</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</pre></div>
</td></tr></table></div>
<p>If you need to generate URLs dynamically or if you are using pure JavaScript
code, this solution doesn’t work. In those cases, consider using the
<a class="reference external" href="https://github.com/FriendsOfSymfony/FOSJsRoutingBundle">FOSJsRoutingBundle</a><span class="link-target"> [https://github.com/FriendsOfSymfony/FOSJsRoutingBundle]</span>.</p>
</div>
<div class="section" id="generating-urls-in-commands">
<h3>Generating URLs in Commands</h3>
<p>Generating URLs in commands works the same as
<a class="reference internal" href="#routing-generating-urls-in-services"><span class="std std-ref">generating URLs in services</span></a>. The
only difference is that commands are not executed in the HTTP context, so they
don’t have access to HTTP requests. In practice, this means that if you generate
absolute URLs, you’ll get <code class="docutils literal notranslate"><span class="pre">http://localhost/</span></code> as the host name instead of your
real host name.</p>
<p>The solution is to configure the “request context” used by commands when they
generate URLs. This context can be configured globally for all commands:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">parameters</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">router.request_context.host</span><span class="p p-Indicator">:</span> <span class="s">&#39;example.org&#39;</span>
    <span class="l l-Scalar l-Scalar-Plain">router.request_context.base_url</span><span class="p p-Indicator">:</span> <span class="s">&#39;my/path&#39;</span>
    <span class="l l-Scalar l-Scalar-Plain">asset.request_context.base_path</span><span class="p p-Indicator">:</span> <span class="s">&#39;%router.request_context.base_url%&#39;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;parameters&gt;</span>
        <span class="nt">&lt;parameter</span> <span class="na">key=</span><span class="s">&quot;router.request_context.host&quot;</span><span class="nt">&gt;</span>example.org<span class="nt">&lt;/parameter&gt;</span>
        <span class="nt">&lt;parameter</span> <span class="na">key=</span><span class="s">&quot;router.request_context.base_url&quot;</span><span class="nt">&gt;</span>my/path<span class="nt">&lt;/parameter&gt;</span>
        <span class="nt">&lt;parameter</span> <span class="na">key=</span><span class="s">&quot;asset.request_context.base_path&quot;</span><span class="nt">&gt;</span>%router.request_context.base_url%<span class="nt">&lt;/parameter&gt;</span>
    <span class="nt">&lt;/parameters&gt;</span>

<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">setParameter</span><span class="p">(</span><span class="s1">&#39;router.request_context.host&#39;</span><span class="p">,</span> <span class="s1">&#39;example.org&#39;</span><span class="p">);</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">setParameter</span><span class="p">(</span><span class="s1">&#39;router.request_context.base_url&#39;</span><span class="p">,</span> <span class="s1">&#39;my/path&#39;</span><span class="p">);</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">setParameter</span><span class="p">(</span><span class="s1">&#39;asset.request_context.base_path&#39;</span><span class="p">,</span> <span class="nv">$container</span><span class="o">-&gt;</span><span class="na">getParameter</span><span class="p">(</span><span class="s1">&#39;router.request_context.base_url&#39;</span><span class="p">));</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>This information can be configured per command too:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Command/SomeCommand.php</span>
<span class="k">namespace</span> <span class="nx">App\Command</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Console\Command\Command</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Input\InputInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Output\OutputInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Generator\UrlGeneratorInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\RouterInterface</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="k">class</span> <span class="nc">SomeCommand</span> <span class="k">extends</span> <span class="nx">Command</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$router</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nx">RouterInterface</span> <span class="nv">$router</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">parent</span><span class="o">::</span><span class="na">__construct</span><span class="p">();</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">router</span> <span class="o">=</span> <span class="nv">$router</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">protected</span> <span class="k">function</span> <span class="nf">execute</span><span class="p">(</span><span class="nx">InputInterface</span> <span class="nv">$input</span><span class="p">,</span> <span class="nx">OutputInterface</span> <span class="nv">$output</span><span class="p">)</span><span class="o">:</span> <span class="nx">int</span>
    <span class="p">{</span>
        <span class="c1">// these values override any global configuration</span>
        <span class="nv">$context</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">router</span><span class="o">-&gt;</span><span class="na">getContext</span><span class="p">();</span>
        <span class="nv">$context</span><span class="o">-&gt;</span><span class="na">setHost</span><span class="p">(</span><span class="s1">&#39;example.com&#39;</span><span class="p">);</span>
        <span class="nv">$context</span><span class="o">-&gt;</span><span class="na">setBaseUrl</span><span class="p">(</span><span class="s1">&#39;my/path&#39;</span><span class="p">);</span>

        <span class="c1">// generate a URL with no route arguments</span>
        <span class="nv">$signUpPage</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">router</span><span class="o">-&gt;</span><span class="na">generate</span><span class="p">(</span><span class="s1">&#39;sign_up&#39;</span><span class="p">);</span>

        <span class="c1">// generate a URL with route arguments</span>
        <span class="nv">$userProfilePage</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">router</span><span class="o">-&gt;</span><span class="na">generate</span><span class="p">(</span><span class="s1">&#39;user_profile&#39;</span><span class="p">,</span> <span class="p">[</span>
            <span class="s1">&#39;username&#39;</span> <span class="o">=&gt;</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="na">getUsername</span><span class="p">(),</span>
        <span class="p">]);</span>

        <span class="c1">// generated URLs are &quot;absolute paths&quot; by default. Pass a third optional</span>
        <span class="c1">// argument to generate different URLs (e.g. an &quot;absolute URL&quot;)</span>
        <span class="nv">$signUpPage</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">router</span><span class="o">-&gt;</span><span class="na">generate</span><span class="p">(</span><span class="s1">&#39;sign_up&#39;</span><span class="p">,</span> <span class="p">[],</span> <span class="nx">UrlGeneratorInterface</span><span class="o">::</span><span class="na">ABSOLUTE_URL</span><span class="p">);</span>

        <span class="c1">// when a route is localized, Symfony uses by default the current request locale</span>
        <span class="c1">// pass a different &#39;_locale&#39; value if you want to set the locale explicitly</span>
        <span class="nv">$signUpPageInDutch</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">router</span><span class="o">-&gt;</span><span class="na">generate</span><span class="p">(</span><span class="s1">&#39;sign_up&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;_locale&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;nl&#39;</span><span class="p">]);</span>

        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="checking-if-a-route-exists">
<h3>Checking if a Route Exists</h3>
<p>In highly dynamic applications, it may be necessary to check whether a route
exists before using it to generate a URL. In those cases, don’t use the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Routing/Router.php" title="Symfony\Component\Routing\Router::getRouteCollection()"><span class="pre">getRouteCollection()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Routing/Router.php]</span></span></code> method because
that regenerates the routing cache and slows down the application.</p>
<p>Instead, try to generate the URL and catch the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Routing/Exception/RouteNotFoundException.php" title="Symfony\Component\Routing\Exception\RouteNotFoundException"><span class="pre">RouteNotFoundException</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Routing/Exception/RouteNotFoundException.php]</span></span></code> thrown
when the route doesn’t exist:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Routing\Exception\RouteNotFoundException</span><span class="p">;</span>

<span class="c1">// ...</span>

<span class="k">try</span> <span class="p">{</span>
    <span class="nv">$url</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">router</span><span class="o">-&gt;</span><span class="na">generate</span><span class="p">(</span><span class="nv">$routeName</span><span class="p">,</span> <span class="nv">$routeParameters</span><span class="p">);</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">RouteNotFoundException</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// the route is not defined...</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="forcing-https-on-generated-urls">
<span id="routing-force-https"></span><h3>Forcing HTTPS on Generated URLs</h3>
<p>By default, generated URLs use the same HTTP scheme as the current request.
In console commands, where there is no HTTP request, URLs use <code class="docutils literal notranslate"><span class="pre">http</span></code> by
default. You can change this per command (via the router’s <code class="docutils literal notranslate"><span class="pre">getContext()</span></code>
method) or globally with these configuration parameters:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">parameters</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">router.request_context.scheme</span><span class="p p-Indicator">:</span> <span class="s">&#39;https&#39;</span>
    <span class="l l-Scalar l-Scalar-Plain">asset.request_context.secure</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">true</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;parameters&gt;</span>
        <span class="nt">&lt;parameter</span> <span class="na">key=</span><span class="s">&quot;router.request_context.scheme&quot;</span><span class="nt">&gt;</span>https<span class="nt">&lt;/parameter&gt;</span>
        <span class="nt">&lt;parameter</span> <span class="na">key=</span><span class="s">&quot;asset.request_context.secure&quot;</span><span class="nt">&gt;</span>true<span class="nt">&lt;/parameter&gt;</span>
    <span class="nt">&lt;/parameters&gt;</span>

<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">setParameter</span><span class="p">(</span><span class="s1">&#39;router.request_context.scheme&#39;</span><span class="p">,</span> <span class="s1">&#39;https&#39;</span><span class="p">);</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">setParameter</span><span class="p">(</span><span class="s1">&#39;asset.request_context.secure&#39;</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>Outside of console commands, use the <code class="docutils literal notranslate"><span class="pre">schemes</span></code> option to define the scheme of
each route explicitly:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Annotations</em><div class="highlight-php-annotations notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/SecurityController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Annotation\Route</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">SecurityController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @Route(&quot;/login&quot;, name=&quot;login&quot;, schemes={&quot;https&quot;})</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">login</span><span class="p">()</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/routes.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">login</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">path</span><span class="p p-Indicator">:</span>       <span class="l l-Scalar l-Scalar-Plain">/login</span>
    <span class="l l-Scalar l-Scalar-Plain">controller</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">App\Controller\SecurityController::login</span>
    <span class="l l-Scalar l-Scalar-Plain">schemes</span><span class="p p-Indicator">:</span>    <span class="p p-Indicator">[</span><span class="nv">https</span><span class="p p-Indicator">]</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/routes.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>

<span class="nt">&lt;routes</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/routing&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/routing https://symfony.com/schema/routing/routing-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;route</span> <span class="na">id=</span><span class="s">&quot;login&quot;</span> <span class="na">path=</span><span class="s">&quot;/login&quot;</span> <span class="na">schemes=</span><span class="s">&quot;https&quot;</span>
           <span class="na">controller=</span><span class="s">&quot;App\Controller\SecurityController::login&quot;</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/routes&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/routes.php</span>
<span class="k">use</span> <span class="nx">App\Controller\SecurityController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nx">RoutingConfigurator</span> <span class="nv">$routes</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;login&#39;</span><span class="p">,</span> <span class="s1">&#39;/login&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">controller</span><span class="p">([</span><span class="nx">SecurityController</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="s1">&#39;login&#39;</span><span class="p">])</span>
        <span class="o">-&gt;</span><span class="na">schemes</span><span class="p">([</span><span class="s1">&#39;https&#39;</span><span class="p">])</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>The URL generated for the <code class="docutils literal notranslate"><span class="pre">login</span></code> route will always use HTTPS. This means that
when using the <code class="docutils literal notranslate"><span class="pre">path()</span></code> Twig function to generate URLs, you may get an
absolute URL instead of a relative URL if the HTTP scheme of the original
request is different from the scheme used by the route:</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# if the current scheme is HTTPS, generates a relative URL: /login #}</span><span class="x"></span>
<span class="cp">{{</span> <span class="nv">path</span><span class="o">(</span><span class="s1">&#39;login&#39;</span><span class="o">)</span> <span class="cp">}}</span><span class="x"></span>

<span class="c">{# if the current scheme is HTTP, generates an absolute URL to change</span>
<span class="c">   the scheme: https://example.com/login #}</span><span class="x"></span>
<span class="cp">{{</span> <span class="nv">path</span><span class="o">(</span><span class="s1">&#39;login&#39;</span><span class="o">)</span> <span class="cp">}}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
<p>The scheme requirement is also enforced for incoming requests. If you try to
access the <code class="docutils literal notranslate"><span class="pre">/login</span></code> URL with HTTP, you will automatically be redirected to the
same URL, but with the HTTPS scheme.</p>
<p>If you want to force a group of routes to use HTTPS, you can define the default
scheme when importing them. The following example forces HTTPS on all routes
defined as annotations:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/routes/annotations.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">controllers</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">resource</span><span class="p p-Indicator">:</span> <span class="s">&#39;../../src/Controller/&#39;</span>
    <span class="l l-Scalar l-Scalar-Plain">type</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">annotation</span>
    <span class="l l-Scalar l-Scalar-Plain">defaults</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">schemes</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="nv">https</span><span class="p p-Indicator">]</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/routes/annotations.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;routes</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/routing&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/routing</span>
<span class="s">        https://symfony.com/schema/routing/routing-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;import</span> <span class="na">resource=</span><span class="s">&quot;../../src/Controller/&quot;</span> <span class="na">type=</span><span class="s">&quot;annotation&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;default</span> <span class="na">key=</span><span class="s">&quot;schemes&quot;</span><span class="nt">&gt;</span>HTTPS<span class="nt">&lt;/default&gt;</span>
    <span class="nt">&lt;/import&gt;</span>
<span class="nt">&lt;/routes&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/routes/annotations.php</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nx">RoutingConfigurator</span> <span class="nv">$routes</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">import</span><span class="p">(</span><span class="s1">&#39;../../src/Controller/&#39;</span><span class="p">,</span> <span class="s1">&#39;annotation&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">schemes</span><span class="p">([</span><span class="s1">&#39;https&#39;</span><span class="p">])</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The Security component provides
<a class="reference internal" href="security/force_https.xhtml"><span class="doc">another way to enforce HTTP or HTTPS</span></a>
via the <code class="docutils literal notranslate"><span class="pre">requires_channel</span></code> setting.</p>
</div>
</div>
</div>
<div class="section" id="troubleshooting">
<h2>Troubleshooting</h2>
<p>Here are some common errors you might see while working with routing:</p>
<blockquote>
<div><p>Controller “App\Controller\BlogController::show()” requires that you
provide a value for the “$slug” argument.</p>
</div></blockquote>
<p>This happens when your controller method has an argument (e.g. <code class="docutils literal notranslate"><span class="pre">$slug</span></code>):</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">public</span> <span class="k">function</span> <span class="nf">show</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$slug</span><span class="p">)</span><span class="o">:</span> <span class="nx">Response</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>But your route path does <em>not</em> have a <code class="docutils literal notranslate"><span class="pre">{slug}</span></code> parameter (e.g. it is
<code class="docutils literal notranslate"><span class="pre">/blog/show</span></code>). Add a <code class="docutils literal notranslate"><span class="pre">{slug}</span></code> to your route path: <code class="docutils literal notranslate"><span class="pre">/blog/show/{slug}</span></code> or
give the argument a default value (i.e. <code class="docutils literal notranslate"><span class="pre">$slug</span> <span class="pre">=</span> <span class="pre">null</span></code>).</p>
<blockquote>
<div><p>Some mandatory parameters are missing (“slug”) to generate a URL for route
“blog_show”.</p>
</div></blockquote>
<p>This means that you’re trying to generate a URL to the <code class="docutils literal notranslate"><span class="pre">blog_show</span></code> route but
you are <em>not</em> passing a <code class="docutils literal notranslate"><span class="pre">slug</span></code> value (which is required, because it has a
<code class="docutils literal notranslate"><span class="pre">{slug}</span></code> parameter in the route path). To fix this, pass a <code class="docutils literal notranslate"><span class="pre">slug</span></code> value when
generating the route:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">generateUrl</span><span class="p">(</span><span class="s1">&#39;blog_show&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;slug&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;slug-value&#39;</span><span class="p">]);</span>
</pre></div>
</div>
<p>or, in Twig:</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{{</span> <span class="nv">path</span><span class="o">(</span><span class="s1">&#39;blog_show&#39;</span><span class="o">,</span> <span class="o">{</span><span class="nv">slug</span><span class="o">:</span> <span class="s1">&#39;slug-value&#39;</span><span class="o">})</span> <span class="cp">}}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="learn-more-about-routing">
<h2>Learn more about Routing</h2>
<div class="toctree-wrapper compound">
</div>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="routing/custom_route_loader.xhtml">How to Create a custom Route Loader</a></li>
<li class="toctree-l1"><a class="reference internal" href="routing/routing_from_database.xhtml">Looking up Routes from a Database: Symfony CMF DynamicRouter</a></li>
</ul>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>