<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Keep Sensitive Information Secret</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-keep-sensitive-information-secret">
<span id="index-0"></span><h1>How to Keep Sensitive Information Secret</h1>
<p><a class="reference internal" href="../configuration.xhtml#config-env-vars"><span class="std std-ref">Environment variables</span></a> are the best way to store configuration
that depends on where the application is run - for example, some API key that
might be set to one value while developing locally and another value on production.</p>
<p>When these values are <em>sensitive</em> and need to be kept private, you can safely
store them by using Symfony’s secrets management system - sometimes called a
“vault”.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The Secrets system requires the sodium PHP extension that is bundled
with PHP 7.2. If you’re using an earlier PHP version, you can
install the <a class="reference external" href="https://pecl.php.net/package/libsodium">libsodium</a><span class="link-target"> [https://pecl.php.net/package/libsodium]</span> PHP extension or use the
<a class="reference external" href="https://github.com/paragonie/sodium_compat">paragonie/sodium_compat</a><span class="link-target"> [https://github.com/paragonie/sodium_compat]</span> package.</p>
</div>
<div class="section" id="generate-cryptographic-keys">
<span id="secrets-generate-keys"></span><h2>Generate Cryptographic Keys</h2>
<p>In order to encrypt and decrypt <strong>secrets</strong>, Symfony needs <strong>cryptographic keys</strong>.
A pair of keys can be generated by running:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console secrets:generate-keys
</pre></div>
</td></tr></table></div>
<p>This will generate a pair of asymmetric <strong>cryptographic keys</strong>. Each
<a class="reference internal" href="../configuration.xhtml#configuration-environments"><span class="std std-ref">environment</span></a> has its own set of keys. Assuming
you’re coding locally in the <code class="docutils literal notranslate"><span class="pre">dev</span></code> environment, this will create:</p>
<dl class="simple">
<dt><code class="docutils literal notranslate"><span class="pre">config/secrets/dev/dev.encrypt.public.php</span></code></dt>
<dd><p>Used to encrypt/add secrets to the vault. Can be safely committed.</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">config/secrets/dev/dev.decrypt.private.php</span></code></dt>
<dd><p>Used to decrypt/read secrets from the vault. The <code class="docutils literal notranslate"><span class="pre">dev</span></code> decryption key can
be committed (assuming no highly-sensitive secrets are stored in the dev vault)
but the <code class="docutils literal notranslate"><span class="pre">prod</span></code> decryption key should <em>never</em> be committed.</p>
</dd>
</dl>
<p>You can generate a pair of cryptographic keys for the <code class="docutils literal notranslate"><span class="pre">prod</span></code> environment by
running:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console secrets:generate-keys --env<span class="o">=</span>prod
</pre></div>
</td></tr></table></div>
<p>This will generate <code class="docutils literal notranslate"><span class="pre">config/secrets/prod/prod.encrypt.public.php</span></code> and
<code class="docutils literal notranslate"><span class="pre">config/secrets/prod/prod.decrypt.private.php</span></code>.</p>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>The <code class="docutils literal notranslate"><span class="pre">prod.decrypt.private.php</span></code> file is highly sensitive. Your team of developers
and even Continuous Integration services don’t need that key. If the
<strong>decryption key</strong> has been exposed (ex-employee leaving for instance), you
should consider generating a new one by running:
<code class="docutils literal notranslate"><span class="pre">secrets:generate-keys</span> <span class="pre">--rotate</span></code>.</p>
</div>
</div>
<div class="section" id="create-or-update-secrets">
<span id="secrets-set"></span><h2>Create or Update Secrets</h2>
<p>Suppose you want to store your database password as a secret. By using the
<code class="docutils literal notranslate"><span class="pre">secrets:set</span></code> command, you should add this secret to both the <code class="docutils literal notranslate"><span class="pre">dev</span></code> <em>and</em>
<code class="docutils literal notranslate"><span class="pre">prod</span></code> vaults:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># the input is hidden as you type for security reasons</span>

<span class="c1"># set your default development value (can be overridden locally)</span>
<span class="gp">$</span> php bin/console secrets:set DATABASE_PASSWORD

<span class="c1"># set your production value</span>
<span class="gp">$</span> php bin/console secrets:set DATABASE_PASSWORD --env<span class="o">=</span>prod
</pre></div>
</td></tr></table></div>
<p>This will create a new file for the secret in <code class="docutils literal notranslate"><span class="pre">config/secrets/dev</span></code> and another
in <code class="docutils literal notranslate"><span class="pre">config/secrets/prod</span></code>. You can also set the secret in a few other ways:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># provide a file where to read the secret from</span>
<span class="gp">$</span> php bin/console secrets:set DATABASE_PASSWORD ~/Download/password.json

<span class="c1"># or contents passed to STDIN</span>
<span class="gp">$</span> <span class="nb">echo</span> -n <span class="s2">&quot;</span><span class="nv">$DB_PASS</span><span class="s2">&quot;</span> <span class="p">|</span> php bin/console secrets:set DATABASE_PASSWORD -

<span class="c1"># or let Symfony generate a random value for you</span>
<span class="gp">$</span> php bin/console secrets:set REMEMBER_ME --random
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="referencing-secrets-in-configuration-files">
<h2>Referencing Secrets in Configuration Files</h2>
<p>Secret values can be referenced in the same way as
<a class="reference internal" href="../configuration.xhtml#config-env-vars"><span class="std std-ref">environment variables</span></a>. Be careful that you don’t
accidentally define a secret <em>and</em> an environment variable with the same name:
<strong>environment variables override secrets</strong>.</p>
<p>If you stored a <code class="docutils literal notranslate"><span class="pre">DATABASE_PASSWORD</span></code> secret, you can reference it by:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/packages/doctrine.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">doctrine</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">dbal</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">password</span><span class="p p-Indicator">:</span> <span class="s">&#39;%env(DATABASE_PASSWORD)%&#39;</span>
        <span class="c1"># ...</span>
    <span class="c1"># ...</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/packages/doctrine.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xmlns:doctrine=</span><span class="s">&quot;http://symfony.com/schema/dic/doctrine&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd</span>
<span class="s">        http://symfony.com/schema/dic/doctrine</span>
<span class="s">        https://symfony.com/schema/dic/doctrine/doctrine-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;doctrine:config&gt;</span>
        <span class="nt">&lt;doctrine:dbal</span>
            <span class="na">password=</span><span class="s">&quot;%env(DATABASE_PASSWORD)%&quot;</span>
        <span class="nt">/&gt;</span>
    <span class="nt">&lt;/doctrine:config&gt;</span>

<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/packages/doctrine.php</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;doctrine&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;dbal&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;password&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;%env(DATABASE_PASSWORD)%&#39;</span><span class="p">,</span>
    <span class="p">]</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>The actual value will be resolved at runtime: container compilation and cache
warmup don’t need the <strong>decryption key</strong>.</p>
</div>
<div class="section" id="list-existing-secrets">
<h2>List Existing Secrets</h2>
<p>Everybody is allowed to list the secrets names with the command
<code class="docutils literal notranslate"><span class="pre">secrets:list</span></code>. If you have the <strong>decryption key</strong> you can also reveal the
secrets’ values by passing the <code class="docutils literal notranslate"><span class="pre">--reveal</span></code> option:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console secrets:list --reveal

<span class="go"> ------------------- ------------ -------------</span>
<span class="go">  Name                Value        Local Value</span>
<span class="go"> ------------------- ------------ -------------</span>
<span class="go">  DATABASE_PASSWORD   &quot;my secret&quot;</span>
<span class="go"> ------------------- ------------ -------------</span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="remove-secrets">
<h2>Remove Secrets</h2>
<p>Symfony provides a convenient command to remove a Secret:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console secrets:remove DATABASE_PASSWORD
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="local-secrets-overriding-secrets-locally">
<h2>Local secrets: Overriding Secrets Locally</h2>
<p>The <code class="docutils literal notranslate"><span class="pre">dev</span></code> environment secrets should contain nice default values for development.
But sometimes a developer <em>still</em> needs to override a secret value locally when
developing.</p>
<p>Most of the <code class="docutils literal notranslate"><span class="pre">secrets</span></code> commands - including <code class="docutils literal notranslate"><span class="pre">secrets:set</span></code> - have a <code class="docutils literal notranslate"><span class="pre">--local</span></code>
option that stores the “secret” in the <code class="docutils literal notranslate"><span class="pre">.env.{env}.local</span></code> file as a standard
environment variable. To override the <code class="docutils literal notranslate"><span class="pre">DATABASE_PASSWORD</span></code> secret locally, run:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console secrets:set DATABASE_PASSWORD --local
</pre></div>
</td></tr></table></div>
<p>If you entered <code class="docutils literal notranslate"><span class="pre">root</span></code>, you will now see this in your <code class="docutils literal notranslate"><span class="pre">.env.dev.local</span></code> file:</p>
<div class="highlight-bash notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="nv">DATABASE_PASSWORD</span><span class="o">=</span>root
</pre></div>
</td></tr></table></div>
<p>This will <em>override</em> the <code class="docutils literal notranslate"><span class="pre">DATABASE_PASSWORD</span></code> secret because environment variables
always take precedence over secrets.</p>
<p>Listing the secrets will now also display the local variable:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console secrets:list --reveal
<span class="go"> ------------------- ------------- -------------</span>
<span class="go">  Name                Value         Local Value</span>
<span class="go"> ------------------- ------------- -------------</span>
<span class="go">  DATABASE_PASSWORD   &quot;dev value&quot;   &quot;root&quot;</span>
<span class="go"> ------------------- ------------- -------------</span>
</pre></div>
</td></tr></table></div>
<p>Symfony also provides the <code class="docutils literal notranslate"><span class="pre">secrets:decrypt-to-local</span></code> command to decrypts
all secrets and stores them in the local vault and <code class="docutils literal notranslate"><span class="pre">secrets:encrypt-from-local</span></code>
to encrypt all local secrets to the vault.</p>
</div>
<div class="section" id="secrets-in-the-test-environment">
<h2>Secrets in the test Environment</h2>
<p>If you add a secret in the <code class="docutils literal notranslate"><span class="pre">dev</span></code> and <code class="docutils literal notranslate"><span class="pre">prod</span></code> environments, it will be missing
from the <code class="docutils literal notranslate"><span class="pre">test</span></code> environment. You <em>could</em> create a “vault” for the <code class="docutils literal notranslate"><span class="pre">test</span></code>
environment and define the secrets there. But an easier way is to set the test
values via the <code class="docutils literal notranslate"><span class="pre">.env.test</span></code> file:</p>
<div class="highlight-bash notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># .env.test</span>
<span class="nv">DATABASE_PASSWORD</span><span class="o">=</span><span class="s2">&quot;testing&quot;</span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="deploy-secrets-to-production">
<h2>Deploy Secrets to Production</h2>
<p>Due to the fact that decryption keys should never be committed, you will need to
manually store this file somewhere and deploy it. There are 2 ways to do that:</p>
<ol class="arabic simple">
<li><p>Uploading the file:</p></li>
</ol>
<p>The first option is to copy the <strong>production decryption key</strong> -
<code class="docutils literal notranslate"><span class="pre">config/secrets/prod/prod.decrypt.private.php</span></code> to your server.</p>
<ol class="arabic simple" start="2">
<li><p>Using an Environment Variable</p></li>
</ol>
<p>The second way is to set the <code class="docutils literal notranslate"><span class="pre">SYMFONY_DECRYPTION_SECRET</span></code> environment variable
to the base64 encoded value of the <strong>production decryption key</strong>. A fancy way to
fetch the value of the key is:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># this command only gets the value of the key; you must also set an env var</span>
<span class="c1"># in your system with this value (e.g. `export SYMFONY_DECRYPTION_SECRET=...`)</span>
<span class="gp">$</span> php -r <span class="s1">&#39;echo base64_encode(require &quot;config/secrets/prod/prod.decrypt.private.php&quot;);&#39;</span>
</pre></div>
</td></tr></table></div>
<p>To improve performance (i.e. avoid decrypting secrets at runtime), you can decrypt
your secrets during deployment to the “local” vault:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console secrets:decrypt-to-local --force --env<span class="o">=</span>prod
</pre></div>
</td></tr></table></div>
<p>This will write all the decrypted secrets into the <code class="docutils literal notranslate"><span class="pre">.env.prod.local</span></code> file.
After doing this, the decryption key does <em>not</em> need to remain on the server(s).</p>
</div>
<div class="section" id="rotating-secrets">
<h2>Rotating Secrets</h2>
<p>The <code class="docutils literal notranslate"><span class="pre">secrets:generate-keys</span></code> command provides a <code class="docutils literal notranslate"><span class="pre">--rotate</span></code> option to
regenerate the <strong>cryptographic keys</strong>. Symfony will decrypt existing secrets with
the old key, generate new <strong>cryptographic keys</strong> and re-encrypt secrets with the
new key. In order to decrypt previous secrets, the developer must have the
<strong>decryption key</strong>.</p>
</div>
<div class="section" id="configuration">
<h2>Configuration</h2>
<p>The secrets system is enabled by default and some of its behavior can be configured:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/packages/framework.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">framework</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">secrets</span><span class="p p-Indicator">:</span>
        <span class="c1">#vault_directory: &#39;%kernel.project_dir%/config/secrets/%kernel.environment%&#39;</span>
        <span class="c1">#local_dotenv_file: &#39;%kernel.project_dir%/.env.%kernel.environment%.local&#39;</span>
        <span class="c1">#decryption_env_var: &#39;base64:default::SYMFONY_DECRYPTION_SECRET&#39;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/packages/framework.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:framework=</span><span class="s">&quot;http://symfony.com/schema/dic/framework&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd</span>
<span class="s">        http://symfony.com/schema/dic/framework https://symfony.com/schema/dic/framework/framework-1.0.xsd&quot;</span>
<span class="nt">&gt;</span>
    <span class="nt">&lt;framework:config</span> <span class="na">secret=</span><span class="s">&quot;%env(APP_SECRET)%&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;framework:secrets</span>
            <span class="na">vault_directory=</span><span class="s">&quot;%kernel.project_dir%/config/secrets/%kernel.environment%&quot;</span>
            <span class="na">local_dotenv_file=</span><span class="s">&quot;%kernel.project_dir%/.env.%kernel.environment%.local&quot;</span>
            <span class="na">decryption_env_var=</span><span class="s">&quot;base64:default::SYMFONY_DECRYPTION_SECRET&quot;</span>
        <span class="nt">/&gt;</span>
    <span class="nt">&lt;/framework:config&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/packages/framework.php</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;framework&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;secrets&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="c1">// &#39;vault_directory&#39; =&gt; &#39;%kernel.project_dir%/config/secrets/%kernel.environment%&#39;,</span>
        <span class="c1">// &#39;local_dotenv_file&#39; =&gt; &#39;%kernel.project_dir%/.env.%kernel.environment%.local&#39;,</span>
        <span class="c1">// &#39;decryption_env_var&#39; =&gt; &#39;base64:default::SYMFONY_DECRYPTION_SECRET&#39;,</span>
    <span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>