<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Create a Custom Validation Constraint</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-create-a-custom-validation-constraint">
<span id="index-0"></span><h1>How to Create a Custom Validation Constraint</h1>
<p>You can create a custom constraint by extending the base constraint class,
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Constraint.php" title="Symfony\Component\Validator\Constraint"><span class="pre">Constraint</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Constraint.php]</span></span></code>. As an example you’re
going to create a basic validator that checks if a string contains only
alphanumeric characters.</p>
<div class="section" id="creating-the-constraint-class">
<h2>Creating the Constraint Class</h2>
<p>First you need to create a Constraint class and extend <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Constraint.php" title="Symfony\Component\Validator\Constraint"><span class="pre">Constraint</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Constraint.php]</span></span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Validator/ContainsAlphanumeric.php</span>
<span class="k">namespace</span> <span class="nx">App\Validator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraint</span><span class="p">;</span>

<span class="sd">/**</span>
<span class="sd"> * @Annotation</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">ContainsAlphanumeric</span> <span class="k">extends</span> <span class="nx">Constraint</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nv">$message</span> <span class="o">=</span> <span class="s1">&#39;The string &quot;{{ string }}&quot; contains an illegal character: it can only contain letters or numbers.&#39;</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The <code class="docutils literal notranslate"><span class="pre">&#64;Annotation</span></code> annotation is necessary for this new constraint in
order to make it available for use in classes via annotations.
Options for your constraint are represented as public properties on the
constraint class.</p>
</div>
</div>
<div class="section" id="creating-the-validator-itself">
<h2>Creating the Validator itself</h2>
<p>As you can see, a constraint class is fairly minimal. The actual validation is
performed by another “constraint validator” class. The constraint validator
class is specified by the constraint’s <code class="docutils literal notranslate"><span class="pre">validatedBy()</span></code> method, which
has this default logic:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// in the base Symfony\Component\Validator\Constraint class</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">validatedBy</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="k">static</span><span class="o">::</span><span class="na">class</span><span class="o">.</span><span class="s1">&#39;Validator&#39;</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
<p>In other words, if you create a custom <code class="docutils literal notranslate"><span class="pre">Constraint</span></code> (e.g. <code class="docutils literal notranslate"><span class="pre">MyConstraint</span></code>),
Symfony will automatically look for another class, <code class="docutils literal notranslate"><span class="pre">MyConstraintValidator</span></code>
when actually performing the validation.</p>
<p>The validator class only has one required method <code class="docutils literal notranslate"><span class="pre">validate()</span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Validator/ContainsAlphanumericValidator.php</span>
<span class="k">namespace</span> <span class="nx">App\Validator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraint</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\ConstraintValidator</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Exception\UnexpectedTypeException</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Exception\UnexpectedValueException</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">ContainsAlphanumericValidator</span> <span class="k">extends</span> <span class="nx">ConstraintValidator</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">validate</span><span class="p">(</span><span class="nv">$value</span><span class="p">,</span> <span class="nx">Constraint</span> <span class="nv">$constraint</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$constraint</span> <span class="nx">instanceof</span> <span class="nx">ContainsAlphanumeric</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nx">UnexpectedTypeException</span><span class="p">(</span><span class="nv">$constraint</span><span class="p">,</span> <span class="nx">ContainsAlphanumeric</span><span class="o">::</span><span class="na">class</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// custom constraints should ignore null and empty values to allow</span>
        <span class="c1">// other constraints (NotBlank, NotNull, etc.) to take care of that</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">null</span> <span class="o">===</span> <span class="nv">$value</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span> <span class="o">===</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">is_string</span><span class="p">(</span><span class="nv">$value</span><span class="p">))</span> <span class="p">{</span>
            <span class="c1">// throw this exception if your validator cannot handle the passed type so that it can be marked as invalid</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nx">UnexpectedValueException</span><span class="p">(</span><span class="nv">$value</span><span class="p">,</span> <span class="s1">&#39;string&#39;</span><span class="p">);</span>

            <span class="c1">// separate multiple types using pipes</span>
            <span class="c1">// throw new UnexpectedValueException($value, &#39;string|int&#39;);</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">&#39;/^[a-zA-Z0-9]+$/&#39;</span><span class="p">,</span> <span class="nv">$value</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">))</span> <span class="p">{</span>
            <span class="c1">// the argument must be a string or an object implementing __toString()</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">context</span><span class="o">-&gt;</span><span class="na">buildViolation</span><span class="p">(</span><span class="nv">$constraint</span><span class="o">-&gt;</span><span class="na">message</span><span class="p">)</span>
                <span class="o">-&gt;</span><span class="na">setParameter</span><span class="p">(</span><span class="s1">&#39;{{ string }}&#39;</span><span class="p">,</span> <span class="nv">$value</span><span class="p">)</span>
                <span class="o">-&gt;</span><span class="na">addViolation</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 4.4: </span>The feature to allow passing an object as the <code class="docutils literal notranslate"><span class="pre">buildViolation()</span></code> argument
was introduced in Symfony 4.4.</p>
</div>
<p>Inside <code class="docutils literal notranslate"><span class="pre">validate</span></code>, you don’t need to return a value. Instead, you add violations
to the validator’s <code class="docutils literal notranslate"><span class="pre">context</span></code> property and a value will be considered valid
if it causes no violations. The <code class="docutils literal notranslate"><span class="pre">buildViolation()</span></code> method takes the error
message as its argument and returns an instance of
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Violation/ConstraintViolationBuilderInterface.php" title="Symfony\Component\Validator\Violation\ConstraintViolationBuilderInterface"><span class="pre">ConstraintViolationBuilderInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Violation/ConstraintViolationBuilderInterface.php]</span></span></code>.
The <code class="docutils literal notranslate"><span class="pre">addViolation()</span></code> method call finally adds the violation to the context.</p>
</div>
<div class="section" id="using-the-new-validator">
<h2>Using the new Validator</h2>
<p>You can use custom validators like the ones provided by Symfony itself:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Annotations</em><div class="highlight-php-annotations notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Entity/AcmeEntity.php</span>
<span class="k">namespace</span> <span class="nx">App\Entity</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Validator</span> <span class="k">as</span> <span class="nx">AcmeAssert</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints</span> <span class="k">as</span> <span class="nx">Assert</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">AcmeEntity</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="sd">/**</span>
<span class="sd">     * @Assert\NotBlank</span>
<span class="sd">     * @AcmeAssert\ContainsAlphanumeric</span>
<span class="sd">     */</span>
    <span class="k">protected</span> <span class="nv">$name</span><span class="p">;</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/validator/validation.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">App\Entity\AcmeEntity</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">properties</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">name</span><span class="p p-Indicator">:</span>
            <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">NotBlank</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">~</span>
            <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">App\Validator\ContainsAlphanumeric</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">~</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/validator/validation.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;constraint-mapping</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/constraint-mapping&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;class</span> <span class="na">name=</span><span class="s">&quot;App\Entity\AcmeEntity&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;constraint</span> <span class="na">name=</span><span class="s">&quot;NotBlank&quot;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;constraint</span> <span class="na">name=</span><span class="s">&quot;App\Validator\ContainsAlphanumeric&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
    <span class="nt">&lt;/class&gt;</span>
<span class="nt">&lt;/constraint-mapping&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Entity/AcmeEntity.php</span>
<span class="k">namespace</span> <span class="nx">App\Entity</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Validator\ContainsAlphanumeric</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints\NotBlank</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Mapping\ClassMetadata</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">AcmeEntity</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nv">$name</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">loadValidatorMetadata</span><span class="p">(</span><span class="nx">ClassMetadata</span> <span class="nv">$metadata</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$metadata</span><span class="o">-&gt;</span><span class="na">addPropertyConstraint</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">NotBlank</span><span class="p">());</span>
        <span class="nv">$metadata</span><span class="o">-&gt;</span><span class="na">addPropertyConstraint</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">ContainsAlphanumeric</span><span class="p">());</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>If your constraint contains options, then they should be public properties
on the custom Constraint class you created earlier. These options can be
configured like options on core Symfony constraints.</p>
<div class="section" id="constraint-validators-with-dependencies">
<h3>Constraint Validators with Dependencies</h3>
<p>If you’re using the <a class="reference internal" href="../service_container.xhtml#service-container-services-load-example"><span class="std std-ref">default services.yaml configuration</span></a>,
then your validator is already registered as a service and <a class="reference internal" href="../service_container/tags.xhtml"><span class="doc">tagged</span></a>
with the necessary <code class="docutils literal notranslate"><span class="pre">validator.constraint_validator</span></code>. This means you can
<a class="reference internal" href="../service_container.xhtml#services-constructor-injection"><span class="std std-ref">inject services or configuration</span></a> like any other service.</p>
</div>
<div class="section" id="class-constraint-validator">
<h3>Class Constraint Validator</h3>
<p>Besides validating a single property, a constraint can have an entire class
as its scope. You only need to add this to the <code class="docutils literal notranslate"><span class="pre">Constraint</span></code> class:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">public</span> <span class="k">function</span> <span class="nf">getTargets</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="nx">self</span><span class="o">::</span><span class="na">CLASS_CONSTRAINT</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
<p>With this, the validator’s <code class="docutils literal notranslate"><span class="pre">validate()</span></code> method gets an object as its first argument:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">ProtocolClassValidator</span> <span class="k">extends</span> <span class="nx">ConstraintValidator</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">validate</span><span class="p">(</span><span class="nv">$protocol</span><span class="p">,</span> <span class="nx">Constraint</span> <span class="nv">$constraint</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$protocol</span><span class="o">-&gt;</span><span class="na">getFoo</span><span class="p">()</span> <span class="o">!=</span> <span class="nv">$protocol</span><span class="o">-&gt;</span><span class="na">getBar</span><span class="p">())</span> <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">context</span><span class="o">-&gt;</span><span class="na">buildViolation</span><span class="p">(</span><span class="nv">$constraint</span><span class="o">-&gt;</span><span class="na">message</span><span class="p">)</span>
                <span class="o">-&gt;</span><span class="na">atPath</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">)</span>
                <span class="o">-&gt;</span><span class="na">addViolation</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The <code class="docutils literal notranslate"><span class="pre">atPath()</span></code> method defines the property which the validation error is
associated to. Use any <a class="reference internal" href="../components/property_access.xhtml"><span class="doc">valid PropertyAccess syntax</span></a>
to define that property.</p>
</div>
<p>A class constraint validator is applied to the class itself, and
not to the property:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Annotations</em><div class="highlight-php-annotations notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="sd">/**</span>
<span class="sd"> * @AcmeAssert\ProtocolClass</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">AcmeEntity</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/validator/validation.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">App\Entity\AcmeEntity</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">constraints</span><span class="p p-Indicator">:</span>
        <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">App\Validator\ProtocolClass</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">~</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/validator/validation.xml --&gt;</span>
<span class="nt">&lt;class</span> <span class="na">name=</span><span class="s">&quot;App\Entity\AcmeEntity&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;constraint</span> <span class="na">name=</span><span class="s">&quot;App\Validator\ProtocolClass&quot;</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/class&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Entity/AcmeEntity.php</span>
<span class="k">namespace</span> <span class="nx">App\Entity</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Validator\ProtocolClass</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Mapping\ClassMetadata</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">AcmeEntity</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">loadValidatorMetadata</span><span class="p">(</span><span class="nx">ClassMetadata</span> <span class="nv">$metadata</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$metadata</span><span class="o">-&gt;</span><span class="na">addConstraint</span><span class="p">(</span><span class="k">new</span> <span class="nx">ProtocolClass</span><span class="p">());</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>