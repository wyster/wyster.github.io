<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Validate Raw Values (Scalar Values and Arrays)</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-validate-raw-values-scalar-values-and-arrays">
<span id="index-0"></span><h1>How to Validate Raw Values (Scalar Values and Arrays)</h1>
<p>Usually you will be validating entire objects. But sometimes, you want
to validate a simple value - like to verify that a string is a valid email
address. From inside a controller, it looks like this:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints</span> <span class="k">as</span> <span class="nx">Assert</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Validator\ValidatorInterface</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">addEmail</span><span class="p">(</span><span class="nv">$email</span><span class="p">,</span> <span class="nx">ValidatorInterface</span> <span class="nv">$validator</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$emailConstraint</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Assert\Email</span><span class="p">();</span>
    <span class="c1">// all constraint &quot;options&quot; can be set this way</span>
    <span class="nv">$emailConstraint</span><span class="o">-&gt;</span><span class="na">message</span> <span class="o">=</span> <span class="s1">&#39;Invalid email address&#39;</span><span class="p">;</span>

    <span class="c1">// use the validator to validate the value</span>
    <span class="nv">$errors</span> <span class="o">=</span> <span class="nv">$validator</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span>
        <span class="nv">$email</span><span class="p">,</span>
        <span class="nv">$emailConstraint</span>
    <span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">===</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$errors</span><span class="p">))</span> <span class="p">{</span>
        <span class="c1">// ... this IS a valid email address, do something</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="c1">// this is *not* a valid email address</span>
        <span class="nv">$errorMessage</span> <span class="o">=</span> <span class="nv">$errors</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">();</span>

        <span class="c1">// ... do something with the error</span>
    <span class="p">}</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>By calling <code class="docutils literal notranslate"><span class="pre">validate()</span></code> on the validator, you can pass in a raw value and
the constraint object that you want to validate that value against. A full
list of the available constraints - as well as the full class name for each
constraint - is available in the <a class="reference internal" href="../reference/constraints.xhtml"><span class="doc">constraints reference</span></a>
section.</p>
<p>Validation of arrays is possible using the <code class="docutils literal notranslate"><span class="pre">Collection</span></code> constraint:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints</span> <span class="k">as</span> <span class="nx">Assert</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Validation</span><span class="p">;</span>

<span class="nv">$validator</span> <span class="o">=</span> <span class="nx">Validation</span><span class="o">::</span><span class="na">createValidator</span><span class="p">();</span>

<span class="nv">$input</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;first_name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Fabien&#39;</span><span class="p">,</span>
        <span class="s1">&#39;last_name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Potencier&#39;</span><span class="p">,</span>
    <span class="p">],</span>
    <span class="s1">&#39;email&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;test@email.tld&#39;</span><span class="p">,</span>
    <span class="s1">&#39;simple&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;hello&#39;</span><span class="p">,</span>
    <span class="s1">&#39;eye_color&#39;</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">,</span>
    <span class="s1">&#39;file&#39;</span> <span class="o">=&gt;</span> <span class="k">null</span><span class="p">,</span>
    <span class="s1">&#39;password&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;test&#39;</span><span class="p">,</span>
    <span class="s1">&#39;tags&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="p">[</span>
            <span class="s1">&#39;slug&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;symfony_doc&#39;</span><span class="p">,</span>
            <span class="s1">&#39;label&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;symfony doc&#39;</span><span class="p">,</span>
        <span class="p">],</span>
    <span class="p">],</span>
<span class="p">];</span>

<span class="nv">$groups</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Assert\GroupSequence</span><span class="p">([</span><span class="s1">&#39;Default&#39;</span><span class="p">,</span> <span class="s1">&#39;custom&#39;</span><span class="p">]);</span>

<span class="nv">$constraint</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Assert\Collection</span><span class="p">([</span>
    <span class="c1">// the keys correspond to the keys in the input array</span>
    <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="k">new</span> <span class="nx">Assert\Collection</span><span class="p">([</span>
        <span class="s1">&#39;first_name&#39;</span> <span class="o">=&gt;</span> <span class="k">new</span> <span class="nx">Assert\Length</span><span class="p">([</span><span class="s1">&#39;min&#39;</span> <span class="o">=&gt;</span> <span class="mi">101</span><span class="p">]),</span>
        <span class="s1">&#39;last_name&#39;</span> <span class="o">=&gt;</span> <span class="k">new</span> <span class="nx">Assert\Length</span><span class="p">([</span><span class="s1">&#39;min&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">]),</span>
    <span class="p">]),</span>
    <span class="s1">&#39;email&#39;</span> <span class="o">=&gt;</span> <span class="k">new</span> <span class="nx">Assert\Email</span><span class="p">(),</span>
    <span class="s1">&#39;simple&#39;</span> <span class="o">=&gt;</span> <span class="k">new</span> <span class="nx">Assert\Length</span><span class="p">([</span><span class="s1">&#39;min&#39;</span> <span class="o">=&gt;</span> <span class="mi">102</span><span class="p">]),</span>
    <span class="s1">&#39;eye_color&#39;</span> <span class="o">=&gt;</span> <span class="k">new</span> <span class="nx">Assert\Choice</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]),</span>
    <span class="s1">&#39;file&#39;</span> <span class="o">=&gt;</span> <span class="k">new</span> <span class="nx">Assert\File</span><span class="p">(),</span>
    <span class="s1">&#39;password&#39;</span> <span class="o">=&gt;</span> <span class="k">new</span> <span class="nx">Assert\Length</span><span class="p">([</span><span class="s1">&#39;min&#39;</span> <span class="o">=&gt;</span> <span class="mi">60</span><span class="p">]),</span>
    <span class="s1">&#39;tags&#39;</span> <span class="o">=&gt;</span> <span class="k">new</span> <span class="nx">Assert\Optional</span><span class="p">([</span>
        <span class="k">new</span> <span class="nx">Assert\Type</span><span class="p">(</span><span class="s1">&#39;array&#39;</span><span class="p">),</span>
        <span class="k">new</span> <span class="nx">Assert\Count</span><span class="p">([</span><span class="s1">&#39;min&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">]),</span>
        <span class="k">new</span> <span class="nx">Assert\All</span><span class="p">([</span>
            <span class="k">new</span> <span class="nx">Assert\Collection</span><span class="p">([</span>
                <span class="s1">&#39;slug&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
                    <span class="k">new</span> <span class="nx">Assert\NotBlank</span><span class="p">(),</span>
                    <span class="k">new</span> <span class="nx">Assert\Type</span><span class="p">([</span><span class="s1">&#39;type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;string&#39;</span><span class="p">])</span>
                <span class="p">],</span>
                <span class="s1">&#39;label&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
                    <span class="k">new</span> <span class="nx">Assert\NotBlank</span><span class="p">(),</span>
                <span class="p">],</span>
            <span class="p">]),</span>
            <span class="k">new</span> <span class="nx">CustomUniqueTagValidator</span><span class="p">([</span><span class="s1">&#39;groups&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;custom&#39;</span><span class="p">]),</span>
        <span class="p">]),</span>
    <span class="p">]),</span>
<span class="p">]);</span>

<span class="nv">$violations</span> <span class="o">=</span> <span class="nv">$validator</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="nv">$input</span><span class="p">,</span> <span class="nv">$constraint</span><span class="p">,</span> <span class="nv">$groups</span><span class="p">);</span>
</pre></div>
</div>
<p>The <code class="docutils literal notranslate"><span class="pre">validate()</span></code> method returns a <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/ConstraintViolationList.php" title="Symfony\Component\Validator\ConstraintViolationList"><span class="pre">ConstraintViolationList</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/ConstraintViolationList.php]</span></span></code>
object, which acts like an array of errors. Each error in the collection
is a <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/ConstraintViolation.php" title="Symfony\Component\Validator\ConstraintViolation"><span class="pre">ConstraintViolation</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/ConstraintViolation.php]</span></span></code> object,
which holds the error message on its <code class="docutils literal notranslate"><span class="pre">getMessage()</span></code> method.</p>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>