<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Forms</title>
    <link rel="stylesheet" href="_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="forms">
<span id="index-0"></span><h1>Forms</h1>
<div class="screencast admonition">
<p class="admonition-title">Screencast</p>
<p>Do you prefer video tutorials? Check out the <a class="reference external" href="https://symfonycasts.com/screencast/symfony-forms">Symfony Forms screencast series</a><span class="link-target"> [https://symfonycasts.com/screencast/symfony-forms]</span>.</p>
</div>
<p>Creating and processing HTML forms is hard and repetitive. You need to deal with
rendering HTML form fields, validating submitted data, mapping the form data
into objects and a lot more. Symfony includes a powerful form feature that
provides all these features and many more for truly complex scenarios.</p>
<div class="section" id="installation">
<h2>Installation</h2>
<p>In applications using <a class="reference internal" href="setup.xhtml#symfony-flex"><span class="std std-ref">Symfony Flex</span></a>, run this command to
install the form feature before using it:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require symfony/form
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="usage">
<h2>Usage</h2>
<p>The recommended workflow when working with Symfony forms is the following:</p>
<ol class="arabic simple">
<li><p><strong>Build the form</strong> in a Symfony controller or using a dedicated form class;</p></li>
<li><p><strong>Render the form</strong> in a template so the user can edit and submit it;</p></li>
<li><p><strong>Process the form</strong> to validate the submitted data, transform it into PHP
data and do something with it (e.g. persist it in a database).</p></li>
</ol>
<p>Each of these steps is explained in detail in the next sections. To make
examples easier to follow, all of them assume that you’re building a small Todo
list application that displays “tasks”.</p>
<p>Users create and edit tasks using Symfony forms. Each task is an instance of the
following <code class="docutils literal notranslate"><span class="pre">Task</span></code> class:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Entity/Task.php</span>
<span class="k">namespace</span> <span class="nx">App\Entity</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Task</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="nv">$task</span><span class="p">;</span>
    <span class="k">protected</span> <span class="nv">$dueDate</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">getTask</span><span class="p">()</span><span class="o">:</span> <span class="nx">string</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">task</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">setTask</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$task</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">task</span> <span class="o">=</span> <span class="nv">$task</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">getDueDate</span><span class="p">()</span><span class="o">:</span> <span class="o">?</span><span class="nx">\DateTime</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">dueDate</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">setDueDate</span><span class="p">(</span><span class="o">?</span><span class="nx">\DateTime</span> <span class="nv">$dueDate</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">dueDate</span> <span class="o">=</span> <span class="nv">$dueDate</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>This class is a “plain-old-PHP-object” because, so far, it has nothing to do
with Symfony or any other library. It’s a normal PHP object that directly solves
a problem inside <em>your</em> application (i.e. the need to represent a task in your
application). But you can also edit <a class="reference internal" href="doctrine.xhtml"><span class="doc">Doctrine entities</span></a> in the
same way.</p>
<div class="section" id="form-types">
<span id="id1"></span><h3>Form Types</h3>
<p>Before creating your first Symfony form, it’s important to understand the
concept of “form type”. In other projects, it’s common to differentiate between
“forms” and “form fields”. In Symfony, all of them are “form types”:</p>
<ul class="simple">
<li><p>a single <code class="docutils literal notranslate"><span class="pre">&lt;input</span> <span class="pre">type=&quot;text&quot;&gt;</span></code> form field is a “form type” (e.g. <code class="docutils literal notranslate"><span class="pre">TextType</span></code>);</p></li>
<li><p>a group of several HTML fields used to input a postal address is a “form type”
(e.g. <code class="docutils literal notranslate"><span class="pre">PostalAddressType</span></code>);</p></li>
<li><p>an entire <code class="docutils literal notranslate"><span class="pre">&lt;form&gt;</span></code> with multiple fields to edit a user profile is a
“form type” (e.g. <code class="docutils literal notranslate"><span class="pre">UserProfileType</span></code>).</p></li>
</ul>
<p>This may be confusing at first, but it will feel natural to you soon enough.
Besides, it simplifies code and makes “composing” and “embedding” form fields
much easier to implement.</p>
<p>There are tens of <a class="reference internal" href="reference/forms/types.xhtml"><span class="doc">form types provided by Symfony</span></a>
and you can also <a class="reference internal" href="form/create_custom_field_type.xhtml"><span class="doc">create your own form types</span></a>.</p>
</div>
</div>
<div class="section" id="building-forms">
<h2>Building Forms</h2>
<p>Symfony provides a “form builder” object which allows you to describe the form
fields using a fluent interface. Later, this builder creates the actual form
object used to render and process contents.</p>
<div class="section" id="creating-forms-in-controllers">
<span id="id2"></span><h3>Creating Forms in Controllers</h3>
<p>If your controller extends from the <a class="reference internal" href="controller.xhtml#the-base-controller-class-services"><span class="std std-ref">AbstractController</span></a>,
use the <code class="docutils literal notranslate"><span class="pre">createFormBuilder()</span></code> helper:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/TaskController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Entity\Task</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\DateType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\SubmitType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\TextType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Request</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">TaskController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">new</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">)</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="c1">// creates a task object and initializes some data for this example</span>
        <span class="nv">$task</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Task</span><span class="p">();</span>
        <span class="nv">$task</span><span class="o">-&gt;</span><span class="na">setTask</span><span class="p">(</span><span class="s1">&#39;Write a blog post&#39;</span><span class="p">);</span>
        <span class="nv">$task</span><span class="o">-&gt;</span><span class="na">setDueDate</span><span class="p">(</span><span class="k">new</span> <span class="nx">\DateTime</span><span class="p">(</span><span class="s1">&#39;tomorrow&#39;</span><span class="p">));</span>

        <span class="nv">$form</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createFormBuilder</span><span class="p">(</span><span class="nv">$task</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;task&#39;</span><span class="p">,</span> <span class="nx">TextType</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;dueDate&#39;</span><span class="p">,</span> <span class="nx">DateType</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;save&#39;</span><span class="p">,</span> <span class="nx">SubmitType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;label&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Create Task&#39;</span><span class="p">])</span>
            <span class="o">-&gt;</span><span class="na">getForm</span><span class="p">();</span>

        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>If your controller does not extend from <code class="docutils literal notranslate"><span class="pre">AbstractController</span></code>, you’ll need to
<a class="reference internal" href="controller.xhtml#controller-accessing-services"><span class="std std-ref">fetch services in your controller</span></a> and
use the <code class="docutils literal notranslate"><span class="pre">createBuilder()</span></code> method of the <code class="docutils literal notranslate"><span class="pre">form.factory</span></code> service.</p>
<p>In this example, you’ve added two fields to your form - <code class="docutils literal notranslate"><span class="pre">task</span></code> and <code class="docutils literal notranslate"><span class="pre">dueDate</span></code>
- corresponding to the <code class="docutils literal notranslate"><span class="pre">task</span></code> and <code class="docutils literal notranslate"><span class="pre">dueDate</span></code> properties of the <code class="docutils literal notranslate"><span class="pre">Task</span></code>
class. You’ve also assigned each a <a class="reference internal" href="#form-types"><span class="std std-ref">form type</span></a> (e.g. <code class="docutils literal notranslate"><span class="pre">TextType</span></code>
and <code class="docutils literal notranslate"><span class="pre">DateType</span></code>), represented by its fully qualified class name. Finally, you
added a submit button with a custom label for submitting the form to the server.</p>
</div>
<div class="section" id="creating-form-classes">
<span id="creating-forms-in-classes"></span><h3>Creating Form Classes</h3>
<p>Symfony recommends to put as little logic as possible in controllers. That’s why
it’s better to move complex forms to dedicated classes instead of defining them
in controller actions. Besides, forms defined in classes can be reused in
multiple actions and services.</p>
<p>Form classes are <a class="reference internal" href="#form-types"><span class="std std-ref">form types</span></a> that implement
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormTypeInterface.php" title="Symfony\Component\Form\FormTypeInterface"><span class="pre">FormTypeInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormTypeInterface.php]</span></span></code>. However, it’s better to
extend from <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/AbstractType.php" title="Symfony\Component\Form\AbstractType"><span class="pre">AbstractType</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/AbstractType.php]</span></span></code>, which already
implements the interface and provides some utilities:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Form/Type/TaskType.php</span>
<span class="k">namespace</span> <span class="nx">App\Form\Type</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Form\AbstractType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\DateType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\SubmitType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\TextType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\FormBuilderInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">TaskType</span> <span class="k">extends</span> <span class="nx">AbstractType</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">buildForm</span><span class="p">(</span><span class="nx">FormBuilderInterface</span> <span class="nv">$builder</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$options</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="nv">$builder</span>
            <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;task&#39;</span><span class="p">,</span> <span class="nx">TextType</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;dueDate&#39;</span><span class="p">,</span> <span class="nx">DateType</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;save&#39;</span><span class="p">,</span> <span class="nx">SubmitType</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Install the <a class="reference external" href="https://symfony.com/doc/current/bundles/SymfonyMakerBundle/index.html">MakerBundle</a><span class="link-target"> [https://symfony.com/doc/current/bundles/SymfonyMakerBundle/index.html]</span> in your project to generate form classes using
the <code class="docutils literal notranslate"><span class="pre">make:form</span></code> and <code class="docutils literal notranslate"><span class="pre">make:registration-form</span></code> commands.</p>
</div>
<p>The form class contains all the directions needed to create the task form. In
controllers extending from the <a class="reference internal" href="controller.xhtml#the-base-controller-class-services"><span class="std std-ref">AbstractController</span></a>,
use the <code class="docutils literal notranslate"><span class="pre">createForm()</span></code> helper (otherwise, use the <code class="docutils literal notranslate"><span class="pre">create()</span></code> method of the
<code class="docutils literal notranslate"><span class="pre">form.factory</span></code> service):</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/TaskController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Form\Type\TaskType</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="k">class</span> <span class="nc">TaskController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">new</span><span class="p">()</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="c1">// creates a task object and initializes some data for this example</span>
        <span class="nv">$task</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Task</span><span class="p">();</span>
        <span class="nv">$task</span><span class="o">-&gt;</span><span class="na">setTask</span><span class="p">(</span><span class="s1">&#39;Write a blog post&#39;</span><span class="p">);</span>
        <span class="nv">$task</span><span class="o">-&gt;</span><span class="na">setDueDate</span><span class="p">(</span><span class="k">new</span> <span class="nx">\DateTime</span><span class="p">(</span><span class="s1">&#39;tomorrow&#39;</span><span class="p">));</span>

        <span class="nv">$form</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createForm</span><span class="p">(</span><span class="nx">TaskType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="nv">$task</span><span class="p">);</span>

        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p id="form-data-class">Every form needs to know the name of the class that holds the underlying data
(e.g. <code class="docutils literal notranslate"><span class="pre">App\Entity\Task</span></code>). Usually, this is just guessed based off of the
object passed to the second argument to <code class="docutils literal notranslate"><span class="pre">createForm()</span></code> (i.e. <code class="docutils literal notranslate"><span class="pre">$task</span></code>).
Later, when you begin <a class="reference internal" href="form/embedded.xhtml"><span class="doc">embedding forms</span></a>, this will no
longer be sufficient.</p>
<p>So, while not always necessary, it’s generally a good idea to explicitly specify
the <code class="docutils literal notranslate"><span class="pre">data_class</span></code> option by adding the following to your form type class:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Form/Type/TaskType.php</span>
<span class="k">namespace</span> <span class="nx">App\Form\Type</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Entity\Task</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\OptionsResolver\OptionsResolver</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="k">class</span> <span class="nc">TaskType</span> <span class="k">extends</span> <span class="nx">AbstractType</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">configureOptions</span><span class="p">(</span><span class="nx">OptionsResolver</span> <span class="nv">$resolver</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="nv">$resolver</span><span class="o">-&gt;</span><span class="na">setDefaults</span><span class="p">([</span>
            <span class="s1">&#39;data_class&#39;</span> <span class="o">=&gt;</span> <span class="nx">Task</span><span class="o">::</span><span class="na">class</span><span class="p">,</span>
        <span class="p">]);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="rendering-forms">
<span id="id3"></span><h2>Rendering Forms</h2>
<p>Now that the form has been created, the next step is to render it. Instead of
passing the entire form object to the template, use the <code class="docutils literal notranslate"><span class="pre">createView()</span></code> method
to build another object with the visual representation of the form:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/TaskController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Entity\Task</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">App\Form\Type\TaskType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Request</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">TaskController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">new</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">)</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="nv">$task</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Task</span><span class="p">();</span>
        <span class="c1">// ...</span>

        <span class="nv">$form</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createForm</span><span class="p">(</span><span class="nx">TaskType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="nv">$task</span><span class="p">);</span>

        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="s1">&#39;task/new.html.twig&#39;</span><span class="p">,</span> <span class="p">[</span>
            <span class="s1">&#39;form&#39;</span> <span class="o">=&gt;</span> <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">createView</span><span class="p">(),</span>
        <span class="p">]);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Then, use some <a class="reference internal" href="form/form_customization.xhtml#reference-form-twig-functions"><span class="std std-ref">form helper functions</span></a> to
render the form contents:</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# templates/task/new.html.twig #}</span><span class="x"></span>
<span class="cp">{{</span> <span class="nv">form</span><span class="o">(</span><span class="nv">form</span><span class="o">)</span> <span class="cp">}}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
<p>That’s it! The <a class="reference internal" href="form/form_customization.xhtml#reference-forms-twig-form"><span class="std std-ref">form() function</span></a> renders all
fields <em>and</em> the <code class="docutils literal notranslate"><span class="pre">&lt;form&gt;</span></code> start and end tags. By default, the form method is
<code class="docutils literal notranslate"><span class="pre">POST</span></code> and the target URL is the same that displayed the form, but
<a class="reference internal" href="#forms-change-action-method"><span class="std std-ref">you can change both</span></a>.</p>
<p>Notice how the rendered <code class="docutils literal notranslate"><span class="pre">task</span></code> input field has the value of the <code class="docutils literal notranslate"><span class="pre">task</span></code>
property from the <code class="docutils literal notranslate"><span class="pre">$task</span></code> object (i.e. “Write a blog post”). This is the first
job of a form: to take data from an object and translate it into a format that’s
suitable for being rendered in an HTML form.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The form system is smart enough to access the value of the protected
<code class="docutils literal notranslate"><span class="pre">task</span></code> property via the <code class="docutils literal notranslate"><span class="pre">getTask()</span></code> and <code class="docutils literal notranslate"><span class="pre">setTask()</span></code> methods on the
<code class="docutils literal notranslate"><span class="pre">Task</span></code> class. Unless a property is public, it <em>must</em> have a “getter” and
“setter” method so that Symfony can get and put data onto the property. For
a boolean property, you can use an “isser” or “hasser” method (e.g.
<code class="docutils literal notranslate"><span class="pre">isPublished()</span></code> or <code class="docutils literal notranslate"><span class="pre">hasReminder()</span></code>) instead of a getter (e.g.
<code class="docutils literal notranslate"><span class="pre">getPublished()</span></code> or <code class="docutils literal notranslate"><span class="pre">getReminder()</span></code>).</p>
</div>
<p>As short as this rendering is, it’s not very flexible. Usually, you’ll need more
control about how the entire form or some of its fields look. For example, thanks
to the <a class="reference internal" href="form/bootstrap4.xhtml"><span class="doc">Bootstrap 4 integration with Symfony forms</span></a> you
can set this option to generate forms compatible with the Bootstrap 4 CSS framework:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/packages/twig.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">twig</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">form_themes</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="s">&#39;bootstrap_4_layout.html.twig&#39;</span><span class="p p-Indicator">]</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/packages/twig.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xmlns:twig=</span><span class="s">&quot;http://symfony.com/schema/dic/twig&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd</span>
<span class="s">        http://symfony.com/schema/dic/twig</span>
<span class="s">        https://symfony.com/schema/dic/twig/twig-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;twig:config&gt;</span>
        <span class="nt">&lt;twig:form-theme&gt;</span>bootstrap_4_layout.html.twig<span class="nt">&lt;/twig:form-theme&gt;</span>
        <span class="c">&lt;!-- ... --&gt;</span>
    <span class="nt">&lt;/twig:config&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/packages/twig.php</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;twig&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;form_themes&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;bootstrap_4_layout.html.twig&#39;</span><span class="p">,</span>
    <span class="p">],</span>

    <span class="c1">// ...</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>The <a class="reference internal" href="form/form_themes.xhtml#symfony-builtin-forms"><span class="std std-ref">built-in Symfony form themes</span></a> include
Bootstrap 3 and 4 as well as Foundation 5 and 6. You can also
<a class="reference internal" href="form/form_themes.xhtml#create-your-own-form-theme"><span class="std std-ref">create your own Symfony form theme</span></a>.</p>
<p>In addition to form themes, Symfony allows you to
<a class="reference internal" href="form/form_customization.xhtml"><span class="doc">customize the way fields are rendered</span></a> with
multiple functions to render each field part separately (widgets, labels,
errors, help messages, etc.)</p>
</div>
<div class="section" id="processing-forms">
<span id="id4"></span><h2>Processing Forms</h2>
<p>The <a class="reference internal" href="best_practices.xhtml#best-practice-handle-form"><span class="std std-ref">recommended way of processing forms</span></a> is to
use a single action for both rendering the form and handling the form submit.
You can use separate actions, but using one action simplifies everything while
keeping the code concise and maintainable.</p>
<p>Processing a form means to translate user-submitted data back to the properties
of an object. To make this happen, the submitted data from the user must be
written into the form object:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/TaskController.php</span>

<span class="c1">// ...</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Request</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">TaskController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">new</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">)</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="c1">// just setup a fresh $task object (remove the example data)</span>
        <span class="nv">$task</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Task</span><span class="p">();</span>

        <span class="nv">$form</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createForm</span><span class="p">(</span><span class="nx">TaskType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="nv">$task</span><span class="p">);</span>

        <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">handleRequest</span><span class="p">(</span><span class="nv">$request</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$form</span><span class="o">-&gt;</span><span class="na">isSubmitted</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">isValid</span><span class="p">())</span> <span class="p">{</span>
            <span class="c1">// $form-&gt;getData() holds the submitted values</span>
            <span class="c1">// but, the original `$task` variable has also been updated</span>
            <span class="nv">$task</span> <span class="o">=</span> <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">getData</span><span class="p">();</span>

            <span class="c1">// ... perform some action, such as saving the task to the database</span>
            <span class="c1">// for example, if Task is a Doctrine entity, save it!</span>
            <span class="c1">// $entityManager = $this-&gt;getDoctrine()-&gt;getManager();</span>
            <span class="c1">// $entityManager-&gt;persist($task);</span>
            <span class="c1">// $entityManager-&gt;flush();</span>

            <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">redirectToRoute</span><span class="p">(</span><span class="s1">&#39;task_success&#39;</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="s1">&#39;task/new.html.twig&#39;</span><span class="p">,</span> <span class="p">[</span>
            <span class="s1">&#39;form&#39;</span> <span class="o">=&gt;</span> <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">createView</span><span class="p">(),</span>
        <span class="p">]);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>This controller follows a common pattern for handling forms and has three
possible paths:</p>
<ol class="arabic simple">
<li><p>When initially loading the page in a browser, the form hasn’t been submitted
yet and <code class="docutils literal notranslate"><span class="pre">$form-&gt;isSubmitted()</span></code> returns <code class="docutils literal notranslate"><span class="pre">false</span></code>. So, the form is created
and rendered;</p></li>
<li><p>When the user submits the form, <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormInterface.php" title="Symfony\Component\Form\FormInterface::handleRequest()"><span class="pre">handleRequest()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormInterface.php]</span></span></code>
recognizes this and immediately writes the submitted data back into the
<code class="docutils literal notranslate"><span class="pre">task</span></code> and <code class="docutils literal notranslate"><span class="pre">dueDate</span></code> properties of the <code class="docutils literal notranslate"><span class="pre">$task</span></code> object. Then this object
is validated (validation is explained in the next section). If it is invalid,
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormInterface.php" title="Symfony\Component\Form\FormInterface::isValid()"><span class="pre">isValid()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormInterface.php]</span></span></code> returns
<code class="docutils literal notranslate"><span class="pre">false</span></code> and the form is rendered again, but now with validation errors;</p></li>
<li><p>When the user submits the form with valid data, the submitted data is again
written into the form, but this time <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormInterface.php" title="Symfony\Component\Form\FormInterface::isValid()"><span class="pre">isValid()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormInterface.php]</span></span></code>
returns <code class="docutils literal notranslate"><span class="pre">true</span></code>. Now you have the opportunity to perform some actions using
the <code class="docutils literal notranslate"><span class="pre">$task</span></code> object (e.g. persisting it to the database) before redirecting
the user to some other page (e.g. a “thank you” or “success” page);</p></li>
</ol>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Redirecting a user after a successful form submission is a best practice
that prevents the user from being able to hit the “Refresh” button of
their browser and re-post the data.</p>
</div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>The <code class="docutils literal notranslate"><span class="pre">createView()</span></code> method should be called <em>after</em> <code class="docutils literal notranslate"><span class="pre">handleRequest()</span></code> is
called. Otherwise, when using <a class="reference internal" href="form/events.xhtml"><span class="doc">form events</span></a>, changes done
in the <code class="docutils literal notranslate"><span class="pre">*_SUBMIT</span></code> events won’t be applied to the view (like validation errors).</p>
</div>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>If you need more control over exactly when your form is submitted or which
data is passed to it, you can
<a class="reference internal" href="form/direct_submit.xhtml"><span class="doc">use the submit() method to handle form submissions</span></a>.</p>
</div>
</div>
<div class="section" id="validating-forms">
<span id="id5"></span><h2>Validating Forms</h2>
<p>In the previous section, you learned how a form can be submitted with valid
or invalid data. In Symfony, the question isn’t whether the “form” is valid, but
whether or not the underlying object (<code class="docutils literal notranslate"><span class="pre">$task</span></code> in this example) is valid after
the form has applied the submitted data to it. Calling <code class="docutils literal notranslate"><span class="pre">$form-&gt;isValid()</span></code> is a
shortcut that asks the <code class="docutils literal notranslate"><span class="pre">$task</span></code> object whether or not it has valid data.</p>
<p>Before using validation, add support for it in your application:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require symfony/validator
</pre></div>
</td></tr></table></div>
<p>Validation is done by adding a set of rules, called (validation) constraints,
to a class. You can add them either to the entity class or to the form class.</p>
<p>To see the first approach - adding constraints to the entity - in action,
add the validation constraints, so that the <code class="docutils literal notranslate"><span class="pre">task</span></code> field cannot be empty,
and the <code class="docutils literal notranslate"><span class="pre">dueDate</span></code> field cannot be empty, and must be a valid <code class="docutils literal notranslate"><span class="pre">DateTime</span></code>
object.</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Annotations</em><div class="highlight-php-annotations notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Entity/Task.php</span>
<span class="k">namespace</span> <span class="nx">App\Entity</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints</span> <span class="k">as</span> <span class="nx">Assert</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Task</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @Assert\NotBlank</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="nv">$task</span><span class="p">;</span>

    <span class="sd">/**</span>
<span class="sd">     * @Assert\NotBlank</span>
<span class="sd">     * @Assert\Type(&quot;\DateTime&quot;)</span>
<span class="sd">     */</span>
    <span class="k">protected</span> <span class="nv">$dueDate</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/validator/validation.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">App\Entity\Task</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">properties</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">task</span><span class="p p-Indicator">:</span>
            <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">NotBlank</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">~</span>
        <span class="l l-Scalar l-Scalar-Plain">dueDate</span><span class="p p-Indicator">:</span>
            <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">NotBlank</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">~</span>
            <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">Type</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">\DateTime</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/validator/validation.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="nt">&lt;constraint-mapping</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/constraint-mapping&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/constraint-mapping</span>
<span class="s">        https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;class</span> <span class="na">name=</span><span class="s">&quot;App\Entity\Task&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;task&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;constraint</span> <span class="na">name=</span><span class="s">&quot;NotBlank&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;dueDate&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;constraint</span> <span class="na">name=</span><span class="s">&quot;NotBlank&quot;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;constraint</span> <span class="na">name=</span><span class="s">&quot;Type&quot;</span><span class="nt">&gt;</span>\DateTime<span class="nt">&lt;/constraint&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
    <span class="nt">&lt;/class&gt;</span>
<span class="nt">&lt;/constraint-mapping&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Entity/Task.php</span>
<span class="k">namespace</span> <span class="nx">App\Entity</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints\NotBlank</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints\Type</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Mapping\ClassMetadata</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Task</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">loadValidatorMetadata</span><span class="p">(</span><span class="nx">ClassMetadata</span> <span class="nv">$metadata</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="nv">$metadata</span><span class="o">-&gt;</span><span class="na">addPropertyConstraint</span><span class="p">(</span><span class="s1">&#39;task&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">NotBlank</span><span class="p">());</span>

        <span class="nv">$metadata</span><span class="o">-&gt;</span><span class="na">addPropertyConstraint</span><span class="p">(</span><span class="s1">&#39;dueDate&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">NotBlank</span><span class="p">());</span>
        <span class="nv">$metadata</span><span class="o">-&gt;</span><span class="na">addPropertyConstraint</span><span class="p">(</span>
            <span class="s1">&#39;dueDate&#39;</span><span class="p">,</span>
            <span class="k">new</span> <span class="nx">Type</span><span class="p">(</span><span class="nx">\DateTime</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>That’s it! If you re-submit the form with invalid data, you’ll see the
corresponding errors printed out with the form.</p>
<p>To see the second approach - adding constraints to the form - and to
learn more about the validation constraints, please refer to the
<a class="reference internal" href="validation.xhtml"><span class="doc">Symfony validation documentation</span></a>.</p>
<div class="section" id="form-validation-messages">
<h3>Form Validation Messages</h3>
<div class="versionadded">
<p><span class="versionmodified">New in version 5.2: </span>The <code class="docutils literal notranslate"><span class="pre">legacy_error_messages</span></code> option was introduced in Symfony 5.2</p>
</div>
<p>The form types have default error messages that are more clear and
user-friendly than the ones provided by the validation constraints. To enable
these new messages set the <code class="docutils literal notranslate"><span class="pre">legacy_error_messages</span></code> option to <code class="docutils literal notranslate"><span class="pre">false</span></code>:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/packages/framework.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">framework</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">form</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">legacy_error_messages</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">false</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/packages/framework.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xmlns:framework=</span><span class="s">&quot;http://symfony.com/schema/dic/symfony&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd</span>
<span class="s">        http://symfony.com/schema/dic/symfony</span>
<span class="s">        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;framework:config&gt;</span>
        <span class="nt">&lt;framework:form</span> <span class="na">legacy-error-messages=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/framework:config&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/packages/framework.php</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;framework&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;form&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;legacy_error_messages&#39;</span> <span class="o">=&gt;</span> <span class="k">false</span><span class="p">,</span>
    <span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
</div>
<div class="section" id="other-common-form-features">
<h2>Other Common Form Features</h2>
<div class="section" id="passing-options-to-forms">
<h3>Passing Options to Forms</h3>
<p>If you <a class="reference internal" href="#creating-forms-in-classes"><span class="std std-ref">create forms in classes</span></a>, when building
the form in the controller you can pass custom options to it as the third optional
argument of <code class="docutils literal notranslate"><span class="pre">createForm()</span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/TaskController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Form\Type\TaskType</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="k">class</span> <span class="nc">TaskController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">new</span><span class="p">()</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="nv">$task</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Task</span><span class="p">();</span>
        <span class="c1">// use some PHP logic to decide if this form field is required or not</span>
        <span class="nv">$dueDateIsRequired</span> <span class="o">=</span> <span class="o">...</span>

        <span class="nv">$form</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createForm</span><span class="p">(</span><span class="nx">TaskType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="nv">$task</span><span class="p">,</span> <span class="p">[</span>
            <span class="s1">&#39;require_due_date&#39;</span> <span class="o">=&gt;</span> <span class="nv">$dueDateIsRequired</span><span class="p">,</span>
        <span class="p">]);</span>

        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>If you try to use the form now, you’ll see an error message: <em>The option
“require_due_date” does not exist.</em> That’s because forms must declare all the
options they accept using the <code class="docutils literal notranslate"><span class="pre">configureOptions()</span></code> method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Form/Type/TaskType.php</span>
<span class="k">namespace</span> <span class="nx">App\Form\Type</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\OptionsResolver\OptionsResolver</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="k">class</span> <span class="nc">TaskType</span> <span class="k">extends</span> <span class="nx">AbstractType</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">configureOptions</span><span class="p">(</span><span class="nx">OptionsResolver</span> <span class="nv">$resolver</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="nv">$resolver</span><span class="o">-&gt;</span><span class="na">setDefaults</span><span class="p">([</span>
            <span class="c1">// ...,</span>
            <span class="s1">&#39;require_due_date&#39;</span> <span class="o">=&gt;</span> <span class="k">false</span><span class="p">,</span>
        <span class="p">]);</span>

        <span class="c1">// you can also define the allowed types, allowed values and</span>
        <span class="c1">// any other feature supported by the OptionsResolver component</span>
        <span class="nv">$resolver</span><span class="o">-&gt;</span><span class="na">setAllowedTypes</span><span class="p">(</span><span class="s1">&#39;require_due_date&#39;</span><span class="p">,</span> <span class="s1">&#39;bool&#39;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Now you can use this new form option inside the <code class="docutils literal notranslate"><span class="pre">buildForm()</span></code> method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Form/Type/TaskType.php</span>
<span class="k">namespace</span> <span class="nx">App\Form\Type</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Form\AbstractType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\DateType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\FormBuilderInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">TaskType</span> <span class="k">extends</span> <span class="nx">AbstractType</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">buildForm</span><span class="p">(</span><span class="nx">FormBuilderInterface</span> <span class="nv">$builder</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$options</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="nv">$builder</span>
            <span class="c1">// ...</span>
            <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;dueDate&#39;</span><span class="p">,</span> <span class="nx">DateType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span>
                <span class="s1">&#39;required&#39;</span> <span class="o">=&gt;</span> <span class="nv">$options</span><span class="p">[</span><span class="s1">&#39;require_due_date&#39;</span><span class="p">],</span>
            <span class="p">])</span>
        <span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="form-type-options">
<h3>Form Type Options</h3>
<p>Each <a class="reference internal" href="#form-types"><span class="std std-ref">form type</span></a> has a number of options to configure it, as
explained in the <a class="reference internal" href="reference/forms/types.xhtml"><span class="doc">Symfony form types reference</span></a>.
Two commonly used options are <code class="docutils literal notranslate"><span class="pre">required</span></code> and <code class="docutils literal notranslate"><span class="pre">label</span></code>.</p>
<div class="section" id="the-required-option">
<h4>The <code class="docutils literal notranslate"><span class="pre">required</span></code> Option</h4>
<p>The most common option is the <code class="docutils literal notranslate"><span class="pre">required</span></code> option, which can be applied to any
field. By default, this option is set to <code class="docutils literal notranslate"><span class="pre">true</span></code>, meaning that HTML5-ready
browsers will require to fill in all fields before submitting the form.</p>
<p>If you don’t want this behavior, either
<a class="reference internal" href="#forms-html5-validation-disable"><span class="std std-ref">disable client-side validation</span></a> for the
entire form or set the <code class="docutils literal notranslate"><span class="pre">required</span></code> option to <code class="docutils literal notranslate"><span class="pre">false</span></code> on one or more fields:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;dueDate&#39;</span><span class="p">,</span> <span class="nx">DateType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;required&#39;</span> <span class="o">=&gt;</span> <span class="k">false</span><span class="p">,</span>
<span class="p">])</span>
</pre></div>
</div>
<p>The <code class="docutils literal notranslate"><span class="pre">required</span></code> option does not perform any server-side validation. If a user
submits a blank value for the field (either with an old browser or a web
service, for example), it will be accepted as a valid value unless you also use
Symfony’s <code class="docutils literal notranslate"><span class="pre">NotBlank</span></code> or <code class="docutils literal notranslate"><span class="pre">NotNull</span></code> validation constraints.</p>
</div>
<div class="section" id="the-label-option">
<h4>The <code class="docutils literal notranslate"><span class="pre">label</span></code> Option</h4>
<p>By default, the label of form fields are the <em>humanized</em> version of the
property name (<code class="docutils literal notranslate"><span class="pre">user</span></code> -&gt; <code class="docutils literal notranslate"><span class="pre">User</span></code>; <code class="docutils literal notranslate"><span class="pre">postalAddress</span></code> -&gt; <code class="docutils literal notranslate"><span class="pre">Postal</span> <span class="pre">Address</span></code>).
Set the <code class="docutils literal notranslate"><span class="pre">label</span></code> option on fields to define their labels explicitly:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;dueDate&#39;</span><span class="p">,</span> <span class="nx">DateType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span>
    <span class="c1">// set it to FALSE to not display the label for this field</span>
    <span class="s1">&#39;label&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;To Be Completed Before&#39;</span><span class="p">,</span>
<span class="p">])</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>By default, <code class="docutils literal notranslate"><span class="pre">&lt;label&gt;</span></code> tags of required fields are rendered with a
<code class="docutils literal notranslate"><span class="pre">required</span></code> CSS class, so you can display an asterisk for required
fields applying these CSS styles:</p>
<div class="highlight-css notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="nt">label</span><span class="p">.</span><span class="nc">required</span><span class="p">:</span><span class="nd">before</span> <span class="p">{</span>
    <span class="k">content</span><span class="p">:</span> <span class="s2">&quot;*&quot;</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</div>
</div>
</div>
<div class="section" id="changing-the-action-and-http-method">
<span id="forms-change-action-method"></span><h3>Changing the Action and HTTP Method</h3>
<p>By default, a form will be submitted via an HTTP POST request to the same
URL under which the form was rendered. When building the form in the controller,
use the <code class="docutils literal notranslate"><span class="pre">setAction()</span></code> and <code class="docutils literal notranslate"><span class="pre">setMethod()</span></code> methods to change this:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/TaskController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\DateType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\SubmitType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\TextType</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">TaskController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">new</span><span class="p">()</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>

        <span class="nv">$form</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createFormBuilder</span><span class="p">(</span><span class="nv">$task</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">setAction</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">generateUrl</span><span class="p">(</span><span class="s1">&#39;target_route&#39;</span><span class="p">))</span>
            <span class="o">-&gt;</span><span class="na">setMethod</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">)</span>
            <span class="c1">// ...</span>
            <span class="o">-&gt;</span><span class="na">getForm</span><span class="p">();</span>

        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>When building the form in a class, pass the action and method as form options:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/TaskController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Form\TaskType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="k">class</span> <span class="nc">TaskController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">new</span><span class="p">()</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>

        <span class="nv">$form</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createForm</span><span class="p">(</span><span class="nx">TaskType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="nv">$task</span><span class="p">,</span> <span class="p">[</span>
            <span class="s1">&#39;action&#39;</span> <span class="o">=&gt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">generateUrl</span><span class="p">(</span><span class="s1">&#39;target_route&#39;</span><span class="p">),</span>
            <span class="s1">&#39;method&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;GET&#39;</span><span class="p">,</span>
        <span class="p">]);</span>

        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Finally, you can override the action and method in the template by passing them
to the <code class="docutils literal notranslate"><span class="pre">form()</span></code> or the <code class="docutils literal notranslate"><span class="pre">form_start()</span></code> helper functions:</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# templates/task/new.html.twig #}</span><span class="x"></span>
<span class="cp">{{</span> <span class="nv">form_start</span><span class="o">(</span><span class="nv">form</span><span class="o">,</span> <span class="o">{</span><span class="s1">&#39;action&#39;</span><span class="o">:</span> <span class="nv">path</span><span class="o">(</span><span class="s1">&#39;target_route&#39;</span><span class="o">),</span> <span class="s1">&#39;method&#39;</span><span class="o">:</span> <span class="s1">&#39;GET&#39;</span><span class="o">})</span> <span class="cp">}}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If the form’s method is not <code class="docutils literal notranslate"><span class="pre">GET</span></code> or <code class="docutils literal notranslate"><span class="pre">POST</span></code>, but <code class="docutils literal notranslate"><span class="pre">PUT</span></code>, <code class="docutils literal notranslate"><span class="pre">PATCH</span></code> or
<code class="docutils literal notranslate"><span class="pre">DELETE</span></code>, Symfony will insert a hidden field with the name <code class="docutils literal notranslate"><span class="pre">_method</span></code>
that stores this method. The form will be submitted in a normal <code class="docutils literal notranslate"><span class="pre">POST</span></code>
request, but <a class="reference internal" href="routing.xhtml"><span class="doc">Symfony’s routing</span></a> is capable of detecting the
<code class="docutils literal notranslate"><span class="pre">_method</span></code> parameter and will interpret it as a <code class="docutils literal notranslate"><span class="pre">PUT</span></code>, <code class="docutils literal notranslate"><span class="pre">PATCH</span></code> or
<code class="docutils literal notranslate"><span class="pre">DELETE</span></code> request. See the <a class="reference internal" href="reference/configuration/framework.xhtml#configuration-framework-http-method-override"><span class="std std-ref">http_method_override</span></a> option.</p>
</div>
</div>
<div class="section" id="changing-the-form-name">
<h3>Changing the Form Name</h3>
<p>If you inspect the HTML contents of the rendered form, you’ll see that the
<code class="docutils literal notranslate"><span class="pre">&lt;form&gt;</span></code> name and the field names are generated from the type class name
(e.g. <code class="docutils literal notranslate"><span class="pre">&lt;form</span> <span class="pre">name=&quot;task&quot;</span> <span class="pre">...&gt;</span></code> and <code class="docutils literal notranslate"><span class="pre">&lt;select</span> <span class="pre">name=&quot;task[dueDate][date][month]&quot;</span> <span class="pre">...&gt;</span></code>).</p>
<p>If you want to modify this, use the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormFactoryInterface.php" title="Symfony\Component\Form\FormFactoryInterface::createNamed()"><span class="pre">createNamed()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormFactoryInterface.php]</span></span></code>
method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/TaskController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Form\TaskType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="k">class</span> <span class="nc">TaskController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">new</span><span class="p">()</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="nv">$task</span> <span class="o">=</span> <span class="o">...</span><span class="p">;</span>
        <span class="nv">$form</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;form.factory&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">createNamed</span><span class="p">(</span><span class="s1">&#39;my_name&#39;</span><span class="p">,</span> <span class="nx">TaskType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="nv">$task</span><span class="p">);</span>

        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>You can even suppress the name completely by setting it to an empty string.</p>
</div>
<div class="section" id="client-side-html-validation">
<span id="forms-html5-validation-disable"></span><h3>Client-Side HTML Validation</h3>
<p>Thanks to HTML5, many browsers can natively enforce certain validation
constraints on the client side. The most common validation is activated by
adding a <code class="docutils literal notranslate"><span class="pre">required</span></code> attribute on fields that are required. For browsers
that support HTML5, this will result in a native browser message being displayed
if the user tries to submit the form with that field blank.</p>
<p>Generated forms take full advantage of this new feature by adding sensible HTML
attributes that trigger the validation. The client-side validation, however, can
be disabled by adding the <code class="docutils literal notranslate"><span class="pre">novalidate</span></code> attribute to the <code class="docutils literal notranslate"><span class="pre">&lt;form&gt;</span></code> tag or
<code class="docutils literal notranslate"><span class="pre">formnovalidate</span></code> to the submit tag. This is especially useful when you want to
test your server-side validation constraints, but are being prevented by your
browser from, for example, submitting blank fields.</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# templates/task/new.html.twig #}</span><span class="x"></span>
<span class="cp">{{</span> <span class="nv">form_start</span><span class="o">(</span><span class="nv">form</span><span class="o">,</span> <span class="o">{</span><span class="s1">&#39;attr&#39;</span><span class="o">:</span> <span class="o">{</span><span class="s1">&#39;novalidate&#39;</span><span class="o">:</span> <span class="s1">&#39;novalidate&#39;</span><span class="cp">}}</span><span class="x">) }}</span>
<span class="x">    </span><span class="cp">{{</span> <span class="nv">form_widget</span><span class="o">(</span><span class="nv">form</span><span class="o">)</span> <span class="cp">}}</span><span class="x"></span>
<span class="cp">{{</span> <span class="nv">form_end</span><span class="o">(</span><span class="nv">form</span><span class="o">)</span> <span class="cp">}}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="form-type-guessing">
<span id="id6"></span><h3>Form Type Guessing</h3>
<p>If the object handled by the form includes validation constraints, Symfony can
introspect that metadata to guess the type of your field and set it up for you.
In the above example, Symfony can guess from the validation rules that both the
<code class="docutils literal notranslate"><span class="pre">task</span></code> field is a normal <code class="docutils literal notranslate"><span class="pre">TextType</span></code> field and the <code class="docutils literal notranslate"><span class="pre">dueDate</span></code> field is a
<code class="docutils literal notranslate"><span class="pre">DateType</span></code> field.</p>
<p>When building the form, omit the second argument to the <code class="docutils literal notranslate"><span class="pre">add()</span></code> method, or
pass <code class="docutils literal notranslate"><span class="pre">null</span></code> to it, to enable Symfony’s “guessing mechanism”:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Form/Type/TaskType.php</span>
<span class="k">namespace</span> <span class="nx">App\Form\Type</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Form\AbstractType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\DateType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\SubmitType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\TextType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\FormBuilderInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">TaskType</span> <span class="k">extends</span> <span class="nx">AbstractType</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">buildForm</span><span class="p">(</span><span class="nx">FormBuilderInterface</span> <span class="nv">$builder</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$options</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="nv">$builder</span>
            <span class="c1">// if you don&#39;t define field options, you can omit the second argument</span>
            <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;task&#39;</span><span class="p">)</span>
            <span class="c1">// if you define field options, pass NULL as second argument</span>
            <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;dueDate&#39;</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;required&#39;</span> <span class="o">=&gt;</span> <span class="k">false</span><span class="p">])</span>
            <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;save&#39;</span><span class="p">,</span> <span class="nx">SubmitType</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>When using a specific <a class="reference internal" href="form/validation_groups.xhtml"><span class="doc">form validation group</span></a>,
the field type guesser will still consider <em>all</em> validation constraints when
guessing your field types (including constraints that are not part of the
validation group(s) being used).</p>
</div>
<div class="section" id="form-type-options-guessing">
<h4>Form Type Options Guessing</h4>
<p>When the guessing mechanism is enabled for some field (i.e. you omit or pass
<code class="docutils literal notranslate"><span class="pre">null</span></code> as the second argument to <code class="docutils literal notranslate"><span class="pre">add()</span></code>), in addition to its form type,
the following options can be guessed too:</p>
<dl class="simple">
<dt><code class="docutils literal notranslate"><span class="pre">required</span></code></dt>
<dd><p>The <code class="docutils literal notranslate"><span class="pre">required</span></code> option can be guessed based on the validation rules (i.e. is
the field <code class="docutils literal notranslate"><span class="pre">NotBlank</span></code> or <code class="docutils literal notranslate"><span class="pre">NotNull</span></code>) or the Doctrine metadata (i.e. is the
field <code class="docutils literal notranslate"><span class="pre">nullable</span></code>). This is very useful, as your client-side validation will
automatically match your validation rules.</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">maxlength</span></code></dt>
<dd><p>If the field is some sort of text field, then the <code class="docutils literal notranslate"><span class="pre">maxlength</span></code> option attribute
can be guessed from the validation constraints (if <code class="docutils literal notranslate"><span class="pre">Length</span></code> or <code class="docutils literal notranslate"><span class="pre">Range</span></code> is used)
or from the <a class="reference internal" href="doctrine.xhtml"><span class="doc">Doctrine</span></a> metadata (via the field’s length).</p>
</dd>
</dl>
<p>If you’d like to change one of the guessed values, override it by passing the
option in the options field array:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;task&#39;</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;attr&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;maxlength&#39;</span> <span class="o">=&gt;</span> <span class="mi">4</span><span class="p">]])</span>
</pre></div>
</div>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>Besides guessing the form type, Symfony also guesses <a class="reference internal" href="#validating-forms"><span class="std std-ref">validation constraints</span></a>
if you’re using a Doctrine entity. Read <a class="reference internal" href="doctrine.xhtml#automatic-object-validation"><span class="std std-ref">Validating Objects</span></a>
guide for more information.</p>
</div>
</div>
</div>
<div class="section" id="unmapped-fields">
<h3>Unmapped Fields</h3>
<p>When editing an object via a form, all form fields are considered properties of
the object. Any fields on the form that do not exist on the object will cause an
exception to be thrown.</p>
<p>If you need extra fields in the form that won’t be stored in the object (for
example to add an <em>“I agree with these terms”</em> checkbox), set the <code class="docutils literal notranslate"><span class="pre">mapped</span></code>
option to <code class="docutils literal notranslate"><span class="pre">false</span></code> in those fields:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\FormBuilderInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">TaskType</span> <span class="k">extends</span> <span class="nx">AbstractType</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">buildForm</span><span class="p">(</span><span class="nx">FormBuilderInterface</span> <span class="nv">$builder</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$options</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="nv">$builder</span>
            <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;task&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;dueDate&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;agreeTerms&#39;</span><span class="p">,</span> <span class="nx">CheckboxType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;mapped&#39;</span> <span class="o">=&gt;</span> <span class="k">false</span><span class="p">])</span>
            <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;save&#39;</span><span class="p">,</span> <span class="nx">SubmitType</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>These “unmapped fields” can be set and accessed in a controller with:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$form</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;agreeTerms&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">getData</span><span class="p">();</span>
<span class="nv">$form</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;agreeTerms&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">setData</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</pre></div>
</div>
<p>Additionally, if there are any fields on the form that aren’t included in
the submitted data, those fields will be explicitly set to <code class="docutils literal notranslate"><span class="pre">null</span></code>.</p>
</div>
</div>
<div class="section" id="learn-more">
<h2>Learn more</h2>
<p>When building forms, keep in mind that the first goal of a form is to translate
data from an object (<code class="docutils literal notranslate"><span class="pre">Task</span></code>) to an HTML form so that the user can modify that
data. The second goal of a form is to take the data submitted by the user and to
re-apply it to the object.</p>
<p>There’s a lot more to learn and a lot of <em>powerful</em> tricks in the Symfony forms:</p>
<p>Reference:</p>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="reference/forms/types.xhtml">Form Types Reference</a></li>
</ul>
</div>
<p>Advanced Features:</p>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="controller/upload_file.xhtml">How to Upload Files</a></li>
<li class="toctree-l1"><a class="reference internal" href="security/csrf.xhtml">How to Implement CSRF Protection</a></li>
<li class="toctree-l1"><a class="reference internal" href="form/form_dependencies.xhtml">How to Access Services or Config from Inside a Form</a></li>
<li class="toctree-l1"><a class="reference internal" href="form/create_custom_field_type.xhtml">How to Create a Custom Form Field Type</a></li>
<li class="toctree-l1"><a class="reference internal" href="form/data_transformers.xhtml">How to Use Data Transformers</a></li>
<li class="toctree-l1"><a class="reference internal" href="form/data_mappers.xhtml">When and How to Use Data Mappers</a></li>
<li class="toctree-l1"><a class="reference internal" href="form/create_form_type_extension.xhtml">How to Create a Form Type Extension</a></li>
<li class="toctree-l1"><a class="reference internal" href="form/type_guesser.xhtml">Creating a custom Type Guesser</a></li>
</ul>
</div>
<p>Form Themes and Customization:</p>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="form/bootstrap4.xhtml">Bootstrap 4 Form Theme</a></li>
<li class="toctree-l1"><a class="reference internal" href="form/form_customization.xhtml">How to Customize Form Rendering</a></li>
<li class="toctree-l1"><a class="reference internal" href="form/form_themes.xhtml">How to Work with Form Themes</a></li>
</ul>
</div>
<p>Events:</p>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="form/events.xhtml">Form Events</a></li>
<li class="toctree-l1"><a class="reference internal" href="form/dynamic_form_modification.xhtml">How to Dynamically Modify Forms Using Form Events</a></li>
</ul>
</div>
<p>Validation:</p>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="form/validation_groups.xhtml">How to Define the Validation Groups to Use</a></li>
<li class="toctree-l1"><a class="reference internal" href="form/validation_group_service_resolver.xhtml">How to Dynamically Configure Form Validation Groups</a></li>
<li class="toctree-l1"><a class="reference internal" href="form/button_based_validation.xhtml">How to Choose Validation Groups Based on the Clicked Button</a></li>
<li class="toctree-l1"><a class="reference internal" href="form/disabling_validation.xhtml">How to Disable the Validation of Submitted Data</a></li>
</ul>
</div>
<p>Misc.:</p>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="form/direct_submit.xhtml">How to Use the submit() Function to Handle Form Submissions</a></li>
<li class="toctree-l1"><a class="reference internal" href="form/embedded.xhtml">How to Embed Forms</a></li>
<li class="toctree-l1"><a class="reference internal" href="form/form_collections.xhtml">How to Embed a Collection of Forms</a></li>
<li class="toctree-l1"><a class="reference internal" href="form/inherit_data_option.xhtml">How to Reduce Code Duplication with “inherit_data”</a></li>
<li class="toctree-l1"><a class="reference internal" href="form/multiple_buttons.xhtml">How to Submit a Form with Multiple Buttons</a></li>
<li class="toctree-l1"><a class="reference internal" href="form/unit_testing.xhtml">How to Unit Test your Forms</a></li>
<li class="toctree-l1"><a class="reference internal" href="form/use_empty_data.xhtml">How to Configure empty Data for a Form Class</a></li>
<li class="toctree-l1"><a class="reference internal" href="form/without_class.xhtml">How to Use a Form without a Data Class</a></li>
</ul>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>