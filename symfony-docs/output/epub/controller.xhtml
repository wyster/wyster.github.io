<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Controller</title>
    <link rel="stylesheet" href="_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="controller">
<span id="index-0"></span><h1>Controller</h1>
<p>A controller is a PHP function you create that reads information from the
<code class="docutils literal notranslate"><span class="pre">Request</span></code> object and creates and returns a <code class="docutils literal notranslate"><span class="pre">Response</span></code> object. The response could
be an HTML page, JSON, XML, a file download, a redirect, a 404 error or anything
else. The controller runs whatever arbitrary logic <em>your application</em> needs
to render the content of a page.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>If you haven’t already created your first working page, check out
<a class="reference internal" href="page_creation.xhtml"><span class="doc">Create your First Page in Symfony</span></a> and then come back!</p>
</div>
<div class="section" id="a-basic-controller">
<span id="index-1"></span><h2>A Basic Controller</h2>
<p>While a controller can be any PHP callable (function, method on an object,
or a <code class="docutils literal notranslate"><span class="pre">Closure</span></code>), a controller is usually a method inside a controller
class:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/LuckyController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Annotation\Route</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">LuckyController</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @Route(&quot;/lucky/number/{max}&quot;, name=&quot;app_lucky_number&quot;)</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">number</span><span class="p">(</span><span class="nx">int</span> <span class="nv">$max</span><span class="p">)</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="nv">$number</span> <span class="o">=</span> <span class="nx">random_int</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">$max</span><span class="p">);</span>

        <span class="k">return</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">(</span>
            <span class="s1">&#39;&lt;html&gt;&lt;body&gt;Lucky number: &#39;</span><span class="o">.</span><span class="nv">$number</span><span class="o">.</span><span class="s1">&#39;&lt;/body&gt;&lt;/html&gt;&#39;</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The controller is the <code class="docutils literal notranslate"><span class="pre">number()</span></code> method, which lives inside the
controller class <code class="docutils literal notranslate"><span class="pre">LuckyController</span></code>.</p>
<p>This controller is pretty straightforward:</p>
<ul class="simple">
<li><p><em>line 2</em>: Symfony takes advantage of PHP’s namespace functionality to
namespace the entire controller class.</p></li>
<li><p><em>line 4</em>: Symfony again takes advantage of PHP’s namespace functionality:
the <code class="docutils literal notranslate"><span class="pre">use</span></code> keyword imports the <code class="docutils literal notranslate"><span class="pre">Response</span></code> class, which the controller
must return.</p></li>
<li><p><em>line 7</em>: The class can technically be called anything, but it’s suffixed
with <code class="docutils literal notranslate"><span class="pre">Controller</span></code> by convention.</p></li>
<li><p><em>line 12</em>: The action method is allowed to have a <code class="docutils literal notranslate"><span class="pre">$max</span></code> argument thanks to the
<code class="docutils literal notranslate"><span class="pre">{max}</span></code> <a class="reference internal" href="routing.xhtml"><span class="doc">wildcard in the route</span></a>.</p></li>
<li><p><em>line 16</em>: The controller creates and returns a <code class="docutils literal notranslate"><span class="pre">Response</span></code> object.</p></li>
</ul>
<div class="section" id="mapping-a-url-to-a-controller">
<span id="index-2"></span><h3>Mapping a URL to a Controller</h3>
<p>In order to <em>view</em> the result of this controller, you need to map a URL to it via
a route. This was done above with the <code class="docutils literal notranslate"><span class="pre">&#64;Route(&quot;/lucky/number/{max}&quot;)</span></code>
<a class="reference internal" href="page_creation.xhtml#annotation-routes"><span class="std std-ref">route annotation</span></a>.</p>
<p>To see your page, go to this URL in your browser: <a class="reference external" href="http://localhost:8000/lucky/number/100">http://localhost:8000/lucky/number/100</a></p>
<p>For more information on routing, see <a class="reference internal" href="routing.xhtml"><span class="doc">Routing</span></a>.</p>
</div>
</div>
<div class="section" id="the-base-controller-classes-services">
<span id="the-base-controller-class-services"></span><span id="index-3"></span><span id="id1"></span><h2>The Base Controller Class &amp; Services</h2>
<p>To aid development, Symfony comes with an optional base controller class called
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Controller/AbstractController.php" title="Symfony\Bundle\FrameworkBundle\Controller\AbstractController"><span class="pre">AbstractController</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Controller/AbstractController.php]</span></span></code>.
It can be extended to gain access to helper methods.</p>
<p>Add the <code class="docutils literal notranslate"><span class="pre">use</span></code> statement atop your controller class and then modify
<code class="docutils literal notranslate"><span class="pre">LuckyController</span></code> to extend it:</p>
<div class="highlight-diff notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="highlight"><pre><span></span>// src/Controller/LuckyController.php
namespace App\Controller;

<span class="gi">+ use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;</span>

<span class="gd">- class LuckyController</span>
<span class="gi">+ class LuckyController extends AbstractController</span>
{
    // ...
}
</pre></div>
</td></tr></table></div>
<p>That’s it! You now have access to methods like <a class="reference internal" href="#controller-rendering-templates"><span class="std std-ref">$this-&gt;render()</span></a>
and many others that you’ll learn about next.</p>
<div class="section" id="generating-urls">
<span id="index-4"></span><h3>Generating URLs</h3>
<p>The <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Controller/AbstractController.php" title="Symfony\Bundle\FrameworkBundle\Controller\AbstractController::generateUrl()"><span class="pre">generateUrl()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Controller/AbstractController.php]</span></span></code>
method is just a helper method that generates the URL for a given route:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$url</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">generateUrl</span><span class="p">(</span><span class="s1">&#39;app_lucky_number&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;max&#39;</span> <span class="o">=&gt;</span> <span class="mi">10</span><span class="p">]);</span>
</pre></div>
</div>
</div>
<div class="section" id="redirecting">
<span id="controller-redirect"></span><h3>Redirecting</h3>
<p>If you want to redirect the user to another page, use the <code class="docutils literal notranslate"><span class="pre">redirectToRoute()</span></code>
and <code class="docutils literal notranslate"><span class="pre">redirect()</span></code> methods:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\RedirectResponse</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">()</span><span class="o">:</span> <span class="nx">RedirectResponse</span>
<span class="p">{</span>
    <span class="c1">// redirects to the &quot;homepage&quot; route</span>
    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">redirectToRoute</span><span class="p">(</span><span class="s1">&#39;homepage&#39;</span><span class="p">);</span>

    <span class="c1">// redirectToRoute is a shortcut for:</span>
    <span class="c1">// return new RedirectResponse($this-&gt;generateUrl(&#39;homepage&#39;));</span>

    <span class="c1">// does a permanent - 301 redirect</span>
    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">redirectToRoute</span><span class="p">(</span><span class="s1">&#39;homepage&#39;</span><span class="p">,</span> <span class="p">[],</span> <span class="mi">301</span><span class="p">);</span>

    <span class="c1">// redirect to a route with parameters</span>
    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">redirectToRoute</span><span class="p">(</span><span class="s1">&#39;app_lucky_number&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;max&#39;</span> <span class="o">=&gt;</span> <span class="mi">10</span><span class="p">]);</span>

    <span class="c1">// redirects to a route and maintains the original query string parameters</span>
    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">redirectToRoute</span><span class="p">(</span><span class="s1">&#39;blog_show&#39;</span><span class="p">,</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">query</span><span class="o">-&gt;</span><span class="na">all</span><span class="p">());</span>

    <span class="c1">// redirects externally</span>
    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">redirect</span><span class="p">(</span><span class="s1">&#39;http://symfony.com/doc&#39;</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>The <code class="docutils literal notranslate"><span class="pre">redirect()</span></code> method does not check its destination in any way. If you
redirect to a URL provided by end-users, your application may be open
to the <a class="reference external" href="https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html">unvalidated redirects security vulnerability</a><span class="link-target"> [https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html]</span>.</p>
</div>
</div>
<div class="section" id="rendering-templates">
<span id="controller-rendering-templates"></span><span id="index-5"></span><h3>Rendering Templates</h3>
<p>If you’re serving HTML, you’ll want to render a template. The <code class="docutils literal notranslate"><span class="pre">render()</span></code>
method renders a template <strong>and</strong> puts that content into a <code class="docutils literal notranslate"><span class="pre">Response</span></code>
object for you:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// renders templates/lucky/number.html.twig</span>
<span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="s1">&#39;lucky/number.html.twig&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;number&#39;</span> <span class="o">=&gt;</span> <span class="nv">$number</span><span class="p">]);</span>
</pre></div>
</div>
<p>Templating and Twig are explained more in the
<a class="reference internal" href="templates.xhtml"><span class="doc">Creating and Using Templates article</span></a>.</p>
</div>
<div class="section" id="fetching-services">
<span id="accessing-other-services"></span><span id="controller-accessing-services"></span><span id="index-6"></span><h3>Fetching Services</h3>
<p>Symfony comes <em>packed</em> with a lot of useful classes and functionalities, called <a class="reference internal" href="service_container.xhtml"><span class="doc">services</span></a>.
These are used for rendering templates, sending emails, querying the database and
any other “work” you can think of.</p>
<p>If you need a service in a controller, type-hint an argument with its class
(or interface) name. Symfony will automatically pass you the service you need:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Psr\Log\LoggerInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="sd">/**</span>
<span class="sd"> * @Route(&quot;/lucky/number/{max}&quot;)</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">number</span><span class="p">(</span><span class="nx">int</span> <span class="nv">$max</span><span class="p">,</span> <span class="nx">LoggerInterface</span> <span class="nv">$logger</span><span class="p">)</span><span class="o">:</span> <span class="nx">Response</span>
<span class="p">{</span>
    <span class="nv">$logger</span><span class="o">-&gt;</span><span class="na">info</span><span class="p">(</span><span class="s1">&#39;We are logging!&#39;</span><span class="p">);</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Awesome!</p>
<p>What other services can you type-hint? To see them, use the <code class="docutils literal notranslate"><span class="pre">debug:autowiring</span></code> console
command:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console debug:autowiring
</pre></div>
</td></tr></table></div>
<p>If you need control over the <em>exact</em> value of an argument, you can <a class="reference internal" href="service_container.xhtml#services-binding"><span class="std std-ref">bind</span></a>
the argument by its name:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="c1"># ...</span>

    <span class="c1"># explicitly configure the service</span>
    <span class="l l-Scalar l-Scalar-Plain">App\Controller\LuckyController</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">tags</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="nv">controller.service_arguments</span><span class="p p-Indicator">]</span>
        <span class="l l-Scalar l-Scalar-Plain">bind</span><span class="p p-Indicator">:</span>
            <span class="c1"># for any $logger argument, pass this specific service</span>
            <span class="l l-Scalar l-Scalar-Plain">$logger</span><span class="p p-Indicator">:</span> <span class="s">&#39;@monolog.logger.doctrine&#39;</span>
            <span class="c1"># for any $projectDir argument, pass this parameter value</span>
            <span class="l l-Scalar l-Scalar-Plain">$projectDir</span><span class="p p-Indicator">:</span> <span class="s">&#39;%kernel.project_dir%&#39;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="c">&lt;!-- ... --&gt;</span>

        <span class="c">&lt;!-- Explicitly configure the service --&gt;</span>
        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\Controller\LuckyController&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;tag</span> <span class="na">name=</span><span class="s">&quot;controller.service_arguments&quot;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;bind</span> <span class="na">key=</span><span class="s">&quot;$logger&quot;</span>
                <span class="na">type=</span><span class="s">&quot;service&quot;</span>
                <span class="na">id=</span><span class="s">&quot;monolog.logger.doctrine&quot;</span>
            <span class="nt">/&gt;</span>
            <span class="nt">&lt;bind</span> <span class="na">key=</span><span class="s">&quot;$projectDir&quot;</span><span class="nt">&gt;</span>%kernel.project_dir%<span class="nt">&lt;/bind&gt;</span>
        <span class="nt">&lt;/service&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">use</span> <span class="nx">App\Controller\LuckyController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\Reference</span><span class="p">;</span>

<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">register</span><span class="p">(</span><span class="nx">LuckyController</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="na">addTag</span><span class="p">(</span><span class="s1">&#39;controller.service_arguments&#39;</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="na">setBindings</span><span class="p">([</span>
        <span class="s1">&#39;$logger&#39;</span> <span class="o">=&gt;</span> <span class="k">new</span> <span class="nx">Reference</span><span class="p">(</span><span class="s1">&#39;monolog.logger.doctrine&#39;</span><span class="p">),</span>
        <span class="s1">&#39;$projectDir&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;%kernel.project_dir%&#39;</span>
    <span class="p">])</span>
<span class="p">;</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>Like with all services, you can also use regular <a class="reference internal" href="service_container.xhtml#services-constructor-injection"><span class="std std-ref">constructor injection</span></a>
in your controllers.</p>
<p>For more information about services, see the <a class="reference internal" href="service_container.xhtml"><span class="doc">Service Container</span></a> article.</p>
</div>
</div>
<div class="section" id="generating-controllers">
<h2>Generating Controllers</h2>
<p>To save time, you can install <a class="reference external" href="https://symfony.com/doc/current/bundles/SymfonyMakerBundle/index.html">Symfony Maker</a><span class="link-target"> [https://symfony.com/doc/current/bundles/SymfonyMakerBundle/index.html]</span> and tell Symfony to generate a
new controller class:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console make:controller BrandNewController

<span class="go">created: src/Controller/BrandNewController.php</span>
<span class="go">created: templates/brandnew/index.html.twig</span>
</pre></div>
</td></tr></table></div>
<p>If you want to generate an entire CRUD from a Doctrine <a class="reference internal" href="doctrine.xhtml"><span class="doc">entity</span></a>,
use:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console make:crud Product

<span class="go">created: src/Controller/ProductController.php</span>
<span class="go">created: src/Form/ProductType.php</span>
<span class="go">created: templates/product/_delete_form.html.twig</span>
<span class="go">created: templates/product/_form.html.twig</span>
<span class="go">created: templates/product/edit.html.twig</span>
<span class="go">created: templates/product/index.html.twig</span>
<span class="go">created: templates/product/new.html.twig</span>
<span class="go">created: templates/product/show.html.twig</span>
</pre></div>
</td></tr></table></div>
<div class="versionadded">
<p><span class="versionmodified">New in version 1.2: </span>The <code class="docutils literal notranslate"><span class="pre">make:crud</span></code> command was introduced in MakerBundle 1.2.</p>
</div>
</div>
<div class="section" id="managing-errors-and-404-pages">
<span id="index-7"></span><h2>Managing Errors and 404 Pages</h2>
<p>When things are not found, you should return a 404 response. To do this, throw a
special type of exception:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Exception\NotFoundHttpException</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">()</span><span class="o">:</span> <span class="nx">Response</span>
<span class="p">{</span>
    <span class="c1">// retrieve the object from database</span>
    <span class="nv">$product</span> <span class="o">=</span> <span class="o">...</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$product</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createNotFoundException</span><span class="p">(</span><span class="s1">&#39;The product does not exist&#39;</span><span class="p">);</span>

        <span class="c1">// the above is just a shortcut for:</span>
        <span class="c1">// throw new NotFoundHttpException(&#39;The product does not exist&#39;);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="o">...</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Controller/AbstractController.php" title="Symfony\Bundle\FrameworkBundle\Controller\AbstractController::createNotFoundException()"><span class="pre">createNotFoundException()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Controller/AbstractController.php]</span></span></code>
method is just a shortcut to create a special
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Exception/NotFoundHttpException.php" title="Symfony\Component\HttpKernel\Exception\NotFoundHttpException"><span class="pre">NotFoundHttpException</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Exception/NotFoundHttpException.php]</span></span></code>
object, which ultimately triggers a 404 HTTP response inside Symfony.</p>
<p>If you throw an exception that extends or is an instance of
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Exception/HttpException.php" title="Symfony\Component\HttpKernel\Exception\HttpException"><span class="pre">HttpException</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Exception/HttpException.php]</span></span></code>, Symfony will
use the appropriate HTTP status code. Otherwise, the response will have a 500
HTTP status code:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// this exception ultimately generates a 500 status error</span>
<span class="k">throw</span> <span class="k">new</span> <span class="nx">\Exception</span><span class="p">(</span><span class="s1">&#39;Something went wrong!&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>In every case, an error page is shown to the end user and a full debug
error page is shown to the developer (i.e. when you’re in “Debug” mode - see
<a class="reference internal" href="configuration.xhtml#page-creation-environments"><span class="std std-ref">Configuration Environments</span></a>).</p>
<p>To customize the error page that’s shown to the user, see the
<a class="reference internal" href="controller/error_pages.xhtml"><span class="doc">How to Customize Error Pages</span></a> article.</p>
</div>
<div class="section" id="the-request-object-as-a-controller-argument">
<span id="controller-request-argument"></span><h2>The Request object as a Controller Argument</h2>
<p>What if you need to read query parameters, grab a request header or get access
to an uploaded file? That information is stored in Symfony’s <code class="docutils literal notranslate"><span class="pre">Request</span></code>
object. To access it in your controller, add it as an argument and
<strong>type-hint it with the Request class</strong>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Request</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">,</span> <span class="nx">string</span> <span class="nv">$firstName</span><span class="p">,</span> <span class="nx">string</span> <span class="nv">$lastName</span><span class="p">)</span><span class="o">:</span> <span class="nx">Response</span>
<span class="p">{</span>
    <span class="nv">$page</span> <span class="o">=</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">query</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;page&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
<p><a class="reference internal" href="#request-object-info"><span class="std std-ref">Keep reading</span></a> for more information about using the
Request object.</p>
</div>
<div class="section" id="managing-the-session">
<span id="session-intro"></span><span id="index-8"></span><h2>Managing the Session</h2>
<p>Symfony provides a session service that you can use to store information
about the user between requests. Session is enabled by default, but will only be
started if you read or write from it.</p>
<p>Session storage and other configuration can be controlled under the
<a class="reference internal" href="reference/configuration/framework.xhtml#config-framework-session"><span class="std std-ref">framework.session configuration</span></a> in
<code class="docutils literal notranslate"><span class="pre">config/packages/framework.yaml</span></code>.</p>
<p>To get the session, add an argument and type-hint it with
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/SessionInterface.php" title="Symfony\Component\HttpFoundation\Session\SessionInterface"><span class="pre">SessionInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/SessionInterface.php]</span></span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Session\SessionInterface</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">(</span><span class="nx">SessionInterface</span> <span class="nv">$session</span><span class="p">)</span><span class="o">:</span> <span class="nx">Response</span>
<span class="p">{</span>
    <span class="c1">// stores an attribute for reuse during a later user request</span>
    <span class="nv">$session</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">);</span>

    <span class="c1">// gets the attribute set by another controller in another request</span>
    <span class="nv">$foobar</span> <span class="o">=</span> <span class="nv">$session</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;foobar&#39;</span><span class="p">);</span>

    <span class="c1">// uses a default value if the attribute doesn&#39;t exist</span>
    <span class="nv">$filters</span> <span class="o">=</span> <span class="nv">$session</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;filters&#39;</span><span class="p">,</span> <span class="p">[]);</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Stored attributes remain in the session for the remainder of that user’s session.</p>
<p>For more info, see <a class="reference internal" href="session.xhtml"><span class="doc">Sessions</span></a>.</p>
<div class="section" id="flash-messages">
<span id="index-9"></span><span id="id2"></span><h3>Flash Messages</h3>
<p>You can also store special messages, called “flash” messages, on the user’s
session. By design, flash messages are meant to be used exactly once: they vanish
from the session automatically as soon as you retrieve them. This feature makes
“flash” messages particularly great for storing user notifications.</p>
<p>For example, imagine you’re processing a <a class="reference internal" href="forms.xhtml"><span class="doc">form</span></a> submission:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Request</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">update</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">)</span><span class="o">:</span> <span class="nx">Response</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="k">if</span> <span class="p">(</span><span class="nv">$form</span><span class="o">-&gt;</span><span class="na">isSubmitted</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">isValid</span><span class="p">())</span> <span class="p">{</span>
        <span class="c1">// do some sort of processing</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">addFlash</span><span class="p">(</span>
            <span class="s1">&#39;notice&#39;</span><span class="p">,</span>
            <span class="s1">&#39;Your changes were saved!&#39;</span>
        <span class="p">);</span>
        <span class="c1">// $this-&gt;addFlash() is equivalent to $request-&gt;getSession()-&gt;getFlashBag()-&gt;add()</span>

        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">redirectToRoute</span><span class="p">(</span><span class="o">...</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="o">...</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>After processing the request, the controller sets a flash message in the session
and then redirects. The message key (<code class="docutils literal notranslate"><span class="pre">notice</span></code> in this example) can be anything:
you’ll use this key to retrieve the message.</p>
<p>In the template of the next page (or even better, in your base layout template),
read any flash messages from the session using the <code class="docutils literal notranslate"><span class="pre">flashes()</span></code> method provided
by the <a class="reference internal" href="templates.xhtml#twig-app-variable"><span class="std std-ref">Twig global app variable</span></a>:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# templates/base.html.twig #}</span>

<span class="c">{# read and display just one flash message type #}</span>
<span class="cp">{%</span> <span class="k">for</span> <span class="nv">message</span> <span class="k">in</span> <span class="nv">app.flashes</span><span class="o">(</span><span class="s1">&#39;notice&#39;</span><span class="o">)</span> <span class="cp">%}</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;flash-notice&quot;</span><span class="p">&gt;</span>
        <span class="cp">{{</span> <span class="nv">message</span> <span class="cp">}}</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span>

<span class="c">{# read and display several types of flash messages #}</span>
<span class="cp">{%</span> <span class="k">for</span> <span class="nv">label</span><span class="o">,</span> <span class="nv">messages</span> <span class="k">in</span> <span class="nv">app.flashes</span><span class="o">([</span><span class="s1">&#39;success&#39;</span><span class="o">,</span> <span class="s1">&#39;warning&#39;</span><span class="o">])</span> <span class="cp">%}</span>
    <span class="cp">{%</span> <span class="k">for</span> <span class="nv">message</span> <span class="k">in</span> <span class="nv">messages</span> <span class="cp">%}</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;flash-</span><span class="cp">{{</span> <span class="nv">label</span> <span class="cp">}}</span><span class="s">&quot;</span><span class="p">&gt;</span>
            <span class="cp">{{</span> <span class="nv">message</span> <span class="cp">}}</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span>
<span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span>

<span class="c">{# read and display all flash messages #}</span>
<span class="cp">{%</span> <span class="k">for</span> <span class="nv">label</span><span class="o">,</span> <span class="nv">messages</span> <span class="k">in</span> <span class="nv">app.flashes</span> <span class="cp">%}</span>
    <span class="cp">{%</span> <span class="k">for</span> <span class="nv">message</span> <span class="k">in</span> <span class="nv">messages</span> <span class="cp">%}</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;flash-</span><span class="cp">{{</span> <span class="nv">label</span> <span class="cp">}}</span><span class="s">&quot;</span><span class="p">&gt;</span>
            <span class="cp">{{</span> <span class="nv">message</span> <span class="cp">}}</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span>
<span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span>
</pre></div>
</td></tr></table></div>
<p>It’s common to use <code class="docutils literal notranslate"><span class="pre">notice</span></code>, <code class="docutils literal notranslate"><span class="pre">warning</span></code> and <code class="docutils literal notranslate"><span class="pre">error</span></code> as the keys of the
different types of flash messages, but you can use any key that fits your
needs.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>You can use the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Flash/FlashBagInterface.php" title="Symfony\Component\HttpFoundation\Session\Flash\FlashBagInterface::peek()"><span class="pre">peek()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Flash/FlashBagInterface.php]</span></span></code>
method instead to retrieve the message while keeping it in the bag.</p>
</div>
</div>
</div>
<div class="section" id="the-request-and-response-object">
<span id="request-object-info"></span><span id="index-10"></span><h2>The Request and Response Object</h2>
<p>As mentioned <a class="reference internal" href="#controller-request-argument"><span class="std std-ref">earlier</span></a>, Symfony will
pass the <code class="docutils literal notranslate"><span class="pre">Request</span></code> object to any controller argument that is type-hinted with
the <code class="docutils literal notranslate"><span class="pre">Request</span></code> class:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Request</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">)</span><span class="o">:</span> <span class="nx">Response</span>
<span class="p">{</span>
    <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">isXmlHttpRequest</span><span class="p">();</span> <span class="c1">// is it an Ajax request?</span>

    <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">getPreferredLanguage</span><span class="p">([</span><span class="s1">&#39;en&#39;</span><span class="p">,</span> <span class="s1">&#39;fr&#39;</span><span class="p">]);</span>

    <span class="c1">// retrieves GET and POST variables respectively</span>
    <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">query</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;page&#39;</span><span class="p">);</span>
    <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">request</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;page&#39;</span><span class="p">);</span>

    <span class="c1">// retrieves SERVER variables</span>
    <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">server</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;HTTP_HOST&#39;</span><span class="p">);</span>

    <span class="c1">// retrieves an instance of UploadedFile identified by foo</span>
    <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">files</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span>

    <span class="c1">// retrieves a COOKIE value</span>
    <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">cookies</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;PHPSESSID&#39;</span><span class="p">);</span>

    <span class="c1">// retrieves an HTTP request header, with normalized, lowercase keys</span>
    <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">headers</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;host&#39;</span><span class="p">);</span>
    <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">headers</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;content-type&#39;</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The <code class="docutils literal notranslate"><span class="pre">Request</span></code> class has several public properties and methods that return any
information you need about the request.</p>
<p>Like the <code class="docutils literal notranslate"><span class="pre">Request</span></code>, the <code class="docutils literal notranslate"><span class="pre">Response</span></code> object has a public <code class="docutils literal notranslate"><span class="pre">headers</span></code> property.
This object is of the type <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/ResponseHeaderBag.php" title="Symfony\Component\HttpFoundation\ResponseHeaderBag"><span class="pre">ResponseHeaderBag</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/ResponseHeaderBag.php]</span></span></code>
and provides methods for getting and setting response headers. The header names are
normalized. As a result, the name <code class="docutils literal notranslate"><span class="pre">Content-Type</span></code> is equivalent to
the name <code class="docutils literal notranslate"><span class="pre">content-type</span></code> or <code class="docutils literal notranslate"><span class="pre">content_type</span></code>.</p>
<p>In Symfony, a controller is required to return a <code class="docutils literal notranslate"><span class="pre">Response</span></code> object:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>

<span class="c1">// creates a simple Response with a 200 status code (the default)</span>
<span class="nv">$response</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">(</span><span class="s1">&#39;Hello &#39;</span><span class="o">.</span><span class="nv">$name</span><span class="p">,</span> <span class="nx">Response</span><span class="o">::</span><span class="na">HTTP_OK</span><span class="p">);</span>

<span class="c1">// creates a CSS-response with a 200 status code</span>
<span class="nv">$response</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">(</span><span class="s1">&#39;&lt;style&gt; ... &lt;/style&gt;&#39;</span><span class="p">);</span>
<span class="nv">$response</span><span class="o">-&gt;</span><span class="na">headers</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;text/css&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>To facilitate this, different response objects are included to address different
response types.  Some of these are mentioned below. To learn more about the
<code class="docutils literal notranslate"><span class="pre">Request</span></code> and <code class="docutils literal notranslate"><span class="pre">Response</span></code> (and different <code class="docutils literal notranslate"><span class="pre">Response</span></code> classes), see the
<a class="reference internal" href="components/http_foundation.xhtml#component-http-foundation-request"><span class="std std-ref">HttpFoundation component documentation</span></a>.</p>
<div class="section" id="accessing-configuration-values">
<h3>Accessing Configuration Values</h3>
<p>To get the value of any <a class="reference internal" href="configuration.xhtml#configuration-parameters"><span class="std std-ref">configuration parameter</span></a>
from a controller, use the <code class="docutils literal notranslate"><span class="pre">getParameter()</span></code> helper method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">()</span><span class="o">:</span> <span class="nx">Response</span>
<span class="p">{</span>
    <span class="nv">$contentsDir</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getParameter</span><span class="p">(</span><span class="s1">&#39;kernel.project_dir&#39;</span><span class="p">)</span><span class="o">.</span><span class="s1">&#39;/contents&#39;</span><span class="p">;</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="returning-json-response">
<h3>Returning JSON Response</h3>
<p>To return JSON from a controller, use the <code class="docutils literal notranslate"><span class="pre">json()</span></code> helper method. This returns a
<code class="docutils literal notranslate"><span class="pre">JsonResponse</span></code> object that encodes the data automatically:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">()</span><span class="o">:</span> <span class="nx">Response</span>
<span class="p">{</span>
    <span class="c1">// returns &#39;{&quot;username&quot;:&quot;jane.doe&quot;}&#39; and sets the proper Content-Type header</span>
    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">json</span><span class="p">([</span><span class="s1">&#39;username&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;jane.doe&#39;</span><span class="p">]);</span>

    <span class="c1">// the shortcut defines three optional arguments</span>
    <span class="c1">// return $this-&gt;json($data, $status = 200, $headers = [], $context = []);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>If the <a class="reference internal" href="serializer.xhtml"><span class="doc">serializer service</span></a> is enabled in your
application, it will be used to serialize the data to JSON. Otherwise,
the <code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/function.json-encode.php" title="json_encode"><span class="pre">json_encode</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/function.json-encode.php]</span></span></code> function is used.</p>
</div>
<div class="section" id="streaming-file-responses">
<h3>Streaming File Responses</h3>
<p>You can use the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Controller/AbstractController.php" title="Symfony\Bundle\FrameworkBundle\Controller\AbstractController::file()"><span class="pre">file()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Controller/AbstractController.php]</span></span></code>
helper to serve a file from inside a controller:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">download</span><span class="p">()</span><span class="o">:</span> <span class="nx">Response</span>
<span class="p">{</span>
    <span class="c1">// send the file contents and force the browser to download it</span>
    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">file</span><span class="p">(</span><span class="s1">&#39;/path/to/some_file.pdf&#39;</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The <code class="docutils literal notranslate"><span class="pre">file()</span></code> helper provides some arguments to configure its behavior:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\File\File</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\ResponseHeaderBag</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">download</span><span class="p">()</span><span class="o">:</span> <span class="nx">Response</span>
<span class="p">{</span>
    <span class="c1">// load the file from the filesystem</span>
    <span class="nv">$file</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">File</span><span class="p">(</span><span class="s1">&#39;/path/to/some_file.pdf&#39;</span><span class="p">);</span>

    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">file</span><span class="p">(</span><span class="nv">$file</span><span class="p">);</span>

    <span class="c1">// rename the downloaded file</span>
    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">file</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span> <span class="s1">&#39;custom_name.pdf&#39;</span><span class="p">);</span>

    <span class="c1">// display the file contents in the browser instead of downloading it</span>
    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">file</span><span class="p">(</span><span class="s1">&#39;invoice_3241.pdf&#39;</span><span class="p">,</span> <span class="s1">&#39;my_invoice.pdf&#39;</span><span class="p">,</span> <span class="nx">ResponseHeaderBag</span><span class="o">::</span><span class="na">DISPOSITION_INLINE</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="final-thoughts">
<h2>Final Thoughts</h2>
<p>In Symfony, a controller is usually a class method which is used to accept
requests, and return a <code class="docutils literal notranslate"><span class="pre">Response</span></code> object. When mapped with a URL, a controller
becomes accessible and its response can be viewed.</p>
<p>To facilitate the development of controllers, Symfony provides an
<code class="docutils literal notranslate"><span class="pre">AbstractController</span></code>.  It can be used to extend the controller class allowing
access to some frequently used utilities such as <code class="docutils literal notranslate"><span class="pre">render()</span></code> and
<code class="docutils literal notranslate"><span class="pre">redirectToRoute()</span></code>. The <code class="docutils literal notranslate"><span class="pre">AbstractController</span></code> also provides the
<code class="docutils literal notranslate"><span class="pre">createNotFoundException()</span></code> utility which is used to return a page not found
response.</p>
<p>In other articles, you’ll learn how to use specific services from inside your controller
that will help you persist and fetch objects from a database, process form submissions,
handle caching and more.</p>
</div>
<div class="section" id="keep-going">
<h2>Keep Going!</h2>
<p>Next, learn all about <a class="reference internal" href="templates.xhtml"><span class="doc">rendering templates with Twig</span></a>.</p>
</div>
<div class="section" id="learn-more-about-controllers">
<h2>Learn more about Controllers</h2>
<div class="toctree-wrapper compound">
</div>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="controller/argument_value_resolver.xhtml">Extending Action Argument Resolving</a></li>
<li class="toctree-l1"><a class="reference internal" href="controller/error_pages.xhtml">How to Customize Error Pages</a></li>
<li class="toctree-l1"><a class="reference internal" href="controller/forwarding.xhtml">How to Forward Requests to another Controller</a></li>
<li class="toctree-l1"><a class="reference internal" href="controller/service.xhtml">How to Define Controllers as Services</a></li>
<li class="toctree-l1"><a class="reference internal" href="controller/soap_web_service.xhtml">How to Create a SOAP Web Service in a Symfony Controller</a></li>
<li class="toctree-l1"><a class="reference internal" href="controller/upload_file.xhtml">How to Upload Files</a></li>
</ul>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>