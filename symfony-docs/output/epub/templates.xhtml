<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Creating and Using Templates</title>
    <link rel="stylesheet" href="_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="creating-and-using-templates">
<span id="index-0"></span><h1>Creating and Using Templates</h1>
<p>A template is the best way to organize and render HTML from inside your application,
whether you need to render HTML from a <a class="reference internal" href="controller.xhtml"><span class="doc">controller</span></a> or generate
the <a class="reference internal" href="mailer.xhtml"><span class="doc">contents of an email</span></a>. Templates in Symfony are created with
Twig: a flexible, fast, and secure template engine.</p>
<div class="section" id="twig-templating-language">
<span id="twig-language"></span><h2>Twig Templating Language</h2>
<p>The <a class="reference external" href="https://twig.symfony.com">Twig</a><span class="link-target"> [https://twig.symfony.com]</span> templating language allows you to write concise, readable templates
that are more friendly to web designers and, in several ways, more powerful than
PHP templates. Take a look at the following Twig template example. Even if it’s
the first time you see Twig, you probably understand most of it:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Welcome to Symfony!<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span><span class="cp">{{</span> <span class="nv">page_title</span> <span class="cp">}}</span><span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>

        <span class="cp">{%</span> <span class="k">if</span> <span class="nv">user.isLoggedIn</span> <span class="cp">%}</span>
            Hello <span class="cp">{{</span> <span class="nv">user.name</span> <span class="cp">}}</span>!
        <span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span>

        <span class="c">{# ... #}</span>
    <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</pre></div>
</td></tr></table></div>
<p>Twig syntax is based on these three constructs:</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">{{</span> <span class="pre">...</span> <span class="pre">}}</span></code>, used to display the content of a variable or the result of
evaluating an expression;</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">{%</span> <span class="pre">...</span> <span class="pre">%}</span></code>, used to run some logic, such as a conditional or a loop;</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">{#</span> <span class="pre">...</span> <span class="pre">#}</span></code>, used to add comments to the template (unlike HTML comments,
these comments are not included in the rendered page).</p></li>
</ul>
<p>You can’t run PHP code inside Twig templates, but Twig provides utilities to
run some logic in the templates. For example, <strong>filters</strong> modify content before
being rendered, like the <code class="docutils literal notranslate"><span class="pre">upper</span></code> filter to uppercase contents:</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{{</span> <span class="nv">title</span><span class="o">|</span><span class="nf">upper</span> <span class="cp">}}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
<p>Twig comes with a long list of <a class="reference external" href="https://twig.symfony.com/doc/2.x/tags/index.html">tags</a><span class="link-target"> [https://twig.symfony.com/doc/2.x/tags/index.html]</span>, <a class="reference external" href="https://twig.symfony.com/doc/2.x/filters/index.html">filters</a><span class="link-target"> [https://twig.symfony.com/doc/2.x/filters/index.html]</span> and <a class="reference external" href="https://twig.symfony.com/doc/2.x/functions/index.html">functions</a><span class="link-target"> [https://twig.symfony.com/doc/2.x/functions/index.html]</span> that are
available by default. In Symfony applications you can also use these
<a class="reference internal" href="reference/twig_reference.xhtml"><span class="doc">Twig filters and functions defined by Symfony</span></a>
and you can <a class="reference internal" href="templating/twig_extension.xhtml"><span class="doc">create your own Twig filters and functions</span></a>.</p>
<p>Twig is fast in the <code class="docutils literal notranslate"><span class="pre">prod</span></code> <a class="reference internal" href="configuration.xhtml#configuration-environments"><span class="std std-ref">environment</span></a>
(because templates are compiled into PHP and cached automatically), but
convenient to use in the <code class="docutils literal notranslate"><span class="pre">dev</span></code> environment (because templates are recompiled
automatically when you change them).</p>
<div class="section" id="twig-configuration">
<h3>Twig Configuration</h3>
<p>Twig has several configuration options to define things like the format used
to display numbers and dates, the template caching, etc. Read the
<a class="reference internal" href="reference/configuration/twig.xhtml"><span class="doc">Twig configuration reference</span></a> to learn about them.</p>
</div>
</div>
<div class="section" id="creating-templates">
<h2>Creating Templates</h2>
<p>Before explaining in detail how to create and render templates, look at the
following example for a quick overview of the whole process. First, you need to
create a new file in the <code class="docutils literal notranslate"><span class="pre">templates/</span></code> directory to store the template contents:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# templates/user/notifications.html.twig #}</span>
<span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Hello <span class="cp">{{</span> <span class="nv">user_first_name</span> <span class="cp">}}</span>!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>You have <span class="cp">{{</span> <span class="nv">notifications</span><span class="o">|</span><span class="nf">length</span> <span class="cp">}}</span> new notifications.<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</pre></div>
</td></tr></table></div>
<p>Then, create a <a class="reference internal" href="controller.xhtml"><span class="doc">controller</span></a> that renders this template and
passes to it the needed variables:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/UserController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">UserController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">notifications</span><span class="p">()</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="c1">// get the user information and notifications somehow</span>
        <span class="nv">$userFirstName</span> <span class="o">=</span> <span class="s1">&#39;...&#39;</span><span class="p">;</span>
        <span class="nv">$userNotifications</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;...&#39;</span><span class="p">,</span> <span class="s1">&#39;...&#39;</span><span class="p">];</span>

        <span class="c1">// the template path is the relative file path from `templates/`</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="s1">&#39;user/notifications.html.twig&#39;</span><span class="p">,</span> <span class="p">[</span>
            <span class="c1">// this array defines the variables passed to the template,</span>
            <span class="c1">// where the key is the variable name and the value is the variable value</span>
            <span class="c1">// (Twig recommends using snake_case variable names: &#39;foo_bar&#39; instead of &#39;fooBar&#39;)</span>
            <span class="s1">&#39;user_first_name&#39;</span> <span class="o">=&gt;</span> <span class="nv">$userFirstName</span><span class="p">,</span>
            <span class="s1">&#39;notifications&#39;</span> <span class="o">=&gt;</span> <span class="nv">$userNotifications</span><span class="p">,</span>
        <span class="p">]);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="section" id="template-naming">
<h3>Template Naming</h3>
<p>Symfony recommends the following for template names:</p>
<ul class="simple">
<li><p>Use <a class="reference external" href="https://en.wikipedia.org/wiki/Snake_case">snake case</a><span class="link-target"> [https://en.wikipedia.org/wiki/Snake_case]</span> for filenames and directories (e.g. <code class="docutils literal notranslate"><span class="pre">blog_posts.html.twig</span></code>,
<code class="docutils literal notranslate"><span class="pre">admin/default_theme/blog/index.html.twig</span></code>, etc.);</p></li>
<li><p>Define two extensions for filenames (e.g. <code class="docutils literal notranslate"><span class="pre">index.html.twig</span></code> or
<code class="docutils literal notranslate"><span class="pre">blog_posts.xml.twig</span></code>) being the first extension (<code class="docutils literal notranslate"><span class="pre">html</span></code>, <code class="docutils literal notranslate"><span class="pre">xml</span></code>, etc.)
the final format that the template will generate.</p></li>
</ul>
<p>Although templates usually generate HTML contents, they can generate any
text-based format. That’s why the two-extension convention simplifies the way
templates are created and rendered for multiple formats.</p>
</div>
<div class="section" id="template-location">
<h3>Template Location</h3>
<p>Templates are stored by default in the <code class="docutils literal notranslate"><span class="pre">templates/</span></code> directory. When a service
or controller renders the <code class="docutils literal notranslate"><span class="pre">product/index.html.twig</span></code> template, they are actually
referring to the <code class="docutils literal notranslate"><span class="pre">&lt;your-project&gt;/templates/product/index.html.twig</span></code> file.</p>
<p>The default templates directory is configurable with the
<a class="reference internal" href="reference/configuration/twig.xhtml#config-twig-default-path"><span class="std std-ref">twig.default_path</span></a> option and you can add more
template directories <a class="reference internal" href="#templates-namespaces"><span class="std std-ref">as explained later</span></a> in this article.</p>
</div>
<div class="section" id="template-variables">
<h3>Template Variables</h3>
<p>A common need for templates is to print the values stored in the templates
passed from the controller or service. Variables usually store objects and
arrays instead of strings, numbers and boolean values. That’s why Twig provides
quick access to complex PHP variables. Consider the following template:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span><span class="cp">{{</span> <span class="nv">user.name</span> <span class="cp">}}</span> added this comment on <span class="cp">{{</span> <span class="nv">comment.publishedAt</span><span class="o">|</span><span class="nf">date</span> <span class="cp">}}</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</pre></div>
</td></tr></table></div>
<p>The <code class="docutils literal notranslate"><span class="pre">user.name</span></code> notation means that you want to display some information
(<code class="docutils literal notranslate"><span class="pre">name</span></code>) stored in a variable (<code class="docutils literal notranslate"><span class="pre">user</span></code>). Is <code class="docutils literal notranslate"><span class="pre">user</span></code> an array or an object?
Is <code class="docutils literal notranslate"><span class="pre">name</span></code> a property or a method? In Twig this doesn’t matter.</p>
<p>When using the <code class="docutils literal notranslate"><span class="pre">foo.bar</span></code> notation, Twig tries to get the value of the variable
in the following order:</p>
<ol class="arabic simple">
<li><p><code class="docutils literal notranslate"><span class="pre">$foo['bar']</span></code> (array and element);</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">$foo-&gt;bar</span></code> (object and public property);</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">$foo-&gt;bar()</span></code> (object and public method);</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">$foo-&gt;getBar()</span></code> (object and <em>getter</em> method);</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">$foo-&gt;isBar()</span></code> (object and <em>isser</em> method);</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">$foo-&gt;hasBar()</span></code> (object and <em>hasser</em> method);</p></li>
<li><p>If none of the above exists, use <code class="docutils literal notranslate"><span class="pre">null</span></code> (or throw a <code class="docutils literal notranslate"><span class="pre">Twig\Error\RuntimeError</span></code>
exception if the <a class="reference internal" href="reference/configuration/twig.xhtml#config-twig-strict-variables"><span class="std std-ref">strict_variables</span></a>
option is enabled).</p></li>
</ol>
<p>This allows to evolve your application code without having to change the
template code (you can start with array variables for the application proof of
concept, then move to objects with methods, etc.)</p>
</div>
<div class="section" id="linking-to-pages">
<span id="templates-link-to-pages"></span><h3>Linking to Pages</h3>
<p>Instead of writing the link URLs by hand, use the <code class="docutils literal notranslate"><span class="pre">path()</span></code> function to
generate URLs based on the <a class="reference internal" href="routing.xhtml#routing-creating-routes"><span class="std std-ref">routing configuration</span></a>.</p>
<p>Later, if you want to modify the URL of a particular page, all you’ll need to do
is change the routing configuration: the templates will automatically generate
the new URL.</p>
<p>Consider the following routing configuration:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Annotations</em><div class="highlight-php-annotations notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/BlogController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Annotation\Route</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">BlogController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @Route(&quot;/&quot;, name=&quot;blog_index&quot;)</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">()</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>

    <span class="sd">/**</span>
<span class="sd">     * @Route(&quot;/article/{slug}&quot;, name=&quot;blog_post&quot;)</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">show</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$slug</span><span class="p">)</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/routes.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">blog_index</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">path</span><span class="p p-Indicator">:</span>       <span class="l l-Scalar l-Scalar-Plain">/</span>
    <span class="l l-Scalar l-Scalar-Plain">controller</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">App\Controller\BlogController::index</span>

<span class="l l-Scalar l-Scalar-Plain">blog_post</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">path</span><span class="p p-Indicator">:</span>       <span class="l l-Scalar l-Scalar-Plain">/article/{slug}</span>
    <span class="l l-Scalar l-Scalar-Plain">controller</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">App\Controller\BlogController::show</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/routes.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;routes</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/routing&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/routing</span>
<span class="s">        https://symfony.com/schema/routing/routing-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;route</span> <span class="na">id=</span><span class="s">&quot;blog_index&quot;</span>
        <span class="na">path=</span><span class="s">&quot;/&quot;</span>
        <span class="na">controller=</span><span class="s">&quot;App\Controller\BlogController::index&quot;</span><span class="nt">/&gt;</span>

    <span class="nt">&lt;route</span> <span class="na">id=</span><span class="s">&quot;blog_post&quot;</span>
        <span class="na">path=</span><span class="s">&quot;/article/{slug}&quot;</span>
        <span class="na">controller=</span><span class="s">&quot;App\Controller\BlogController::show&quot;</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/routes&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/routes.php</span>
<span class="k">use</span> <span class="nx">App\Controller\BlogController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nx">RoutingConfigurator</span> <span class="nv">$routes</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;blog_index&#39;</span><span class="p">,</span> <span class="s1">&#39;/&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">controller</span><span class="p">([</span><span class="nx">BlogController</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="s1">&#39;index&#39;</span><span class="p">])</span>
    <span class="p">;</span>

    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;blog_post&#39;</span><span class="p">,</span> <span class="s1">&#39;/articles/{slug}&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">controller</span><span class="p">([</span><span class="nx">BlogController</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="s1">&#39;show&#39;</span><span class="p">])</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>Use the <code class="docutils literal notranslate"><span class="pre">path()</span></code> Twig function to link to these pages and pass the route name
as the first argument and the route parameters as the optional second argument:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&quot;</span><span class="cp">{{</span> <span class="nv">path</span><span class="o">(</span><span class="s1">&#39;blog_index&#39;</span><span class="o">)</span> <span class="cp">}}</span><span class="s">&quot;</span><span class="p">&gt;</span>Homepage<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>

<span class="c">{# ... #}</span>

<span class="cp">{%</span> <span class="k">for</span> <span class="nv">post</span> <span class="k">in</span> <span class="nv">blog_posts</span> <span class="cp">%}</span>
    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&quot;</span><span class="cp">{{</span> <span class="nv">path</span><span class="o">(</span><span class="s1">&#39;blog_post&#39;</span><span class="o">,</span> <span class="o">{</span><span class="nv">slug</span><span class="o">:</span> <span class="nv">post.slug</span><span class="o">})</span> <span class="cp">}}</span><span class="s">&quot;</span><span class="p">&gt;</span><span class="cp">{{</span> <span class="nv">post.title</span> <span class="cp">}}</span><span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>

    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span><span class="cp">{{</span> <span class="nv">post.excerpt</span> <span class="cp">}}</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
<span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span>
</pre></div>
</td></tr></table></div>
<p>The <code class="docutils literal notranslate"><span class="pre">path()</span></code> function generates relative URLs. If you need to generate
absolute URLs (for example when rendering templates for emails or RSS feeds),
use the <code class="docutils literal notranslate"><span class="pre">url()</span></code> function, which takes the same arguments as <code class="docutils literal notranslate"><span class="pre">path()</span></code>
(e.g. <code class="docutils literal notranslate"><span class="pre">&lt;a</span> <span class="pre">href=&quot;{{</span> <span class="pre">url('blog_index')</span> <span class="pre">}}&quot;&gt;</span> <span class="pre">...</span> <span class="pre">&lt;/a&gt;</span></code>).</p>
</div>
<div class="section" id="linking-to-css-javascript-and-image-assets">
<span id="templates-link-to-assets"></span><h3>Linking to CSS, JavaScript and Image Assets</h3>
<p>If a template needs to link to a static asset (e.g. an image), Symfony provides
an <code class="docutils literal notranslate"><span class="pre">asset()</span></code> Twig function to help generate that URL. First, install the
<code class="docutils literal notranslate"><span class="pre">asset</span></code> package:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require symfony/asset
</pre></div>
</td></tr></table></div>
<p>You can now use the <code class="docutils literal notranslate"><span class="pre">asset()</span></code> function:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# the image lives at &quot;public/images/logo.png&quot; #}</span>
<span class="p">&lt;</span><span class="nt">img</span> <span class="na">src</span><span class="o">=</span><span class="s">&quot;</span><span class="cp">{{</span> <span class="nv">asset</span><span class="o">(</span><span class="s1">&#39;images/logo.png&#39;</span><span class="o">)</span> <span class="cp">}}</span><span class="s">&quot;</span> <span class="na">alt</span><span class="o">=</span><span class="s">&quot;Symfony!&quot;</span><span class="p">/&gt;</span>

<span class="c">{# the CSS file lives at &quot;public/css/blog.css&quot; #}</span>
<span class="p">&lt;</span><span class="nt">link</span> <span class="na">href</span><span class="o">=</span><span class="s">&quot;</span><span class="cp">{{</span> <span class="nv">asset</span><span class="o">(</span><span class="s1">&#39;css/blog.css&#39;</span><span class="o">)</span> <span class="cp">}}</span><span class="s">&quot;</span> <span class="na">rel</span><span class="o">=</span><span class="s">&quot;stylesheet&quot;</span><span class="p">/&gt;</span>

<span class="c">{# the JS file lives at &quot;public/bundles/acme/js/loader.js&quot; #}</span>
<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&quot;</span><span class="cp">{{</span> <span class="nv">asset</span><span class="o">(</span><span class="s1">&#39;bundles/acme/js/loader.js&#39;</span><span class="o">)</span> <span class="cp">}}</span><span class="s">&quot;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</pre></div>
</td></tr></table></div>
<p>The <code class="docutils literal notranslate"><span class="pre">asset()</span></code> function’s main purpose is to make your application more portable.
If your application lives at the root of your host (e.g. <code class="docutils literal notranslate"><span class="pre">https://example.com</span></code>),
then the rendered path should be <code class="docutils literal notranslate"><span class="pre">/images/logo.png</span></code>. But if your application
lives in a subdirectory (e.g. <code class="docutils literal notranslate"><span class="pre">https://example.com/my_app</span></code>), each asset path
should render with the subdirectory (e.g. <code class="docutils literal notranslate"><span class="pre">/my_app/images/logo.png</span></code>). The
<code class="docutils literal notranslate"><span class="pre">asset()</span></code> function takes care of this by determining how your application is
being used and generating the correct paths accordingly.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The <code class="docutils literal notranslate"><span class="pre">asset()</span></code> function supports various cache busting techniques via the
<a class="reference internal" href="reference/configuration/framework.xhtml#reference-framework-assets-version"><span class="std std-ref">version</span></a>,
<a class="reference internal" href="reference/configuration/framework.xhtml#reference-assets-version-format"><span class="std std-ref">version_format</span></a>, and
<a class="reference internal" href="reference/configuration/framework.xhtml#reference-assets-json-manifest-path"><span class="std std-ref">json_manifest_path</span></a> configuration options.</p>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>If you’d like help packaging, versioning and minifying your JavaScript and
CSS assets in a modern way, read about <a class="reference internal" href="frontend.xhtml"><span class="doc">Symfony’s Webpack Encore</span></a>.</p>
</div>
<p>If you need absolute URLs for assets, use the <code class="docutils literal notranslate"><span class="pre">absolute_url()</span></code> Twig function
as follows:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="p">&lt;</span><span class="nt">img</span> <span class="na">src</span><span class="o">=</span><span class="s">&quot;</span><span class="cp">{{</span> <span class="nv">absolute_url</span><span class="o">(</span><span class="nv">asset</span><span class="o">(</span><span class="s1">&#39;images/logo.png&#39;</span><span class="o">))</span> <span class="cp">}}</span><span class="s">&quot;</span> <span class="na">alt</span><span class="o">=</span><span class="s">&quot;Symfony!&quot;</span><span class="p">/&gt;</span>

<span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&quot;shortcut icon&quot;</span> <span class="na">href</span><span class="o">=</span><span class="s">&quot;</span><span class="cp">{{</span> <span class="nv">absolute_url</span><span class="o">(</span><span class="s1">&#39;favicon.png&#39;</span><span class="o">)</span> <span class="cp">}}</span><span class="s">&quot;</span><span class="p">&gt;</span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="the-app-global-variable">
<span id="twig-app-variable"></span><h3>The App Global Variable</h3>
<p>Symfony creates a context object that is injected into every Twig template
automatically as a variable called <code class="docutils literal notranslate"><span class="pre">app</span></code>. It provides access to some
application information:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Username: <span class="cp">{{</span> <span class="nv">app.user.username</span> <span class="o">??</span> <span class="s1">&#39;Anonymous user&#39;</span> <span class="cp">}}</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
<span class="cp">{%</span> <span class="k">if</span> <span class="nv">app.debug</span> <span class="cp">%}</span>
    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Request method: <span class="cp">{{</span> <span class="nv">app.request.method</span> <span class="cp">}}</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Application Environment: <span class="cp">{{</span> <span class="nv">app.environment</span> <span class="cp">}}</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
<span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span>
</pre></div>
</td></tr></table></div>
<p>The <code class="docutils literal notranslate"><span class="pre">app</span></code> variable (which is an instance of <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Twig/AppVariable.php" title="Symfony\Bridge\Twig\AppVariable"><span class="pre">AppVariable</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Twig/AppVariable.php]</span></span></code>)
gives you access to these variables:</p>
<dl class="simple">
<dt><code class="docutils literal notranslate"><span class="pre">app.user</span></code></dt>
<dd><p>The <a class="reference internal" href="security.xhtml#create-user-class"><span class="std std-ref">current user object</span></a> or <code class="docutils literal notranslate"><span class="pre">null</span></code> if the user
is not authenticated.</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">app.request</span></code></dt>
<dd><p>The <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Request.php" title="Symfony\Component\HttpFoundation\Request"><span class="pre">Request</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Request.php]</span></span></code> object that stores
the current <a class="reference internal" href="components/http_foundation.xhtml#accessing-request-data"><span class="std std-ref">request data</span></a> (depending on your
application, this can be a <a class="reference internal" href="components/http_kernel.xhtml#http-kernel-sub-requests"><span class="std std-ref">sub-request</span></a>
or a regular request).</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">app.session</span></code></dt>
<dd><p>The <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Session.php" title="Symfony\Component\HttpFoundation\Session\Session"><span class="pre">Session</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Session.php]</span></span></code> object that
represents the current <a class="reference internal" href="session.xhtml"><span class="doc">user’s session</span></a> or <code class="docutils literal notranslate"><span class="pre">null</span></code> if there is none.</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">app.flashes</span></code></dt>
<dd><p>An array of all the <a class="reference internal" href="controller.xhtml#flash-messages"><span class="std std-ref">flash messages</span></a> stored in the session.
You can also get only the messages of some type (e.g. <code class="docutils literal notranslate"><span class="pre">app.flashes('notice')</span></code>).</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">app.environment</span></code></dt>
<dd><p>The name of the current <a class="reference internal" href="configuration.xhtml#configuration-environments"><span class="std std-ref">configuration environment</span></a>
(<code class="docutils literal notranslate"><span class="pre">dev</span></code>, <code class="docutils literal notranslate"><span class="pre">prod</span></code>, etc).</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">app.debug</span></code></dt>
<dd><p>True if in <a class="reference internal" href="configuration/front_controllers_and_kernel.xhtml#debug-mode"><span class="std std-ref">debug mode</span></a>. False otherwise.</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">app.token</span></code></dt>
<dd><p>A <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Authentication/Token/TokenInterface.php" title="Symfony\Component\Security\Core\Authentication\Token\TokenInterface"><span class="pre">TokenInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Authentication/Token/TokenInterface.php]</span></span></code>
object representing the security token.</p>
</dd>
</dl>
<p>In addition to the global <code class="docutils literal notranslate"><span class="pre">app</span></code> variable injected by Symfony, you can also
<a class="reference internal" href="templating/global_variables.xhtml"><span class="doc">inject variables automatically to all Twig templates</span></a>.</p>
</div>
</div>
<div class="section" id="rendering-templates">
<span id="templates-rendering"></span><h2>Rendering Templates</h2>
<div class="section" id="rendering-a-template-in-controllers">
<h3>Rendering a Template in Controllers</h3>
<p>If your controller extends from the <a class="reference internal" href="controller.xhtml#the-base-controller-class-services"><span class="std std-ref">AbstractController</span></a>,
use the <code class="docutils literal notranslate"><span class="pre">render()</span></code> helper:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/ProductController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">ProductController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">()</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>

        <span class="c1">// the `render()` method returns a `Response` object with the</span>
        <span class="c1">// contents created by the template</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="s1">&#39;product/index.html.twig&#39;</span><span class="p">,</span> <span class="p">[</span>
            <span class="s1">&#39;category&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;...&#39;</span><span class="p">,</span>
            <span class="s1">&#39;promotions&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;...&#39;</span><span class="p">,</span> <span class="s1">&#39;...&#39;</span><span class="p">],</span>
        <span class="p">]);</span>

        <span class="c1">// the `renderView()` method only returns the contents created by the</span>
        <span class="c1">// template, so you can use those contents later in a `Response` object</span>
        <span class="nv">$contents</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">renderView</span><span class="p">(</span><span class="s1">&#39;product/index.html.twig&#39;</span><span class="p">,</span> <span class="p">[</span>
            <span class="s1">&#39;category&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;...&#39;</span><span class="p">,</span>
            <span class="s1">&#39;promotions&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;...&#39;</span><span class="p">,</span> <span class="s1">&#39;...&#39;</span><span class="p">],</span>
        <span class="p">]);</span>

        <span class="k">return</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">(</span><span class="nv">$contents</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>If your controller does not extend from <code class="docutils literal notranslate"><span class="pre">AbstractController</span></code>, you’ll need to
<a class="reference internal" href="controller.xhtml#controller-accessing-services"><span class="std std-ref">fetch services in your controller</span></a> and
use the <code class="docutils literal notranslate"><span class="pre">render()</span></code> method of the <code class="docutils literal notranslate"><span class="pre">twig</span></code> service.</p>
</div>
<div class="section" id="rendering-a-template-in-services">
<h3>Rendering a Template in Services</h3>
<p>Inject the <code class="docutils literal notranslate"><span class="pre">twig</span></code> Symfony service into your own services and use its
<code class="docutils literal notranslate"><span class="pre">render()</span></code> method. When using <a class="reference internal" href="service_container/autowiring.xhtml"><span class="doc">service autowiring</span></a>
you only need to add an argument in the service constructor and type-hint it with
the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Twig/Environment.php" title="Twig\Environment"><span class="pre">Environment</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Twig/Environment.php]</span></span></code> class:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Service/SomeService.php</span>
<span class="k">namespace</span> <span class="nx">App\Service</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Twig\Environment</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">SomeService</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$twig</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nx">Environment</span> <span class="nv">$twig</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">twig</span> <span class="o">=</span> <span class="nv">$twig</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">someMethod</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>

        <span class="nv">$htmlContents</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">twig</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="s1">&#39;product/index.html.twig&#39;</span><span class="p">,</span> <span class="p">[</span>
            <span class="s1">&#39;category&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;...&#39;</span><span class="p">,</span>
            <span class="s1">&#39;promotions&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;...&#39;</span><span class="p">,</span> <span class="s1">&#39;...&#39;</span><span class="p">],</span>
        <span class="p">]);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="rendering-a-template-in-emails">
<h3>Rendering a Template in Emails</h3>
<p>Read the docs about the <a class="reference internal" href="mailer.xhtml#mailer-twig"><span class="std std-ref">mailer and Twig integration</span></a>.</p>
</div>
<div class="section" id="rendering-a-template-directly-from-a-route">
<span id="templates-render-from-route"></span><h3>Rendering a Template Directly from a Route</h3>
<p>Although templates are usually rendered in controllers and services, you can
render static pages that don’t need any variables directly from the route
definition. Use the special <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Controller/TemplateController.php" title="Symfony\Bundle\FrameworkBundle\Controller\TemplateController"><span class="pre">TemplateController</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Controller/TemplateController.php]</span></span></code>
provided by Symfony:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/routes.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">acme_privacy</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">path</span><span class="p p-Indicator">:</span>          <span class="l l-Scalar l-Scalar-Plain">/privacy</span>
    <span class="l l-Scalar l-Scalar-Plain">controller</span><span class="p p-Indicator">:</span>    <span class="l l-Scalar l-Scalar-Plain">Symfony\Bundle\FrameworkBundle\Controller\TemplateController</span>
    <span class="l l-Scalar l-Scalar-Plain">defaults</span><span class="p p-Indicator">:</span>
        <span class="c1"># the path of the template to render</span>
        <span class="l l-Scalar l-Scalar-Plain">template</span><span class="p p-Indicator">:</span>  <span class="s">&#39;static/privacy.html.twig&#39;</span>

        <span class="c1"># special options defined by Symfony to set the page cache</span>
        <span class="l l-Scalar l-Scalar-Plain">maxAge</span><span class="p p-Indicator">:</span>    <span class="l l-Scalar l-Scalar-Plain">86400</span>
        <span class="l l-Scalar l-Scalar-Plain">sharedAge</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">86400</span>

        <span class="c1"># whether or not caching should apply for client caches only</span>
        <span class="l l-Scalar l-Scalar-Plain">private</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">true</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/routes.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;routes</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/routing&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/routing https://symfony.com/schema/routing/routing-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;route</span> <span class="na">id=</span><span class="s">&quot;acme_privacy&quot;</span>
        <span class="na">path=</span><span class="s">&quot;/privacy&quot;</span>
        <span class="na">controller=</span><span class="s">&quot;Symfony\Bundle\FrameworkBundle\Controller\TemplateController&quot;</span><span class="nt">&gt;</span>
        <span class="c">&lt;!-- the path of the template to render --&gt;</span>
        <span class="nt">&lt;default</span> <span class="na">key=</span><span class="s">&quot;template&quot;</span><span class="nt">&gt;</span>static/privacy.html.twig<span class="nt">&lt;/default&gt;</span>

        <span class="c">&lt;!-- special options defined by Symfony to set the page cache --&gt;</span>
        <span class="nt">&lt;default</span> <span class="na">key=</span><span class="s">&quot;maxAge&quot;</span><span class="nt">&gt;</span>86400<span class="nt">&lt;/default&gt;</span>
        <span class="nt">&lt;default</span> <span class="na">key=</span><span class="s">&quot;sharedAge&quot;</span><span class="nt">&gt;</span>86400<span class="nt">&lt;/default&gt;</span>
         <span class="c">&lt;!-- whether or not caching should apply for client caches only --&gt;</span>
        <span class="nt">&lt;default</span> <span class="na">key=</span><span class="s">&quot;private&quot;</span><span class="nt">&gt;</span>true<span class="nt">&lt;/default&gt;</span>
    <span class="nt">&lt;/route&gt;</span>
<span class="nt">&lt;/routes&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/routes.php</span>
<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\TemplateController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nx">RoutingConfigurator</span> <span class="nv">$routes</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;acme_privacy&#39;</span><span class="p">,</span> <span class="s1">&#39;/privacy&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">controller</span><span class="p">(</span><span class="nx">TemplateController</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">defaults</span><span class="p">([</span>
            <span class="c1">// the path of the template to render</span>
            <span class="s1">&#39;template&#39;</span>  <span class="o">=&gt;</span> <span class="s1">&#39;static/privacy.html.twig&#39;</span><span class="p">,</span>

            <span class="c1">// special options defined by Symfony to set the page cache</span>
            <span class="s1">&#39;maxAge&#39;</span>    <span class="o">=&gt;</span> <span class="mi">86400</span><span class="p">,</span>
            <span class="s1">&#39;sharedAge&#39;</span> <span class="o">=&gt;</span> <span class="mi">86400</span><span class="p">,</span>

            <span class="c1">// whether or not caching should apply for client caches only</span>
            <span class="s1">&#39;private&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span>
        <span class="p">])</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
<div class="section" id="checking-if-a-template-exists">
<h3>Checking if a Template Exists</h3>
<p>Templates are loaded in the application using a <a class="reference external" href="https://twig.symfony.com/doc/2.x/api.html#loaders">Twig template loader</a><span class="link-target"> [https://twig.symfony.com/doc/2.x/api.html#loaders]</span>, which
also provides a method to check for template existence. First, get the loader:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// in a controller extending from AbstractController</span>
<span class="nv">$loader</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;twig&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">getLoader</span><span class="p">();</span>

<span class="c1">// in a service using autowiring</span>
<span class="k">use</span> <span class="nx">Twig\Environment</span><span class="p">;</span>

<span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nx">Environment</span> <span class="nv">$twig</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$loader</span> <span class="o">=</span> <span class="nv">$twig</span><span class="o">-&gt;</span><span class="na">getLoader</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Then, pass the path of the Twig template to the <code class="docutils literal notranslate"><span class="pre">exists()</span></code> method of the loader:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">if</span> <span class="p">(</span><span class="nv">$loader</span><span class="o">-&gt;</span><span class="na">exists</span><span class="p">(</span><span class="s1">&#39;theme/layout_responsive.html.twig&#39;</span><span class="p">))</span> <span class="p">{</span>
    <span class="c1">// the template exists, do something</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="debugging-templates">
<h2>Debugging Templates</h2>
<p>Symfony provides several utilities to help you debug issues in your templates.</p>
<div class="section" id="linting-twig-templates">
<h3>Linting Twig Templates</h3>
<p>The <code class="docutils literal notranslate"><span class="pre">lint:twig</span></code> command checks that your Twig templates don’t have any syntax
errors. It’s useful to run it before deploying your application to production
(e.g. in your continuous integration server):</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># check all the application templates</span>
<span class="gp">$</span> php bin/console lint:twig

<span class="c1"># you can also check directories and individual templates</span>
<span class="gp">$</span> php bin/console lint:twig templates/email/
<span class="gp">$</span> php bin/console lint:twig templates/article/recent_list.html.twig

<span class="c1"># you can also show the deprecated features used in your templates</span>
<span class="gp">$</span> php bin/console lint:twig --show-deprecations templates/email/
</pre></div>
</td></tr></table></div>
<div class="versionadded">
<p><span class="versionmodified">New in version 4.4: </span>The feature that checks all the application templates when not passing any
arguments to <code class="docutils literal notranslate"><span class="pre">lint:twig</span></code> and the <code class="docutils literal notranslate"><span class="pre">--show-deprecations</span></code> option were
introduced in Symfony 4.4.</p>
</div>
</div>
<div class="section" id="inspecting-twig-information">
<h3>Inspecting Twig Information</h3>
<p>The <code class="docutils literal notranslate"><span class="pre">debug:twig</span></code> command lists all the information available about Twig
(functions, filters, global variables, etc.). It’s useful to check if your
<a class="reference internal" href="templating/twig_extension.xhtml"><span class="doc">custom Twig extensions</span></a> are working properly
and also to check the Twig features added when <a class="reference internal" href="setup.xhtml#symfony-flex"><span class="std std-ref">installing packages</span></a>:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># list general information</span>
<span class="gp">$</span> php bin/console debug:twig

<span class="c1"># filter output by any keyword</span>
<span class="gp">$</span> php bin/console debug:twig --filter<span class="o">=</span>date

<span class="c1"># pass a template path to show the physical file which will be loaded</span>
<span class="gp">$</span> php bin/console debug:twig @Twig/Exception/error.html.twig
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="the-dump-twig-utilities">
<h3>The Dump Twig Utilities</h3>
<p>Symfony provides a <a class="reference internal" href="components/var_dumper.xhtml#components-var-dumper-dump"><span class="std std-ref">dump() function</span></a> as an
improved alternative to PHP’s <code class="docutils literal notranslate"><span class="pre">var_dump()</span></code> function. This function is useful
to inspect the contents of any variable and you can use it in Twig templates too.</p>
<p>First, make sure that the VarDumper component is installed in the application:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require symfony/var-dumper
</pre></div>
</td></tr></table></div>
<p>Then, use either the <code class="docutils literal notranslate"><span class="pre">{%</span> <span class="pre">dump</span> <span class="pre">%}</span></code> tag or the <code class="docutils literal notranslate"><span class="pre">{{</span> <span class="pre">dump()</span> <span class="pre">}}</span></code> function
depending on your needs:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# templates/article/recent_list.html.twig #}</span>
<span class="c">{# the contents of this variable are sent to the Web Debug Toolbar</span>
<span class="c">   instead of dumping them inside the page contents #}</span>
<span class="cp">{%</span> <span class="k">dump</span> <span class="nv">articles</span> <span class="cp">%}</span>

<span class="cp">{%</span> <span class="k">for</span> <span class="nv">article</span> <span class="k">in</span> <span class="nv">articles</span> <span class="cp">%}</span>
    <span class="c">{# the contents of this variable are dumped inside the page contents</span>
<span class="c">       and they are visible on the web page #}</span>
    <span class="cp">{{</span> <span class="nv">dump</span><span class="o">(</span><span class="nv">article</span><span class="o">)</span> <span class="cp">}}</span>

    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&quot;/article/</span><span class="cp">{{</span> <span class="nv">article.slug</span> <span class="cp">}}</span><span class="s">&quot;</span><span class="p">&gt;</span>
        <span class="cp">{{</span> <span class="nv">article.title</span> <span class="cp">}}</span>
    <span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
<span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span>
</pre></div>
</td></tr></table></div>
<p>To avoid leaking sensitive information, the <code class="docutils literal notranslate"><span class="pre">dump()</span></code> function/tag is only
available in the <code class="docutils literal notranslate"><span class="pre">dev</span></code> and <code class="docutils literal notranslate"><span class="pre">test</span></code> <a class="reference internal" href="configuration.xhtml#configuration-environments"><span class="std std-ref">configuration environments</span></a>.
If you try to use it in the <code class="docutils literal notranslate"><span class="pre">prod</span></code> environment, you will see a PHP error.</p>
</div>
</div>
<div class="section" id="reusing-template-contents">
<span id="templates-reuse-contents"></span><h2>Reusing Template Contents</h2>
<div class="section" id="including-templates">
<span id="templates-include"></span><h3>Including Templates</h3>
<p>If certain Twig code is repeated in several templates, you can extract it into a
single “template fragment” and include it in other templates. Imagine that the
following code to display the user information is repeated in several places:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# templates/blog/index.html.twig #}</span>

<span class="c">{# ... #}</span>
<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;user-profile&quot;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">img</span> <span class="na">src</span><span class="o">=</span><span class="s">&quot;</span><span class="cp">{{</span> <span class="nv">user.profileImageUrl</span> <span class="cp">}}</span><span class="s">&quot;</span> <span class="na">alt</span><span class="o">=</span><span class="s">&quot;</span><span class="cp">{{</span> <span class="nv">user.fullName</span> <span class="cp">}}</span><span class="s">&quot;</span><span class="p">/&gt;</span>
    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span><span class="cp">{{</span> <span class="nv">user.fullName</span> <span class="cp">}}</span> - <span class="cp">{{</span> <span class="nv">user.email</span> <span class="cp">}}</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</pre></div>
</td></tr></table></div>
<p>First, create a new Twig template called <code class="docutils literal notranslate"><span class="pre">blog/_user_profile.html.twig</span></code> (the
<code class="docutils literal notranslate"><span class="pre">_</span></code> prefix is optional, but it’s a convention used to better differentiate
between full templates and template fragments).</p>
<p>Then, remove that content from the original <code class="docutils literal notranslate"><span class="pre">blog/index.html.twig</span></code> template
and add the following to include the template fragment:</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# templates/blog/index.html.twig #}</span><span class="x"></span>

<span class="c">{# ... #}</span><span class="x"></span>
<span class="cp">{{</span> <span class="nv">include</span><span class="o">(</span><span class="s1">&#39;blog/_user_profile.html.twig&#39;</span><span class="o">)</span> <span class="cp">}}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
<p>The <code class="docutils literal notranslate"><span class="pre">include()</span></code> Twig function takes as argument the path of the template to
include. The included template has access to all the variables of the template
that includes it (use the <a class="reference external" href="https://twig.symfony.com/doc/2.x/functions/include.html">with_context</a><span class="link-target"> [https://twig.symfony.com/doc/2.x/functions/include.html]</span> option to control this).</p>
<p>You can also pass variables to the included template. This is useful for example
to rename variables. Imagine that your template stores the user information in a
variable called <code class="docutils literal notranslate"><span class="pre">blog_post.author</span></code> instead of the <code class="docutils literal notranslate"><span class="pre">user</span></code> variable that the
template fragment expects. Use the following to <em>rename</em> the variable:</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# templates/blog/index.html.twig #}</span><span class="x"></span>

<span class="c">{# ... #}</span><span class="x"></span>
<span class="cp">{{</span> <span class="nv">include</span><span class="o">(</span><span class="s1">&#39;blog/_user_profile.html.twig&#39;</span><span class="o">,</span> <span class="o">{</span><span class="nv">user</span><span class="o">:</span> <span class="nv">blog_post.author</span><span class="o">})</span> <span class="cp">}}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="embedding-controllers">
<span id="templates-embed-controllers"></span><h3>Embedding Controllers</h3>
<p><a class="reference internal" href="#templates-include"><span class="std std-ref">Including template fragments</span></a> is useful to reuse the
same content on several pages. However, this technique is not the best solution
in some cases.</p>
<p>Imagine that the template fragment displays the three most recent blog articles.
To do that, it needs to make a database query to get those articles. When using
the <code class="docutils literal notranslate"><span class="pre">include()</span></code> function, you’d need to do the same database query in every
page that includes the fragment. This is not very convenient.</p>
<p>A better alternative is to <strong>embed the result of executing some controller</strong>
with the <code class="docutils literal notranslate"><span class="pre">render()</span></code> and <code class="docutils literal notranslate"><span class="pre">controller()</span></code> Twig functions.</p>
<p>First, create the controller that renders a certain number of recent articles:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/BlogController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="k">class</span> <span class="nc">BlogController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">recentArticles</span><span class="p">(</span><span class="nx">int</span> <span class="nv">$max</span> <span class="o">=</span> <span class="mi">3</span><span class="p">)</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="c1">// get the recent articles somehow (e.g. making a database query)</span>
        <span class="nv">$articles</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;...&#39;</span><span class="p">,</span> <span class="s1">&#39;...&#39;</span><span class="p">,</span> <span class="s1">&#39;...&#39;</span><span class="p">];</span>

        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="s1">&#39;blog/_recent_articles.html.twig&#39;</span><span class="p">,</span> <span class="p">[</span>
            <span class="s1">&#39;articles&#39;</span> <span class="o">=&gt;</span> <span class="nv">$articles</span>
        <span class="p">]);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Then, create the <code class="docutils literal notranslate"><span class="pre">blog/_recent_articles.html.twig</span></code> template fragment (the
<code class="docutils literal notranslate"><span class="pre">_</span></code> prefix in the template name is optional, but it’s a convention used to
better differentiate between full templates and template fragments):</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# templates/blog/_recent_articles.html.twig #}</span>
<span class="cp">{%</span> <span class="k">for</span> <span class="nv">article</span> <span class="k">in</span> <span class="nv">articles</span> <span class="cp">%}</span>
    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&quot;</span><span class="cp">{{</span> <span class="nv">path</span><span class="o">(</span><span class="s1">&#39;blog_show&#39;</span><span class="o">,</span> <span class="o">{</span><span class="nv">slug</span><span class="o">:</span> <span class="nv">article.slug</span><span class="o">})</span> <span class="cp">}}</span><span class="s">&quot;</span><span class="p">&gt;</span>
        <span class="cp">{{</span> <span class="nv">article.title</span> <span class="cp">}}</span>
    <span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
<span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span>
</pre></div>
</td></tr></table></div>
<p>Now you can call to this controller from any template to embed its result:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# templates/base.html.twig #}</span>

<span class="c">{# ... #}</span>
<span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&quot;sidebar&quot;</span><span class="p">&gt;</span>
    <span class="c">{# if the controller is associated with a route, use the path() or url() functions #}</span>
    <span class="cp">{{</span> <span class="nv">render</span><span class="o">(</span><span class="nv">path</span><span class="o">(</span><span class="s1">&#39;latest_articles&#39;</span><span class="o">,</span> <span class="o">{</span><span class="nv">max</span><span class="o">:</span> <span class="m">3</span><span class="o">}))</span> <span class="cp">}}</span>
    <span class="cp">{{</span> <span class="nv">render</span><span class="o">(</span><span class="nv">url</span><span class="o">(</span><span class="s1">&#39;latest_articles&#39;</span><span class="o">,</span> <span class="o">{</span><span class="nv">max</span><span class="o">:</span> <span class="m">3</span><span class="o">}))</span> <span class="cp">}}</span>

    <span class="c">{# if you don&#39;t want to expose the controller with a public URL,</span>
<span class="c">       use the controller() function to define the controller to execute #}</span>
    <span class="cp">{{</span> <span class="nv">render</span><span class="o">(</span><span class="nv">controller</span><span class="o">(</span>
        <span class="s1">&#39;App\\Controller\\BlogController::recentArticles&#39;</span><span class="o">,</span> <span class="o">{</span><span class="nv">max</span><span class="o">:</span> <span class="m">3</span><span class="o">}</span>
    <span class="o">))</span> <span class="cp">}}</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</pre></div>
</td></tr></table></div>
<p id="fragments-path-config">When using the <code class="docutils literal notranslate"><span class="pre">controller()</span></code> function, controllers are not accessed using a
regular Symfony route but through a special URL used exclusively to serve those
template fragments. Configure that special URL in the <code class="docutils literal notranslate"><span class="pre">fragments</span></code> option:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/packages/framework.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">framework</span><span class="p p-Indicator">:</span>
    <span class="c1"># ...</span>
    <span class="l l-Scalar l-Scalar-Plain">fragments</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">{</span> <span class="nv">path</span><span class="p p-Indicator">:</span> <span class="nv">/_fragment</span> <span class="p p-Indicator">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/packages/framework.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xmlns:framework=</span><span class="s">&quot;http://symfony.com/schema/dic/symfony&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd</span>
<span class="s">        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="c">&lt;!-- ... --&gt;</span>
    <span class="nt">&lt;framework:config&gt;</span>
        <span class="nt">&lt;framework:fragment</span> <span class="na">path=</span><span class="s">&quot;/_fragment&quot;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/framework:config&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/packages/framework.php</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;framework&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="c1">// ...</span>
    <span class="s1">&#39;fragments&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;path&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;/_fragment&#39;</span><span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>Embedding controllers requires making requests to those controllers and
rendering some templates as result. This can have a significant impact on
the application performance if you embed lots of controllers. If possible,
<a class="reference internal" href="http_cache/esi.xhtml"><span class="doc">cache the template fragment</span></a>.</p>
</div>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>Templates can also <a class="reference internal" href="templating/hinclude.xhtml"><span class="doc">embed contents asynchronously</span></a>
with the <code class="docutils literal notranslate"><span class="pre">hinclude.js</span></code> JavaScript library.</p>
</div>
</div>
<div class="section" id="template-inheritance-and-layouts">
<h3>Template Inheritance and Layouts</h3>
<p>As your application grows you’ll find more and more repeated elements between
pages, such as headers, footers, sidebars, etc. <a class="reference internal" href="#templates-include"><span class="std std-ref">Including templates</span></a>
and <a class="reference internal" href="#templates-embed-controllers"><span class="std std-ref">embedding controllers</span></a> can help, but
when pages share a common structure, it’s better to use <strong>inheritance</strong>.</p>
<p>The concept of <a class="reference external" href="https://twig.symfony.com/doc/2.x/tags/extends.html">Twig template inheritance</a><span class="link-target"> [https://twig.symfony.com/doc/2.x/tags/extends.html]</span> is similar to PHP class inheritance.
You define a parent template that other templates can extend from and child
templates can override parts of the parent template.</p>
<p>Symfony recommends the following three-level template inheritance for medium and
complex applications:</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">templates/base.html.twig</span></code>, defines the common elements of all application
templates, such as <code class="docutils literal notranslate"><span class="pre">&lt;head&gt;</span></code>, <code class="docutils literal notranslate"><span class="pre">&lt;header&gt;</span></code>, <code class="docutils literal notranslate"><span class="pre">&lt;footer&gt;</span></code>, etc.;</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">templates/layout.html.twig</span></code>, extends from <code class="docutils literal notranslate"><span class="pre">base.html.twig</span></code> and defines
the content structure used in all or most of the pages, such as a two-column
content + sidebar layout. Some sections of the application can define their
own layouts (e.g. <code class="docutils literal notranslate"><span class="pre">templates/blog/layout.html.twig</span></code>);</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">templates/*.html.twig</span></code>, the application pages which extend from the main
<code class="docutils literal notranslate"><span class="pre">layout.html.twig</span></code> template or any other section layout.</p></li>
</ul>
<p>In practice, the <code class="docutils literal notranslate"><span class="pre">base.html.twig</span></code> template would look like this:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# templates/base.html.twig #}</span>
<span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&quot;UTF-8&quot;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span><span class="cp">{%</span> <span class="k">block</span> <span class="nv">title</span> <span class="cp">%}</span>My Application<span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span><span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
        <span class="cp">{%</span> <span class="k">block</span> <span class="nv">stylesheets</span> <span class="cp">%}</span>
            <span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type</span><span class="o">=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href</span><span class="o">=</span><span class="s">&quot;/css/base.css&quot;</span><span class="p">/&gt;</span>
        <span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span>
    <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
        <span class="cp">{%</span> <span class="k">block</span> <span class="nv">body</span> <span class="cp">%}</span>
            <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&quot;sidebar&quot;</span><span class="p">&gt;</span>
                <span class="cp">{%</span> <span class="k">block</span> <span class="nv">sidebar</span> <span class="cp">%}</span>
                    <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
                        <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&quot;</span><span class="cp">{{</span> <span class="nv">path</span><span class="o">(</span><span class="s1">&#39;homepage&#39;</span><span class="o">)</span> <span class="cp">}}</span><span class="s">&quot;</span><span class="p">&gt;</span>Home<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
                        <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&quot;</span><span class="cp">{{</span> <span class="nv">path</span><span class="o">(</span><span class="s1">&#39;blog_index&#39;</span><span class="o">)</span> <span class="cp">}}</span><span class="s">&quot;</span><span class="p">&gt;</span>Blog<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
                    <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
                <span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

            <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&quot;content&quot;</span><span class="p">&gt;</span>
                <span class="cp">{%</span> <span class="k">block</span> <span class="nv">content</span> <span class="cp">%}{%</span> <span class="k">endblock</span> <span class="cp">%}</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span>
    <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</pre></div>
</td></tr></table></div>
<p>The <a class="reference external" href="https://twig.symfony.com/doc/2.x/tags/block.html">Twig block tag</a><span class="link-target"> [https://twig.symfony.com/doc/2.x/tags/block.html]</span> defines the page sections that can be overridden in the
child templates. They can be empty, like the <code class="docutils literal notranslate"><span class="pre">content</span></code> block or define a default
content, like the <code class="docutils literal notranslate"><span class="pre">title</span></code> block, which is displayed when child templates don’t
override them.</p>
<p>The <code class="docutils literal notranslate"><span class="pre">blog/layout.html.twig</span></code> template could be like this:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# templates/blog/layout.html.twig #}</span>
<span class="cp">{%</span> <span class="k">extends</span> <span class="s1">&#39;base.html.twig&#39;</span> <span class="cp">%}</span>

<span class="cp">{%</span> <span class="k">block</span> <span class="nv">content</span> <span class="cp">%}</span>
    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Blog<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>

    <span class="cp">{%</span> <span class="k">block</span> <span class="nv">page_contents</span> <span class="cp">%}{%</span> <span class="k">endblock</span> <span class="cp">%}</span>
<span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span>
</pre></div>
</td></tr></table></div>
<p>The template extends from <code class="docutils literal notranslate"><span class="pre">base.html.twig</span></code> and only defines the contents of
the <code class="docutils literal notranslate"><span class="pre">content</span></code> block. The rest of the parent template blocks will display their
default contents. However, they can be overridden by the third-level inheritance
template, such as <code class="docutils literal notranslate"><span class="pre">blog/index.html.twig</span></code>, which displays the blog index:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# templates/blog/index.html.twig #}</span>
<span class="cp">{%</span> <span class="k">extends</span> <span class="s1">&#39;blog/layout.html.twig&#39;</span> <span class="cp">%}</span>

<span class="cp">{%</span> <span class="k">block</span> <span class="nv">title</span> <span class="cp">%}</span>Blog Index<span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span>

<span class="cp">{%</span> <span class="k">block</span> <span class="nv">page_contents</span> <span class="cp">%}</span>
    <span class="cp">{%</span> <span class="k">for</span> <span class="nv">article</span> <span class="k">in</span> <span class="nv">articles</span> <span class="cp">%}</span>
        <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span><span class="cp">{{</span> <span class="nv">article.title</span> <span class="cp">}}</span><span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span><span class="cp">{{</span> <span class="nv">article.body</span> <span class="cp">}}</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
    <span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span>
<span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span>
</pre></div>
</td></tr></table></div>
<p>This template extends from the second-level template (<code class="docutils literal notranslate"><span class="pre">blog/layout.html.twig</span></code>)
but overrides blocks of different parent templates: <code class="docutils literal notranslate"><span class="pre">page_contents</span></code> from
<code class="docutils literal notranslate"><span class="pre">blog/layout.html.twig</span></code> and <code class="docutils literal notranslate"><span class="pre">title</span></code> from <code class="docutils literal notranslate"><span class="pre">base.html.twig</span></code>.</p>
<p>When you render the <code class="docutils literal notranslate"><span class="pre">blog/index.html.twig</span></code> template, Symfony uses three
different templates to create the final contents. This inheritance mechanism
boosts your productivity because each template includes only its unique contents
and leaves the repeated contents and HTML structure to some parent templates.</p>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>When using <code class="docutils literal notranslate"><span class="pre">extends</span></code>, a child template is forbidden to define template
parts outside of a block. The following code throws a <code class="docutils literal notranslate"><span class="pre">SyntaxError</span></code>:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# app/Resources/views/blog/index.html.twig #}</span>
<span class="cp">{%</span> <span class="k">extends</span> <span class="s1">&#39;base.html.twig&#39;</span> <span class="cp">%}</span>

<span class="c">{# the line below is not captured by a &quot;block&quot; tag #}</span>
<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;alert&quot;</span><span class="p">&gt;</span>Some Alert<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

<span class="c">{# the following is valid #}</span>
<span class="cp">{%</span> <span class="k">block</span> <span class="nv">content</span> <span class="cp">%}</span>My cool blog posts<span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span>
</pre></div>
</td></tr></table></div>
</div>
<p>Read the <a class="reference external" href="https://twig.symfony.com/doc/2.x/tags/extends.html">Twig template inheritance</a><span class="link-target"> [https://twig.symfony.com/doc/2.x/tags/extends.html]</span> docs to learn more about how to reuse
parent block contents when overriding templates and other advanced features.</p>
</div>
</div>
<div class="section" id="output-escaping">
<h2>Output Escaping</h2>
<p>Imagine that your template includes the <code class="docutils literal notranslate"><span class="pre">Hello</span> <span class="pre">{{</span> <span class="pre">name</span> <span class="pre">}}</span></code> code to display the
user name. If a malicious user sets <code class="docutils literal notranslate"><span class="pre">&lt;script&gt;alert('hello!')&lt;/script&gt;</span></code> as
their name and you output that value unchanged, the application will display a
JavaScript popup window.</p>
<p>This is known as a <a class="reference external" href="https://en.wikipedia.org/wiki/Cross-site_scripting">Cross-Site Scripting</a><span class="link-target"> [https://en.wikipedia.org/wiki/Cross-site_scripting]</span> (XSS) attack. And while the previous
example seems harmless, the attacker could write more advanced JavaScript code
to perform malicious actions.</p>
<p>To prevent this attack, use <em>“output escaping”</em> to transform the characters
which have special meaning (e.g. replace <code class="docutils literal notranslate"><span class="pre">&lt;</span></code> by the <code class="docutils literal notranslate"><span class="pre">&amp;lt;</span></code> HTML entity).
Symfony applications are safe by default because they perform automatic output
escaping thanks to the <a class="reference internal" href="reference/configuration/twig.xhtml#config-twig-autoescape"><span class="std std-ref">Twig autoescape option</span></a>:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Hello <span class="cp">{{</span> <span class="nv">name</span> <span class="cp">}}</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
<span class="c">{# if &#39;name&#39; is &#39;&lt;script&gt;alert(&#39;hello!&#39;)&lt;/script&gt;&#39;, Twig will output this:</span>
<span class="c">   &#39;&lt;p&gt;Hello &amp;lt;script&amp;gt;alert(&amp;#39;hello!&amp;#39;)&amp;lt;/script&amp;gt;&lt;/p&gt;&#39; #}</span>
</pre></div>
</td></tr></table></div>
<p>If you are rendering a variable that is trusted and contains HTML contents,
use the <a class="reference external" href="https://twig.symfony.com/doc/2.x/filters/raw.html">Twig raw filter</a><span class="link-target"> [https://twig.symfony.com/doc/2.x/filters/raw.html]</span> to disable the output escaping for that variable:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span><span class="cp">{{</span> <span class="nv">product.title</span><span class="o">|</span><span class="nf">raw</span> <span class="cp">}}</span><span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
<span class="c">{# if &#39;product.title&#39; is &#39;Lorem &lt;strong&gt;Ipsum&lt;/strong&gt;&#39;, Twig will output</span>
<span class="c">   exactly that instead of &#39;Lorem &amp;lt;strong&amp;gt;Ipsum&amp;lt;/strong&amp;gt;&#39; #}</span>
</pre></div>
</td></tr></table></div>
<p>Read the <a class="reference external" href="https://twig.symfony.com/doc/2.x/api.html#escaper-extension">Twig output escaping docs</a><span class="link-target"> [https://twig.symfony.com/doc/2.x/api.html#escaper-extension]</span> to learn more about how to disable output
escaping for a block or even an entire template.</p>
</div>
<div class="section" id="template-namespaces">
<span id="templates-namespaces"></span><h2>Template Namespaces</h2>
<p>Although most applications store their templates in the default <code class="docutils literal notranslate"><span class="pre">templates/</span></code>
directory, you may need to store some or all of them in different directories.
Use the <code class="docutils literal notranslate"><span class="pre">twig.paths</span></code> option to configure those extra directories. Each path is
defined as a <code class="docutils literal notranslate"><span class="pre">key:</span> <span class="pre">value</span></code> pair where the <code class="docutils literal notranslate"><span class="pre">key</span></code> is the template directory and
the <code class="docutils literal notranslate"><span class="pre">value</span></code> is the Twig namespace, which is explained later:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/packages/twig.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">twig</span><span class="p p-Indicator">:</span>
    <span class="c1"># ...</span>
    <span class="l l-Scalar l-Scalar-Plain">paths</span><span class="p p-Indicator">:</span>
        <span class="c1"># directories are relative to the project root dir (but you</span>
        <span class="c1"># can also use absolute directories)</span>
        <span class="s">&#39;email/default/templates&#39;</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">~</span>
        <span class="s">&#39;backend/templates&#39;</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">~</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/packages/twig.xml --&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xmlns:twig=</span><span class="s">&quot;http://symfony.com/schema/dic/twig&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd</span>
<span class="s">        http://symfony.com/schema/dic/twig https://symfony.com/schema/dic/twig/twig-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;twig:config&gt;</span>
        <span class="c">&lt;!-- ... --&gt;</span>
        <span class="c">&lt;!-- directories are relative to the project root dir (but you</span>
<span class="c">             can also use absolute directories --&gt;</span>
        <span class="nt">&lt;twig:path&gt;</span>email/default/templates<span class="nt">&lt;/twig:path&gt;</span>
        <span class="nt">&lt;twig:path&gt;</span>backend/templates<span class="nt">&lt;/twig:path&gt;</span>
    <span class="nt">&lt;/twig:config&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/packages/twig.php</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;twig&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="c1">// ...</span>
    <span class="s1">&#39;paths&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="c1">// directories are relative to the project root dir (but you</span>
        <span class="c1">// can also use absolute directories)</span>
        <span class="s1">&#39;email/default/templates&#39;</span> <span class="o">=&gt;</span> <span class="k">null</span><span class="p">,</span>
        <span class="s1">&#39;backend/templates&#39;</span> <span class="o">=&gt;</span> <span class="k">null</span><span class="p">,</span>
    <span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>When rendering a template, Symfony looks for it first in the <code class="docutils literal notranslate"><span class="pre">twig.paths</span></code>
directories that don’t define a namespace and then falls back to the default
template directory (usually, <code class="docutils literal notranslate"><span class="pre">templates/</span></code>).</p>
<div class="deprecated">
<p><span class="versionmodified">Deprecated since version 4.2: </span>Symfony looks for templates in the <code class="docutils literal notranslate"><span class="pre">src/Resources/views/</span></code> too before
falling back to the default directory. But that behavior is deprecated since
Symfony 4.2 and will be removed in Symfony 5.0.</p>
</div>
<p>Using the above configuration, if your application renders for example the
<code class="docutils literal notranslate"><span class="pre">layout.html.twig</span></code> template, Symfony will first look for
<code class="docutils literal notranslate"><span class="pre">email/default/templates/layout.html.twig</span></code> and <code class="docutils literal notranslate"><span class="pre">backend/templates/layout.html.twig</span></code>.
If any of those templates exists, Symfony will use it instead of using
<code class="docutils literal notranslate"><span class="pre">templates/layout.html.twig</span></code>, which is probably the template you wanted to use.</p>
<p>Twig solves this problem with <strong>namespaces</strong>, which group several templates
under a logic name unrelated to their actual location. Update the previous
configuration to define a namespace for each template directory:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/packages/twig.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">twig</span><span class="p p-Indicator">:</span>
    <span class="c1"># ...</span>
    <span class="l l-Scalar l-Scalar-Plain">paths</span><span class="p p-Indicator">:</span>
        <span class="s">&#39;email/default/templates&#39;</span><span class="p p-Indicator">:</span> <span class="s">&#39;email&#39;</span>
        <span class="s">&#39;backend/templates&#39;</span><span class="p p-Indicator">:</span> <span class="s">&#39;admin&#39;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/packages/twig.xml --&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xmlns:twig=</span><span class="s">&quot;http://symfony.com/schema/dic/twig&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd</span>
<span class="s">        http://symfony.com/schema/dic/twig https://symfony.com/schema/dic/twig/twig-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;twig:config&gt;</span>
        <span class="c">&lt;!-- ... --&gt;</span>
        <span class="nt">&lt;twig:path</span> <span class="na">namespace=</span><span class="s">&quot;email&quot;</span><span class="nt">&gt;</span>email/default/templates<span class="nt">&lt;/twig:path&gt;</span>
        <span class="nt">&lt;twig:path</span> <span class="na">namespace=</span><span class="s">&quot;admin&quot;</span><span class="nt">&gt;</span>backend/templates<span class="nt">&lt;/twig:path&gt;</span>
    <span class="nt">&lt;/twig:config&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/packages/twig.php</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;twig&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="c1">// ...</span>
    <span class="s1">&#39;paths&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;email/default/templates&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;email&#39;</span><span class="p">,</span>
        <span class="s1">&#39;backend/templates&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;admin&#39;</span><span class="p">,</span>
    <span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>Now, if you render the <code class="docutils literal notranslate"><span class="pre">layout.html.twig</span></code> template, Symfony will render the
<code class="docutils literal notranslate"><span class="pre">templates/layout.html.twig</span></code> file. Use the special syntax <code class="docutils literal notranslate"><span class="pre">&#64;</span></code> + namespace to
refer to the other namespaced templates (e.g. <code class="docutils literal notranslate"><span class="pre">&#64;email/layout.html.twig</span></code> and
<code class="docutils literal notranslate"><span class="pre">&#64;admin/layout.html.twig</span></code>).</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>A single Twig namespace can be associated with more than one template
directory. In that case, the order in which paths are added is important
because Twig will start looking for templates from the first defined path.</p>
</div>
<div class="section" id="bundle-templates">
<h3>Bundle Templates</h3>
<p>If you <a class="reference internal" href="setup.xhtml#symfony-flex"><span class="std std-ref">install packages/bundles</span></a> in your application, they
may include their own Twig templates (in the <code class="docutils literal notranslate"><span class="pre">Resources/views/</span></code> directory of
each bundle). To avoid messing with your own templates, Symfony adds bundle
templates under an automatic namespace created after the bundle name.</p>
<p>For example, the templates of a bundle called <code class="docutils literal notranslate"><span class="pre">AcmeFooBundle</span></code> are available
under the <code class="docutils literal notranslate"><span class="pre">AcmeFoo</span></code> namespace. If this bundle includes the template
<code class="docutils literal notranslate"><span class="pre">&lt;your-project&gt;/vendor/acmefoo-bundle/Resources/views/user/profile.html.twig</span></code>,
you can refer to it as <code class="docutils literal notranslate"><span class="pre">&#64;AcmeFoo/user/profile.html.twig</span></code>.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>You can also <a class="reference internal" href="bundles/override.xhtml#override-templates"><span class="std std-ref">override bundle templates</span></a> in case
you want to change some parts of the original bundle templates.</p>
</div>
</div>
</div>
<div class="section" id="learn-more">
<h2>Learn more</h2>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="templating/PHP.xhtml">How to Use PHP instead of Twig for Templates</a></li>
<li class="toctree-l1"><a class="reference internal" href="templating/global_variables.xhtml">How to Inject Variables Automatically into all Templates</a></li>
<li class="toctree-l1"><a class="reference internal" href="templating/hinclude.xhtml">How to Embed Asynchronous Content with hinclude.js</a></li>
<li class="toctree-l1"><a class="reference internal" href="templating/twig_extension.xhtml">How to Write a custom Twig Extension</a></li>
</ul>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>