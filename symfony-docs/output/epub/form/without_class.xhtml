<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Use a Form without a Data Class</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-use-a-form-without-a-data-class">
<span id="index-0"></span><h1>How to Use a Form without a Data Class</h1>
<p>In most cases, a form is tied to an object, and the fields of the form get
and store their data on the properties of that object. This is exactly what
you’ve seen so far in this article with the <code class="docutils literal notranslate"><span class="pre">Task</span></code> class.</p>
<p>But sometimes, you may want to use a form without a class, and get back an
array of the submitted data. The <code class="docutils literal notranslate"><span class="pre">getData()</span></code> method allows you to do
exactly that:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/ContactController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Request</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="k">class</span> <span class="nc">ContactController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">contact</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">)</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="nv">$defaultData</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;message&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Type your message here&#39;</span><span class="p">];</span>
        <span class="nv">$form</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createFormBuilder</span><span class="p">(</span><span class="nv">$defaultData</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="nx">TextType</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;email&#39;</span><span class="p">,</span> <span class="nx">EmailType</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="nx">TextareaType</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;send&#39;</span><span class="p">,</span> <span class="nx">SubmitType</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">getForm</span><span class="p">();</span>

        <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">handleRequest</span><span class="p">(</span><span class="nv">$request</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$form</span><span class="o">-&gt;</span><span class="na">isSubmitted</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">isValid</span><span class="p">())</span> <span class="p">{</span>
            <span class="c1">// data is an array with &quot;name&quot;, &quot;email&quot;, and &quot;message&quot; keys</span>
            <span class="nv">$data</span> <span class="o">=</span> <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">getData</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// ... render the form</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>By default, a form actually assumes that you want to work with arrays of
data, instead of an object. There are exactly two ways that you can change
this behavior and tie the form to an object instead:</p>
<ol class="arabic simple">
<li><p>Pass an object when creating the form (as the first argument to <code class="docutils literal notranslate"><span class="pre">createFormBuilder()</span></code>
or the second argument to <code class="docutils literal notranslate"><span class="pre">createForm()</span></code>);</p></li>
<li><p>Declare the <code class="docutils literal notranslate"><span class="pre">data_class</span></code> option on your form.</p></li>
</ol>
<p>If you <em>don’t</em> do either of these, then the form will return the data as
an array. In this example, since <code class="docutils literal notranslate"><span class="pre">$defaultData</span></code> is not an object (and
no <code class="docutils literal notranslate"><span class="pre">data_class</span></code> option is set), <code class="docutils literal notranslate"><span class="pre">$form-&gt;getData()</span></code> ultimately returns
an array.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>You can also access POST values (in this case “name”) directly through
the request object, like so:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$request</span><span class="o">-&gt;</span><span class="na">request</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>Be advised, however, that in most cases using the <code class="docutils literal notranslate"><span class="pre">getData()</span></code> method is
a better choice, since it returns the data (usually an object) after
it’s been transformed by the Form component.</p>
</div>
<div class="section" id="adding-validation">
<h2>Adding Validation</h2>
<p>The only missing piece is validation. Usually, when you call <code class="docutils literal notranslate"><span class="pre">$form-&gt;handleRequest($request)</span></code>,
the object is validated by reading the constraints that you applied to that
class. If your form is mapped to an object (i.e. you’re using the <code class="docutils literal notranslate"><span class="pre">data_class</span></code>
option or passing an object to your form), this is almost always the approach
you want to use. See <a class="reference internal" href="../validation.xhtml"><span class="doc">Validation</span></a> for more details.</p>
<p id="form-option-constraints">But if the form is not mapped to an object and you instead want to retrieve an
array of your submitted data, how can you add constraints to the data of
your form?</p>
<p>The answer is to set up the constraints yourself, and attach them to the individual
fields. The overall approach is covered a bit more in <a class="reference internal" href="../validation/raw_values.xhtml"><span class="doc">this validation article</span></a>,
but here’s a short example:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\TextType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\FormBuilderInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints\Length</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints\NotBlank</span><span class="p">;</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">buildForm</span><span class="p">(</span><span class="nx">FormBuilderInterface</span> <span class="nv">$builder</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$options</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
<span class="p">{</span>
    <span class="nv">$builder</span>
        <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;firstName&#39;</span><span class="p">,</span> <span class="nx">TextType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span>
            <span class="s1">&#39;constraints&#39;</span> <span class="o">=&gt;</span> <span class="k">new</span> <span class="nx">Length</span><span class="p">([</span><span class="s1">&#39;min&#39;</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">]),</span>
        <span class="p">])</span>
        <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;lastName&#39;</span><span class="p">,</span> <span class="nx">TextType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span>
            <span class="s1">&#39;constraints&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
                <span class="k">new</span> <span class="nx">NotBlank</span><span class="p">(),</span>
                <span class="k">new</span> <span class="nx">Length</span><span class="p">([</span><span class="s1">&#39;min&#39;</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">]),</span>
            <span class="p">],</span>
        <span class="p">])</span>
    <span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>If you are using validation groups, you need to either reference the
<code class="docutils literal notranslate"><span class="pre">Default</span></code> group when creating the form, or set the correct group on
the constraint you are adding:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">new</span> <span class="nx">NotBlank</span><span class="p">([</span><span class="s1">&#39;groups&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;create&#39;</span><span class="p">,</span> <span class="s1">&#39;update&#39;</span><span class="p">]]);</span>
</pre></div>
</div>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>If the form is not mapped to an object, every object in your array of
submitted data is validated using the <code class="docutils literal notranslate"><span class="pre">Symfony\Component\Validator\Constraints\Valid</span></code>
constraint, unless you <a class="reference internal" href="disabling_validation.xhtml"><span class="doc">disable validation</span></a>.</p>
</div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>When a form is only partially submitted (for example, in an HTTP PATCH
request), only the constraints from the submitted form fields will be
evaluated.</p>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>