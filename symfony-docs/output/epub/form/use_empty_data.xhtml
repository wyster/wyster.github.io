<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Configure empty Data for a Form Class</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-configure-empty-data-for-a-form-class">
<span id="index-0"></span><h1>How to Configure empty Data for a Form Class</h1>
<p>The <code class="docutils literal notranslate"><span class="pre">empty_data</span></code> option allows you to specify an empty data set for your
form class. This empty data set would be used if you submit your form, but
haven’t called <code class="docutils literal notranslate"><span class="pre">setData()</span></code> on your form or passed in data when you created
your form. For example, in a controller:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">()</span><span class="o">:</span> <span class="nx">Response</span>
<span class="p">{</span>
    <span class="nv">$blog</span> <span class="o">=</span> <span class="o">...</span><span class="p">;</span>

    <span class="c1">// $blog is passed in as the data, so the empty_data</span>
    <span class="c1">// option is not needed</span>
    <span class="nv">$form</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createForm</span><span class="p">(</span><span class="nx">BlogType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="nv">$blog</span><span class="p">);</span>

    <span class="c1">// no data is passed in, so empty_data is</span>
    <span class="c1">// used to get the &quot;starting data&quot;</span>
    <span class="nv">$form</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createForm</span><span class="p">(</span><span class="nx">BlogType</span><span class="o">::</span><span class="na">class</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>By default, <code class="docutils literal notranslate"><span class="pre">empty_data</span></code> is set to <code class="docutils literal notranslate"><span class="pre">null</span></code>. Or, if you have specified
a <code class="docutils literal notranslate"><span class="pre">data_class</span></code> option for your form class, it will default to a new instance
of that class. That instance will be created by calling the constructor
with no arguments.</p>
<p>If you want to override this default behavior, there are two ways to do this:</p>
<ul class="simple">
<li><p><a class="reference internal" href="#option-1-instantiate-a-new-class">Option 1: Instantiate a new Class</a></p></li>
<li><p><a class="reference internal" href="#option-2-provide-a-closure">Option 2: Provide a Closure</a></p></li>
</ul>
<p>If you didn’t set the <code class="docutils literal notranslate"><span class="pre">data_class</span></code> option, you can pass the initial data as
string or pass an array of strings (where the key matches the field name) when
the form type is compound.</p>
<div class="section" id="option-1-instantiate-a-new-class">
<h2>Option 1: Instantiate a new Class</h2>
<p>One reason you might use this option is if you want to use a constructor
that takes arguments. Remember, the default <code class="docutils literal notranslate"><span class="pre">data_class</span></code> option calls
that constructor with no arguments:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Form/Type/BlogType.php</span>
<span class="k">namespace</span> <span class="nx">App\Form\Type</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">use</span> <span class="nx">App\Entity\Blog</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\AbstractType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\OptionsResolver\OptionsResolver</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">BlogType</span> <span class="k">extends</span> <span class="nx">AbstractType</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$someDependency</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$someDependency</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">someDependency</span> <span class="o">=</span> <span class="nv">$someDependency</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// ...</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">configureOptions</span><span class="p">(</span><span class="nx">OptionsResolver</span> <span class="nv">$resolver</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="nv">$resolver</span><span class="o">-&gt;</span><span class="na">setDefaults</span><span class="p">([</span>
            <span class="s1">&#39;empty_data&#39;</span> <span class="o">=&gt;</span> <span class="k">new</span> <span class="nx">Blog</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">someDependency</span><span class="p">),</span>
        <span class="p">]);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>You can instantiate your class however you want. In this example, you pass
some dependency into the <code class="docutils literal notranslate"><span class="pre">BlogType</span></code> then use that to instantiate the <code class="docutils literal notranslate"><span class="pre">Blog</span></code> class.
The point is, you can set <code class="docutils literal notranslate"><span class="pre">empty_data</span></code> to the exact “new” object that you want to use.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>In order to pass arguments to the <code class="docutils literal notranslate"><span class="pre">BlogType</span></code> constructor, you’ll need to
<a class="reference internal" href="../service_container.xhtml#service-container-creating-service"><span class="std std-ref">register the form as a service</span></a>
and <a class="reference internal" href="../service_container/tags.xhtml"><span class="doc">tag it</span></a> with <code class="docutils literal notranslate"><span class="pre">form.type</span></code>.
If you’re using the
<a class="reference internal" href="../service_container.xhtml#service-container-services-load-example"><span class="std std-ref">default services.yaml configuration</span></a>,
this is already done for you.</p>
</div>
</div>
<div class="section" id="option-2-provide-a-closure">
<span id="forms-empty-data-closure"></span><h2>Option 2: Provide a Closure</h2>
<p>Using a closure is the preferred method, since it will only create the object
if it is needed.</p>
<p>The closure must accept a <code class="docutils literal notranslate"><span class="pre">FormInterface</span></code> instance as the first argument:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Form\FormInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\OptionsResolver\OptionsResolver</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">configureOptions</span><span class="p">(</span><span class="nx">OptionsResolver</span> <span class="nv">$resolver</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
<span class="p">{</span>
    <span class="nv">$resolver</span><span class="o">-&gt;</span><span class="na">setDefaults</span><span class="p">([</span>
        <span class="s1">&#39;empty_data&#39;</span> <span class="o">=&gt;</span> <span class="k">function</span> <span class="p">(</span><span class="nx">FormInterface</span> <span class="nv">$form</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nx">Blog</span><span class="p">(</span><span class="nv">$form</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">getData</span><span class="p">());</span>
        <span class="p">},</span>
    <span class="p">]);</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>