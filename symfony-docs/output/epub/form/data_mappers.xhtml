<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>When and How to Use Data Mappers</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="when-and-how-to-use-data-mappers">
<span id="index-0"></span><h1>When and How to Use Data Mappers</h1>
<p>When a form is compound, the initial data needs to be passed to children so each can display their
own input value. On submission, children values need to be written back into the form.</p>
<p>Data mappers are responsible for reading and writing data from and into parent forms.</p>
<p>The main built-in data mapper uses the <a class="reference internal" href="../components/property_access.xhtml"><span class="doc">PropertyAccess component</span></a>
and will fit most cases. However, you can create your own implementation that
could, for example, pass submitted data to immutable objects via their constructor.</p>
<div class="section" id="the-difference-between-data-transformers-and-mappers">
<h2>The Difference between Data Transformers and Mappers</h2>
<p>It is important to know the difference between
<a class="reference internal" href="data_transformers.xhtml"><span class="doc">data transformers</span></a> and mappers.</p>
<ul class="simple">
<li><p><strong>Data transformers</strong> change the representation of a value (e.g. from
<code class="docutils literal notranslate"><span class="pre">&quot;2016-08-12&quot;</span></code> to a <code class="docutils literal notranslate"><span class="pre">DateTime</span></code> instance);</p></li>
<li><p><strong>Data mappers</strong> map data (e.g. an object or array) to form fields, and vice versa.</p></li>
</ul>
<p>Changing a <code class="docutils literal notranslate"><span class="pre">YYYY-mm-dd</span></code> string value to a <code class="docutils literal notranslate"><span class="pre">DateTime</span></code> instance is done by a
data transformer. Populating inner fields (e.g year, hour, etc) of a compound date type using
a <code class="docutils literal notranslate"><span class="pre">DateTime</span></code> instance is done by the data mapper.</p>
</div>
<div class="section" id="creating-a-data-mapper">
<h2>Creating a Data Mapper</h2>
<p>Suppose that you want to save a set of colors to the database. For this, you’re
using an immutable color object:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Painting/Color.php</span>
<span class="k">namespace</span> <span class="nx">App\Painting</span><span class="p">;</span>

<span class="k">final</span> <span class="k">class</span> <span class="nc">Color</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$red</span><span class="p">;</span>
    <span class="k">private</span> <span class="nv">$green</span><span class="p">;</span>
    <span class="k">private</span> <span class="nv">$blue</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nx">int</span> <span class="nv">$red</span><span class="p">,</span> <span class="nx">int</span> <span class="nv">$green</span><span class="p">,</span> <span class="nx">int</span> <span class="nv">$blue</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">red</span> <span class="o">=</span> <span class="nv">$red</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">green</span> <span class="o">=</span> <span class="nv">$green</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">blue</span> <span class="o">=</span> <span class="nv">$blue</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">getRed</span><span class="p">()</span><span class="o">:</span> <span class="nx">int</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">red</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">getGreen</span><span class="p">()</span><span class="o">:</span> <span class="nx">int</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">green</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">getBlue</span><span class="p">()</span><span class="o">:</span> <span class="nx">int</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">blue</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The form type should be allowed to edit a color. But because you’ve decided to
make the <code class="docutils literal notranslate"><span class="pre">Color</span></code> object immutable, a new color object has to be created each time
one of the values is changed.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>If you’re using a mutable object with constructor arguments, instead of
using a data mapper, you should configure the <code class="docutils literal notranslate"><span class="pre">empty_data</span></code> option with a closure
as described in
<a class="reference internal" href="use_empty_data.xhtml#forms-empty-data-closure"><span class="std std-ref">How to Configure empty Data for a Form Class</span></a>.</p>
</div>
<p>The red, green and blue form fields have to be mapped to the constructor
arguments and the <code class="docutils literal notranslate"><span class="pre">Color</span></code> instance has to be mapped to red, green and blue
form fields. Recognize a familiar pattern? It’s time for a data mapper. The
easiest way to create one is by implementing <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/DataMapperInterface.php" title="Symfony\Component\Form\DataMapperInterface"><span class="pre">DataMapperInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/DataMapperInterface.php]</span></span></code>
in your form type:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Form/ColorType.php</span>
<span class="k">namespace</span> <span class="nx">App\Form</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Painting\Color</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\AbstractType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\DataMapperInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\Exception\UnexpectedTypeException</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\FormInterface</span><span class="p">;</span>

<span class="k">final</span> <span class="k">class</span> <span class="nc">ColorType</span> <span class="k">extends</span> <span class="nx">AbstractType</span> <span class="k">implements</span> <span class="nx">DataMapperInterface</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="sd">/**</span>
<span class="sd">     * @param Color|null $viewData</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">mapDataToForms</span><span class="p">(</span><span class="nv">$viewData</span><span class="p">,</span> <span class="nx">iterable</span> <span class="nv">$forms</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="c1">// there is no data yet, so nothing to prepopulate</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">null</span> <span class="o">===</span> <span class="nv">$viewData</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// invalid data type</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$viewData</span> <span class="nx">instanceof</span> <span class="nx">Color</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nx">UnexpectedTypeException</span><span class="p">(</span><span class="nv">$viewData</span><span class="p">,</span> <span class="nx">Color</span><span class="o">::</span><span class="na">class</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="sd">/** @var FormInterface[] $forms */</span>
        <span class="nv">$forms</span> <span class="o">=</span> <span class="nb">iterator_to_array</span><span class="p">(</span><span class="nv">$forms</span><span class="p">);</span>

        <span class="c1">// initialize form field values</span>
        <span class="nv">$forms</span><span class="p">[</span><span class="s1">&#39;red&#39;</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">setData</span><span class="p">(</span><span class="nv">$viewData</span><span class="o">-&gt;</span><span class="na">getRed</span><span class="p">());</span>
        <span class="nv">$forms</span><span class="p">[</span><span class="s1">&#39;green&#39;</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">setData</span><span class="p">(</span><span class="nv">$viewData</span><span class="o">-&gt;</span><span class="na">getGreen</span><span class="p">());</span>
        <span class="nv">$forms</span><span class="p">[</span><span class="s1">&#39;blue&#39;</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">setData</span><span class="p">(</span><span class="nv">$viewData</span><span class="o">-&gt;</span><span class="na">getBlue</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">mapFormsToData</span><span class="p">(</span><span class="nx">iterable</span> <span class="nv">$forms</span><span class="p">,</span> <span class="o">&amp;</span><span class="nv">$viewData</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="sd">/** @var FormInterface[] $forms */</span>
        <span class="nv">$forms</span> <span class="o">=</span> <span class="nb">iterator_to_array</span><span class="p">(</span><span class="nv">$forms</span><span class="p">);</span>

        <span class="c1">// as data is passed by reference, overriding it will change it in</span>
        <span class="c1">// the form object as well</span>
        <span class="c1">// beware of type inconsistency, see caution below</span>
        <span class="nv">$viewData</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Color</span><span class="p">(</span>
            <span class="nv">$forms</span><span class="p">[</span><span class="s1">&#39;red&#39;</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">getData</span><span class="p">(),</span>
            <span class="nv">$forms</span><span class="p">[</span><span class="s1">&#39;green&#39;</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">getData</span><span class="p">(),</span>
            <span class="nv">$forms</span><span class="p">[</span><span class="s1">&#39;blue&#39;</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">getData</span><span class="p">()</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>The data passed to the mapper is <em>not yet validated</em>. This means that your
objects should allow being created in an invalid state in order to produce
user-friendly errors in the form.</p>
</div>
</div>
<div class="section" id="using-the-mapper">
<h2>Using the Mapper</h2>
<p>After creating the data mapper, you need to configure the form to use it. This is
achieved using the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormConfigBuilderInterface.php" title="Symfony\Component\Form\FormConfigBuilderInterface::setDataMapper()"><span class="pre">setDataMapper()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormConfigBuilderInterface.php]</span></span></code>
method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Form/Type/ColorType.php</span>
<span class="k">namespace</span> <span class="nx">App\Form\Type</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\IntegerType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\FormBuilderInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\OptionsResolver\OptionsResolver</span><span class="p">;</span>

<span class="k">final</span> <span class="k">class</span> <span class="nc">ColorType</span> <span class="k">extends</span> <span class="nx">AbstractType</span> <span class="k">implements</span> <span class="nx">DataMapperInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">buildForm</span><span class="p">(</span><span class="nx">FormBuilderInterface</span> <span class="nv">$builder</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$options</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="nv">$builder</span>
            <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;red&#39;</span><span class="p">,</span> <span class="nx">IntegerType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span>
                <span class="c1">// enforce the strictness of the type to ensure the constructor</span>
                <span class="c1">// of the Color class doesn&#39;t break</span>
                <span class="s1">&#39;empty_data&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;0&#39;</span><span class="p">,</span>
            <span class="p">])</span>
            <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;green&#39;</span><span class="p">,</span> <span class="nx">IntegerType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span>
                <span class="s1">&#39;empty_data&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;0&#39;</span><span class="p">,</span>
            <span class="p">])</span>
            <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;blue&#39;</span><span class="p">,</span> <span class="nx">IntegerType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span>
                <span class="s1">&#39;empty_data&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;0&#39;</span><span class="p">,</span>
            <span class="p">])</span>
            <span class="c1">// configure the data mapper for this FormType</span>
            <span class="o">-&gt;</span><span class="na">setDataMapper</span><span class="p">(</span><span class="nv">$this</span><span class="p">)</span>
        <span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">configureOptions</span><span class="p">(</span><span class="nx">OptionsResolver</span> <span class="nv">$resolver</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="c1">// when creating a new color, the initial data should be null</span>
        <span class="nv">$resolver</span><span class="o">-&gt;</span><span class="na">setDefault</span><span class="p">(</span><span class="s1">&#39;empty_data&#39;</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Cool! When using the <code class="docutils literal notranslate"><span class="pre">ColorType</span></code> form, the custom data mapper methods will
create a new <code class="docutils literal notranslate"><span class="pre">Color</span></code> object now.</p>
</div>
<div class="section" id="mapping-form-fields-using-callbacks">
<h2>Mapping Form Fields Using Callbacks</h2>
<p>Conveniently, you can also map data from and into a form field by using the
<code class="docutils literal notranslate"><span class="pre">getter</span></code> and <code class="docutils literal notranslate"><span class="pre">setter</span></code> options. For example, suppose you have a form with some
fields and only one of them needs to be mapped in some special way or you only
need to change how it’s written into the underlying object. In that case, register
a PHP callable that is able to write or read to/from that specific object:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">public</span> <span class="k">function</span> <span class="nf">buildForm</span><span class="p">(</span><span class="nx">FormBuilderInterface</span> <span class="nv">$builder</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$options</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="nv">$builder</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;state&#39;</span><span class="p">,</span> <span class="nx">ChoiceType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span>
        <span class="s1">&#39;choices&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
            <span class="s1">&#39;active&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span>
            <span class="s1">&#39;paused&#39;</span> <span class="o">=&gt;</span> <span class="k">false</span><span class="p">,</span>
        <span class="p">],</span>
        <span class="s1">&#39;getter&#39;</span> <span class="o">=&gt;</span> <span class="k">function</span> <span class="p">(</span><span class="nx">Task</span> <span class="nv">$task</span><span class="p">,</span> <span class="nx">FormInterface</span> <span class="nv">$form</span><span class="p">)</span><span class="o">:</span> <span class="nx">bool</span> <span class="p">{</span>
            <span class="k">return</span> <span class="o">!</span><span class="nv">$task</span><span class="o">-&gt;</span><span class="na">isCancelled</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nv">$task</span><span class="o">-&gt;</span><span class="na">isPaused</span><span class="p">();</span>
        <span class="p">},</span>
        <span class="s1">&#39;setter&#39;</span> <span class="o">=&gt;</span> <span class="k">function</span> <span class="p">(</span><span class="nx">Task</span> <span class="o">&amp;</span><span class="nv">$task</span><span class="p">,</span> <span class="nx">bool</span> <span class="nv">$state</span><span class="p">,</span> <span class="nx">FormInterface</span> <span class="nv">$form</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nv">$state</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$task</span><span class="o">-&gt;</span><span class="na">activate</span><span class="p">();</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nv">$task</span><span class="o">-&gt;</span><span class="na">pause</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">},</span>
    <span class="p">]);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>If available, these options have priority over the property path accessor and
the default data mapper will still use the <a class="reference internal" href="../components/property_access.xhtml"><span class="doc">PropertyAccess component</span></a>
for the other form fields.</p>
<div class="versionadded">
<p><span class="versionmodified">New in version 5.2: </span>The <code class="docutils literal notranslate"><span class="pre">getter</span></code> and <code class="docutils literal notranslate"><span class="pre">setter</span></code> options were introduced in Symfony 5.2.</p>
</div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>When a form has the <code class="docutils literal notranslate"><span class="pre">inherit_data</span></code> option set to <code class="docutils literal notranslate"><span class="pre">true</span></code>, it does not use the data mapper and
lets its parent map inner values.</p>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>