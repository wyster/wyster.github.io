<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Work with Form Themes</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-work-with-form-themes">
<span id="index-0"></span><h1>How to Work with Form Themes</h1>
<p>This article explains how to use in your app any of the form themes provided by
Symfony and how to create your own custom form theme.</p>
<div class="section" id="symfony-built-in-form-themes">
<span id="symfony-builtin-forms"></span><h2>Symfony Built-In Form Themes</h2>
<p>Symfony comes with several <strong>built-in form themes</strong> that make your forms look
great when using some of the most popular CSS frameworks. Each theme is defined
in a single Twig template and they are enabled in the
<a class="reference internal" href="../reference/configuration/twig.xhtml#config-twig-form-themes"><span class="std std-ref">twig.form_themes</span></a> option:</p>
<ul class="simple">
<li><p><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Twig/Resources/views/Form/form_div_layout.html.twig">form_div_layout.html.twig</a><span class="link-target"> [https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Twig/Resources/views/Form/form_div_layout.html.twig]</span>, wraps each form field inside a <code class="docutils literal notranslate"><span class="pre">&lt;div&gt;</span></code> element
and it’s the theme used by default in Symfony applications unless you configure
it as explained later in this article.</p></li>
<li><p><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Twig/Resources/views/Form/form_table_layout.html.twig">form_table_layout.html.twig</a><span class="link-target"> [https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Twig/Resources/views/Form/form_table_layout.html.twig]</span>, wraps the entire form inside a <code class="docutils literal notranslate"><span class="pre">&lt;table&gt;</span></code>
element and each form field inside a <code class="docutils literal notranslate"><span class="pre">&lt;tr&gt;</span></code> element.</p></li>
<li><p><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Twig/Resources/views/Form/bootstrap_3_layout.html.twig">bootstrap_3_layout.html.twig</a><span class="link-target"> [https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Twig/Resources/views/Form/bootstrap_3_layout.html.twig]</span>, wraps each form field inside a <code class="docutils literal notranslate"><span class="pre">&lt;div&gt;</span></code>
element with the appropriate CSS classes to apply the styles used by the
<a class="reference external" href="https://getbootstrap.com/docs/3.4/">Bootstrap 3 CSS framework</a><span class="link-target"> [https://getbootstrap.com/docs/3.4/]</span>.</p></li>
<li><p><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Twig/Resources/views/Form/bootstrap_3_horizontal_layout.html.twig">bootstrap_3_horizontal_layout.html.twig</a><span class="link-target"> [https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Twig/Resources/views/Form/bootstrap_3_horizontal_layout.html.twig]</span>, it’s similar to the previous
theme, but the CSS classes applied are the ones used to display the forms
horizontally (i.e. the label and the widget in the same row).</p></li>
<li><p><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Twig/Resources/views/Form/bootstrap_4_layout.html.twig">bootstrap_4_layout.html.twig</a><span class="link-target"> [https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Twig/Resources/views/Form/bootstrap_4_layout.html.twig]</span>, same as <code class="docutils literal notranslate"><span class="pre">bootstrap_3_layout.html.twig</span></code>, but
updated for <a class="reference external" href="https://getbootstrap.com/docs/4.4/">Bootstrap 4 CSS framework</a><span class="link-target"> [https://getbootstrap.com/docs/4.4/]</span> styles.</p></li>
<li><p><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Twig/Resources/views/Form/bootstrap_4_horizontal_layout.html.twig">bootstrap_4_horizontal_layout.html.twig</a><span class="link-target"> [https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Twig/Resources/views/Form/bootstrap_4_horizontal_layout.html.twig]</span>, same as
<code class="docutils literal notranslate"><span class="pre">bootstrap_3_horizontal_layout.html.twig</span></code> but updated for Bootstrap 4 styles.</p></li>
<li><p><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Twig/Resources/views/Form/foundation_5_layout.html.twig">foundation_5_layout.html.twig</a><span class="link-target"> [https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Twig/Resources/views/Form/foundation_5_layout.html.twig]</span>, wraps each form field inside a <code class="docutils literal notranslate"><span class="pre">&lt;div&gt;</span></code>
element with the appropriate CSS classes to apply the default styles of the
version 5 of <a class="reference external" href="https://get.foundation/">Foundation CSS framework</a><span class="link-target"> [https://get.foundation/]</span>.</p></li>
<li><p><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Twig/Resources/views/Form/foundation_6_layout.html.twig">foundation_6_layout.html.twig</a><span class="link-target"> [https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Twig/Resources/views/Form/foundation_6_layout.html.twig]</span>, wraps each form field inside a <code class="docutils literal notranslate"><span class="pre">&lt;div&gt;</span></code>
element with the appropriate CSS classes to apply the default styles of the
version 6 of <a class="reference external" href="https://get.foundation/">Foundation CSS framework</a><span class="link-target"> [https://get.foundation/]</span>.</p></li>
</ul>
<div class="versionadded">
<p><span class="versionmodified">New in version 5.1: </span>The <code class="docutils literal notranslate"><span class="pre">foundation_6_layout.html.twig</span></code> was introduced in Symfony 5.1.</p>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Read the article about the <a class="reference internal" href="bootstrap4.xhtml"><span class="doc">Bootstrap 4 Symfony form theme</span></a>
to learn more about it.</p>
</div>
</div>
<div class="section" id="applying-themes-to-all-forms">
<span id="forms-theming-twig"></span><span id="forms-theming-global"></span><h2>Applying Themes to all Forms</h2>
<p>Symfony forms use by default the <code class="docutils literal notranslate"><span class="pre">form_div_layout.html.twig</span></code> theme. If you
want to use another theme for all the forms of your app, configure it in the
<code class="docutils literal notranslate"><span class="pre">twig.form_themes</span></code> option:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/packages/twig.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">twig</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">form_themes</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="s">&#39;bootstrap_4_horizontal_layout.html.twig&#39;</span><span class="p p-Indicator">]</span>
    <span class="c1"># ...</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/packages/twig.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xmlns:twig=</span><span class="s">&quot;http://symfony.com/schema/dic/twig&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd</span>
<span class="s">        http://symfony.com/schema/dic/twig https://symfony.com/schema/dic/twig/twig-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;twig:config&gt;</span>
        <span class="nt">&lt;twig:form-theme&gt;</span>bootstrap_4_horizontal_layout.html.twig<span class="nt">&lt;/twig:form-theme&gt;</span>
        <span class="c">&lt;!-- ... --&gt;</span>
    <span class="nt">&lt;/twig:config&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/packages/twig.php</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;twig&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;form_themes&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;bootstrap_4_horizontal_layout.html.twig&#39;</span><span class="p">,</span>
    <span class="p">],</span>
    <span class="c1">// ...</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>You can pass multiple themes to this option because sometimes form themes only
redefine a few elements. This way, if some theme doesn’t override some element,
Symfony looks up in the other themes.</p>
<p>The order of the themes in the <code class="docutils literal notranslate"><span class="pre">twig.form_themes</span></code> option is important. Each
theme overrides all the previous themes, so you must put the most important
themes at the end of the list.</p>
</div>
<div class="section" id="applying-themes-to-single-forms">
<h2>Applying Themes to Single Forms</h2>
<p>Although most of the times you’ll apply form themes globally, you may need to
apply a theme only to some specific form. You can do that with the
<a class="reference internal" href="../reference/twig_reference.xhtml#reference-twig-tag-form-theme"><span class="std std-ref">form_theme Twig tag</span></a>:</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# this form theme will be applied only to the form of this template #}</span><span class="x"></span>
<span class="cp">{%</span> <span class="k">form_theme</span> <span class="nv">form</span> <span class="s1">&#39;foundation_5_layout.html.twig&#39;</span> <span class="cp">%}</span><span class="x"></span>

<span class="cp">{{</span> <span class="nv">form_start</span><span class="o">(</span><span class="nv">form</span><span class="o">)</span> <span class="cp">}}</span><span class="x"></span>
<span class="x">    </span><span class="c">{# ... #}</span><span class="x"></span>
<span class="cp">{{</span> <span class="nv">form_end</span><span class="o">(</span><span class="nv">form</span><span class="o">)</span> <span class="cp">}}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
<p>The first argument of the <code class="docutils literal notranslate"><span class="pre">form_theme</span></code> tag (<code class="docutils literal notranslate"><span class="pre">form</span></code> in this example) is the
name of the variable that stores the form view object. The second argument is
the path of the Twig template that defines the form theme.</p>
<div class="section" id="applying-multiple-themes-to-single-forms">
<h3>Applying Multiple Themes to Single Forms</h3>
<p>A form can also be customized by applying several themes. To do this, pass the
path of all the Twig templates as an array using the <code class="docutils literal notranslate"><span class="pre">with</span></code> keyword (their
order is important, because each theme overrides all the previous ones):</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# apply multiple form themes but only to the form of this template #}</span><span class="x"></span>
<span class="cp">{%</span> <span class="k">form_theme</span> <span class="nv">form</span> <span class="nv">with</span> <span class="o">[</span>
    <span class="s1">&#39;foundation_5_layout.html.twig&#39;</span><span class="o">,</span>
    <span class="s1">&#39;forms/my_custom_theme.html.twig&#39;</span>
<span class="o">]</span> <span class="cp">%}</span><span class="x"></span>

<span class="c">{# ... #}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="applying-different-themes-to-child-forms">
<h3>Applying Different Themes to Child Forms</h3>
<p>You can also apply a form theme to a specific child of your form:</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{%</span> <span class="k">form_theme</span> <span class="nv">form.a_child_form</span> <span class="s1">&#39;form/my_custom_theme.html.twig&#39;</span> <span class="cp">%}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
<p>This is useful when you want to have a custom theme for a nested form that’s
different than the one of your main form. Specify both your themes:</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{%</span> <span class="k">form_theme</span> <span class="nv">form</span> <span class="s1">&#39;form/my_custom_theme.html.twig&#39;</span> <span class="cp">%}</span><span class="x"></span>
<span class="cp">{%</span> <span class="k">form_theme</span> <span class="nv">form.a_child_form</span> <span class="s1">&#39;form/my_other_theme.html.twig&#39;</span> <span class="cp">%}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="disabling-global-themes-for-single-forms">
<span id="id1"></span><h3>Disabling Global Themes for Single Forms</h3>
<p>Global form themes defined in the app are always applied to all forms, even
those which use the <code class="docutils literal notranslate"><span class="pre">form_theme</span></code> tag to apply their own themes. You may want
to disable this for example when creating an admin interface for a bundle which
can be installed on different Symfony applications (and so you can’t control what
themes are enabled globally). To do that, add the <code class="docutils literal notranslate"><span class="pre">only</span></code> keyword after the list
of form themes:</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{%</span> <span class="k">form_theme</span> <span class="nv">form</span> <span class="nv">with</span> <span class="o">[</span><span class="s1">&#39;foundation_5_layout.html.twig&#39;</span><span class="o">]</span> <span class="nv">only</span> <span class="cp">%}</span><span class="x"></span>

<span class="c">{# ... #}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>When using the <code class="docutils literal notranslate"><span class="pre">only</span></code> keyword, none of Symfony’s built-in form themes
(<code class="docutils literal notranslate"><span class="pre">form_div_layout.html.twig</span></code>, etc.) will be applied. In order to render
your forms correctly, you need to either provide a fully-featured form theme
yourself, or extend one of the built-in form themes with Twig’s <code class="docutils literal notranslate"><span class="pre">use</span></code>
keyword instead of <code class="docutils literal notranslate"><span class="pre">extends</span></code> to re-use the original theme contents.</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# templates/form/common.html.twig #}</span><span class="x"></span>
<span class="cp">{%</span> <span class="k">use</span> <span class="s2">&quot;form_div_layout.html.twig&quot;</span> <span class="cp">%}</span><span class="x"></span>

<span class="c">{# ... #}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
</div>
</div>
</div>
<div class="section" id="creating-your-own-form-theme">
<span id="create-your-own-form-theme"></span><h2>Creating your Own Form Theme</h2>
<p>Symfony uses Twig blocks to render each part of a form - field labels, errors,
<code class="docutils literal notranslate"><span class="pre">&lt;input&gt;</span></code> text fields, <code class="docutils literal notranslate"><span class="pre">&lt;select&gt;</span></code> tags, etc. A <em>theme</em> is a Twig template
with one or more of those blocks that you want to use when rendering a form.</p>
<p>Consider for example a form field that represents an integer property called
<code class="docutils literal notranslate"><span class="pre">age</span></code>. If you add this to the template:</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{{</span> <span class="nv">form_widget</span><span class="o">(</span><span class="nv">form.age</span><span class="o">)</span> <span class="cp">}}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
<p>The generated HTML content will be something like this (it will vary depending
upon the form themes enabled in your app):</p>
<div class="highlight-html notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&quot;number&quot;</span> <span class="na">id</span><span class="o">=</span><span class="s">&quot;form_age&quot;</span> <span class="na">name</span><span class="o">=</span><span class="s">&quot;form[age]&quot;</span> <span class="na">required</span><span class="o">=</span><span class="s">&quot;required&quot;</span> <span class="na">value</span><span class="o">=</span><span class="s">&quot;33&quot;</span><span class="p">/&gt;</span>
</pre></div>
</td></tr></table></div>
<p>Symfony uses a Twig block called <code class="docutils literal notranslate"><span class="pre">integer_widget</span></code> to render that field. This
is because the field type is <code class="docutils literal notranslate"><span class="pre">integer</span></code> and you’re rendering its <code class="docutils literal notranslate"><span class="pre">widget</span></code> (as
opposed to its <code class="docutils literal notranslate"><span class="pre">label</span></code> or <code class="docutils literal notranslate"><span class="pre">errors</span></code> or <code class="docutils literal notranslate"><span class="pre">help</span></code>). The first step to create a
form theme is to know which Twig block to override, as explained in the
following section.</p>
<div class="section" id="form-fragment-naming">
<span id="form-customization-sidebar"></span><span id="id2"></span><h3>Form Fragment Naming</h3>
<p>The naming of form fragments varies depending on your needs:</p>
<ul class="simple">
<li><p>If you want to customize <strong>all fields of the same type</strong> (e.g. all <code class="docutils literal notranslate"><span class="pre">&lt;textarea&gt;</span></code>)
use the <code class="docutils literal notranslate"><span class="pre">field-type_field-part</span></code> pattern (e.g. <code class="docutils literal notranslate"><span class="pre">textarea_widget</span></code>).</p></li>
<li><p>If you want to customize <strong>only one specific field</strong> (e.g. the <code class="docutils literal notranslate"><span class="pre">&lt;textarea&gt;</span></code>
used for the <code class="docutils literal notranslate"><span class="pre">description</span></code> field of the form that edits products) use the
<code class="docutils literal notranslate"><span class="pre">_field-id_field-part</span></code> pattern (e.g. <code class="docutils literal notranslate"><span class="pre">_product_description_widget</span></code>).</p></li>
</ul>
<p>In both cases, the <code class="docutils literal notranslate"><span class="pre">field-part</span></code> can be any of these valid form field parts:</p>
<object data="../_images/form/form-field-parts.svg" type="image/svg+xml"></object><div class="section" id="fragment-naming-for-all-fields-of-the-same-type">
<h4>Fragment Naming for All Fields of the Same Type</h4>
<p>These fragment names follow the <code class="docutils literal notranslate"><span class="pre">type_part</span></code> pattern, where the <code class="docutils literal notranslate"><span class="pre">type</span></code>
corresponds to the field <em>type</em> being rendered (e.g. <code class="docutils literal notranslate"><span class="pre">textarea</span></code>, <code class="docutils literal notranslate"><span class="pre">checkbox</span></code>,
<code class="docutils literal notranslate"><span class="pre">date</span></code>, etc) and the <code class="docutils literal notranslate"><span class="pre">part</span></code> corresponds to <em>what</em> is being rendered (e.g.
<code class="docutils literal notranslate"><span class="pre">label</span></code>, <code class="docutils literal notranslate"><span class="pre">widget</span></code>, etc.)</p>
<p>A few examples of fragment names are:</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">form_row</span></code> - used by <a class="reference internal" href="form_customization.xhtml#reference-forms-twig-row"><span class="std std-ref">form_row()</span></a> to render
most fields;</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">textarea_widget</span></code> - used by <a class="reference internal" href="form_customization.xhtml#reference-forms-twig-widget"><span class="std std-ref">form_widget()</span></a>
to render a <code class="docutils literal notranslate"><span class="pre">textarea</span></code> field type;</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">form_errors</span></code> - used by <a class="reference internal" href="form_customization.xhtml#reference-forms-twig-errors"><span class="std std-ref">form_errors()</span></a>
to render errors for a field;</p></li>
</ul>
</div>
<div class="section" id="fragment-naming-for-individual-fields">
<h4>Fragment Naming for Individual Fields</h4>
<p>These fragment names follow the <code class="docutils literal notranslate"><span class="pre">_id_part</span></code> pattern, where the <code class="docutils literal notranslate"><span class="pre">id</span></code>
corresponds to the field <code class="docutils literal notranslate"><span class="pre">id</span></code> attribute (e.g. <code class="docutils literal notranslate"><span class="pre">product_description</span></code>,
<code class="docutils literal notranslate"><span class="pre">user_age</span></code>, etc) and the <code class="docutils literal notranslate"><span class="pre">part</span></code> corresponds to <em>what</em> is being rendered
(e.g. <code class="docutils literal notranslate"><span class="pre">label</span></code>, <code class="docutils literal notranslate"><span class="pre">widget</span></code>, etc.)</p>
<p>The <code class="docutils literal notranslate"><span class="pre">id</span></code> attribute contains both the form name and the field name (e.g.
<code class="docutils literal notranslate"><span class="pre">product_price</span></code>). The form name can be set manually or generated automatically
based on your form type name (e.g. <code class="docutils literal notranslate"><span class="pre">ProductType</span></code> equates to <code class="docutils literal notranslate"><span class="pre">product</span></code>). If
you’re not sure what your form name is, look at the HTML code rendered for your
form. You can also define this value explicitly with the <code class="docutils literal notranslate"><span class="pre">block_name</span></code> option:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\TextType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\FormBuilderInterface</span><span class="p">;</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">buildForm</span><span class="p">(</span><span class="nx">FormBuilderInterface</span> <span class="nv">$builder</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$options</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="nv">$builder</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="nx">TextType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span>
        <span class="s1">&#39;block_name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;custom_name&#39;</span><span class="p">,</span>
    <span class="p">]);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>In this example, the fragment name will be <code class="docutils literal notranslate"><span class="pre">_product_custom_name_widget</span></code>
instead of the default <code class="docutils literal notranslate"><span class="pre">_product_name_widget</span></code>.</p>
</div>
<div class="section" id="custom-fragment-naming-for-individual-fields">
<span id="form-fragment-custom-naming"></span><h4>Custom Fragment Naming for Individual Fields</h4>
<p>The <code class="docutils literal notranslate"><span class="pre">block_prefix</span></code> option allows form fields to define their own custom
fragment name. This is mostly useful to customize some instances of the same
field without having to <a class="reference internal" href="create_custom_field_type.xhtml"><span class="doc">create a custom form type</span></a>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\TextType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\FormBuilderInterface</span><span class="p">;</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">buildForm</span><span class="p">(</span><span class="nx">FormBuilderInterface</span> <span class="nv">$builder</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$options</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
<span class="p">{</span>
    <span class="nv">$builder</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="nx">TextType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span>
        <span class="s1">&#39;block_prefix&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;wrapped_text&#39;</span><span class="p">,</span>
    <span class="p">]);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Now you can use <code class="docutils literal notranslate"><span class="pre">wrapped_text_row</span></code>, <code class="docutils literal notranslate"><span class="pre">wrapped_text_widget</span></code>, etc. as the block
names.</p>
</div>
<div class="section" id="fragment-naming-for-collections">
<span id="form-custom-prototype"></span><h4>Fragment Naming for Collections</h4>
<p>When using a <a class="reference internal" href="form_collections.xhtml"><span class="doc">collection of forms</span></a>, you have
several ways of customizing the collection and each of its entries. First,
use the following blocks to customize each part of all form collections:</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{%</span> <span class="k">block</span> <span class="nv">collection_row</span> <span class="cp">%}</span><span class="x"> ... </span><span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span><span class="x"></span>
<span class="cp">{%</span> <span class="k">block</span> <span class="nv">collection_label</span> <span class="cp">%}</span><span class="x"> ... </span><span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span><span class="x"></span>
<span class="cp">{%</span> <span class="k">block</span> <span class="nv">collection_widget</span> <span class="cp">%}</span><span class="x"> ... </span><span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span><span class="x"></span>
<span class="cp">{%</span> <span class="k">block</span> <span class="nv">collection_help</span> <span class="cp">%}</span><span class="x"> ... </span><span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span><span class="x"></span>
<span class="cp">{%</span> <span class="k">block</span> <span class="nv">collection_errors</span> <span class="cp">%}</span><span class="x"> ... </span><span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
<p>You can also customize each entry of all collections with the following blocks:</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{%</span> <span class="k">block</span> <span class="nv">collection_entry_row</span> <span class="cp">%}</span><span class="x"> ... </span><span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span><span class="x"></span>
<span class="cp">{%</span> <span class="k">block</span> <span class="nv">collection_entry_label</span> <span class="cp">%}</span><span class="x"> ... </span><span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span><span class="x"></span>
<span class="cp">{%</span> <span class="k">block</span> <span class="nv">collection_entry_widget</span> <span class="cp">%}</span><span class="x"> ... </span><span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span><span class="x"></span>
<span class="cp">{%</span> <span class="k">block</span> <span class="nv">collection_entry_help</span> <span class="cp">%}</span><span class="x"> ... </span><span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span><span class="x"></span>
<span class="cp">{%</span> <span class="k">block</span> <span class="nv">collection_entry_errors</span> <span class="cp">%}</span><span class="x"> ... </span><span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
<div class="versionadded">
<p><span class="versionmodified">New in version 5.1: </span>The <code class="docutils literal notranslate"><span class="pre">collection_entry_*</span></code> blocks were introduced in Symfony 5.1.</p>
</div>
<p>Finally, you can customize specific form collections instead of all of them.
For example, consider the following complex example where a <code class="docutils literal notranslate"><span class="pre">TaskManagerType</span></code>
has a collection of <code class="docutils literal notranslate"><span class="pre">TaskListType</span></code> which in turn has a collection of
<code class="docutils literal notranslate"><span class="pre">TaskType</span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">TaskManagerType</span> <span class="k">extends</span> <span class="nx">AbstractType</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">buildForm</span><span class="p">(</span><span class="nx">FormBuilderInterface</span> <span class="nv">$builder</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$options</span> <span class="o">=</span> <span class="p">[])</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
        <span class="nv">$builder</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;taskLists&#39;</span><span class="p">,</span> <span class="nx">CollectionType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span>
            <span class="s1">&#39;entry_type&#39;</span> <span class="o">=&gt;</span> <span class="nx">TaskListType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span>
            <span class="s1">&#39;block_name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;task_lists&#39;</span><span class="p">,</span>
        <span class="p">]);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">TaskListType</span> <span class="k">extends</span> <span class="nx">AbstractType</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">buildForm</span><span class="p">(</span><span class="nx">FormBuilderInterface</span> <span class="nv">$builder</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$options</span> <span class="o">=</span> <span class="p">[])</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
        <span class="nv">$builder</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;tasks&#39;</span><span class="p">,</span> <span class="nx">CollectionType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span>
            <span class="s1">&#39;entry_type&#39;</span> <span class="o">=&gt;</span> <span class="nx">TaskType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span>
        <span class="p">]);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">TaskType</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">buildForm</span><span class="p">(</span><span class="nx">FormBuilderInterface</span> <span class="nv">$builder</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$options</span> <span class="o">=</span> <span class="p">[])</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="nv">$builder</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">);</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Then you get all the following customizable blocks (where <code class="docutils literal notranslate"><span class="pre">*</span></code> can be replaced
by <code class="docutils literal notranslate"><span class="pre">row</span></code>, <code class="docutils literal notranslate"><span class="pre">widget</span></code>, <code class="docutils literal notranslate"><span class="pre">label</span></code>, or <code class="docutils literal notranslate"><span class="pre">help</span></code>):</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{%</span> <span class="k">block</span> <span class="nv">_task_manager_task_lists_</span><span class="o">*</span> <span class="cp">%}</span><span class="x"></span>
<span class="x">    </span><span class="c">{# the collection field of TaskManager #}</span><span class="x"></span>
<span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span><span class="x"></span>

<span class="cp">{%</span> <span class="k">block</span> <span class="nv">_task_manager_task_lists_entry_</span><span class="o">*</span> <span class="cp">%}</span><span class="x"></span>
<span class="x">    </span><span class="c">{# the inner TaskListType #}</span><span class="x"></span>
<span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span><span class="x"></span>

<span class="cp">{%</span> <span class="k">block</span> <span class="nv">_task_manager_task_lists_entry_tasks_</span><span class="o">*</span> <span class="cp">%}</span><span class="x"></span>
<span class="x">    </span><span class="c">{# the collection field of TaskListType #}</span><span class="x"></span>
<span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span><span class="x"></span>

<span class="cp">{%</span> <span class="k">block</span> <span class="nv">_task_manager_task_lists_entry_tasks_entry_</span><span class="o">*</span> <span class="cp">%}</span><span class="x"></span>
<span class="x">    </span><span class="c">{# the inner TaskType #}</span><span class="x"></span>
<span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span><span class="x"></span>

<span class="cp">{%</span> <span class="k">block</span> <span class="nv">_task_manager_task_lists_entry_tasks_entry_name_</span><span class="o">*</span> <span class="cp">%}</span><span class="x"></span>
<span class="x">    </span><span class="c">{# the field of TaskType #}</span><span class="x"></span>
<span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="template-fragment-inheritance">
<h4>Template Fragment Inheritance</h4>
<p>Each field type has a <em>parent</em> type (e.g. the parent type of <code class="docutils literal notranslate"><span class="pre">textarea</span></code> is
<code class="docutils literal notranslate"><span class="pre">text</span></code>, and the parent type of <code class="docutils literal notranslate"><span class="pre">text</span></code> is <code class="docutils literal notranslate"><span class="pre">form</span></code>) and Symfony uses the
fragment for the parent type if the base fragment doesn’t exist.</p>
<p>When Symfony renders for example the errors for a textarea type, it looks first
for a <code class="docutils literal notranslate"><span class="pre">textarea_errors</span></code> fragment before falling back to the <code class="docutils literal notranslate"><span class="pre">text_errors</span></code>
and <code class="docutils literal notranslate"><span class="pre">form_errors</span></code> fragments.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The “parent” type of each field type is available in the
<a class="reference internal" href="../reference/forms/types.xhtml"><span class="doc">form type reference</span></a> for each field type.</p>
</div>
</div>
</div>
<div class="section" id="creating-a-form-theme-in-the-same-template-as-the-form">
<h3>Creating a Form Theme in the same Template as the Form</h3>
<p>This is recommended when doing customizations specific to a single form in your
app, such as changing all <code class="docutils literal notranslate"><span class="pre">&lt;textarea&gt;</span></code> elements of a form or customizing a
very special form field which will be handled with JavaScript.</p>
<p>You only need to add the special <code class="docutils literal notranslate"><span class="pre">{%</span> <span class="pre">form_theme</span> <span class="pre">form</span> <span class="pre">_self</span> <span class="pre">%}</span></code> tag to the same
template where the form is rendered. This causes Twig to look inside the template
for any overridden form blocks:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{%</span> <span class="k">extends</span> <span class="s1">&#39;base.html.twig&#39;</span> <span class="cp">%}</span>

<span class="cp">{%</span> <span class="k">form_theme</span> <span class="nv">form</span> <span class="nv">_self</span> <span class="cp">%}</span>

<span class="c">{# this overrides the widget of any field of type integer, but only in the</span>
<span class="c">   forms rendered inside this template #}</span>
<span class="cp">{%</span> <span class="k">block</span> <span class="nv">integer_widget</span> <span class="cp">%}</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;...&quot;</span><span class="p">&gt;</span>
        <span class="c">{# ... render the HTML element to display this field ... #}</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span>

<span class="c">{# this overrides the entire row of the field whose &quot;id&quot; = &quot;product_stock&quot; (and whose</span>
<span class="c">   &quot;name&quot; = &quot;product[stock]&quot;) but only in the forms rendered inside this template #}</span>
<span class="cp">{%</span> <span class="k">block</span> <span class="nv">_product_stock_row</span> <span class="cp">%}</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;...&quot;</span> <span class="na">id</span><span class="o">=</span><span class="s">&quot;...&quot;</span><span class="p">&gt;</span>
        <span class="c">{# ... render the entire field contents, including its errors ... #}</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span>

<span class="c">{# ... render the form ... #}</span>
</pre></div>
</td></tr></table></div>
<p>The main disadvantage of this method is that it only works if your template
extends another (<code class="docutils literal notranslate"><span class="pre">'base.html.twig'</span></code> in the previous example). If your template
does not, you must point <code class="docutils literal notranslate"><span class="pre">form_theme</span></code> to a separate template, as explained in
the next section.</p>
<p>Another disadvantage is that the customized form blocks can’t be reused when
rendering other forms in other templates. If that’s what you need, create a form
theme in a separate template as explained in the next section.</p>
</div>
<div class="section" id="creating-a-form-theme-in-a-separate-template">
<h3>Creating a Form Theme in a Separate Template</h3>
<p>This is recommended when creating form themes that are used in your entire app
or even reused in different Symfony applications. You only need to create a Twig
template somewhere and follow the <a class="reference internal" href="#form-fragment-naming"><span class="std std-ref">form fragment naming</span></a>
rules to know which Twig blocks to define.</p>
<p>For example, if your form theme is simple and you only want to override the
<code class="docutils literal notranslate"><span class="pre">&lt;input</span> <span class="pre">type=&quot;integer&quot;&gt;</span></code> elements, create this template:</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# templates/form/my_theme.html.twig #}</span><span class="x"></span>
<span class="cp">{%</span> <span class="k">block</span> <span class="nv">integer_widget</span> <span class="cp">%}</span><span class="x"></span>

<span class="x">    </span><span class="c">{# ... add all the HTML, CSS and JavaScript needed to render this field #}</span><span class="x"></span>

<span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
<p>Now you need to tell Symfony to use this form theme instead of (or in addition
to) the default theme. As explained in the previous sections of this article, if
you want to apply the theme globally to all forms, define the
<code class="docutils literal notranslate"><span class="pre">twig.form_themes</span></code> option:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/packages/twig.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">twig</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">form_themes</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="s">&#39;form/my_theme.html.twig&#39;</span><span class="p p-Indicator">]</span>
    <span class="c1"># ...</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/packages/twig.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xmlns:twig=</span><span class="s">&quot;http://symfony.com/schema/dic/twig&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd</span>
<span class="s">        http://symfony.com/schema/dic/twig https://symfony.com/schema/dic/twig/twig-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;twig:config&gt;</span>
        <span class="nt">&lt;twig:form-theme&gt;</span>form/my_theme.html.twig<span class="nt">&lt;/twig:form-theme&gt;</span>
        <span class="c">&lt;!-- ... --&gt;</span>
    <span class="nt">&lt;/twig:config&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/packages/twig.php</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;twig&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;form_themes&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;form/my_theme.html.twig&#39;</span><span class="p">,</span>
    <span class="p">],</span>
    <span class="c1">// ...</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>If you only want to apply it to some specific forms, use the <code class="docutils literal notranslate"><span class="pre">form_theme</span></code> tag:</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{%</span> <span class="k">form_theme</span> <span class="nv">form</span> <span class="s1">&#39;form/my_theme.html.twig&#39;</span> <span class="cp">%}</span><span class="x"></span>

<span class="cp">{{</span> <span class="nv">form_start</span><span class="o">(</span><span class="nv">form</span><span class="o">)</span> <span class="cp">}}</span><span class="x"></span>
<span class="x">    </span><span class="c">{# ... #}</span><span class="x"></span>
<span class="cp">{{</span> <span class="nv">form_end</span><span class="o">(</span><span class="nv">form</span><span class="o">)</span> <span class="cp">}}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="reusing-parts-of-a-built-in-form-theme">
<span id="referencing-base-form-blocks-twig-specific"></span><h3>Reusing Parts of a Built-In Form Theme</h3>
<p>Creating a complete form theme takes a lot of work because there are too many
different form field types. Instead of defining all those Twig blocks, you can
define only the blocks you are interested in and then configure multiple form
themes in your app or template. This works because when rendering a block which
is not overridden in your custom theme, Symfony falls back to the other themes.</p>
<p>Another solution is to make your form theme template extend from one of the
built-in themes using the <a class="reference external" href="https://twig.symfony.com/doc/2.x/tags/use.html">Twig “use” tag</a><span class="link-target"> [https://twig.symfony.com/doc/2.x/tags/use.html]</span> instead of the <code class="docutils literal notranslate"><span class="pre">extends</span></code> tag so
you can inherit all its blocks (if you are unsure, extend from the default
<code class="docutils literal notranslate"><span class="pre">form_div_layout.html.twig</span></code> theme):</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# templates/form/my_theme.html.twig #}</span><span class="x"></span>
<span class="cp">{%</span> <span class="k">use</span> <span class="s1">&#39;form_div_layout.html.twig&#39;</span> <span class="cp">%}</span><span class="x"></span>

<span class="c">{# ... override only the blocks you are interested in #}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
<p>Finally, you can also use the <a class="reference external" href="https://twig.symfony.com/doc/2.x/functions/parent.html">Twig parent() function</a><span class="link-target"> [https://twig.symfony.com/doc/2.x/functions/parent.html]</span> to reuse the original
content of the built-in theme. This is useful when you only want to make minor
changes, such as wrapping the generated HTML with some element:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# templates/form/my_theme.html.twig #}</span>
<span class="cp">{%</span> <span class="k">use</span> <span class="s1">&#39;form_div_layout.html.twig&#39;</span> <span class="cp">%}</span>

<span class="cp">{%</span> <span class="k">block</span> <span class="nv">integer_widget</span> <span class="cp">%}</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;some-custom-class&quot;</span><span class="p">&gt;</span>
        <span class="cp">{{</span> <span class="nb">parent</span><span class="o">()</span> <span class="cp">}}</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span>
</pre></div>
</td></tr></table></div>
<p>This technique also works when defining the form theme in the same template that
renders the form. However, importing the blocks from the built-in themes is a
bit more complicated:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{%</span> <span class="k">form_theme</span> <span class="nv">form</span> <span class="nv">_self</span> <span class="cp">%}</span>

<span class="c">{# import a block from the built-in theme and rename it so it doesn&#39;t</span>
<span class="c">   conflict with the same block defined in this template #}</span>
<span class="cp">{%</span> <span class="k">use</span> <span class="s1">&#39;form_div_layout.html.twig&#39;</span> <span class="nv">with</span> <span class="nv">integer_widget</span> <span class="nv">as</span> <span class="nv">base_integer_widget</span> <span class="cp">%}</span>

<span class="cp">{%</span> <span class="k">block</span> <span class="nv">integer_widget</span> <span class="cp">%}</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;some-custom-class&quot;</span><span class="p">&gt;</span>
        <span class="cp">{{</span> <span class="nb">block</span><span class="o">(</span><span class="s1">&#39;base_integer_widget&#39;</span><span class="o">)</span> <span class="cp">}}</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span>

<span class="c">{# ... render the form ... #}</span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="customizing-the-form-validation-errors">
<h3>Customizing the Form Validation Errors</h3>
<p>If you define <a class="reference internal" href="../validation.xhtml"><span class="doc">validation rules</span></a> for your objects, you’ll see
some validation error messages when the submitted data is not valid. These
messages are displayed with the <a class="reference internal" href="form_customization.xhtml#reference-forms-twig-errors"><span class="std std-ref">form_errors()</span></a>
function and can be customized with the <code class="docutils literal notranslate"><span class="pre">form_errors</span></code> Twig block in any form
theme, as explained in the previous sections.</p>
<p>An important thing to consider is that certain errors are associated to the
entire form instead of a specific field. In order to differentiate between
global and local errors, use one of the
<a class="reference internal" href="form_customization.xhtml#reference-form-twig-variables"><span class="std std-ref">variables available in forms</span></a> called
<code class="docutils literal notranslate"><span class="pre">compound</span></code>. If it is <code class="docutils literal notranslate"><span class="pre">true</span></code>, it means that what’s being currently rendered
is a collection of fields (e.g. a whole form), and not just an individual field:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# templates/form/my_theme.html.twig #}</span>
<span class="cp">{%</span> <span class="k">block</span> <span class="nv">form_errors</span> <span class="cp">%}</span>
    <span class="cp">{%</span> <span class="k">if</span> <span class="nv">errors</span><span class="o">|</span><span class="nf">length</span> <span class="o">&gt;</span> <span class="m">0</span> <span class="cp">%}</span>
        <span class="cp">{%</span> <span class="k">if</span> <span class="nv">compound</span> <span class="cp">%}</span>
            <span class="c">{# ... display the global form errors #}</span>
            <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
                <span class="cp">{%</span> <span class="k">for</span> <span class="nv">error</span> <span class="k">in</span> <span class="nv">errors</span> <span class="cp">%}</span>
                    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span><span class="cp">{{</span> <span class="nv">error.message</span> <span class="cp">}}</span><span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
                <span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span>
            <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
        <span class="cp">{%</span> <span class="k">else</span> <span class="cp">%}</span>
            <span class="c">{# ... display the errors for a single field #}</span>
        <span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span>
    <span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span>
<span class="cp">{%</span> <span class="k">endblock</span> <span class="nv">form_errors</span> <span class="cp">%}</span>
</pre></div>
</td></tr></table></div>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>