<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Embed Forms</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-embed-forms">
<span id="index-0"></span><h1>How to Embed Forms</h1>
<p>Often, youâ€™ll want to build a form that will include fields from many different
objects. For example, a registration form may contain data belonging to
a <code class="docutils literal notranslate"><span class="pre">User</span></code> object as well as many <code class="docutils literal notranslate"><span class="pre">Address</span></code> objects. Fortunately this can
be achieved by the Form component.</p>
<div class="section" id="embedding-a-single-object">
<span id="forms-embedding-single-object"></span><h2>Embedding a Single Object</h2>
<p>Suppose that each <code class="docutils literal notranslate"><span class="pre">Task</span></code> belongs to a <code class="docutils literal notranslate"><span class="pre">Category</span></code> object. Start by
creating the <code class="docutils literal notranslate"><span class="pre">Category</span></code> object:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Entity/Category.php</span>
<span class="k">namespace</span> <span class="nx">App\Entity</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints</span> <span class="k">as</span> <span class="nx">Assert</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Category</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @Assert\NotBlank</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="nv">$name</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Next, add a new <code class="docutils literal notranslate"><span class="pre">category</span></code> property to the <code class="docutils literal notranslate"><span class="pre">Task</span></code> class:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>

<span class="k">class</span> <span class="nc">Task</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="sd">/**</span>
<span class="sd">     * @Assert\Type(type=&quot;App\Entity\Category&quot;)</span>
<span class="sd">     * @Assert\Valid</span>
<span class="sd">     */</span>
    <span class="k">protected</span> <span class="nv">$category</span><span class="p">;</span>

    <span class="c1">// ...</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">getCategory</span><span class="p">()</span><span class="o">:</span> <span class="o">?</span><span class="nx">Category</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">category</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">setCategory</span><span class="p">(</span><span class="o">?</span><span class="nx">Category</span> <span class="nv">$category</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">category</span> <span class="o">=</span> <span class="nv">$category</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The <code class="docutils literal notranslate"><span class="pre">Valid</span></code> Constraint has been added to the property <code class="docutils literal notranslate"><span class="pre">category</span></code>. This
cascades the validation to the corresponding entity. If you omit this constraint,
the child entity would not be validated.</p>
</div>
<p>Now that your application has been updated to reflect the new requirements,
create a form class so that a <code class="docutils literal notranslate"><span class="pre">Category</span></code> object can be modified by the user:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Form/CategoryType.php</span>
<span class="k">namespace</span> <span class="nx">App\Form</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Entity\Category</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\AbstractType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\FormBuilderInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\OptionsResolver\OptionsResolver</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">CategoryType</span> <span class="k">extends</span> <span class="nx">AbstractType</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">buildForm</span><span class="p">(</span><span class="nx">FormBuilderInterface</span> <span class="nv">$builder</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$options</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="nv">$builder</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">configureOptions</span><span class="p">(</span><span class="nx">OptionsResolver</span> <span class="nv">$resolver</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="nv">$resolver</span><span class="o">-&gt;</span><span class="na">setDefaults</span><span class="p">([</span>
            <span class="s1">&#39;data_class&#39;</span> <span class="o">=&gt;</span> <span class="nx">Category</span><span class="o">::</span><span class="na">class</span><span class="p">,</span>
        <span class="p">]);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The end goal is to allow the <code class="docutils literal notranslate"><span class="pre">Category</span></code> of a <code class="docutils literal notranslate"><span class="pre">Task</span></code> to be modified right
inside the task form itself. To accomplish this, add a <code class="docutils literal notranslate"><span class="pre">category</span></code> field
to the <code class="docutils literal notranslate"><span class="pre">TaskType</span></code> object whose type is an instance of the new <code class="docutils literal notranslate"><span class="pre">CategoryType</span></code>
class:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">App\Form\CategoryType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\FormBuilderInterface</span><span class="p">;</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">buildForm</span><span class="p">(</span><span class="nx">FormBuilderInterface</span> <span class="nv">$builder</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$options</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="nv">$builder</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;category&#39;</span><span class="p">,</span> <span class="nx">CategoryType</span><span class="o">::</span><span class="na">class</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The fields from <code class="docutils literal notranslate"><span class="pre">CategoryType</span></code> can now be rendered alongside those from
the <code class="docutils literal notranslate"><span class="pre">TaskType</span></code> class.</p>
<p>Render the <code class="docutils literal notranslate"><span class="pre">Category</span></code> fields in the same way as the original <code class="docutils literal notranslate"><span class="pre">Task</span></code> fields:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# ... #}</span>

<span class="p">&lt;</span><span class="nt">h3</span><span class="p">&gt;</span>Category<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;category&quot;</span><span class="p">&gt;</span>
    <span class="cp">{{</span> <span class="nv">form_row</span><span class="o">(</span><span class="nv">form.category.name</span><span class="o">)</span> <span class="cp">}}</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

<span class="c">{# ... #}</span>
</pre></div>
</td></tr></table></div>
<p>When the user submits the form, the submitted data for the <code class="docutils literal notranslate"><span class="pre">Category</span></code> fields
are used to construct an instance of <code class="docutils literal notranslate"><span class="pre">Category</span></code>, which is then set on the
<code class="docutils literal notranslate"><span class="pre">category</span></code> field of the <code class="docutils literal notranslate"><span class="pre">Task</span></code> instance.</p>
<p>The <code class="docutils literal notranslate"><span class="pre">Category</span></code> instance is accessible naturally via <code class="docutils literal notranslate"><span class="pre">$task-&gt;getCategory()</span></code>
and can be persisted to the database or used however you need.</p>
</div>
<div class="section" id="embedding-a-collection-of-forms">
<h2>Embedding a Collection of Forms</h2>
<p>You can also embed a collection of forms into one form (imagine a <code class="docutils literal notranslate"><span class="pre">Category</span></code>
form with many <code class="docutils literal notranslate"><span class="pre">Product</span></code> sub-forms). This is done by using the <code class="docutils literal notranslate"><span class="pre">collection</span></code>
field type.</p>
<p>For more information see the <a class="reference internal" href="form_collections.xhtml"><span class="doc">How to Embed a Collection of Forms</span></a> article and the
<a class="reference internal" href="../reference/forms/types/collection.xhtml"><span class="doc">CollectionType</span></a> reference.</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>