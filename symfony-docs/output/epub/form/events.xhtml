<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Form Events</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="form-events">
<span id="index-0"></span><h1>Form Events</h1>
<p>The Form component provides a structured process to let you customize your
forms, by making use of the
<a class="reference internal" href="../components/event_dispatcher.xhtml"><span class="doc">EventDispatcher component</span></a>.
Using form events, you may modify information or fields at different steps
of the workflow: from the population of the form to the submission of the
data from the request.</p>
<p>For example, if you need to add a field depending on request values, you can
register an event listener to the <code class="docutils literal notranslate"><span class="pre">FormEvents::PRE_SUBMIT</span></code> event as follows:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Form\FormEvent</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\FormEvents</span><span class="p">;</span>

<span class="nv">$listener</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="nx">FormEvent</span> <span class="nv">$event</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">};</span>

<span class="nv">$form</span> <span class="o">=</span> <span class="nv">$formFactory</span><span class="o">-&gt;</span><span class="na">createBuilder</span><span class="p">()</span>
    <span class="c1">// ... add form fields</span>
    <span class="o">-&gt;</span><span class="na">addEventListener</span><span class="p">(</span><span class="nx">FormEvents</span><span class="o">::</span><span class="na">PRE_SUBMIT</span><span class="p">,</span> <span class="nv">$listener</span><span class="p">);</span>

<span class="c1">// ...</span>
</pre></div>
</div>
<div class="section" id="the-form-workflow">
<h2>The Form Workflow</h2>
<div class="section" id="the-form-submission-workflow">
<h3>The Form Submission Workflow</h3>
<img alt="../_images/general_flow.png" class="align-center" src="../_images/general_flow.png" />
</div>
<div class="section" id="pre-populating-the-form-formevents-pre-set-data-and-formevents-post-set-data">
<h3>1) Pre-populating the Form (<code class="docutils literal notranslate"><span class="pre">FormEvents::PRE_SET_DATA</span></code> and <code class="docutils literal notranslate"><span class="pre">FormEvents::POST_SET_DATA</span></code>)</h3>
<img alt="../_images/set_data_flow.png" class="align-center" src="../_images/set_data_flow.png" />
<p>Two events are dispatched during pre-population of a form, when
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Form.php" title="Symfony\Component\Form\Form::setData()"><span class="pre">Form::setData()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Form.php]</span></span></code>
is called: <code class="docutils literal notranslate"><span class="pre">FormEvents::PRE_SET_DATA</span></code> and <code class="docutils literal notranslate"><span class="pre">FormEvents::POST_SET_DATA</span></code>.</p>
<div class="section" id="a-the-formevents-pre-set-data-event">
<h4>A) The <code class="docutils literal notranslate"><span class="pre">FormEvents::PRE_SET_DATA</span></code> Event</h4>
<p>The <code class="docutils literal notranslate"><span class="pre">FormEvents::PRE_SET_DATA</span></code> event is dispatched at the beginning of the
<code class="docutils literal notranslate"><span class="pre">Form::setData()</span></code> method. It can be used to:</p>
<ul class="simple">
<li><p>Modify the data given during pre-population;</p></li>
<li><p>Modify a form depending on the pre-populated data (adding or removing fields dynamically).</p></li>
</ul>
<table class="docutils">
<colgroup>
<col style="width: 65%" />
<col style="width: 35%" />
</colgroup>
<thead>
<tr class="row-odd"><th class="head"><p>Data Type</p></th>
<th class="head"><p>Value</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p>Model data</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">null</span></code></p></td>
</tr>
<tr class="row-odd"><td><p>Normalized data</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">null</span></code></p></td>
</tr>
<tr class="row-even"><td><p>View data</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">null</span></code></p></td>
</tr>
</tbody>
</table>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>See all form events at a glance in the
<a class="reference internal" href="#component-form-event-table"><span class="std std-ref">Form Events Information Table</span></a>.</p>
</div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>During <code class="docutils literal notranslate"><span class="pre">FormEvents::PRE_SET_DATA</span></code>,
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Form.php" title="Symfony\Component\Form\Form::setData()"><span class="pre">Form::setData()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Form.php]</span></span></code>
is locked and will throw an exception if used. If you wish to modify
data, you should use
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormEvent.php" title="Symfony\Component\Form\FormEvent::setData()"><span class="pre">FormEvent::setData()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormEvent.php]</span></span></code>
instead.</p>
</div>
<div class="sidebar">
<p class="sidebar-title"><code class="docutils literal notranslate"><span class="pre">FormEvents::PRE_SET_DATA</span></code> in the Form component</p>
<p>The <code class="docutils literal notranslate"><span class="pre">Symfony\Component\Form\Extension\Core\Type\CollectionType</span></code> form type relies
on the <code class="docutils literal notranslate"><span class="pre">Symfony\Component\Form\Extension\Core\EventListener\ResizeFormListener</span></code>
subscriber, listening to the <code class="docutils literal notranslate"><span class="pre">FormEvents::PRE_SET_DATA</span></code> event in order
to reorder the form’s fields depending on the data from the pre-populated
object, by removing and adding all form rows.</p>
</div>
</div>
<div class="section" id="b-the-formevents-post-set-data-event">
<h4>B) The <code class="docutils literal notranslate"><span class="pre">FormEvents::POST_SET_DATA</span></code> Event</h4>
<p>The <code class="docutils literal notranslate"><span class="pre">FormEvents::POST_SET_DATA</span></code> event is dispatched at the end of the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Form.php" title="Symfony\Component\Form\Form::setData()"><span class="pre">Form::setData()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Form.php]</span></span></code>
method. This event is mostly here for reading data after having pre-populated
the form.</p>
<table class="docutils">
<colgroup>
<col style="width: 22%" />
<col style="width: 78%" />
</colgroup>
<thead>
<tr class="row-odd"><th class="head"><p>Data Type</p></th>
<th class="head"><p>Value</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p>Model data</p></td>
<td><p>Model data injected into <code class="docutils literal notranslate"><span class="pre">setData()</span></code></p></td>
</tr>
<tr class="row-odd"><td><p>Normalized data</p></td>
<td><p>Model data transformed using a model transformer</p></td>
</tr>
<tr class="row-even"><td><p>View data</p></td>
<td><p>Normalized data transformed using a view transformer</p></td>
</tr>
</tbody>
</table>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>See all form events at a glance in the
<a class="reference internal" href="#component-form-event-table"><span class="std std-ref">Form Events Information Table</span></a>.</p>
</div>
<div class="sidebar">
<p class="sidebar-title"><code class="docutils literal notranslate"><span class="pre">FormEvents::POST_SET_DATA</span></code> in the Form component</p>
<p>The <code class="docutils literal notranslate"><span class="pre">Symfony\Component\Form\Extension\DataCollector\EventListener\DataCollectorListener</span></code>
class is subscribed to listen to the <code class="docutils literal notranslate"><span class="pre">FormEvents::POST_SET_DATA</span></code> event
in order to collect information about the forms from the denormalized
model and view data.</p>
</div>
</div>
</div>
<div class="section" id="submitting-a-form-formevents-pre-submit-formevents-submit-and-formevents-post-submit">
<h3>2) Submitting a Form (<code class="docutils literal notranslate"><span class="pre">FormEvents::PRE_SUBMIT</span></code>, <code class="docutils literal notranslate"><span class="pre">FormEvents::SUBMIT</span></code> and <code class="docutils literal notranslate"><span class="pre">FormEvents::POST_SUBMIT</span></code>)</h3>
<img alt="../_images/submission_flow.png" class="align-center" src="../_images/submission_flow.png" />
<p>Three events are dispatched when
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Form.php" title="Symfony\Component\Form\Form::handleRequest()"><span class="pre">Form::handleRequest()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Form.php]</span></span></code>
or <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Form.php" title="Symfony\Component\Form\Form::submit()"><span class="pre">Form::submit()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Form.php]</span></span></code> are
called: <code class="docutils literal notranslate"><span class="pre">FormEvents::PRE_SUBMIT</span></code>, <code class="docutils literal notranslate"><span class="pre">FormEvents::SUBMIT</span></code>,
<code class="docutils literal notranslate"><span class="pre">FormEvents::POST_SUBMIT</span></code>.</p>
<div class="section" id="a-the-formevents-pre-submit-event">
<h4>A) The <code class="docutils literal notranslate"><span class="pre">FormEvents::PRE_SUBMIT</span></code> Event</h4>
<p>The <code class="docutils literal notranslate"><span class="pre">FormEvents::PRE_SUBMIT</span></code> event is dispatched at the beginning of the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Form.php" title="Symfony\Component\Form\Form::submit()"><span class="pre">Form::submit()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Form.php]</span></span></code> method.</p>
<p>It can be used to:</p>
<ul class="simple">
<li><p>Change data from the request, before submitting the data to the form;</p></li>
<li><p>Add or remove form fields, before submitting the data to the form.</p></li>
</ul>
<table class="docutils">
<colgroup>
<col style="width: 27%" />
<col style="width: 73%" />
</colgroup>
<thead>
<tr class="row-odd"><th class="head"><p>Data Type</p></th>
<th class="head"><p>Value</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p>Model data</p></td>
<td><p>Same as in <code class="docutils literal notranslate"><span class="pre">FormEvents::POST_SET_DATA</span></code></p></td>
</tr>
<tr class="row-odd"><td><p>Normalized data</p></td>
<td><p>Same as in <code class="docutils literal notranslate"><span class="pre">FormEvents::POST_SET_DATA</span></code></p></td>
</tr>
<tr class="row-even"><td><p>View data</p></td>
<td><p>Same as in <code class="docutils literal notranslate"><span class="pre">FormEvents::POST_SET_DATA</span></code></p></td>
</tr>
</tbody>
</table>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>See all form events at a glance in the
<a class="reference internal" href="#component-form-event-table"><span class="std std-ref">Form Events Information Table</span></a>.</p>
</div>
<div class="sidebar">
<p class="sidebar-title"><code class="docutils literal notranslate"><span class="pre">FormEvents::PRE_SUBMIT</span></code> in the Form component</p>
<p>The <code class="docutils literal notranslate"><span class="pre">Symfony\Component\Form\Extension\Core\EventListener\TrimListener</span></code>
subscriber subscribes to the <code class="docutils literal notranslate"><span class="pre">FormEvents::PRE_SUBMIT</span></code> event in order to
trim the request’s data (for string values).
The <code class="docutils literal notranslate"><span class="pre">Symfony\Component\Form\Extension\Csrf\EventListener\CsrfValidationListener</span></code>
subscriber subscribes to the <code class="docutils literal notranslate"><span class="pre">FormEvents::PRE_SUBMIT</span></code> event in order to
validate the CSRF token.</p>
</div>
</div>
<div class="section" id="b-the-formevents-submit-event">
<h4>B) The <code class="docutils literal notranslate"><span class="pre">FormEvents::SUBMIT</span></code> Event</h4>
<p>The <code class="docutils literal notranslate"><span class="pre">FormEvents::SUBMIT</span></code> event is dispatched right before the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Form.php" title="Symfony\Component\Form\Form::submit()"><span class="pre">Form::submit()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Form.php]</span></span></code> method
transforms back the normalized data to the model and view data.</p>
<p>It can be used to change data from the normalized representation of the data.</p>
<table class="docutils">
<colgroup>
<col style="width: 15%" />
<col style="width: 85%" />
</colgroup>
<thead>
<tr class="row-odd"><th class="head"><p>Data Type</p></th>
<th class="head"><p>Value</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p>Model data</p></td>
<td><p>Same as in <code class="docutils literal notranslate"><span class="pre">FormEvents::POST_SET_DATA</span></code></p></td>
</tr>
<tr class="row-odd"><td><p>Normalized data</p></td>
<td><p>Data from the request reverse-transformed from the request using a view transformer</p></td>
</tr>
<tr class="row-even"><td><p>View data</p></td>
<td><p>Same as in <code class="docutils literal notranslate"><span class="pre">FormEvents::POST_SET_DATA</span></code></p></td>
</tr>
</tbody>
</table>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>See all form events at a glance in the
<a class="reference internal" href="#component-form-event-table"><span class="std std-ref">Form Events Information Table</span></a>.</p>
</div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>At this point, you cannot add or remove fields to the form.</p>
</div>
<div class="sidebar">
<p class="sidebar-title"><code class="docutils literal notranslate"><span class="pre">FormEvents::SUBMIT</span></code> in the Form component</p>
<p>The <code class="docutils literal notranslate"><span class="pre">Symfony\Component\Form\Extension\Core\EventListener\FixUrlProtocolListener</span></code>
subscribes to the <code class="docutils literal notranslate"><span class="pre">FormEvents::SUBMIT</span></code> event in order to prepend a default
protocol to URL fields that were submitted without a protocol.</p>
</div>
</div>
<div class="section" id="c-the-formevents-post-submit-event">
<h4>C) The <code class="docutils literal notranslate"><span class="pre">FormEvents::POST_SUBMIT</span></code> Event</h4>
<p>The <code class="docutils literal notranslate"><span class="pre">FormEvents::POST_SUBMIT</span></code> event is dispatched after the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Form.php" title="Symfony\Component\Form\Form::submit()"><span class="pre">Form::submit()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Form.php]</span></span></code> once the
model and view data have been denormalized.</p>
<p>It can be used to fetch data after denormalization.</p>
<table class="docutils">
<colgroup>
<col style="width: 20%" />
<col style="width: 80%" />
</colgroup>
<thead>
<tr class="row-odd"><th class="head"><p>Data Type</p></th>
<th class="head"><p>Value</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p>Model data</p></td>
<td><p>Normalized data reverse-transformed using a model transformer</p></td>
</tr>
<tr class="row-odd"><td><p>Normalized data</p></td>
<td><p>Same as in <code class="docutils literal notranslate"><span class="pre">FormEvents::SUBMIT</span></code></p></td>
</tr>
<tr class="row-even"><td><p>View data</p></td>
<td><p>Normalized data transformed using a view transformer</p></td>
</tr>
</tbody>
</table>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>See all form events at a glance in the
<a class="reference internal" href="#component-form-event-table"><span class="std std-ref">Form Events Information Table</span></a>.</p>
</div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>At this point, you cannot add or remove fields to the current form and its
children.</p>
</div>
<div class="sidebar">
<p class="sidebar-title"><code class="docutils literal notranslate"><span class="pre">FormEvents::POST_SUBMIT</span></code> in the Form component</p>
<p>The <code class="docutils literal notranslate"><span class="pre">Symfony\Component\Form\Extension\DataCollector\EventListener\DataCollectorListener</span></code>
subscribes to the <code class="docutils literal notranslate"><span class="pre">FormEvents::POST_SUBMIT</span></code> event in order to collect
information about the forms.
The <code class="docutils literal notranslate"><span class="pre">Symfony\Component\Form\Extension\Validator\EventListener\ValidationListener</span></code>
subscribes to the <code class="docutils literal notranslate"><span class="pre">FormEvents::POST_SUBMIT</span></code> event in order to
automatically validate the denormalized object.</p>
</div>
</div>
</div>
</div>
<div class="section" id="registering-event-listeners-or-event-subscribers">
<h2>Registering Event Listeners or Event Subscribers</h2>
<p>In order to be able to use Form events, you need to create an event listener
or an event subscriber and register it to an event.</p>
<p>The name of each of the “form” events is defined as a constant on the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormEvents.php" title="Symfony\Component\Form\FormEvents"><span class="pre">FormEvents</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormEvents.php]</span></span></code> class.
Additionally, each event callback (listener or subscriber method) is passed a
single argument, which is an instance of
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormEvent.php" title="Symfony\Component\Form\FormEvent"><span class="pre">FormEvent</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormEvent.php]</span></span></code>. The event object contains a
reference to the current state of the form and the current data being
processed.</p>
<table class="docutils" id="component-form-event-table">
<colgroup>
<col style="width: 33%" />
<col style="width: 44%" />
<col style="width: 23%" />
</colgroup>
<thead>
<tr class="row-odd"><th class="head"><p>Name</p></th>
<th class="head"><p><code class="docutils literal notranslate"><span class="pre">FormEvents</span></code> Constant</p></th>
<th class="head"><p>Event’s Data</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">form.pre_set_data</span></code></p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">FormEvents::PRE_SET_DATA</span></code></p></td>
<td><p>Model data</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">form.post_set_data</span></code></p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">FormEvents::POST_SET_DATA</span></code></p></td>
<td><p>Model data</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">form.pre_submit</span></code></p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">FormEvents::PRE_SUBMIT</span></code></p></td>
<td><p>Request data</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">form.submit</span></code></p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">FormEvents::SUBMIT</span></code></p></td>
<td><p>Normalized data</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">form.post_submit</span></code></p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">FormEvents::POST_SUBMIT</span></code></p></td>
<td><p>View data</p></td>
</tr>
</tbody>
</table>
<div class="section" id="event-listeners">
<h3>Event Listeners</h3>
<p>An event listener may be any type of valid callable. For example, you can
define an event listener function inline right in the <code class="docutils literal notranslate"><span class="pre">addEventListener</span></code>
method of the <code class="docutils literal notranslate"><span class="pre">FormFactory</span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\CheckboxType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\EmailType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\TextType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\FormEvent</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\FormEvents</span><span class="p">;</span>

<span class="nv">$form</span> <span class="o">=</span> <span class="nv">$formFactory</span><span class="o">-&gt;</span><span class="na">createBuilder</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;username&#39;</span><span class="p">,</span> <span class="nx">TextType</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;showEmail&#39;</span><span class="p">,</span> <span class="nx">CheckboxType</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="na">addEventListener</span><span class="p">(</span><span class="nx">FormEvents</span><span class="o">::</span><span class="na">PRE_SUBMIT</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nx">FormEvent</span> <span class="nv">$event</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getData</span><span class="p">();</span>
        <span class="nv">$form</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getForm</span><span class="p">();</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$user</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// checks whether the user has chosen to display their email or not.</span>
        <span class="c1">// If the data was submitted previously, the additional value that is</span>
        <span class="c1">// included in the request variables needs to be removed.</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$user</span><span class="p">[</span><span class="s1">&#39;showEmail&#39;</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="nv">$user</span><span class="p">[</span><span class="s1">&#39;showEmail&#39;</span><span class="p">])</span> <span class="p">{</span>
            <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;email&#39;</span><span class="p">,</span> <span class="nx">EmailType</span><span class="o">::</span><span class="na">class</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nb">unset</span><span class="p">(</span><span class="nv">$user</span><span class="p">[</span><span class="s1">&#39;email&#39;</span><span class="p">]);</span>
            <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">setData</span><span class="p">(</span><span class="nv">$user</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">})</span>
    <span class="o">-&gt;</span><span class="na">getForm</span><span class="p">();</span>

<span class="c1">// ...</span>
</pre></div>
</div>
<p>When you have created a form type class, you can use one of its methods as a
callback for better readability:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Form/SubscriptionType.php</span>
<span class="k">namespace</span> <span class="nx">App\Form</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\CheckboxType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\TextType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\FormEvent</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\FormEvents</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">class</span> <span class="nc">SubscriptionType</span> <span class="k">extends</span> <span class="nx">AbstractType</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">buildForm</span><span class="p">(</span><span class="nx">FormBuilderInterface</span> <span class="nv">$builder</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$options</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="nv">$builder</span>
            <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;username&#39;</span><span class="p">,</span> <span class="nx">TextType</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;showEmail&#39;</span><span class="p">,</span> <span class="nx">CheckboxType</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">addEventListener</span><span class="p">(</span>
                <span class="nx">FormEvents</span><span class="o">::</span><span class="na">PRE_SET_DATA</span><span class="p">,</span>
                <span class="p">[</span><span class="nv">$this</span><span class="p">,</span> <span class="s1">&#39;onPreSetData&#39;</span><span class="p">]</span>
            <span class="p">)</span>
        <span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">onPreSetData</span><span class="p">(</span><span class="nx">FormEvent</span> <span class="nv">$event</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="event-subscribers">
<h3>Event Subscribers</h3>
<p>Event subscribers have different uses:</p>
<ul class="simple">
<li><p>Improving readability;</p></li>
<li><p>Listening to multiple events;</p></li>
<li><p>Regrouping multiple listeners inside a single class.</p></li>
</ul>
<p>Consider the following example of a form event subscriber:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Form/EventListener/AddEmailFieldListener.php</span>
<span class="k">namespace</span> <span class="nx">App\Form\EventListener</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\EventDispatcher\EventSubscriberInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\EmailType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\FormEvent</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\FormEvents</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">AddEmailFieldListener</span> <span class="k">implements</span> <span class="nx">EventSubscriberInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">getSubscribedEvents</span><span class="p">()</span><span class="o">:</span> <span class="k">array</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="p">[</span>
            <span class="nx">FormEvents</span><span class="o">::</span><span class="na">PRE_SET_DATA</span> <span class="o">=&gt;</span> <span class="s1">&#39;onPreSetData&#39;</span><span class="p">,</span>
            <span class="nx">FormEvents</span><span class="o">::</span><span class="na">PRE_SUBMIT</span>   <span class="o">=&gt;</span> <span class="s1">&#39;onPreSubmit&#39;</span><span class="p">,</span>
        <span class="p">];</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">onPreSetData</span><span class="p">(</span><span class="nx">FormEvent</span> <span class="nv">$event</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getData</span><span class="p">();</span>
        <span class="nv">$form</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getForm</span><span class="p">();</span>

        <span class="c1">// checks whether the user from the initial data has chosen to</span>
        <span class="c1">// display their email or not.</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">true</span> <span class="o">===</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="na">isShowEmail</span><span class="p">())</span> <span class="p">{</span>
            <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;email&#39;</span><span class="p">,</span> <span class="nx">EmailType</span><span class="o">::</span><span class="na">class</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">onPreSubmit</span><span class="p">(</span><span class="nx">FormEvent</span> <span class="nv">$event</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getData</span><span class="p">();</span>
        <span class="nv">$form</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getForm</span><span class="p">();</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$user</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// checks whether the user has chosen to display their email or not.</span>
        <span class="c1">// If the data was submitted previously, the additional value that</span>
        <span class="c1">// is included in the request variables needs to be removed.</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$user</span><span class="p">[</span><span class="s1">&#39;showEmail&#39;</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="nv">$user</span><span class="p">[</span><span class="s1">&#39;showEmail&#39;</span><span class="p">])</span> <span class="p">{</span>
            <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;email&#39;</span><span class="p">,</span> <span class="nx">EmailType</span><span class="o">::</span><span class="na">class</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nb">unset</span><span class="p">(</span><span class="nv">$user</span><span class="p">[</span><span class="s1">&#39;email&#39;</span><span class="p">]);</span>
            <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">setData</span><span class="p">(</span><span class="nv">$user</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>To register the event subscriber, use the <code class="docutils literal notranslate"><span class="pre">addEventSubscriber()</span></code> method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">App\Form\EventListener\AddEmailFieldListener</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\CheckboxType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\TextType</span><span class="p">;</span>

<span class="c1">// ...</span>

<span class="nv">$form</span> <span class="o">=</span> <span class="nv">$formFactory</span><span class="o">-&gt;</span><span class="na">createBuilder</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;username&#39;</span><span class="p">,</span> <span class="nx">TextType</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;showEmail&#39;</span><span class="p">,</span> <span class="nx">CheckboxType</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="na">addEventSubscriber</span><span class="p">(</span><span class="k">new</span> <span class="nx">AddEmailFieldListener</span><span class="p">())</span>
    <span class="o">-&gt;</span><span class="na">getForm</span><span class="p">();</span>

<span class="c1">// ...</span>
</pre></div>
</div>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>