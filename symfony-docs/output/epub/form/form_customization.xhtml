<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Customize Form Rendering</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-customize-form-rendering">
<span id="index-0"></span><h1>How to Customize Form Rendering</h1>
<p>Symfony gives you several ways to customize how a form is rendered. In this
article you’ll learn how to make single customizations to one or more fields of
your forms. If you need to customize all your forms in the same way, create
instead a <a class="reference internal" href="form_themes.xhtml"><span class="doc">form theme</span></a> or use any of the built-in
themes, such as the <a class="reference internal" href="bootstrap4.xhtml"><span class="doc">Bootstrap theme for Symfony forms</span></a>.</p>
<div class="section" id="form-rendering-functions">
<span id="form-rendering-basics"></span><h2>Form Rendering Functions</h2>
<p>A single call to the <a class="reference internal" href="#reference-forms-twig-form"><span class="std std-ref">form() Twig function</span></a> is
enough to render an entire form, including all its fields and error messages:</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# form is a variable passed from the controller and created</span>
<span class="c">  by calling to the $form-&gt;createView() method #}</span><span class="x"></span>
<span class="cp">{{</span> <span class="nv">form</span><span class="o">(</span><span class="nv">form</span><span class="o">)</span> <span class="cp">}}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
<p>The next step is to use the <a class="reference internal" href="#reference-forms-twig-start"><span class="std std-ref">form_start()</span></a>,
<a class="reference internal" href="#reference-forms-twig-end"><span class="std std-ref">form_end()</span></a>,
<a class="reference internal" href="#reference-forms-twig-errors"><span class="std std-ref">form_errors()</span></a> and
<a class="reference internal" href="#reference-forms-twig-row"><span class="std std-ref">form_row()</span></a> Twig functions to render the
different form parts so you can customize them adding HTML elements and attributes:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{{</span> <span class="nv">form_start</span><span class="o">(</span><span class="nv">form</span><span class="o">)</span> <span class="cp">}}</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;my-custom-class-for-errors&quot;</span><span class="p">&gt;</span>
        <span class="cp">{{</span> <span class="nv">form_errors</span><span class="o">(</span><span class="nv">form</span><span class="o">)</span> <span class="cp">}}</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;row&quot;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;col&quot;</span><span class="p">&gt;</span>
            <span class="cp">{{</span> <span class="nv">form_row</span><span class="o">(</span><span class="nv">form.task</span><span class="o">)</span> <span class="cp">}}</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;col&quot;</span> <span class="na">id</span><span class="o">=</span><span class="s">&quot;some-custom-id&quot;</span><span class="p">&gt;</span>
            <span class="cp">{{</span> <span class="nv">form_row</span><span class="o">(</span><span class="nv">form.dueDate</span><span class="o">)</span> <span class="cp">}}</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="cp">{{</span> <span class="nv">form_end</span><span class="o">(</span><span class="nv">form</span><span class="o">)</span> <span class="cp">}}</span>
</pre></div>
</td></tr></table></div>
<p>The <code class="docutils literal notranslate"><span class="pre">form_row()</span></code> function outputs the entire field contents, including the
label, help message, HTML elements and error messages. All this can be further
customized using other Twig functions, as illustrated in the following diagram:</p>
<object data="../_images/form/form-field-parts.svg" type="image/svg+xml"></object><p>The <a class="reference internal" href="#reference-forms-twig-label"><span class="std std-ref">form_label()</span></a>,
<a class="reference internal" href="#reference-forms-twig-widget"><span class="std std-ref">form_widget()</span></a>,
<a class="reference internal" href="#reference-forms-twig-help"><span class="std std-ref">form_help()</span></a> and
<a class="reference internal" href="#reference-forms-twig-errors"><span class="std std-ref">form_errors()</span></a> Twig functions give you total
control over how each form field is rendered, so you can fully customize them:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;form-control&quot;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">i</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;fa fa-calendar&quot;</span><span class="p">&gt;&lt;/</span><span class="nt">i</span><span class="p">&gt;</span> <span class="cp">{{</span> <span class="nv">form_label</span><span class="o">(</span><span class="nv">form.dueDate</span><span class="o">)</span> <span class="cp">}}</span>
    <span class="cp">{{</span> <span class="nv">form_widget</span><span class="o">(</span><span class="nv">form.dueDate</span><span class="o">)</span> <span class="cp">}}</span>

    <span class="p">&lt;</span><span class="nt">small</span><span class="p">&gt;</span><span class="cp">{{</span> <span class="nv">form_help</span><span class="o">(</span><span class="nv">form.dueDate</span><span class="o">)</span> <span class="cp">}}</span><span class="p">&lt;/</span><span class="nt">small</span><span class="p">&gt;</span>

    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;form-error&quot;</span><span class="p">&gt;</span>
        <span class="cp">{{</span> <span class="nv">form_errors</span><span class="o">(</span><span class="nv">form.dueDate</span><span class="o">)</span> <span class="cp">}}</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</pre></div>
</td></tr></table></div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Later in this article you can find the full reference of these Twig
functions with more usage examples.</p>
</div>
</div>
<div class="section" id="form-rendering-variables">
<h2>Form Rendering Variables</h2>
<p>Some of the Twig functions mentioned in the previous section allow to pass
variables to configure their behavior. For example, the <code class="docutils literal notranslate"><span class="pre">form_label()</span></code>
function lets you define a custom label to override the one defined in the form:</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{{</span> <span class="nv">form_label</span><span class="o">(</span><span class="nv">form.task</span><span class="o">,</span> <span class="s1">&#39;My Custom Task Label&#39;</span><span class="o">)</span> <span class="cp">}}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
<p>Some <a class="reference internal" href="../reference/forms/types.xhtml"><span class="doc">form field types</span></a> have additional rendering
options that can be passed to the widget. These options are documented with each
type, but one common option is <code class="docutils literal notranslate"><span class="pre">attr</span></code>, which allows you to modify HTML
attributes on the form element. The following would add the <code class="docutils literal notranslate"><span class="pre">task_field</span></code> CSS
class to the rendered input text field:</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{{</span> <span class="nv">form_widget</span><span class="o">(</span><span class="nv">form.task</span><span class="o">,</span> <span class="o">{</span><span class="s1">&#39;attr&#39;</span><span class="o">:</span> <span class="o">{</span><span class="s1">&#39;class&#39;</span><span class="o">:</span> <span class="s1">&#39;task_field&#39;</span><span class="cp">}}</span><span class="x">) }}</span>
</pre></div>
</td></tr></table></div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If you’re rendering an entire form at once (or an entire embedded form),
the <code class="docutils literal notranslate"><span class="pre">variables</span></code> argument will only be applied to the form itself and
not its children. In other words, the following will <strong>not</strong> pass a
“foo” class attribute to all of the child fields in the form:</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# does **not** work - the variables are not recursive #}</span><span class="x"></span>
<span class="cp">{{</span> <span class="nv">form_widget</span><span class="o">(</span><span class="nv">form</span><span class="o">,</span> <span class="o">{</span> <span class="s1">&#39;attr&#39;</span><span class="o">:</span> <span class="o">{</span><span class="s1">&#39;class&#39;</span><span class="o">:</span> <span class="s1">&#39;foo&#39;</span><span class="o">}</span> <span class="o">})</span> <span class="cp">}}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
</div>
<p>If you need to render form fields “by hand” then you can access individual
values for fields (such as the <code class="docutils literal notranslate"><span class="pre">id</span></code>, <code class="docutils literal notranslate"><span class="pre">name</span></code> and <code class="docutils literal notranslate"><span class="pre">label</span></code>) using its
<code class="docutils literal notranslate"><span class="pre">vars</span></code>  property. For example to get the <code class="docutils literal notranslate"><span class="pre">id</span></code>:</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{{</span> <span class="nv">form.task.vars.id</span> <span class="cp">}}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Later in this article you can find the full reference of these Twig
variables and their description.</p>
</div>
</div>
<div class="section" id="form-themes">
<h2>Form Themes</h2>
<p>The Twig functions and variables shown in the previous sections can help you
customize one or more fields of your forms. However, this customization can’t
be applied to the rest of the forms of your app.</p>
<p>If you want to customize all forms in the same way (for example to adapt the
generated HTML code to the CSS framework used in your app) you must create a
<a class="reference internal" href="form_themes.xhtml"><span class="doc">form theme</span></a>.</p>
</div>
<div class="section" id="form-functions-and-variables-reference">
<span id="reference-form-twig-functions-variables"></span><h2>Form Functions and Variables Reference</h2>
<div class="section" id="functions">
<span id="reference-form-twig-functions"></span><h3>Functions</h3>
<div class="section" id="form-form-view-variables">
<span id="reference-forms-twig-form"></span><h4>form(form_view, variables)</h4>
<p>Renders the HTML of a complete form.</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# render the form and change the submission method #}</span><span class="x"></span>
<span class="cp">{{</span> <span class="nv">form</span><span class="o">(</span><span class="nv">form</span><span class="o">,</span> <span class="o">{</span><span class="s1">&#39;method&#39;</span><span class="o">:</span> <span class="s1">&#39;GET&#39;</span><span class="o">})</span> <span class="cp">}}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
<p>You will mostly use this helper for prototyping or if you use custom form
themes. If you need more flexibility in rendering the form, you should use
the other helpers to render individual parts of the form instead:</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{{</span> <span class="nv">form_start</span><span class="o">(</span><span class="nv">form</span><span class="o">)</span> <span class="cp">}}</span><span class="x"></span>
<span class="x">    </span><span class="cp">{{</span> <span class="nv">form_errors</span><span class="o">(</span><span class="nv">form</span><span class="o">)</span> <span class="cp">}}</span><span class="x"></span>

<span class="x">    </span><span class="cp">{{</span> <span class="nv">form_row</span><span class="o">(</span><span class="nv">form.name</span><span class="o">)</span> <span class="cp">}}</span><span class="x"></span>
<span class="x">    </span><span class="cp">{{</span> <span class="nv">form_row</span><span class="o">(</span><span class="nv">form.dueDate</span><span class="o">)</span> <span class="cp">}}</span><span class="x"></span>

<span class="x">    </span><span class="cp">{{</span> <span class="nv">form_row</span><span class="o">(</span><span class="nv">form.submit</span><span class="o">,</span> <span class="o">{</span> <span class="s1">&#39;label&#39;</span><span class="o">:</span> <span class="s1">&#39;Submit me&#39;</span> <span class="o">})</span> <span class="cp">}}</span><span class="x"></span>
<span class="cp">{{</span> <span class="nv">form_end</span><span class="o">(</span><span class="nv">form</span><span class="o">)</span> <span class="cp">}}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="form-start-form-view-variables">
<span id="reference-forms-twig-start"></span><h4>form_start(form_view, variables)</h4>
<p>Renders the start tag of a form. This helper takes care of printing the
configured method and target action of the form. It will also include the
correct <code class="docutils literal notranslate"><span class="pre">enctype</span></code> property if the form contains upload fields.</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# render the start tag and change the submission method #}</span><span class="x"></span>
<span class="cp">{{</span> <span class="nv">form_start</span><span class="o">(</span><span class="nv">form</span><span class="o">,</span> <span class="o">{</span><span class="s1">&#39;method&#39;</span><span class="o">:</span> <span class="s1">&#39;GET&#39;</span><span class="o">})</span> <span class="cp">}}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="form-end-form-view-variables">
<span id="reference-forms-twig-end"></span><h4>form_end(form_view, variables)</h4>
<p>Renders the end tag of a form.</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{{</span> <span class="nv">form_end</span><span class="o">(</span><span class="nv">form</span><span class="o">)</span> <span class="cp">}}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
<p>This helper also outputs <code class="docutils literal notranslate"><span class="pre">form_rest()</span></code> (which is explained later in this
article) unless you set <code class="docutils literal notranslate"><span class="pre">render_rest</span></code> to false:</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# don&#39;t render unrendered fields #}</span><span class="x"></span>
<span class="cp">{{</span> <span class="nv">form_end</span><span class="o">(</span><span class="nv">form</span><span class="o">,</span> <span class="o">{</span><span class="s1">&#39;render_rest&#39;</span><span class="o">:</span> <span class="kp">false</span><span class="o">})</span> <span class="cp">}}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="form-label-form-view-label-variables">
<span id="reference-forms-twig-label"></span><h4>form_label(form_view, label, variables)</h4>
<p>Renders the label for the given field. You can optionally pass the specific
label you want to display as the second argument.</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{{</span> <span class="nv">form_label</span><span class="o">(</span><span class="nv">form.name</span><span class="o">)</span> <span class="cp">}}</span><span class="x"></span>

<span class="c">{# The two following syntaxes are equivalent #}</span><span class="x"></span>
<span class="cp">{{</span> <span class="nv">form_label</span><span class="o">(</span><span class="nv">form.name</span><span class="o">,</span> <span class="s1">&#39;Your Name&#39;</span><span class="o">,</span> <span class="o">{</span><span class="s1">&#39;label_attr&#39;</span><span class="o">:</span> <span class="o">{</span><span class="s1">&#39;class&#39;</span><span class="o">:</span> <span class="s1">&#39;foo&#39;</span><span class="cp">}}</span><span class="x">) }}</span>

<span class="cp">{{</span> <span class="nv">form_label</span><span class="o">(</span><span class="nv">form.name</span><span class="o">,</span> <span class="kp">null</span><span class="o">,</span> <span class="o">{</span>
    <span class="s1">&#39;label&#39;</span><span class="o">:</span> <span class="s1">&#39;Your name&#39;</span><span class="o">,</span>
    <span class="s1">&#39;label_attr&#39;</span><span class="o">:</span> <span class="o">{</span><span class="s1">&#39;class&#39;</span><span class="o">:</span> <span class="s1">&#39;foo&#39;</span><span class="o">}</span>
<span class="o">})</span> <span class="cp">}}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
<p>See “<a class="reference internal" href="#twig-reference-form-variables"><span class="std std-ref">Form Variables Reference</span></a>” to learn about the <code class="docutils literal notranslate"><span class="pre">variables</span></code>
argument.</p>
</div>
<div class="section" id="form-help-form-view">
<span id="reference-forms-twig-help"></span><h4>form_help(form_view)</h4>
<p>Renders the help text for the given field.</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{{</span> <span class="nv">form_help</span><span class="o">(</span><span class="nv">form.name</span><span class="o">)</span> <span class="cp">}}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="form-errors-form-view">
<span id="reference-forms-twig-errors"></span><h4>form_errors(form_view)</h4>
<p>Renders any errors for the given field.</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# render only the error messages related to this field #}</span><span class="x"></span>
<span class="cp">{{</span> <span class="nv">form_errors</span><span class="o">(</span><span class="nv">form.name</span><span class="o">)</span> <span class="cp">}}</span><span class="x"></span>

<span class="c">{# render any &quot;global&quot; errors not associated to any form field #}</span><span class="x"></span>
<span class="cp">{{</span> <span class="nv">form_errors</span><span class="o">(</span><span class="nv">form</span><span class="o">)</span> <span class="cp">}}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>In the Bootstrap 4 form theme, <code class="docutils literal notranslate"><span class="pre">form_errors()</span></code> is already included
in <code class="docutils literal notranslate"><span class="pre">form_label()</span></code>, see “<a class="reference internal" href="bootstrap4.xhtml#reference-forms-bootstrap-error-messages"><span class="std std-ref">Error Messages</span></a>”</p>
</div>
</div>
<div class="section" id="form-widget-form-view-variables">
<span id="reference-forms-twig-widget"></span><h4>form_widget(form_view, variables)</h4>
<p>Renders the HTML widget of a given field. If you apply this to an entire
form or collection of fields, each underlying form row will be rendered.</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# render a widget, but add a &quot;foo&quot; class to it #}</span><span class="x"></span>
<span class="cp">{{</span> <span class="nv">form_widget</span><span class="o">(</span><span class="nv">form.name</span><span class="o">,</span> <span class="o">{</span><span class="s1">&#39;attr&#39;</span><span class="o">:</span> <span class="o">{</span><span class="s1">&#39;class&#39;</span><span class="o">:</span> <span class="s1">&#39;foo&#39;</span><span class="cp">}}</span><span class="x">) }}</span>
</pre></div>
</td></tr></table></div>
<p>The second argument to <code class="docutils literal notranslate"><span class="pre">form_widget()</span></code> is an array of variables. The most
common variable is <code class="docutils literal notranslate"><span class="pre">attr</span></code>, which is an array of HTML attributes to apply
to the HTML widget. In some cases, certain types also have other template-related
options that can be passed. These are discussed on a type-by-type basis.
The <code class="docutils literal notranslate"><span class="pre">attributes</span></code> are not applied recursively to child fields if you’re
rendering many fields at once (e.g. <code class="docutils literal notranslate"><span class="pre">form_widget(form)</span></code>).</p>
<p>See “<a class="reference internal" href="#twig-reference-form-variables"><span class="std std-ref">Form Variables Reference</span></a>” to learn more about the <code class="docutils literal notranslate"><span class="pre">variables</span></code>
argument.</p>
</div>
<div class="section" id="form-row-form-view-variables">
<span id="reference-forms-twig-row"></span><h4>form_row(form_view, variables)</h4>
<p>Renders the “row” of a given field, which is the combination of the field’s
label, errors, help and widget.</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# render a field row, but display a label with text &quot;foo&quot; #}</span><span class="x"></span>
<span class="cp">{{</span> <span class="nv">form_row</span><span class="o">(</span><span class="nv">form.name</span><span class="o">,</span> <span class="o">{</span><span class="s1">&#39;label&#39;</span><span class="o">:</span> <span class="s1">&#39;foo&#39;</span><span class="o">})</span> <span class="cp">}}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
<p>The second argument to <code class="docutils literal notranslate"><span class="pre">form_row()</span></code> is an array of variables. The templates
provided in Symfony only allow to override the label as shown in the example
above.</p>
<p>See “<a class="reference internal" href="#twig-reference-form-variables"><span class="std std-ref">Form Variables Reference</span></a>” to learn about the <code class="docutils literal notranslate"><span class="pre">variables</span></code>
argument.</p>
</div>
<div class="section" id="form-rest-form-view-variables">
<span id="reference-forms-twig-rest"></span><h4>form_rest(form_view, variables)</h4>
<p>This renders all fields that have not yet been rendered for the given form.
It’s a good idea to always have this somewhere inside your form as it’ll
render hidden fields for you and make any fields you forgot to render easier to
spot (since it’ll render the field for you).</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{{</span> <span class="nv">form_rest</span><span class="o">(</span><span class="nv">form</span><span class="o">)</span> <span class="cp">}}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="form-parent-form-view">
<h4>form_parent(form_view)</h4>
<div class="versionadded">
<p><span class="versionmodified">New in version 4.3: </span>The <code class="docutils literal notranslate"><span class="pre">form_parent()</span></code> function was introduced in Symfony 4.3.</p>
</div>
<p>Returns the parent form view or <code class="docutils literal notranslate"><span class="pre">null</span></code> if the form view already is the
root form. Using this function should be preferred over accessing the parent
form using <code class="docutils literal notranslate"><span class="pre">form.parent</span></code>. The latter way will produce different results
when a child form is named <code class="docutils literal notranslate"><span class="pre">parent</span></code>.</p>
</div>
</div>
<div class="section" id="tests">
<h3>Tests</h3>
<p>Tests can be executed by using the <code class="docutils literal notranslate"><span class="pre">is</span></code> operator in Twig to create a
condition. Read <a class="reference external" href="https://twig.symfony.com/doc/2.x/templates.html#test-operator">the Twig documentation</a><span class="link-target"> [https://twig.symfony.com/doc/2.x/templates.html#test-operator]</span> for more information.</p>
<div class="section" id="selectedchoice-selected-value">
<span id="form-twig-selectedchoice"></span><h4>selectedchoice(selected_value)</h4>
<p>This test will check if the current choice is equal to the <code class="docutils literal notranslate"><span class="pre">selected_value</span></code>
or if the current choice is in the array (when <code class="docutils literal notranslate"><span class="pre">selected_value</span></code> is an
array).</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="p">&lt;</span><span class="nt">option</span> <span class="cp">{%</span> <span class="k">if</span> <span class="nv">choice</span> <span class="k">is</span> <span class="nf">selectedchoice</span><span class="o">(</span><span class="nv">value</span><span class="o">)</span> <span class="cp">%}</span><span class="na">selected</span><span class="o">=</span><span class="s">&quot;selected&quot;</span><span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span><span class="p">&gt;</span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="rootform">
<span id="form-twig-rootform"></span><h4>rootform</h4>
<p>This test will check if the current <code class="docutils literal notranslate"><span class="pre">form</span></code> does not have a parent form view.</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="x"> </span><span class="c">{# DON&#39;T DO THIS: this simple check can&#39;t differentiate between a form having</span>
<span class="c">    a parent form view and a form defining a nested form field called &#39;parent&#39; #}</span><span class="x"></span>

<span class="x"> </span><span class="cp">{%</span> <span class="k">if</span> <span class="nv">form.parent</span> <span class="k">is</span> <span class="nf">null</span> <span class="cp">%}</span><span class="x"></span>
<span class="x">     </span><span class="cp">{{</span> <span class="nv">form_errors</span><span class="o">(</span><span class="nv">form</span><span class="o">)</span> <span class="cp">}}</span><span class="x"></span>
<span class="x"> </span><span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span><span class="x"></span>

<span class="c">{# DO THIS: this check is always reliable, even if the form defines a field called &#39;parent&#39; #}</span><span class="x"></span>

<span class="x"> </span><span class="cp">{%</span> <span class="k">if</span> <span class="nv">form</span> <span class="k">is</span> <span class="nf">rootform</span> <span class="cp">%}</span><span class="x"></span>
<span class="x">     </span><span class="cp">{{</span> <span class="nv">form_errors</span><span class="o">(</span><span class="nv">form</span><span class="o">)</span> <span class="cp">}}</span><span class="x"></span>
<span class="x"> </span><span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
</div>
</div>
<div class="section" id="form-variables-reference">
<span id="reference-form-twig-variables"></span><span id="twig-reference-form-variables"></span><h3>Form Variables Reference</h3>
<p>The following variables are common to every field type. Certain field types
may define even more variables and some variables here only really apply to
certain types. To know the exact variables available for each type, check out
the code of the templates used by your <a class="reference internal" href="form_themes.xhtml"><span class="doc">form theme</span></a>.</p>
<p>Assuming you have a <code class="docutils literal notranslate"><span class="pre">form</span></code> variable in your template and you want to
reference the variables on the <code class="docutils literal notranslate"><span class="pre">name</span></code> field, accessing the variables is
done by using a public <code class="docutils literal notranslate"><span class="pre">vars</span></code> property on the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormView.php" title="Symfony\Component\Form\FormView"><span class="pre">FormView</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormView.php]</span></span></code> object:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="p">&lt;</span><span class="nt">label</span> <span class="na">for</span><span class="o">=</span><span class="s">&quot;</span><span class="cp">{{</span> <span class="nv">form.name.vars.id</span> <span class="cp">}}</span><span class="s">&quot;</span>
    <span class="na">class</span><span class="o">=</span><span class="s">&quot;</span><span class="cp">{{</span> <span class="nv">form.name.vars.required</span> <span class="o">?</span> <span class="s1">&#39;required&#39;</span> <span class="cp">}}</span><span class="s">&quot;</span><span class="p">&gt;</span>
    <span class="cp">{{</span> <span class="nv">form.name.vars.label</span> <span class="cp">}}</span>
<span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
</pre></div>
</td></tr></table></div>
<table class="docutils">
<colgroup>
<col style="width: 20%" />
<col style="width: 80%" />
</colgroup>
<thead>
<tr class="row-odd"><th class="head"><p>Variable</p></th>
<th class="head"><p>Usage</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">action</span></code></p></td>
<td><p>The action of the current form.</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">attr</span></code></p></td>
<td><p>A key-value array that will be rendered as HTML attributes on the field.</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">block_prefixes</span></code></p></td>
<td><p>An array of all the names of the parent types.</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">cache_key</span></code></p></td>
<td><p>A unique key which is used for caching.</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">compound</span></code></p></td>
<td><p>Whether or not a field is actually a holder for a group of children fields
(for example, a <code class="docutils literal notranslate"><span class="pre">choice</span></code> field, which is actually a group of checkboxes).</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">data</span></code></p></td>
<td><p>The normalized data of the type.</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">disabled</span></code></p></td>
<td><p>If <code class="docutils literal notranslate"><span class="pre">true</span></code>, <code class="docutils literal notranslate"><span class="pre">disabled=&quot;disabled&quot;</span></code> is added to the field.</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">errors</span></code></p></td>
<td><p>An array of any errors attached to <em>this</em> specific field (e.g. <code class="docutils literal notranslate"><span class="pre">form.title.errors</span></code>).
Note that you can’t use <code class="docutils literal notranslate"><span class="pre">form.errors</span></code> to determine if a form is valid,
since this only returns “global” errors: some individual fields may have errors.
Instead, use the <code class="docutils literal notranslate"><span class="pre">valid</span></code> option.</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">form</span></code></p></td>
<td><p>The current <code class="docutils literal notranslate"><span class="pre">FormView</span></code> instance.</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">full_name</span></code></p></td>
<td><p>The <code class="docutils literal notranslate"><span class="pre">name</span></code> HTML attribute to be rendered.</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">help</span></code></p></td>
<td><p>The help message that will be rendered.</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">id</span></code></p></td>
<td><p>The <code class="docutils literal notranslate"><span class="pre">id</span></code> HTML attribute to be rendered.</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">label</span></code></p></td>
<td><p>The string label that will be rendered.</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">label_attr</span></code></p></td>
<td><p>A key-value array that will be rendered as HTML attributes on the label.</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">method</span></code></p></td>
<td><p>The method of the current form (POST, GET, etc.).</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">multipart</span></code></p></td>
<td><p>If <code class="docutils literal notranslate"><span class="pre">true</span></code>, <code class="docutils literal notranslate"><span class="pre">form_enctype</span></code> will render <code class="docutils literal notranslate"><span class="pre">enctype=&quot;multipart/form-data&quot;</span></code>.</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">name</span></code></p></td>
<td><p>The name of the field (e.g. <code class="docutils literal notranslate"><span class="pre">title</span></code>) - but not the <code class="docutils literal notranslate"><span class="pre">name</span></code>
HTML attribute, which is <code class="docutils literal notranslate"><span class="pre">full_name</span></code>.</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">required</span></code></p></td>
<td><p>If <code class="docutils literal notranslate"><span class="pre">true</span></code>, a <code class="docutils literal notranslate"><span class="pre">required</span></code> attribute is added to the field to activate HTML5
validation. Additionally, a <code class="docutils literal notranslate"><span class="pre">required</span></code> class is added to the label.</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">submitted</span></code></p></td>
<td><p>Returns <code class="docutils literal notranslate"><span class="pre">true</span></code> or <code class="docutils literal notranslate"><span class="pre">false</span></code> depending on whether the whole form is submitted</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">translation_domain</span></code></p></td>
<td><p>The domain of the translations for this form.</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">valid</span></code></p></td>
<td><p>Returns <code class="docutils literal notranslate"><span class="pre">true</span></code> or <code class="docutils literal notranslate"><span class="pre">false</span></code> depending on whether the whole form is valid.</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">value</span></code></p></td>
<td><p>The value that will be used when rendering (commonly the <code class="docutils literal notranslate"><span class="pre">value</span></code> HTML attribute).
This only applies to the root form element.</p></td>
</tr>
</tbody>
</table>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Behind the scenes, these variables are made available to the <code class="docutils literal notranslate"><span class="pre">FormView</span></code>
object of your form when the Form component calls <code class="docutils literal notranslate"><span class="pre">buildView()</span></code> and
<code class="docutils literal notranslate"><span class="pre">finishView()</span></code> on each “node” of your form tree. To see what “view”
variables a particular field has, find the source code for the form
field (and its parent fields) and look at the above two functions.</p>
</div>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>