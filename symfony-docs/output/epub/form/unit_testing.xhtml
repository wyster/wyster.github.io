<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Unit Test your Forms</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-unit-test-your-forms">
<span id="index-0"></span><h1>How to Unit Test your Forms</h1>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>This article is intended for developers who create
<a class="reference internal" href="create_custom_field_type.xhtml"><span class="doc">custom form types</span></a>. If you are using
the <a class="reference internal" href="../reference/forms/types.xhtml"><span class="doc">built-in Symfony form types</span></a> or the form
types provided by third-party bundles, you donâ€™t need to unit test them.</p>
</div>
<p>The Form component consists of 3 core objects: a form type (implementing
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormTypeInterface.php" title="Symfony\Component\Form\FormTypeInterface"><span class="pre">FormTypeInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormTypeInterface.php]</span></span></code>), the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Form.php" title="Symfony\Component\Form\Form"><span class="pre">Form</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Form.php]</span></span></code> and the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormView.php" title="Symfony\Component\Form\FormView"><span class="pre">FormView</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormView.php]</span></span></code>.</p>
<p>The only class that is usually manipulated by programmers is the form type class
which serves as a form blueprint. It is used to generate the <code class="docutils literal notranslate"><span class="pre">Form</span></code> and the
<code class="docutils literal notranslate"><span class="pre">FormView</span></code>. You could test it directly by mocking its interactions with the
factory but it would be complex. It is better to pass it to FormFactory like it
is done in a real application. It is easier to bootstrap and you can trust
the Symfony components enough to use them as a testing base.</p>
<p>There is already a class that you can benefit from for testing:
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Test/TypeTestCase.php" title="Symfony\Component\Form\Test\TypeTestCase"><span class="pre">TypeTestCase</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Test/TypeTestCase.php]</span></span></code>. It is used to test the
core types and you can use it to test your types too.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Depending on the way you installed your Symfony or Symfony Form component
the tests may not be downloaded. Use the <code class="docutils literal notranslate"><span class="pre">--prefer-source</span></code> option with
Composer if this is the case.</p>
</div>
<div class="section" id="the-basics">
<h2>The Basics</h2>
<p>The simplest <code class="docutils literal notranslate"><span class="pre">TypeTestCase</span></code> implementation looks like the following:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// tests/Form/Type/TestedTypeTest.php</span>
<span class="k">namespace</span> <span class="nx">App\Tests\Form\Type</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Form\Type\TestedType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">App\Model\TestObject</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\Test\TypeTestCase</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">TestedTypeTest</span> <span class="k">extends</span> <span class="nx">TypeTestCase</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">testSubmitValidData</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$formData</span> <span class="o">=</span> <span class="p">[</span>
            <span class="s1">&#39;test&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;test&#39;</span><span class="p">,</span>
            <span class="s1">&#39;test2&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;test2&#39;</span><span class="p">,</span>
        <span class="p">];</span>

        <span class="nv">$model</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TestObject</span><span class="p">();</span>
        <span class="c1">// $formData will retrieve data from the form submission; pass it as the second argument</span>
        <span class="nv">$form</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">factory</span><span class="o">-&gt;</span><span class="na">create</span><span class="p">(</span><span class="nx">TestedType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="nv">$model</span><span class="p">);</span>

        <span class="nv">$expected</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TestObject</span><span class="p">();</span>
        <span class="c1">// ...populate $object properties with the data stored in $formData</span>

        <span class="c1">// submit the data to the form directly</span>
        <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">submit</span><span class="p">(</span><span class="nv">$formData</span><span class="p">);</span>

        <span class="c1">// This check ensures there are no transformation failures</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertTrue</span><span class="p">(</span><span class="nv">$form</span><span class="o">-&gt;</span><span class="na">isSynchronized</span><span class="p">());</span>

        <span class="c1">// check that $formData was modified as expected when the form was submitted</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="nv">$expected</span><span class="p">,</span> <span class="nv">$model</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">testCustomFormView</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$formData</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TestObject</span><span class="p">();</span>
        <span class="c1">// ... prepare the data as you need</span>

        <span class="c1">// The initial data may be used to compute custom view variables</span>
        <span class="nv">$view</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">factory</span><span class="o">-&gt;</span><span class="na">create</span><span class="p">(</span><span class="nx">TestedType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="nv">$formData</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">createView</span><span class="p">();</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertArrayHasKey</span><span class="p">(</span><span class="s1">&#39;custom_var&#39;</span><span class="p">,</span> <span class="nv">$view</span><span class="o">-&gt;</span><span class="na">vars</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertSame</span><span class="p">(</span><span class="s1">&#39;expected value&#39;</span><span class="p">,</span> <span class="nv">$view</span><span class="o">-&gt;</span><span class="na">vars</span><span class="p">[</span><span class="s1">&#39;custom_var&#39;</span><span class="p">]);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>So, what does it test? Here comes a detailed explanation.</p>
<p>First you verify if the <code class="docutils literal notranslate"><span class="pre">FormType</span></code> compiles. This includes basic class
inheritance, the <code class="docutils literal notranslate"><span class="pre">buildForm()</span></code> function and options resolution. This should
be the first test you write:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$form</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">factory</span><span class="o">-&gt;</span><span class="na">create</span><span class="p">(</span><span class="nx">TestedType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="nv">$formData</span><span class="p">);</span>
</pre></div>
</div>
<p>This test checks that none of your data transformers used by the form
produces an error. The <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormInterface.php" title="Symfony\Component\Form\FormInterface::isSynchronized()"><span class="pre">isSynchronized()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormInterface.php]</span></span></code>
method is only set to <code class="docutils literal notranslate"><span class="pre">false</span></code> if a data transformer throws an exception:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$form</span><span class="o">-&gt;</span><span class="na">submit</span><span class="p">(</span><span class="nv">$formData</span><span class="p">);</span>
<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertTrue</span><span class="p">(</span><span class="nv">$form</span><span class="o">-&gt;</span><span class="na">isSynchronized</span><span class="p">());</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Donâ€™t test the validation: it is applied by a listener that is not
active in the test case and it relies on validation configuration.
Instead, unit test your custom constraints directly or read how
to <a class="reference internal" href="#form-unit-testing-adding-custom-extensions"><span class="std std-ref">add custom extensions</span></a>
in the last section of this page.</p>
</div>
<p>Next, verify the submission and mapping of the form. The test below checks if
all the fields are correctly specified:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="nv">$expected</span><span class="p">,</span> <span class="nv">$formData</span><span class="p">);</span>
</pre></div>
</div>
<p>Finally, check the creation of the <code class="docutils literal notranslate"><span class="pre">FormView</span></code>. You can check that a custom
variable exists and will be available in your form themes:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertArrayHasKey</span><span class="p">(</span><span class="s1">&#39;custom_var&#39;</span><span class="p">,</span> <span class="nv">$view</span><span class="o">-&gt;</span><span class="na">vars</span><span class="p">);</span>
<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertSame</span><span class="p">(</span><span class="s1">&#39;expected value&#39;</span><span class="p">,</span> <span class="nv">$view</span><span class="o">-&gt;</span><span class="na">vars</span><span class="p">[</span><span class="s1">&#39;custom_var&#39;</span><span class="p">]);</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Use <a class="reference internal" href="../testing.xhtml#testing-data-providers"><span class="std std-ref">PHPUnit data providers</span></a> to test multiple
form conditions using the same test code.</p>
</div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>When your type relies on the <code class="docutils literal notranslate"><span class="pre">EntityType</span></code>, you should register the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Doctrine/Form/DoctrineOrmExtension.php" title="Symfony\Bridge\Doctrine\Form\DoctrineOrmExtension"><span class="pre">DoctrineOrmExtension</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Doctrine/Form/DoctrineOrmExtension.php]</span></span></code>, which will
need to mock the <code class="docutils literal notranslate"><span class="pre">ManagerRegistry</span></code>.</p>
<p>However, If you cannot use a mock to write your test, you should extend
the <code class="docutils literal notranslate"><span class="pre">KernelTestCase</span></code> instead and use the <code class="docutils literal notranslate"><span class="pre">form.factory</span></code> service to
create the form.</p>
</div>
</div>
<div class="section" id="testings-types-registered-as-services">
<h2>Testings Types Registered as Services</h2>
<p>Your form may be used as a service, as it depends on other services (e.g. the
Doctrine entity manager). In these cases, using the above code wonâ€™t work, as
the Form component instantiates the form type without passing any arguments
to the constructor.</p>
<p>To solve this, you have to mock the injected dependencies, instantiate your own
form type and use the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/PreloadedExtension.php" title="Symfony\Component\Form\PreloadedExtension"><span class="pre">PreloadedExtension</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/PreloadedExtension.php]</span></span></code> to
make sure the <code class="docutils literal notranslate"><span class="pre">FormRegistry</span></code> uses the created instance:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// tests/Form/Type/TestedTypeTest.php</span>
<span class="k">namespace</span> <span class="nx">App\Tests\Form\Type</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Form\Type\TestedType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Doctrine\Persistence\ObjectManager</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\PreloadedExtension</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\Test\TypeTestCase</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="k">class</span> <span class="nc">TestedTypeTest</span> <span class="k">extends</span> <span class="nx">TypeTestCase</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$objectManager</span><span class="p">;</span>

    <span class="k">protected</span> <span class="k">function</span> <span class="nf">setUp</span><span class="p">()</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="c1">// mock any dependencies</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">objectManager</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createMock</span><span class="p">(</span><span class="nx">ObjectManager</span><span class="o">::</span><span class="na">class</span><span class="p">);</span>

        <span class="k">parent</span><span class="o">::</span><span class="na">setUp</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">protected</span> <span class="k">function</span> <span class="nf">getExtensions</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// create a type instance with the mocked dependencies</span>
        <span class="nv">$type</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TestedType</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">objectManager</span><span class="p">);</span>

        <span class="k">return</span> <span class="p">[</span>
            <span class="c1">// register the type instances with the PreloadedExtension</span>
            <span class="k">new</span> <span class="nx">PreloadedExtension</span><span class="p">([</span><span class="nv">$type</span><span class="p">],</span> <span class="p">[]),</span>
        <span class="p">];</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">testSubmitValidData</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>

        <span class="c1">// Instead of creating a new instance, the one created in</span>
        <span class="c1">// getExtensions() will be used.</span>
        <span class="nv">$form</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">factory</span><span class="o">-&gt;</span><span class="na">create</span><span class="p">(</span><span class="nx">TestedType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="nv">$formData</span><span class="p">);</span>

        <span class="c1">// ... your test</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="adding-custom-extensions">
<span id="form-unit-testing-adding-custom-extensions"></span><h2>Adding Custom Extensions</h2>
<p>It often happens that you use some options that are added by
<a class="reference internal" href="create_form_type_extension.xhtml"><span class="doc">form extensions</span></a>. One of the
cases may be the <code class="docutils literal notranslate"><span class="pre">ValidatorExtension</span></code> with its <code class="docutils literal notranslate"><span class="pre">invalid_message</span></code> option.
The <code class="docutils literal notranslate"><span class="pre">TypeTestCase</span></code> only loads the core form extension, which means an
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/OptionsResolver/Exception/InvalidOptionsException.php" title="Symfony\Component\OptionsResolver\Exception\InvalidOptionsException"><span class="pre">InvalidOptionsException</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/OptionsResolver/Exception/InvalidOptionsException.php]</span></span></code>
will be raised if you try to test a class that depends on other extensions.
The <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Test/TypeTestCase.php" title="Symfony\Component\Form\Test\TypeTestCase::getExtensions()"><span class="pre">getExtensions()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Test/TypeTestCase.php]</span></span></code> method
allows you to return a list of extensions to register:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// tests/Form/Type/TestedTypeTest.php</span>
<span class="k">namespace</span> <span class="nx">App\Tests\Form\Type</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Validator\ValidatorExtension</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Validation</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">TestedTypeTest</span> <span class="k">extends</span> <span class="nx">TypeTestCase</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="k">function</span> <span class="nf">getExtensions</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$validator</span> <span class="o">=</span> <span class="nx">Validation</span><span class="o">::</span><span class="na">createValidator</span><span class="p">();</span>

        <span class="c1">// or if you also need to read constraints from annotations</span>
        <span class="nv">$validator</span> <span class="o">=</span> <span class="nx">Validation</span><span class="o">::</span><span class="na">createValidatorBuilder</span><span class="p">()</span>
            <span class="o">-&gt;</span><span class="na">enableAnnotationMapping</span><span class="p">()</span>
            <span class="o">-&gt;</span><span class="na">getValidator</span><span class="p">();</span>

        <span class="k">return</span> <span class="p">[</span>
            <span class="k">new</span> <span class="nx">ValidatorExtension</span><span class="p">(</span><span class="nv">$validator</span><span class="p">),</span>
        <span class="p">];</span>
    <span class="p">}</span>

    <span class="c1">// ... your tests</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>By default only the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Extension/Core/CoreExtension.php" title="Symfony\Component\Form\Extension\Core\CoreExtension"><span class="pre">CoreExtension</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Extension/Core/CoreExtension.php]</span></span></code> is
registered in tests. You can find other extensions from the Form component
in the <code class="docutils literal notranslate"><span class="pre">Symfony\Component\Form\Extension</span></code> namespace.</p>
</div>
<p>It is also possible to load custom form types, form type extensions or type
guessers using the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Test/FormIntegrationTestCase.php" title="Symfony\Component\Form\Test\FormIntegrationTestCase::getTypes()"><span class="pre">getTypes()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Test/FormIntegrationTestCase.php]</span></span></code>,
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Test/FormIntegrationTestCase.php" title="Symfony\Component\Form\Test\FormIntegrationTestCase::getTypeExtensions()"><span class="pre">getTypeExtensions()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Test/FormIntegrationTestCase.php]</span></span></code>
and <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Test/FormIntegrationTestCase.php" title="Symfony\Component\Form\Test\FormIntegrationTestCase::getTypeGuessers()"><span class="pre">getTypeGuessers()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Test/FormIntegrationTestCase.php]</span></span></code>
methods.</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>