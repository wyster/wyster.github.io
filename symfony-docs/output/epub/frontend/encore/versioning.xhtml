<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Asset Versioning</title>
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="asset-versioning">
<h1>Asset Versioning</h1>
<p id="encore-long-term-caching">Tired of deploying and having browser’s cache the old version of your assets?
By calling <code class="docutils literal notranslate"><span class="pre">enableVersioning()</span></code>, each filename will now include a hash that
changes whenever the <em>contents</em> of that file change (e.g. <code class="docutils literal notranslate"><span class="pre">app.123abc.js</span></code>
instead of <code class="docutils literal notranslate"><span class="pre">app.js</span></code>). This allows you to use aggressive caching strategies
(e.g. a far future <code class="docutils literal notranslate"><span class="pre">Expires</span></code>) because, whenever a file change, its hash will change,
ignoring any existing cache:</p>
<div class="highlight-diff notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span>// webpack.config.js
// ...

Encore
    .setOutputPath(&#39;public/build/&#39;)
    // ...
<span class="gi">+     .enableVersioning()</span>
</pre></div>
</td></tr></table></div>
<p>To link to these assets, Encore creates two files <code class="docutils literal notranslate"><span class="pre">entrypoints.json</span></code> and
<code class="docutils literal notranslate"><span class="pre">manifest.json</span></code>.</p>
<div class="section" id="loading-assets-from-entrypoints-json-manifest-json">
<span id="load-manifest-files"></span><h2>Loading Assets from <code class="docutils literal notranslate"><span class="pre">entrypoints.json</span></code> &amp; <code class="docutils literal notranslate"><span class="pre">manifest.json</span></code></h2>
<p>Whenever you run Encore, two configuration files are generated: <code class="docutils literal notranslate"><span class="pre">entrypoints.json</span></code>
and <code class="docutils literal notranslate"><span class="pre">manifest.json</span></code>. Each file is similar, and contains a map to the final, versioned
filename.</p>
<p>The first file - <code class="docutils literal notranslate"><span class="pre">entrypoints.json</span></code> - is used by the <code class="docutils literal notranslate"><span class="pre">encore_entry_script_tags()</span></code>
and <code class="docutils literal notranslate"><span class="pre">encore_entry_link_tags()</span></code> Twig helpers. If you’re using these, then your
CSS and JavaScript files will render with the new, versioned filename. If you’re
not using Symfony, your app will need to read this file in a similar way.</p>
<p>The <code class="docutils literal notranslate"><span class="pre">manifest.json</span></code> file is only needed to get the versioned filename of <em>other</em>
files, like font files or image files (though it also contains information about
the CSS and JavaScript files):</p>
<div class="highlight-json notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="p">{</span>
    <span class="nt">&quot;build/app.js&quot;</span><span class="p">:</span> <span class="s2">&quot;/build/app.123abc.js&quot;</span><span class="p">,</span>
    <span class="nt">&quot;build/dashboard.css&quot;</span><span class="p">:</span> <span class="s2">&quot;/build/dashboard.a4bf2d.css&quot;</span><span class="p">,</span>
    <span class="nt">&quot;build/images/logo.png&quot;</span><span class="p">:</span> <span class="s2">&quot;/build/images/logo.3eed42.png&quot;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
<p>In your app, you need to read this file if you want to be able to link (e.g. via
an <code class="docutils literal notranslate"><span class="pre">img</span></code> tag) to certain assets. If you’re using Symfony, just activate the
<code class="docutils literal notranslate"><span class="pre">json_manifest_file</span></code> versioning strategy:</p>
<div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># this file is added automatically when installing Encore with Symfony Flex</span>
<span class="c1"># config/packages/assets.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">framework</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">assets</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">json_manifest_path</span><span class="p p-Indicator">:</span> <span class="s">&#39;%kernel.project_dir%/public/build/manifest.json&#39;</span>
</pre></div>
</td></tr></table></div>
<p>That’s it! Be sure to wrap each path in the Twig <code class="docutils literal notranslate"><span class="pre">asset()</span></code> function
like normal:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="p">&lt;</span><span class="nt">img</span> <span class="na">src</span><span class="o">=</span><span class="s">&quot;</span><span class="cp">{{</span> <span class="nv">asset</span><span class="o">(</span><span class="s1">&#39;build/images/logo.png&#39;</span><span class="o">)</span> <span class="cp">}}</span><span class="s">&quot;</span> <span class="na">alt</span><span class="o">=</span><span class="s">&quot;ACME logo&quot;</span><span class="p">&gt;</span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="troubleshooting">
<h2>Troubleshooting</h2>
<div class="section" id="asset-versioning-and-deployment">
<h3>Asset Versioning and Deployment</h3>
<p>When deploying a new version of your application, versioned assets will include
a new hash, making the previous assets no longer available. This is usually not
a problem when deploying applications using a rolling update, blue/green or
symlink strategies.</p>
<p>However, even when applying those techniques, there could be a lapse of time
when some publicly/privately cached response requests the previous version of
the assets. If your application can’t afford to serve any broken asset, the best
solution is to use a CDN (or custom made service) that keeps all the old assets
cached for some time.</p>
</div>
</div>
<div class="section" id="learn-more">
<h2>Learn more</h2>
<ul class="simple">
<li><p><a class="reference internal" href="../../components/asset.xhtml"><span class="doc">The Asset Component</span></a></p></li>
</ul>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>