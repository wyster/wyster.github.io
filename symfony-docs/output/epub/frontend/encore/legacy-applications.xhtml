<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>jQuery Plugins and Legacy Applications</title>
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="jquery-plugins-and-legacy-applications">
<h1>jQuery Plugins and Legacy Applications</h1>
<p>Inside Webpack, when you require a module, it does <em>not</em> (usually) set a global variable.
Instead, it just returns a value:</p>
<div class="highlight-javascript notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// this loads jquery, but does *not* set a global $ or jQuery variable</span>
<span class="kr">const</span> <span class="nx">$</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;jquery&#39;</span><span class="p">);</span>
</pre></div>
</td></tr></table></div>
<p>In practice, this will cause problems with some outside libraries that <em>rely</em> on
jQuery to be global <em>or</em> if <em>your</em> JavaScript isn’t being processed through Webpack
(e.g. you have some JavaScript in your templates) and you need jQuery. Both will
cause similar errors:</p>
<div class="highlight-text notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span>Uncaught ReferenceError: $ is not defined at [...]
Uncaught ReferenceError: jQuery is not defined at [...]
</pre></div>
</td></tr></table></div>
<p>The fix depends on what code is causing the problem.</p>
<div class="section" id="fixing-jquery-plugins-that-expect-jquery-to-be-global">
<span id="encore-autoprovide-jquery"></span><h2>Fixing jQuery Plugins that Expect jQuery to be Global</h2>
<p>jQuery plugins often expect that jQuery is already available via the <code class="docutils literal notranslate"><span class="pre">$</span></code> or
<code class="docutils literal notranslate"><span class="pre">jQuery</span></code> global variables. To fix this, call <code class="docutils literal notranslate"><span class="pre">autoProvidejQuery()</span></code> from your
<code class="docutils literal notranslate"><span class="pre">webpack.config.js</span></code> file:</p>
<div class="highlight-diff notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span>Encore
    // ...
<span class="gi">+     .autoProvidejQuery()</span>
;
</pre></div>
</td></tr></table></div>
<p>After restarting Encore, Webpack will look for all uninitialized <code class="docutils literal notranslate"><span class="pre">$</span></code> and <code class="docutils literal notranslate"><span class="pre">jQuery</span></code>
variables and automatically require <code class="docutils literal notranslate"><span class="pre">jquery</span></code> and set those variables for you.
It “rewrites” the “bad” code to be correct.</p>
<p>Internally, this <code class="docutils literal notranslate"><span class="pre">autoProvidejQuery()</span></code> method calls the <code class="docutils literal notranslate"><span class="pre">autoProvideVariables()</span></code>
method from Encore. In practice, it’s equivalent to doing:</p>
<div class="highlight-javascript notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="nx">Encore</span>
    <span class="c1">// you can use this method to provide other common global variables,</span>
    <span class="c1">// such as &#39;_&#39; for the &#39;underscore&#39; library</span>
    <span class="p">.</span><span class="nx">autoProvideVariables</span><span class="p">({</span>
        <span class="nx">$</span><span class="o">:</span> <span class="s1">&#39;jquery&#39;</span><span class="p">,</span>
        <span class="nx">jQuery</span><span class="o">:</span> <span class="s1">&#39;jquery&#39;</span><span class="p">,</span>
        <span class="s1">&#39;window.jQuery&#39;</span><span class="o">:</span> <span class="s1">&#39;jquery&#39;</span><span class="p">,</span>
    <span class="p">})</span>
    <span class="c1">// ...</span>
<span class="p">;</span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="accessing-jquery-from-outside-of-webpack-javascript-files">
<h2>Accessing jQuery from outside of Webpack JavaScript Files</h2>
<p>If <em>your</em> code needs access to <code class="docutils literal notranslate"><span class="pre">$</span></code> or <code class="docutils literal notranslate"><span class="pre">jQuery</span></code> and you are inside of a file
that’s processed by Webpack/Encore, you should remove any “$ is not defined” errors
by requiring jQuery: <code class="docutils literal notranslate"><span class="pre">var</span> <span class="pre">$</span> <span class="pre">=</span> <span class="pre">require('jquery')</span></code>.</p>
<p>But if you also need to provide access to <code class="docutils literal notranslate"><span class="pre">$</span></code> and <code class="docutils literal notranslate"><span class="pre">jQuery</span></code> variables outside of
JavaScript files processed by Webpack (e.g. JavaScript that still lives in your
templates), you need to manually set these as global variables in some JavaScript
file that is loaded before your legacy code.</p>
<p>For example, in your <code class="docutils literal notranslate"><span class="pre">app.js</span></code> file that’s processed by Webpack and loaded on every
page, add:</p>
<div class="highlight-diff notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span>// require jQuery normally
const $ = require(&#39;jquery&#39;);

<span class="gi">+ // create global $ and jQuery variables</span>
<span class="gi">+ global.$ = global.jQuery = $;</span>
</pre></div>
</td></tr></table></div>
<p>The <code class="docutils literal notranslate"><span class="pre">global</span></code> variable is a special way of setting things in the <code class="docutils literal notranslate"><span class="pre">window</span></code>
variable. In a web context, using <code class="docutils literal notranslate"><span class="pre">global</span></code> and <code class="docutils literal notranslate"><span class="pre">window</span></code> are equivalent,
except that <code class="docutils literal notranslate"><span class="pre">window.jQuery</span></code> won’t work when using <code class="docutils literal notranslate"><span class="pre">autoProvidejQuery()</span></code>.
In other words, use <code class="docutils literal notranslate"><span class="pre">global</span></code>.</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>