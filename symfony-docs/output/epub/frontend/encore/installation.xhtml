<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Installing Encore</title>
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="installing-encore">
<h1>Installing Encore</h1>
<p>First, make sure you <a class="reference external" href="https://nodejs.org/en/download/">install Node.js</a><span class="link-target"> [https://nodejs.org/en/download/]</span> and also the <a class="reference external" href="https://yarnpkg.com/getting-started/install">Yarn package manager</a><span class="link-target"> [https://yarnpkg.com/getting-started/install]</span>.
The following instructions depend on whether you are installing Encore in a
Symfony application or not.</p>
<div class="section" id="installing-encore-in-symfony-applications">
<h2>Installing Encore in Symfony Applications</h2>
<p>Run these commands to install both the PHP and JavaScript dependencies in your
project:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require symfony/webpack-encore-bundle
<span class="gp">$</span> yarn install
</pre></div>
</td></tr></table></div>
<p>If you are using <a class="reference internal" href="../../setup.xhtml#symfony-flex"><span class="std std-ref">Symfony Flex</span></a>, this will install and enable
the <a class="reference external" href="https://github.com/symfony/webpack-encore-bundle">WebpackEncoreBundle</a><span class="link-target"> [https://github.com/symfony/webpack-encore-bundle]</span>, create the <code class="docutils literal notranslate"><span class="pre">assets/</span></code> directory, add a
<code class="docutils literal notranslate"><span class="pre">webpack.config.js</span></code> file, and add <code class="docutils literal notranslate"><span class="pre">node_modules/</span></code> to <code class="docutils literal notranslate"><span class="pre">.gitignore</span></code>. You can
skip the rest of this article and go write your first JavaScript and CSS by
reading <a class="reference internal" href="simple-example.xhtml"><span class="doc">Encore: Setting up your Project</span></a>!</p>
<p>If you are not using Symfony Flex, youâ€™ll need to create all these directories
and files by yourself following the instructions shown in the next section.</p>
</div>
<div class="section" id="installing-encore-in-non-symfony-applications">
<h2>Installing Encore in non Symfony Applications</h2>
<p>Install Encore into your project via Yarn:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> yarn add @symfony/webpack-encore --dev

<span class="c1"># if you prefer npm, run this command instead:</span>
<span class="gp">$</span> npm install @symfony/webpack-encore --save-dev
</pre></div>
</td></tr></table></div>
<p>This command creates (or modifies) a <code class="docutils literal notranslate"><span class="pre">package.json</span></code> file and downloads
dependencies into a <code class="docutils literal notranslate"><span class="pre">node_modules/</span></code> directory. Yarn also creates/updates a
<code class="docutils literal notranslate"><span class="pre">yarn.lock</span></code> (called <code class="docutils literal notranslate"><span class="pre">package-lock.json</span></code> if you use npm).</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>You <em>should</em> commit <code class="docutils literal notranslate"><span class="pre">package.json</span></code> and <code class="docutils literal notranslate"><span class="pre">yarn.lock</span></code> (or <code class="docutils literal notranslate"><span class="pre">package-lock.json</span></code>
if using npm) to version control, but ignore <code class="docutils literal notranslate"><span class="pre">node_modules/</span></code>.</p>
</div>
<div class="section" id="creating-the-webpack-config-js-file">
<h3>Creating the webpack.config.js File</h3>
<p>Next, create a new <code class="docutils literal notranslate"><span class="pre">webpack.config.js</span></code> file at the root of your project. This
is the main config file for both Webpack and Webpack Encore:</p>
<div class="highlight-javascript notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="kd">var</span> <span class="nx">Encore</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;@symfony/webpack-encore&#39;</span><span class="p">);</span>

<span class="c1">// Manually configure the runtime environment if not already configured yet by the &quot;encore&quot; command.</span>
<span class="c1">// It&#39;s useful when you use tools that rely on webpack.config.js file.</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">Encore</span><span class="p">.</span><span class="nx">isRuntimeEnvironmentConfigured</span><span class="p">())</span> <span class="p">{</span>
    <span class="nx">Encore</span><span class="p">.</span><span class="nx">configureRuntimeEnvironment</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">||</span> <span class="s1">&#39;dev&#39;</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">Encore</span>
    <span class="c1">// directory where compiled assets will be stored</span>
    <span class="p">.</span><span class="nx">setOutputPath</span><span class="p">(</span><span class="s1">&#39;public/build/&#39;</span><span class="p">)</span>
    <span class="c1">// public path used by the web server to access the output path</span>
    <span class="p">.</span><span class="nx">setPublicPath</span><span class="p">(</span><span class="s1">&#39;/build&#39;</span><span class="p">)</span>
    <span class="c1">// only needed for CDN&#39;s or sub-directory deploy</span>
    <span class="c1">//.setManifestKeyPrefix(&#39;build/&#39;)</span>

    <span class="cm">/*</span>
<span class="cm">     * ENTRY CONFIG</span>
<span class="cm">     *</span>
<span class="cm">     * Add 1 entry for each &quot;page&quot; of your app</span>
<span class="cm">     * (including one that&#39;s included on every page - e.g. &quot;app&quot;)</span>
<span class="cm">     *</span>
<span class="cm">     * Each entry will result in one JavaScript file (e.g. app.js)</span>
<span class="cm">     * and one CSS file (e.g. app.css) if your JavaScript imports CSS.</span>
<span class="cm">     */</span>
    <span class="p">.</span><span class="nx">addEntry</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">,</span> <span class="s1">&#39;./assets/app.js&#39;</span><span class="p">)</span>
    <span class="c1">//.addEntry(&#39;page1&#39;, &#39;./assets/page1.js&#39;)</span>
    <span class="c1">//.addEntry(&#39;page2&#39;, &#39;./assets/page2.js&#39;)</span>

    <span class="c1">// When enabled, Webpack &quot;splits&quot; your files into smaller pieces for greater optimization.</span>
    <span class="p">.</span><span class="nx">splitEntryChunks</span><span class="p">()</span>

    <span class="c1">// will require an extra script tag for runtime.js</span>
    <span class="c1">// but, you probably want this, unless you&#39;re building a single-page app</span>
    <span class="p">.</span><span class="nx">enableSingleRuntimeChunk</span><span class="p">()</span>

    <span class="cm">/*</span>
<span class="cm">     * FEATURE CONFIG</span>
<span class="cm">     *</span>
<span class="cm">     * Enable &amp; configure other features below. For a full</span>
<span class="cm">     * list of features, see:</span>
<span class="cm">     * https://symfony.com/doc/current/frontend.html#adding-more-features</span>
<span class="cm">     */</span>
    <span class="p">.</span><span class="nx">cleanupOutputBeforeBuild</span><span class="p">()</span>
    <span class="p">.</span><span class="nx">enableBuildNotifications</span><span class="p">()</span>
    <span class="p">.</span><span class="nx">enableSourceMaps</span><span class="p">(</span><span class="o">!</span><span class="nx">Encore</span><span class="p">.</span><span class="nx">isProduction</span><span class="p">())</span>
    <span class="c1">// enables hashed filenames (e.g. app.abc123.css)</span>
    <span class="p">.</span><span class="nx">enableVersioning</span><span class="p">(</span><span class="nx">Encore</span><span class="p">.</span><span class="nx">isProduction</span><span class="p">())</span>

    <span class="c1">// enables @babel/preset-env polyfills</span>
    <span class="p">.</span><span class="nx">configureBabelPresetEnv</span><span class="p">((</span><span class="nx">config</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="nx">config</span><span class="p">.</span><span class="nx">useBuiltIns</span> <span class="o">=</span> <span class="s1">&#39;usage&#39;</span><span class="p">;</span>
        <span class="nx">config</span><span class="p">.</span><span class="nx">corejs</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="p">})</span>

    <span class="c1">// enables Sass/SCSS support</span>
    <span class="c1">//.enableSassLoader()</span>

    <span class="c1">// uncomment if you use TypeScript</span>
    <span class="c1">//.enableTypeScriptLoader()</span>

    <span class="c1">// uncomment to get integrity=&quot;...&quot; attributes on your script &amp; link tags</span>
    <span class="c1">// requires WebpackEncoreBundle 1.4 or higher</span>
    <span class="c1">//.enableIntegrityHashes(Encore.isProduction())</span>

    <span class="c1">// uncomment if you&#39;re having problems with a jQuery plugin</span>
    <span class="c1">//.autoProvidejQuery()</span>

    <span class="c1">// uncomment if you use API Platform Admin (composer require api-admin)</span>
    <span class="c1">//.enableReactPreset()</span>
    <span class="c1">//.addEntry(&#39;admin&#39;, &#39;./assets/admin.js&#39;)</span>
<span class="p">;</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">Encore</span><span class="p">.</span><span class="nx">getWebpackConfig</span><span class="p">();</span>
</pre></div>
</td></tr></table></div>
<p>Next, open the new <code class="docutils literal notranslate"><span class="pre">assets/app.js</span></code> file which contains some JavaScript code
<em>and</em> imports some CSS:</p>
<div class="highlight-javascript notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// assets/app.js</span>
<span class="cm">/*</span>
<span class="cm"> * Welcome to your app&#39;s main JavaScript file!</span>
<span class="cm"> *</span>
<span class="cm"> * We recommend including the built version of this JavaScript file</span>
<span class="cm"> * (and its CSS file) in your base layout (base.html.twig).</span>
<span class="cm"> */</span>

<span class="c1">// any CSS you import will output into a single css file (app.css in this case)</span>
<span class="kr">import</span> <span class="s1">&#39;./styles/app.css&#39;</span><span class="p">;</span>

<span class="c1">// Need jQuery? Install it with &quot;yarn add jquery&quot;, then uncomment to import it.</span>
<span class="c1">// import $ from &#39;jquery&#39;;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Hello Webpack Encore! Edit me in assets/app.js&#39;</span><span class="p">);</span>
</pre></div>
</td></tr></table></div>
<p>And the new <code class="docutils literal notranslate"><span class="pre">assets/styles/app.css</span></code> file:</p>
<div class="highlight-css notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">/* assets/styles/app.css */</span>
<span class="nt">body</span> <span class="p">{</span>
    <span class="k">background-color</span><span class="p">:</span> <span class="kc">lightgray</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
<p>Youâ€™ll customize and learn more about these file in <a class="reference internal" href="simple-example.xhtml"><span class="doc">Encore: Setting up your Project</span></a>.</p>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>Some of the documentation will use features that are specific to Symfony or
Symfonyâ€™s <a class="reference external" href="https://github.com/symfony/webpack-encore-bundle">WebpackEncoreBundle</a><span class="link-target"> [https://github.com/symfony/webpack-encore-bundle]</span>. These are optional, and are special ways
of pointing to the asset paths generated by Encore that enable features like
<a class="reference internal" href="versioning.xhtml"><span class="doc">versioning</span></a> and
<a class="reference internal" href="split-chunks.xhtml"><span class="doc">split chunks</span></a>.</p>
</div>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>