<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>FAQ and Common Issues</title>
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="faq-and-common-issues">
<h1>FAQ and Common Issues</h1>
<div class="section" id="how-do-i-deploy-my-encore-assets">
<span id="id1"></span><h2>How Do I Deploy My Encore Assets?</h2>
<p>There are two important things to remember when deploying your assets.</p>
<p><strong>1) Compile Assets for Production</strong></p>
<p>Optimize your assets for production by running:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> ./node_modules/.bin/encore production
</pre></div>
</td></tr></table></div>
<p>That will minify your assets and make other performance optimizations. Yay!</p>
<p>But, what server should you run this command on? That depends on how you deploy.
For example, you could execute this locally (or on a build server), and use
<a class="reference external" href="https://rsync.samba.org/">rsync</a><span class="link-target"> [https://rsync.samba.org/]</span> or something else to transfer the generated files to your production
server. Or, you could put your files on your production server first (e.g. via
<code class="docutils literal notranslate"><span class="pre">git</span> <span class="pre">pull</span></code>) and then run this command on production (ideally, before traffic
hits your code). In this case, you’ll need to install Node.js on your production
server.</p>
<p><strong>2) Only Deploy the Built Assets</strong></p>
<p>The <em>only</em> files that need to be deployed to your production servers are the
final, built assets (e.g. the <code class="docutils literal notranslate"><span class="pre">public/build</span></code> directory). You do <em>not</em> need to install
Node.js, deploy <code class="docutils literal notranslate"><span class="pre">webpack.config.js</span></code>, the <code class="docutils literal notranslate"><span class="pre">node_modules</span></code> directory or even your source
asset files, <strong>unless</strong> you plan on running <code class="docutils literal notranslate"><span class="pre">encore</span> <span class="pre">production</span></code> on your production
machine. Once your assets are built, these are the <em>only</em> thing that need to live
on the production server.</p>
</div>
<div class="section" id="do-i-need-to-install-node-js-on-my-production-server">
<h2>Do I Need to Install Node.js on My Production Server?</h2>
<p>No, unless you plan to build your production assets on your production server,
which is not recommended. See <a class="reference internal" href="#id1">How Do I Deploy my Encore Assets?</a>.</p>
</div>
<div class="section" id="what-files-should-i-commit-to-git-and-which-should-i-ignore">
<h2>What Files Should I Commit to git? And which Should I Ignore?</h2>
<p>You should commit all of your files to git, except for the <code class="docutils literal notranslate"><span class="pre">node_modules/</span></code> directory
and the built files. Your <code class="docutils literal notranslate"><span class="pre">.gitignore</span></code> file should include:</p>
<div class="highlight-text notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre><span></span>/node_modules/
# whatever path you&#39;re passing to Encore.setOutputPath()
/public/build
</pre></div>
</td></tr></table></div>
<p>You <em>should</em> commit all of your source asset files, <code class="docutils literal notranslate"><span class="pre">package.json</span></code> and <code class="docutils literal notranslate"><span class="pre">yarn.lock</span></code>.</p>
</div>
<div class="section" id="my-app-lives-under-a-subdirectory">
<h2>My App Lives under a Subdirectory</h2>
<p>If your app does not live at the root of your web server (i.e. it lives under a subdirectory,
like <code class="docutils literal notranslate"><span class="pre">/myAppSubdir</span></code>), you will need to configure that when calling <code class="docutils literal notranslate"><span class="pre">Encore.setPublicPath()</span></code>:</p>
<div class="highlight-diff notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="highlight"><pre><span></span>// webpack.config.js
Encore
    // ...

    .setOutputPath(&#39;public/build/&#39;)

<span class="gd">-     .setPublicPath(&#39;/build&#39;)</span>
<span class="gi">+     // this is your *true* public path</span>
<span class="gi">+     .setPublicPath(&#39;/myAppSubdir/build&#39;)</span>

<span class="gi">+     // this is now needed so that your manifest.json keys are still `build/foo.js`</span>
<span class="gi">+     // (which is a file that&#39;s used by Symfony&#39;s `asset()` function)</span>
<span class="gi">+     .setManifestKeyPrefix(&#39;build&#39;)</span>
;
</pre></div>
</td></tr></table></div>
<p>If you’re using the <code class="docutils literal notranslate"><span class="pre">encore_entry_script_tags()</span></code> and <code class="docutils literal notranslate"><span class="pre">encore_entry_link_tags()</span></code>
Twig shortcuts (or are <a class="reference internal" href="versioning.xhtml#load-manifest-files"><span class="std std-ref">processing your assets through entrypoints.json</span></a>
in some other way) you’re done! These shortcut methods read from an
<a class="reference internal" href="simple-example.xhtml#encore-entrypointsjson-simple-description"><span class="std std-ref">entrypoints.json</span></a> file that will
now contain the subdirectory.</p>
</div>
<div class="section" id="jquery-is-not-defined-or-is-not-defined">
<h2>“jQuery is not defined” or “$ is not defined”</h2>
<p>This error happens when your code (or some library that you are using) expects <code class="docutils literal notranslate"><span class="pre">$</span></code>
or <code class="docutils literal notranslate"><span class="pre">jQuery</span></code> to be a global variable. But, when you use Webpack and <code class="docutils literal notranslate"><span class="pre">require('jquery')</span></code>,
no global variables are set.</p>
<p>The fix depends on if the error is happening in your code or inside some third-party
code that you’re using. See <a class="reference internal" href="legacy-applications.xhtml"><span class="doc">jQuery Plugins and Legacy Applications</span></a> for the fix.</p>
</div>
<div class="section" id="uncaught-referenceerror-webpackjsonp-is-not-defined">
<h2>Uncaught ReferenceError: webpackJsonp is not defined</h2>
<p>If you get this error, it’s probably because you’ve forgotten to add a <code class="docutils literal notranslate"><span class="pre">script</span></code>
tag for the <code class="docutils literal notranslate"><span class="pre">runtime.js</span></code> file that contains Webpack’s runtime. If you’re using
the <code class="docutils literal notranslate"><span class="pre">encore_entry_script_tags()</span></code> Twig function, this should never happen: the
file script tag is rendered automatically.</p>
</div>
<div class="section" id="this-dependency-was-not-found-some-module-in-path-to-file-js">
<h2>This dependency was not found: some-module in ./path/to/file.js</h2>
<p>Usually, after you install a package via yarn, you can require / import it to use
it. For example, after running <code class="docutils literal notranslate"><span class="pre">yarn</span> <span class="pre">add</span> <span class="pre">respond.js</span></code>, you try to require that module:</p>
<div class="highlight-javascript notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;respond.js&#39;</span><span class="p">);</span>
</pre></div>
</td></tr></table></div>
<p>But, instead of working, you see an error:</p>
<blockquote>
<div><p>This dependency was not found:</p>
<ul class="simple">
<li><p>respond.js in ./assets/js/app.js</p></li>
</ul>
</div></blockquote>
<p>Typically, a package will “advertise” its “main” file by adding a <code class="docutils literal notranslate"><span class="pre">main</span></code> key to
its <code class="docutils literal notranslate"><span class="pre">package.json</span></code>. But sometimes, old libraries won’t have this. Instead, you’ll
need to specifically require the file you need. In this case, the file you should
use is located at <code class="docutils literal notranslate"><span class="pre">node_modules/respond.js/dest/respond.src.js</span></code>. You can require
this via:</p>
<div class="highlight-javascript notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// require a non-minified file whenever possible</span>
<span class="nx">require</span><span class="p">(</span><span class="s1">&#39;respond.js/dest/respond.src.js&#39;</span><span class="p">);</span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="i-need-to-execute-babel-on-a-third-party-module">
<h2>I need to execute Babel on a third-party Module</h2>
<p>For performance, Encore does not process libraries inside <code class="docutils literal notranslate"><span class="pre">node_modules/</span></code> through
Babel. But, you can change that via the <code class="docutils literal notranslate"><span class="pre">configureBabel()</span></code> method. See
<a class="reference internal" href="babel.xhtml"><span class="doc">Configuring Babel</span></a> for details.</p>
</div>
<div class="section" id="how-do-i-integrate-my-encore-configuration-with-my-ide">
<h2>How Do I Integrate my Encore Configuration with my IDE?</h2>
<p><a class="reference external" href="https://www.jetbrains.com/help/phpstorm/using-webpack.html">Webpack integration in PhpStorm</a><span class="link-target"> [https://www.jetbrains.com/help/phpstorm/using-webpack.html]</span> and other IDEs makes your development more
productive (for example by resolving aliases). However, you may face this error:</p>
<div class="highlight-text notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span>Encore.setOutputPath() cannot be called yet because the runtime environment
doesn&#39;t appear to be configured. Make sure you&#39;re using the encore executable
or call Encore.configureRuntimeEnvironment() first if you&#39;re purposely not
calling Encore directly.
</pre></div>
</td></tr></table></div>
<p>It fails because the Encore Runtime Environment is only configured when you are
running it (e.g. when executing <code class="docutils literal notranslate"><span class="pre">yarn</span> <span class="pre">encore</span> <span class="pre">dev</span></code>). Fix this issue calling to
<code class="docutils literal notranslate"><span class="pre">Encore.isRuntimeEnvironmentConfigured()</span></code> and
<code class="docutils literal notranslate"><span class="pre">Encore.configureRuntimeEnvironment()</span></code> methods:</p>
<div class="highlight-javascript notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// webpack.config.js</span>
<span class="kr">const</span> <span class="nx">Encore</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;@symfony/webpack-encore&#39;</span><span class="p">)</span>

<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">Encore</span><span class="p">.</span><span class="nx">isRuntimeEnvironmentConfigured</span><span class="p">())</span> <span class="p">{</span>
    <span class="nx">Encore</span><span class="p">.</span><span class="nx">configureRuntimeEnvironment</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">||</span> <span class="s1">&#39;dev&#39;</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// ... the rest of the Encore configuration</span>
</pre></div>
</td></tr></table></div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>