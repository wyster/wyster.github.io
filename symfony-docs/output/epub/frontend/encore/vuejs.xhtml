<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Enabling Vue.js (vue-loader)</title>
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="enabling-vue-js-vue-loader">
<h1>Enabling Vue.js (<code class="docutils literal notranslate"><span class="pre">vue-loader</span></code>)</h1>
<div class="screencast admonition">
<p class="admonition-title">Screencast</p>
<p>Do you prefer video tutorials? Check out the <a class="reference external" href="https://symfonycasts.com/screencast/vue">Vue screencast series</a><span class="link-target"> [https://symfonycasts.com/screencast/vue]</span>.</p>
</div>
<p>Want to use <a class="reference external" href="https://vuejs.org/">Vue.js</a><span class="link-target"> [https://vuejs.org/]</span>? No problem! First enable it in <code class="docutils literal notranslate"><span class="pre">webpack.config.js</span></code>:</p>
<div class="highlight-diff notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="highlight"><pre><span></span>// webpack.config.js
// ...

Encore
    // ...
    .addEntry(&#39;main&#39;, &#39;./assets/main.js&#39;)

<span class="gi">+     .enableVueLoader()</span>
;
</pre></div>
</td></tr></table></div>
<p>Then restart Encore. When you do, it will give you a command you can run to
install any missing dependencies. After running that command and restarting
Encore, you’re done!</p>
<p>Any <code class="docutils literal notranslate"><span class="pre">.vue</span></code> files that you require will be processed correctly. You can also
configure the <a class="reference external" href="https://vue-loader.vuejs.org/options.html">vue-loader options</a><span class="link-target"> [https://vue-loader.vuejs.org/options.html]</span> by passing an options callback to
<code class="docutils literal notranslate"><span class="pre">enableVueLoader()</span></code>. See the <a class="reference external" href="https://github.com/symfony/webpack-encore/blob/master/index.js">Encore’s index.js file</a><span class="link-target"> [https://github.com/symfony/webpack-encore/blob/master/index.js]</span> for detailed documentation.</p>
<div class="section" id="runtime-compiler-build">
<h2>Runtime Compiler Build</h2>
<p>By default, Encore uses a Vue “build” that allows you to compile templates at
runtime. This means that you <em>can</em> do either of these:</p>
<div class="highlight-javascript notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
    <span class="nx">template</span><span class="o">:</span> <span class="s1">&#39;&lt;div&gt;{{ hi }}&lt;/div&gt;&#39;</span>
<span class="p">})</span>

<span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
    <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span> <span class="c1">// where &lt;div id=&quot;app&quot;&gt; in your DOM contains the Vue template</span>
<span class="p">});</span>
</pre></div>
</td></tr></table></div>
<p>If you do <em>not</em> need this functionality (e.g. you use single file components),
then you can tell Encore to create a <em>smaller</em> and CSP-compliant build:</p>
<div class="highlight-javascript notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// webpack.config.js</span>
<span class="c1">// ...</span>

<span class="nx">Encore</span>
    <span class="c1">// ...</span>

    <span class="p">.</span><span class="nx">enableVueLoader</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{},</span> <span class="p">{</span> <span class="nx">runtimeCompilerBuild</span><span class="o">:</span> <span class="kc">false</span> <span class="p">})</span>
<span class="p">;</span>
</pre></div>
</td></tr></table></div>
<p>You can also silence the recommendation by passing <code class="docutils literal notranslate"><span class="pre">runtimeCompilerBuild:</span> <span class="pre">true</span></code>.</p>
</div>
<div class="section" id="hot-module-replacement-hmr">
<h2>Hot Module Replacement (HMR)</h2>
<p>The <code class="docutils literal notranslate"><span class="pre">vue-loader</span></code> supports hot module replacement: just update your code and watch
your Vue.js app update <em>without</em> a browser refresh! To activate it, use the
<code class="docutils literal notranslate"><span class="pre">dev-server</span></code> with the <code class="docutils literal notranslate"><span class="pre">--hot</span></code> option:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> yarn encore dev-server --hot
</pre></div>
</td></tr></table></div>
<p>That’s it! Change one of your <code class="docutils literal notranslate"><span class="pre">.vue</span></code> files and watch your browser update. But
note: this does <em>not</em> currently work for <em>style</em> changes in a <code class="docutils literal notranslate"><span class="pre">.vue</span></code> file. Seeing
updated styles still requires a page refresh.</p>
<p>See <a class="reference internal" href="dev-server.xhtml"><span class="doc">Using webpack-dev-server and HMR</span></a> for more details.</p>
</div>
<div class="section" id="jsx-support">
<h2>JSX Support</h2>
<p>You can enable <a class="reference external" href="https://github.com/vuejs/jsx">JSX with Vue.js</a><span class="link-target"> [https://github.com/vuejs/jsx]</span> by configuring the second parameter of the
<code class="docutils literal notranslate"><span class="pre">.enableVueLoader()</span></code> method:</p>
<div class="highlight-diff notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span>// webpack.config.js
// ...

Encore
    // ...
    .addEntry(&#39;main&#39;, &#39;./assets/main.js&#39;)

<span class="gd">-     .enableVueLoader()</span>
<span class="gi">+     .enableVueLoader(() =&gt; {}, {</span>
<span class="gi">+         useJsx: true</span>
<span class="gi">+     })</span>
;
</pre></div>
</td></tr></table></div>
<p>Next, run or restart Encore. When you do, you will see an error message helping
you install any missing dependencies. After running that command and restarting
Encore, you’re done!</p>
<p>Your <code class="docutils literal notranslate"><span class="pre">.jsx</span></code> files will now be transformed through <code class="docutils literal notranslate"><span class="pre">&#64;vue/babel-preset-jsx</span></code>.</p>
<div class="section" id="using-styles">
<h3>Using styles</h3>
<p>You can’t use <code class="docutils literal notranslate"><span class="pre">&lt;style&gt;</span></code> in <code class="docutils literal notranslate"><span class="pre">.jsx</span></code> files. As a workaround, you can import
<code class="docutils literal notranslate"><span class="pre">.css</span></code>, <code class="docutils literal notranslate"><span class="pre">.scss</span></code>, etc. files manually:</p>
<div class="highlight-jsx notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// App.jsx</span>
<span class="kr">import</span> <span class="s1">&#39;./App.css&#39;</span>

<span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;App&#39;</span><span class="p">,</span>
    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
                <span class="p">...</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Importing styles this way makes them global. See the next section for
scoping them to your component.</p>
</div>
</div>
<div class="section" id="using-scoped-styles">
<h3>Using Scoped Styles</h3>
<p>You can’t use <a class="reference external" href="https://vue-loader.vuejs.org/guide/scoped-css.html">Scoped Styles</a><span class="link-target"> [https://vue-loader.vuejs.org/guide/scoped-css.html]</span> (<code class="docutils literal notranslate"><span class="pre">&lt;style</span> <span class="pre">scoped&gt;</span></code>) either in <code class="docutils literal notranslate"><span class="pre">.jsx</span></code> files. As
a workaround, you can use <a class="reference external" href="https://github.com/css-modules/css-modules">CSS Modules</a><span class="link-target"> [https://github.com/css-modules/css-modules]</span> by suffixing import paths with
<code class="docutils literal notranslate"><span class="pre">?module</span></code>:</p>
<div class="highlight-jsx notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// Component.jsx</span>
<span class="kr">import</span> <span class="nx">styles</span> <span class="nx">from</span> <span class="s1">&#39;./Component.css?module&#39;</span> <span class="c1">// suffix with &quot;?module&quot;</span>

<span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Component&#39;</span><span class="p">,</span>
    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">h1</span> <span class="na">class</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">title</span><span class="p">}&gt;</span>
                    <span class="nx">Hello</span> <span class="nx">World</span>
                <span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
<div class="highlight-css notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">/* Component.css */</span>

<span class="p">.</span><span class="nc">title</span> <span class="p">{</span>
    <span class="k">color</span><span class="p">:</span> <span class="kc">red</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
<p>The output will be something like <code class="docutils literal notranslate"><span class="pre">&lt;h1</span> <span class="pre">class=&quot;title_a3dKp&quot;&gt;Hello</span> <span class="pre">World&lt;/h1&gt;</span></code>.</p>
</div>
<div class="section" id="using-images">
<h3>Using images</h3>
<p>You can’t use <code class="docutils literal notranslate"><span class="pre">&lt;img</span> <span class="pre">src=&quot;./image.png&quot;&gt;</span></code> in <code class="docutils literal notranslate"><span class="pre">.jsx</span></code> files. As a workaround,
you can import them with <code class="docutils literal notranslate"><span class="pre">require()</span></code> function:</p>
<div class="highlight-jsx notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Component&#39;</span><span class="p">,</span>
    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">img</span> <span class="na">src</span><span class="o">=</span><span class="p">{</span><span class="nx">require</span><span class="p">(</span><span class="s2">&quot;./image.png&quot;</span><span class="p">)}/&gt;</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</div>
</div>
<div class="section" id="using-vue-inside-twig-templates">
<h2>Using Vue inside Twig templates</h2>
<p>Twig templates can instantiate a Vue.js app in the same way as any other
JavaScript code. However, given that both Twig and Vue.js use the same delimiters
for variables, you should configure the <code class="docutils literal notranslate"><span class="pre">delimiters</span></code> Vue.js option to change
the default variable delimiters.</p>
<p>If you set for example <code class="docutils literal notranslate"><span class="pre">delimiters:</span> <span class="pre">['${',</span> <span class="pre">'}$']</span></code>, then you can use the
following in your Twig templates:</p>
<blockquote>
<div><div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{{</span> <span class="nv">twig_variable</span> <span class="cp">}}</span><span class="x">   </span><span class="c">{# renders a Twig variable #}</span><span class="x"></span>
<span class="x">${ vuejs_variable }$  </span><span class="c">{# renders a Vue.js variable #}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
</div></blockquote>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>