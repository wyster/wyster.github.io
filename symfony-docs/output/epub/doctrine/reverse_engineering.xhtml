<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Generate Entities from an Existing Database</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-generate-entities-from-an-existing-database">
<span id="index-0"></span><h1>How to Generate Entities from an Existing Database</h1>
<p>When starting work on a brand new project that uses a database, two different
situations comes naturally. In most cases, the database model is designed
and built from scratch. Sometimes, however, you’ll start with an existing and
probably unchangeable database model. Fortunately, Doctrine comes with a bunch
of tools to help generate model classes from your existing database.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>As the <a class="reference external" href="https://www.doctrine-project.org/projects/doctrine-orm/en/current/reference/tools.html#reverse-engineering">Doctrine tools documentation</a><span class="link-target"> [https://www.doctrine-project.org/projects/doctrine-orm/en/current/reference/tools.html#reverse-engineering]</span> says, reverse engineering is a
one-time process to get started on a project. Doctrine is able to convert
approximately 70-80% of the necessary mapping information based on fields,
indexes and foreign key constraints. Doctrine can’t discover inverse
associations, inheritance types, entities with foreign keys as primary keys
or semantical operations on associations such as cascade or lifecycle
events. Some additional work on the generated entities will be necessary
afterwards to design each to fit your domain model specificities.</p>
</div>
<p>This tutorial assumes you’re using a simple blog application with the following
two tables: <code class="docutils literal notranslate"><span class="pre">blog_post</span></code> and <code class="docutils literal notranslate"><span class="pre">blog_comment</span></code>. A comment record is linked
to a post record thanks to a foreign key constraint.</p>
<div class="highlight-sql notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="o">`</span><span class="n">blog_post</span><span class="o">`</span> <span class="p">(</span>
  <span class="o">`</span><span class="n">id</span><span class="o">`</span> <span class="nb">bigint</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
  <span class="o">`</span><span class="n">title</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="k">COLLATE</span> <span class="n">utf8_unicode_ci</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="o">`</span><span class="n">content</span><span class="o">`</span> <span class="n">longtext</span> <span class="k">COLLATE</span> <span class="n">utf8_unicode_ci</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="o">`</span><span class="n">created_at</span><span class="o">`</span> <span class="n">datetime</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">)</span>
<span class="p">)</span> <span class="n">ENGINE</span><span class="o">=</span><span class="n">InnoDB</span> <span class="n">AUTO_INCREMENT</span><span class="o">=</span><span class="mi">1</span> <span class="k">DEFAULT</span> <span class="n">CHARSET</span><span class="o">=</span><span class="n">utf8</span> <span class="k">COLLATE</span><span class="o">=</span><span class="n">utf8_unicode_ci</span><span class="p">;</span>

<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="o">`</span><span class="n">blog_comment</span><span class="o">`</span> <span class="p">(</span>
  <span class="o">`</span><span class="n">id</span><span class="o">`</span> <span class="nb">bigint</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
  <span class="o">`</span><span class="n">post_id</span><span class="o">`</span> <span class="nb">bigint</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="o">`</span><span class="n">author</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="k">COLLATE</span> <span class="n">utf8_unicode_ci</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="o">`</span><span class="n">content</span><span class="o">`</span> <span class="n">longtext</span> <span class="k">COLLATE</span> <span class="n">utf8_unicode_ci</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="o">`</span><span class="n">created_at</span><span class="o">`</span> <span class="n">datetime</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">),</span>
  <span class="k">KEY</span> <span class="o">`</span><span class="n">blog_comment_post_id_idx</span><span class="o">`</span> <span class="p">(</span><span class="o">`</span><span class="n">post_id</span><span class="o">`</span><span class="p">),</span>
  <span class="k">CONSTRAINT</span> <span class="o">`</span><span class="n">blog_post_id</span><span class="o">`</span> <span class="k">FOREIGN</span> <span class="k">KEY</span> <span class="p">(</span><span class="o">`</span><span class="n">post_id</span><span class="o">`</span><span class="p">)</span> <span class="k">REFERENCES</span> <span class="o">`</span><span class="n">blog_post</span><span class="o">`</span> <span class="p">(</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">)</span> <span class="k">ON</span> <span class="k">DELETE</span> <span class="k">CASCADE</span>
<span class="p">)</span> <span class="n">ENGINE</span><span class="o">=</span><span class="n">InnoDB</span> <span class="n">AUTO_INCREMENT</span><span class="o">=</span><span class="mi">1</span> <span class="k">DEFAULT</span> <span class="n">CHARSET</span><span class="o">=</span><span class="n">utf8</span> <span class="k">COLLATE</span><span class="o">=</span><span class="n">utf8_unicode_ci</span><span class="p">;</span>
</pre></div>
</td></tr></table></div>
<p>Before diving into the recipe, be sure your database connection parameters are
correctly setup in the <code class="docutils literal notranslate"><span class="pre">.env</span></code> file (or <code class="docutils literal notranslate"><span class="pre">.env.local</span></code> override file).</p>
<p>The first step towards building entity classes from an existing database
is to ask Doctrine to introspect the database and generate the corresponding
metadata files. Metadata files describe the entity class to generate based on
table fields.</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console doctrine:mapping:import <span class="s2">&quot;App\Entity&quot;</span> annotation --path<span class="o">=</span>src/Entity
</pre></div>
</td></tr></table></div>
<p>This command line tool asks Doctrine to introspect the database and generate
new PHP classes with annotation metadata into <code class="docutils literal notranslate"><span class="pre">src/Entity</span></code>. This generates two
files: <code class="docutils literal notranslate"><span class="pre">BlogPost.php</span></code> and <code class="docutils literal notranslate"><span class="pre">BlogComment.php</span></code>.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>It’s also possible to generate the metadata files into XML or eventually into YAML:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console doctrine:mapping:import <span class="s2">&quot;App\Entity&quot;</span> xml --path<span class="o">=</span>config/doctrine
</pre></div>
</td></tr></table></div>
<p>In this case, make sure to adapt your mapping configuration accordingly:</p>
<div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/packages/doctrine.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">doctrine</span><span class="p p-Indicator">:</span>
    <span class="c1"># ...</span>
    <span class="l l-Scalar l-Scalar-Plain">orm</span><span class="p p-Indicator">:</span>
        <span class="c1"># ...</span>
        <span class="l l-Scalar l-Scalar-Plain">mappings</span><span class="p p-Indicator">:</span>
            <span class="l l-Scalar l-Scalar-Plain">App</span><span class="p p-Indicator">:</span>
                <span class="l l-Scalar l-Scalar-Plain">is_bundle</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">false</span>
                <span class="l l-Scalar l-Scalar-Plain">type</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">xml</span> <span class="c1"># &quot;yml&quot; is marked as deprecated for doctrine v2.6+ and will be removed in v3</span>
                <span class="l l-Scalar l-Scalar-Plain">dir</span><span class="p p-Indicator">:</span> <span class="s">&#39;%kernel.project_dir%/config/doctrine&#39;</span>
                <span class="l l-Scalar l-Scalar-Plain">prefix</span><span class="p p-Indicator">:</span> <span class="s">&#39;App\Entity&#39;</span>
                <span class="l l-Scalar l-Scalar-Plain">alias</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">App</span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="generating-the-getters-setters-or-php-classes">
<h2>Generating the Getters &amp; Setters or PHP Classes</h2>
<p>The generated PHP classes now have properties and annotation metadata, but they
do <em>not</em> have any getter or setter methods. If you generated XML or YAML metadata,
you don’t even have the PHP classes!</p>
<p>To generate the missing getter/setter methods (or to <em>create</em> the classes if necessary),
run:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="go">// generates getter/setter methods</span>
<span class="gp">$</span> php bin/console make:entity --regenerate App
</pre></div>
</td></tr></table></div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If you want to have a OneToMany relationship, you will need to add
it manually into the entity (e.g. add a <code class="docutils literal notranslate"><span class="pre">comments</span></code> property to <code class="docutils literal notranslate"><span class="pre">BlogPost</span></code>)
or to the generated XML or YAML files. Add a section on the specific entities
for one-to-many defining the <code class="docutils literal notranslate"><span class="pre">inversedBy</span></code> and the <code class="docutils literal notranslate"><span class="pre">mappedBy</span></code> pieces.</p>
</div>
<p>The generated entities are now ready to be used. Have fun!</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>