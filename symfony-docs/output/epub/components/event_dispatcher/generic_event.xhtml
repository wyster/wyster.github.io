<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>The Generic Event Object</title>
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="the-generic-event-object">
<span id="index-0"></span><h1>The Generic Event Object</h1>
<p>The base <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Contracts/EventDispatcher/Event.php" title="Symfony\Contracts\EventDispatcher\Event"><span class="pre">Event</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Contracts/EventDispatcher/Event.php]</span></span></code> class provided
by the EventDispatcher component is deliberately sparse to allow the creation
of API specific event objects by inheritance using OOP. This allows for
elegant and readable code in complex applications.</p>
<p>The <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/EventDispatcher/GenericEvent.php" title="Symfony\Component\EventDispatcher\GenericEvent"><span class="pre">GenericEvent</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/EventDispatcher/GenericEvent.php]</span></span></code> is available
for convenience for those who wish to use just one event object throughout
their application. It is suitable for most purposes straight out of the
box, because it follows the standard observer pattern where the event object
encapsulates an event ‘subject’, but has the addition of optional extra
arguments.</p>
<p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/EventDispatcher/GenericEvent.php" title="Symfony\Component\EventDispatcher\GenericEvent"><span class="pre">GenericEvent</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/EventDispatcher/GenericEvent.php]</span></span></code> adds some more
methods in addition to the base class
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Contracts/EventDispatcher/Event.php" title="Symfony\Contracts\EventDispatcher\Event"><span class="pre">Event</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Contracts/EventDispatcher/Event.php]</span></span></code></p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/EventDispatcher/GenericEvent.php" title="Symfony\Component\EventDispatcher\GenericEvent::__construct()"><span class="pre">__construct()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/EventDispatcher/GenericEvent.php]</span></span></code>:
Constructor takes the event subject and any arguments;</p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/EventDispatcher/GenericEvent.php" title="Symfony\Component\EventDispatcher\GenericEvent::getSubject()"><span class="pre">getSubject()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/EventDispatcher/GenericEvent.php]</span></span></code>:
Get the subject;</p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/EventDispatcher/GenericEvent.php" title="Symfony\Component\EventDispatcher\GenericEvent::setArgument()"><span class="pre">setArgument()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/EventDispatcher/GenericEvent.php]</span></span></code>:
Sets an argument by key;</p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/EventDispatcher/GenericEvent.php" title="Symfony\Component\EventDispatcher\GenericEvent::setArguments()"><span class="pre">setArguments()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/EventDispatcher/GenericEvent.php]</span></span></code>:
Sets arguments array;</p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/EventDispatcher/GenericEvent.php" title="Symfony\Component\EventDispatcher\GenericEvent::getArgument()"><span class="pre">getArgument()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/EventDispatcher/GenericEvent.php]</span></span></code>:
Gets an argument by key;</p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/EventDispatcher/GenericEvent.php" title="Symfony\Component\EventDispatcher\GenericEvent::getArguments()"><span class="pre">getArguments()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/EventDispatcher/GenericEvent.php]</span></span></code>:
Getter for all arguments;</p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/EventDispatcher/GenericEvent.php" title="Symfony\Component\EventDispatcher\GenericEvent::hasArgument()"><span class="pre">hasArgument()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/EventDispatcher/GenericEvent.php]</span></span></code>:
Returns true if the argument key exists;</p></li>
</ul>
<p>The <code class="docutils literal notranslate"><span class="pre">GenericEvent</span></code> also implements <code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/class.arrayaccess.php" title="ArrayAccess"><span class="pre">ArrayAccess</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/class.arrayaccess.php]</span></span></code> on the event
arguments which makes it very convenient to pass extra arguments regarding
the event subject.</p>
<p>The following examples show use-cases to give a general idea of the flexibility.
The examples assume event listeners have been added to the dispatcher.</p>
<p>Passing a subject:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\EventDispatcher\GenericEvent</span><span class="p">;</span>

<span class="nv">$event</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">GenericEvent</span><span class="p">(</span><span class="nv">$subject</span><span class="p">);</span>
<span class="nv">$dispatcher</span><span class="o">-&gt;</span><span class="na">dispatch</span><span class="p">(</span><span class="nv">$event</span><span class="p">,</span> <span class="s1">&#39;foo&#39;</span><span class="p">);</span>

<span class="k">class</span> <span class="nc">FooListener</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">handler</span><span class="p">(</span><span class="nx">GenericEvent</span> <span class="nv">$event</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getSubject</span><span class="p">()</span> <span class="nx">instanceof</span> <span class="nx">Foo</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// ...</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Passing and processing arguments using the <code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/class.arrayaccess.php" title="ArrayAccess"><span class="pre">ArrayAccess</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/class.arrayaccess.php]</span></span></code> API to
access the event arguments:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\EventDispatcher\GenericEvent</span><span class="p">;</span>

<span class="nv">$event</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">GenericEvent</span><span class="p">(</span>
    <span class="nv">$subject</span><span class="p">,</span>
    <span class="p">[</span><span class="s1">&#39;type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;counter&#39;</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">]</span>
<span class="p">);</span>
<span class="nv">$dispatcher</span><span class="o">-&gt;</span><span class="na">dispatch</span><span class="p">(</span><span class="nv">$event</span><span class="p">,</span> <span class="s1">&#39;foo&#39;</span><span class="p">);</span>

<span class="k">class</span> <span class="nc">FooListener</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">handler</span><span class="p">(</span><span class="nx">GenericEvent</span> <span class="nv">$event</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$event</span><span class="p">[</span><span class="s1">&#39;type&#39;</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="nv">$event</span><span class="p">[</span><span class="s1">&#39;type&#39;</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;foo&#39;</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// ... do something</span>
        <span class="p">}</span>

        <span class="nv">$event</span><span class="p">[</span><span class="s1">&#39;counter&#39;</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Filtering data:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\EventDispatcher\GenericEvent</span><span class="p">;</span>

<span class="nv">$event</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">GenericEvent</span><span class="p">(</span><span class="nv">$subject</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;data&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Foo&#39;</span><span class="p">]);</span>
<span class="nv">$dispatcher</span><span class="o">-&gt;</span><span class="na">dispatch</span><span class="p">(</span><span class="nv">$event</span><span class="p">,</span> <span class="s1">&#39;foo&#39;</span><span class="p">);</span>

<span class="k">class</span> <span class="nc">FooListener</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">filter</span><span class="p">(</span><span class="nx">GenericEvent</span> <span class="nv">$event</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$event</span><span class="p">[</span><span class="s1">&#39;data&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">strtolower</span><span class="p">(</span><span class="nv">$event</span><span class="p">[</span><span class="s1">&#39;data&#39;</span><span class="p">]);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>