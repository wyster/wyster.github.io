<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>The Intl Component</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="the-intl-component">
<span id="index-0"></span><h1>The Intl Component</h1>
<blockquote>
<div><p>This component provides access to the localization data of the <a class="reference external" href="http://site.icu-project.org/">ICU library</a><span class="link-target"> [http://site.icu-project.org/]</span>.
It also provides a PHP replacement layer for the C <a class="reference external" href="https://www.php.net/manual/en/book.intl.php">intl extension</a><span class="link-target"> [https://www.php.net/manual/en/book.intl.php]</span>.</p>
</div></blockquote>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>The replacement layer is limited to the <code class="docutils literal notranslate"><span class="pre">en</span></code> locale. If you want to use
other locales, you should <a class="reference external" href="https://www.php.net/manual/en/intl.setup.php">install the intl extension</a><span class="link-target"> [https://www.php.net/manual/en/intl.setup.php]</span>. There is no conflict
between the two because, even if you use the extension, this package can still
be useful to access the ICU data.</p>
</div>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>This article explains how to use the Intl features as an independent component
in any PHP application. Read the <a class="reference internal" href="../translation.xhtml"><span class="doc">Translations</span></a> article to learn about
how to internationalize and manage the user locale in Symfony applications.</p>
</div>
<div class="section" id="installation">
<h2>Installation</h2>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require symfony/intl
</pre></div>
</td></tr></table></div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If you install this component outside of a Symfony application, you must
require the <code class="docutils literal notranslate"><span class="pre">vendor/autoload.php</span></code> file in your code to enable the class
autoloading mechanism provided by Composer. Read
<a class="reference internal" href="using_components.xhtml"><span class="doc">this article</span></a> for more details.</p>
</div>
<p>If you install the component via Composer, the following classes and functions
of the intl extension will be automatically provided if the intl extension is
not loaded:</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/class.collator.php" title="Collator"><span class="pre">Collator</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/class.collator.php]</span></span></code></p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/class.intldateformatter.php" title="IntlDateFormatter"><span class="pre">IntlDateFormatter</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/class.intldateformatter.php]</span></span></code></p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/class.locale.php" title="Locale"><span class="pre">Locale</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/class.locale.php]</span></span></code></p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/class.numberformatter.php" title="NumberFormatter"><span class="pre">NumberFormatter</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/class.numberformatter.php]</span></span></code></p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/function.intl-error-name.php" title="intl_error_name"><span class="pre">intl_error_name</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/function.intl-error-name.php]</span></span></code></p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/function.intl-is-failure.php" title="intl_is_failure"><span class="pre">intl_is_failure</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/function.intl-is-failure.php]</span></span></code></p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/function.intl-get-error-code.php" title="intl_get_error_code"><span class="pre">intl_get_error_code</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/function.intl-get-error-code.php]</span></span></code></p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/function.intl-get-error-message.php" title="intl_get_error_message"><span class="pre">intl_get_error_message</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/function.intl-get-error-message.php]</span></span></code></p></li>
</ul>
<p>When the intl extension is not available, the following classes are used to
replace the intl classes:</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Intl/Collator/Collator.php" title="Symfony\Component\Intl\Collator\Collator"><span class="pre">Collator</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Intl/Collator/Collator.php]</span></span></code></p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Intl/DateFormatter/IntlDateFormatter.php" title="Symfony\Component\Intl\DateFormatter\IntlDateFormatter"><span class="pre">IntlDateFormatter</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Intl/DateFormatter/IntlDateFormatter.php]</span></span></code></p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Intl/Locale/Locale.php" title="Symfony\Component\Intl\Locale\Locale"><span class="pre">Locale</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Intl/Locale/Locale.php]</span></span></code></p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Intl/NumberFormatter/NumberFormatter.php" title="Symfony\Component\Intl\NumberFormatter\NumberFormatter"><span class="pre">NumberFormatter</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Intl/NumberFormatter/NumberFormatter.php]</span></span></code></p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Intl/Globals/IntlGlobals.php" title="Symfony\Component\Intl\Globals\IntlGlobals"><span class="pre">IntlGlobals</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Intl/Globals/IntlGlobals.php]</span></span></code></p></li>
</ul>
<p>Composer automatically exposes these classes in the global namespace.</p>
</div>
<div class="section" id="accessing-icu-data">
<h2>Accessing ICU Data</h2>
<p>This component provides the following ICU data:</p>
<ul class="simple">
<li><p><a class="reference internal" href="#language-and-script-names">Language and Script Names</a></p></li>
<li><p><a class="reference internal" href="#country-names">Country Names</a></p></li>
<li><p><a class="reference internal" href="#locales">Locales</a></p></li>
<li><p><a class="reference internal" href="#currencies">Currencies</a></p></li>
<li><p><a class="reference internal" href="#timezones">Timezones</a></p></li>
</ul>
<div class="section" id="language-and-script-names">
<h3>Language and Script Names</h3>
<p>The <code class="docutils literal notranslate"><span class="pre">Languages</span></code> class provides access to the name of all languages
according to the <a class="reference external" href="https://en.wikipedia.org/wiki/ISO_639-1">ISO 639-1 alpha-2</a><span class="link-target"> [https://en.wikipedia.org/wiki/ISO_639-1]</span> list and the <a class="reference external" href="https://en.wikipedia.org/wiki/ISO_639-2">ISO 639-2 alpha-3</a><span class="link-target"> [https://en.wikipedia.org/wiki/ISO_639-2]</span> list:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Intl\Languages</span><span class="p">;</span>

<span class="nx">\Locale</span><span class="o">::</span><span class="na">setDefault</span><span class="p">(</span><span class="s1">&#39;en&#39;</span><span class="p">);</span>

<span class="nv">$languages</span> <span class="o">=</span> <span class="nx">Languages</span><span class="o">::</span><span class="na">getNames</span><span class="p">();</span>
<span class="c1">// (&#39;languageCode&#39; =&gt; &#39;languageName&#39;)</span>
<span class="c1">// =&gt; [&#39;ab&#39; =&gt; &#39;Abkhazian&#39;, &#39;ace&#39; =&gt; &#39;Achinese&#39;, ...]</span>

<span class="nv">$languages</span> <span class="o">=</span> <span class="nx">Languages</span><span class="o">::</span><span class="na">getAlpha3Names</span><span class="p">();</span>
<span class="c1">// (&#39;languageCode&#39; =&gt; &#39;languageName&#39;)</span>
<span class="c1">// =&gt; [&#39;abk&#39; =&gt; &#39;Abkhazian&#39;, &#39;ace&#39; =&gt; &#39;Achinese&#39;, ...]</span>

<span class="nv">$language</span> <span class="o">=</span> <span class="nx">Languages</span><span class="o">::</span><span class="na">getName</span><span class="p">(</span><span class="s1">&#39;fr&#39;</span><span class="p">);</span>
<span class="c1">// =&gt; &#39;French&#39;</span>

<span class="nv">$language</span> <span class="o">=</span> <span class="nx">Languages</span><span class="o">::</span><span class="na">getAlpha3Name</span><span class="p">(</span><span class="s1">&#39;fra&#39;</span><span class="p">);</span>
<span class="c1">// =&gt; &#39;French&#39;</span>
</pre></div>
</div>
<p>All methods accept the translation locale as the last, optional parameter,
which defaults to the current default locale:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$languages</span> <span class="o">=</span> <span class="nx">Languages</span><span class="o">::</span><span class="na">getNames</span><span class="p">(</span><span class="s1">&#39;de&#39;</span><span class="p">);</span>
<span class="c1">// =&gt; [&#39;ab&#39; =&gt; &#39;Abchasisch&#39;, &#39;ace&#39; =&gt; &#39;Aceh&#39;, ...]</span>

<span class="nv">$languages</span> <span class="o">=</span> <span class="nx">Languages</span><span class="o">::</span><span class="na">getAlpha3Names</span><span class="p">(</span><span class="s1">&#39;de&#39;</span><span class="p">);</span>
<span class="c1">// =&gt; [&#39;abk&#39; =&gt; &#39;Abchasisch&#39;, &#39;ace&#39; =&gt; &#39;Aceh&#39;, ...]</span>

<span class="nv">$language</span> <span class="o">=</span> <span class="nx">Languages</span><span class="o">::</span><span class="na">getName</span><span class="p">(</span><span class="s1">&#39;fr&#39;</span><span class="p">,</span> <span class="s1">&#39;de&#39;</span><span class="p">);</span>
<span class="c1">// =&gt; &#39;Französisch&#39;</span>

<span class="nv">$language</span> <span class="o">=</span> <span class="nx">Languages</span><span class="o">::</span><span class="na">getAlpha3Name</span><span class="p">(</span><span class="s1">&#39;fra&#39;</span><span class="p">,</span> <span class="s1">&#39;de&#39;</span><span class="p">);</span>
<span class="c1">// =&gt; &#39;Französisch&#39;</span>
</pre></div>
</div>
<p>If the given locale doesn’t exist, the methods trigger a
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Intl/Exception/MissingResourceException.php" title="Symfony\Component\Intl\Exception\MissingResourceException"><span class="pre">MissingResourceException</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Intl/Exception/MissingResourceException.php]</span></span></code>. In addition
to catching the exception, you can also check if a given language code is valid:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$isValidLanguage</span> <span class="o">=</span> <span class="nx">Languages</span><span class="o">::</span><span class="na">exists</span><span class="p">(</span><span class="nv">$languageCode</span><span class="p">);</span>
</pre></div>
</div>
<p>Or if you have a alpha3 language code you want to check:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$isValidLanguage</span> <span class="o">=</span> <span class="nx">Languages</span><span class="o">::</span><span class="na">alpha3CodeExists</span><span class="p">(</span><span class="nv">$alpha3Code</span><span class="p">);</span>
</pre></div>
</div>
<p>You may convert codes between two-letter alpha2 and three-letter alpha3 codes:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$alpha3Code</span> <span class="o">=</span> <span class="nx">Languages</span><span class="o">::</span><span class="na">getAlpha3Code</span><span class="p">(</span><span class="nv">$alpha2Code</span><span class="p">);</span>

<span class="nv">$alpha2Code</span> <span class="o">=</span> <span class="nx">Languages</span><span class="o">::</span><span class="na">getAlpha2Code</span><span class="p">(</span><span class="nv">$alpha3Code</span><span class="p">);</span>
</pre></div>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 4.3: </span>The <code class="docutils literal notranslate"><span class="pre">Languages</span></code> class was introduced in Symfony 4.3.</p>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 4.4: </span>The full support for alpha3 codes was introduced in Symfony 4.4.</p>
</div>
<p>The <code class="docutils literal notranslate"><span class="pre">Scripts</span></code> class provides access to the optional four-letter script code
that can follow the language code according to the <a class="reference external" href="https://www.unicode.org/iso15924/iso15924-codes.html">Unicode ISO 15924 Registry</a><span class="link-target"> [https://www.unicode.org/iso15924/iso15924-codes.html]</span>
(e.g. <code class="docutils literal notranslate"><span class="pre">HANS</span></code> in <code class="docutils literal notranslate"><span class="pre">zh_HANS</span></code> for simplified Chinese and <code class="docutils literal notranslate"><span class="pre">HANT</span></code> in <code class="docutils literal notranslate"><span class="pre">zh_HANT</span></code>
for traditional Chinese):</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Intl\Scripts</span><span class="p">;</span>

<span class="nx">\Locale</span><span class="o">::</span><span class="na">setDefault</span><span class="p">(</span><span class="s1">&#39;en&#39;</span><span class="p">);</span>

<span class="nv">$scripts</span> <span class="o">=</span> <span class="nx">Scripts</span><span class="o">::</span><span class="na">getNames</span><span class="p">();</span>
<span class="c1">// (&#39;scriptCode&#39; =&gt; &#39;scriptName&#39;)</span>
<span class="c1">// =&gt; [&#39;Adlm&#39; =&gt; &#39;Adlam&#39;, &#39;Afak&#39; =&gt; &#39;Afaka&#39;, ...]</span>

<span class="nv">$script</span> <span class="o">=</span> <span class="nx">Scripts</span><span class="o">::</span><span class="na">getName</span><span class="p">(</span><span class="s1">&#39;Hans&#39;</span><span class="p">);</span>
<span class="c1">// =&gt; &#39;Simplified&#39;</span>
</pre></div>
</div>
<p>All methods accept the translation locale as the last, optional parameter,
which defaults to the current default locale:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$scripts</span> <span class="o">=</span> <span class="nx">Scripts</span><span class="o">::</span><span class="na">getNames</span><span class="p">(</span><span class="s1">&#39;de&#39;</span><span class="p">);</span>
<span class="c1">// =&gt; [&#39;Adlm&#39; =&gt; &#39;Adlam&#39;, &#39;Afak&#39; =&gt; &#39;Afaka&#39;, ...]</span>

<span class="nv">$script</span> <span class="o">=</span> <span class="nx">Scripts</span><span class="o">::</span><span class="na">getName</span><span class="p">(</span><span class="s1">&#39;Hans&#39;</span><span class="p">,</span> <span class="s1">&#39;de&#39;</span><span class="p">);</span>
<span class="c1">// =&gt; &#39;Vereinfacht&#39;</span>
</pre></div>
</div>
<p>If the given script code doesn’t exist, the methods trigger a
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Intl/Exception/MissingResourceException.php" title="Symfony\Component\Intl\Exception\MissingResourceException"><span class="pre">MissingResourceException</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Intl/Exception/MissingResourceException.php]</span></span></code>. In addition
to catching the exception, you can also check if a given script code is valid:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$isValidScript</span> <span class="o">=</span> <span class="nx">Scripts</span><span class="o">::</span><span class="na">exists</span><span class="p">(</span><span class="nv">$scriptCode</span><span class="p">);</span>
</pre></div>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 4.3: </span>The <code class="docutils literal notranslate"><span class="pre">Scripts</span></code> class was introduced in Symfony 4.3.</p>
</div>
</div>
<div class="section" id="country-names">
<h3>Country Names</h3>
<p>The <code class="docutils literal notranslate"><span class="pre">Countries</span></code> class provides access to the name of all countries according
to the <a class="reference external" href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a><span class="link-target"> [https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2]</span> list and the <a class="reference external" href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3">ISO 3166-1 alpha-3</a><span class="link-target"> [https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3]</span> list
of officially recognized countries and territories:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Intl\Countries</span><span class="p">;</span>

<span class="nx">\Locale</span><span class="o">::</span><span class="na">setDefault</span><span class="p">(</span><span class="s1">&#39;en&#39;</span><span class="p">);</span>

<span class="nv">$countries</span> <span class="o">=</span> <span class="nx">Countries</span><span class="o">::</span><span class="na">getNames</span><span class="p">();</span>
<span class="c1">// (&#39;alpha2Code&#39; =&gt; &#39;countryName&#39;)</span>
<span class="c1">// =&gt; [&#39;AF&#39; =&gt; &#39;Afghanistan&#39;, &#39;AX&#39; =&gt; &#39;Åland Islands&#39;, ...]</span>

<span class="nv">$countries</span> <span class="o">=</span> <span class="nx">Countries</span><span class="o">::</span><span class="na">getAlpha3Names</span><span class="p">();</span>
<span class="c1">// (&#39;alpha3Code&#39; =&gt; &#39;countryName&#39;)</span>
<span class="c1">// =&gt; [&#39;AFG&#39; =&gt; &#39;Afghanistan&#39;, &#39;ALA&#39; =&gt; &#39;Åland Islands&#39;, ...]</span>

<span class="nv">$country</span> <span class="o">=</span> <span class="nx">Countries</span><span class="o">::</span><span class="na">getName</span><span class="p">(</span><span class="s1">&#39;GB&#39;</span><span class="p">);</span>
<span class="c1">// =&gt; &#39;United Kingdom&#39;</span>

<span class="nv">$country</span> <span class="o">=</span> <span class="nx">Countries</span><span class="o">::</span><span class="na">getAlpha3Name</span><span class="p">(</span><span class="s1">&#39;NOR&#39;</span><span class="p">);</span>
<span class="c1">// =&gt; &#39;Norway&#39;</span>
</pre></div>
</div>
<p>All methods accept the translation locale as the last, optional parameter,
which defaults to the current default locale:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$countries</span> <span class="o">=</span> <span class="nx">Countries</span><span class="o">::</span><span class="na">getNames</span><span class="p">(</span><span class="s1">&#39;de&#39;</span><span class="p">);</span>
<span class="c1">// =&gt; [&#39;AF&#39; =&gt; &#39;Afghanistan&#39;, &#39;EG&#39; =&gt; &#39;Ägypten&#39;, ...]</span>

<span class="nv">$countries</span> <span class="o">=</span> <span class="nx">Countries</span><span class="o">::</span><span class="na">getAlpha3Names</span><span class="p">(</span><span class="s1">&#39;de&#39;</span><span class="p">);</span>
<span class="c1">// =&gt; [&#39;AFG&#39; =&gt; &#39;Afghanistan&#39;, &#39;EGY&#39; =&gt; &#39;Ägypten&#39;, ...]</span>

<span class="nv">$country</span> <span class="o">=</span> <span class="nx">Countries</span><span class="o">::</span><span class="na">getName</span><span class="p">(</span><span class="s1">&#39;GB&#39;</span><span class="p">,</span> <span class="s1">&#39;de&#39;</span><span class="p">);</span>
<span class="c1">// =&gt; &#39;Vereinigtes Königreich&#39;</span>

<span class="nv">$country</span> <span class="o">=</span> <span class="nx">Countries</span><span class="o">::</span><span class="na">getAlpha3Name</span><span class="p">(</span><span class="s1">&#39;GBR&#39;</span><span class="p">,</span> <span class="s1">&#39;de&#39;</span><span class="p">);</span>
<span class="c1">// =&gt; &#39;Vereinigtes Königreich&#39;</span>
</pre></div>
</div>
<p>If the given country code doesn’t exist, the methods trigger a
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Intl/Exception/MissingResourceException.php" title="Symfony\Component\Intl\Exception\MissingResourceException"><span class="pre">MissingResourceException</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Intl/Exception/MissingResourceException.php]</span></span></code>. In addition
to catching the exception, you can also check if a given country code is valid:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$isValidCountry</span> <span class="o">=</span> <span class="nx">Countries</span><span class="o">::</span><span class="na">exists</span><span class="p">(</span><span class="nv">$alpha2Code</span><span class="p">);</span>
</pre></div>
</div>
<p>Or if you have a alpha3 country code you want to check:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$isValidCountry</span> <span class="o">=</span> <span class="nx">Countries</span><span class="o">::</span><span class="na">alpha3CodeExists</span><span class="p">(</span><span class="nv">$alpha3Code</span><span class="p">);</span>
</pre></div>
</div>
<p>You may convert codes between two-letter alpha2 and three-letter alpha3 codes:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$alpha3Code</span> <span class="o">=</span> <span class="nx">Countries</span><span class="o">::</span><span class="na">getAlpha3Code</span><span class="p">(</span><span class="nv">$alpha2Code</span><span class="p">);</span>

<span class="nv">$alpha2Code</span> <span class="o">=</span> <span class="nx">Countries</span><span class="o">::</span><span class="na">getAlpha2Code</span><span class="p">(</span><span class="nv">$alpha3Code</span><span class="p">);</span>
</pre></div>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 4.3: </span>The <code class="docutils literal notranslate"><span class="pre">Countries</span></code> class was introduced in Symfony 4.3.</p>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 4.4: </span>The support for alpha3 codes was introduced in Symfony 4.4.</p>
</div>
</div>
<div class="section" id="locales">
<h3>Locales</h3>
<p>A locale is the combination of a language, a region and some parameters that
define the interface preferences of the user. For example, “Chinese” is the
language and <code class="docutils literal notranslate"><span class="pre">zh_Hans_MO</span></code> is the locale for “Chinese” (language) + “Simplified”
(script) + “Macau SAR China” (region). The <code class="docutils literal notranslate"><span class="pre">Locales</span></code> class provides access to
the name of all locales:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Intl\Locales</span><span class="p">;</span>

<span class="nx">\Locale</span><span class="o">::</span><span class="na">setDefault</span><span class="p">(</span><span class="s1">&#39;en&#39;</span><span class="p">);</span>

<span class="nv">$locales</span> <span class="o">=</span> <span class="nx">Locales</span><span class="o">::</span><span class="na">getNames</span><span class="p">();</span>
<span class="c1">// (&#39;localeCode&#39; =&gt; &#39;localeName&#39;)</span>
<span class="c1">// =&gt; [&#39;af&#39; =&gt; &#39;Afrikaans&#39;, &#39;af_NA&#39; =&gt; &#39;Afrikaans (Namibia)&#39;, ...]</span>

<span class="nv">$locale</span> <span class="o">=</span> <span class="nx">Locales</span><span class="o">::</span><span class="na">getName</span><span class="p">(</span><span class="s1">&#39;zh_Hans_MO&#39;</span><span class="p">);</span>
<span class="c1">// =&gt; &#39;Chinese (Simplified, Macau SAR China)&#39;</span>
</pre></div>
</div>
<p>All methods accept the translation locale as the last, optional parameter,
which defaults to the current default locale:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$locales</span> <span class="o">=</span> <span class="nx">Locales</span><span class="o">::</span><span class="na">getNames</span><span class="p">(</span><span class="s1">&#39;de&#39;</span><span class="p">);</span>
<span class="c1">// =&gt; [&#39;af&#39; =&gt; &#39;Afrikaans&#39;, &#39;af_NA&#39; =&gt; &#39;Afrikaans (Namibia)&#39;, ...]</span>

<span class="nv">$locale</span> <span class="o">=</span> <span class="nx">Locales</span><span class="o">::</span><span class="na">getName</span><span class="p">(</span><span class="s1">&#39;zh_Hans_MO&#39;</span><span class="p">,</span> <span class="s1">&#39;de&#39;</span><span class="p">);</span>
<span class="c1">// =&gt; &#39;Chinesisch (Vereinfacht, Sonderverwaltungsregion Macau)&#39;</span>
</pre></div>
</div>
<p>If the given locale code doesn’t exist, the methods trigger a
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Intl/Exception/MissingResourceException.php" title="Symfony\Component\Intl\Exception\MissingResourceException"><span class="pre">MissingResourceException</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Intl/Exception/MissingResourceException.php]</span></span></code>. In addition
to catching the exception, you can also check if a given locale code is valid:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$isValidLocale</span> <span class="o">=</span> <span class="nx">Locales</span><span class="o">::</span><span class="na">exists</span><span class="p">(</span><span class="nv">$localeCode</span><span class="p">);</span>
</pre></div>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 4.3: </span>The <code class="docutils literal notranslate"><span class="pre">Locales</span></code> class was introduced in Symfony 4.3.</p>
</div>
</div>
<div class="section" id="currencies">
<h3>Currencies</h3>
<p>The <code class="docutils literal notranslate"><span class="pre">Currencies</span></code> class provides access to the name of all currencies as well
as some of their information (symbol, fraction digits, etc.):</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Intl\Currencies</span><span class="p">;</span>

<span class="nx">\Locale</span><span class="o">::</span><span class="na">setDefault</span><span class="p">(</span><span class="s1">&#39;en&#39;</span><span class="p">);</span>

<span class="nv">$currencies</span> <span class="o">=</span> <span class="nx">Currencies</span><span class="o">::</span><span class="na">getNames</span><span class="p">();</span>
<span class="c1">// (&#39;currencyCode&#39; =&gt; &#39;currencyName&#39;)</span>
<span class="c1">// =&gt; [&#39;AFN&#39; =&gt; &#39;Afghan Afghani&#39;, &#39;ALL&#39; =&gt; &#39;Albanian Lek&#39;, ...]</span>

<span class="nv">$currency</span> <span class="o">=</span> <span class="nx">Currencies</span><span class="o">::</span><span class="na">getName</span><span class="p">(</span><span class="s1">&#39;INR&#39;</span><span class="p">);</span>
<span class="c1">// =&gt; &#39;Indian Rupee&#39;</span>

<span class="nv">$symbol</span> <span class="o">=</span> <span class="nx">Currencies</span><span class="o">::</span><span class="na">getSymbol</span><span class="p">(</span><span class="s1">&#39;INR&#39;</span><span class="p">);</span>
<span class="c1">// =&gt; &#39;₹&#39;</span>

<span class="nv">$fractionDigits</span> <span class="o">=</span> <span class="nx">Currencies</span><span class="o">::</span><span class="na">getFractionDigits</span><span class="p">(</span><span class="s1">&#39;INR&#39;</span><span class="p">);</span>
<span class="c1">// =&gt; 2</span>

<span class="nv">$roundingIncrement</span> <span class="o">=</span> <span class="nx">Currencies</span><span class="o">::</span><span class="na">getRoundingIncrement</span><span class="p">(</span><span class="s1">&#39;INR&#39;</span><span class="p">);</span>
<span class="c1">// =&gt; 0</span>
</pre></div>
</div>
<p>All methods (except for <code class="docutils literal notranslate"><span class="pre">getFractionDigits()</span></code> and <code class="docutils literal notranslate"><span class="pre">getRoundingIncrement()</span></code>)
accept the translation locale as the last, optional parameter, which defaults to
the current default locale:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$currencies</span> <span class="o">=</span> <span class="nx">Currencies</span><span class="o">::</span><span class="na">getNames</span><span class="p">(</span><span class="s1">&#39;de&#39;</span><span class="p">);</span>
<span class="c1">// =&gt; [&#39;AFN&#39; =&gt; &#39;Afghanischer Afghani&#39;, &#39;EGP&#39; =&gt; &#39;Ägyptisches Pfund&#39;, ...]</span>

<span class="nv">$currency</span> <span class="o">=</span> <span class="nx">Currencies</span><span class="o">::</span><span class="na">getName</span><span class="p">(</span><span class="s1">&#39;INR&#39;</span><span class="p">,</span> <span class="s1">&#39;de&#39;</span><span class="p">);</span>
<span class="c1">// =&gt; &#39;Indische Rupie&#39;</span>
</pre></div>
</div>
<p>If the given currency code doesn’t exist, the methods trigger a
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Intl/Exception/MissingResourceException.php" title="Symfony\Component\Intl\Exception\MissingResourceException"><span class="pre">MissingResourceException</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Intl/Exception/MissingResourceException.php]</span></span></code>. In addition
to catching the exception, you can also check if a given currency code is valid:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$isValidCurrency</span> <span class="o">=</span> <span class="nx">Currencies</span><span class="o">::</span><span class="na">exists</span><span class="p">(</span><span class="nv">$currencyCode</span><span class="p">);</span>
</pre></div>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 4.3: </span>The <code class="docutils literal notranslate"><span class="pre">Currencies</span></code> class was introduced in Symfony 4.3.</p>
</div>
</div>
<div class="section" id="timezones">
<span id="component-intl-timezones"></span><h3>Timezones</h3>
<p>The <code class="docutils literal notranslate"><span class="pre">Timezones</span></code> class provides several utilities related to timezones. First,
you can get the name and values of all timezones in all languages:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Intl\Timezones</span><span class="p">;</span>

<span class="nx">\Locale</span><span class="o">::</span><span class="na">setDefault</span><span class="p">(</span><span class="s1">&#39;en&#39;</span><span class="p">);</span>

<span class="nv">$timezones</span> <span class="o">=</span> <span class="nx">Timezones</span><span class="o">::</span><span class="na">getNames</span><span class="p">();</span>
<span class="c1">// (&#39;timezoneID&#39; =&gt; &#39;timezoneValue&#39;)</span>
<span class="c1">// =&gt; [&#39;America/Eirunepe&#39; =&gt; &#39;Acre Time (Eirunepe)&#39;, &#39;America/Rio_Branco&#39; =&gt; &#39;Acre Time (Rio Branco)&#39;, ...]</span>

<span class="nv">$timezone</span> <span class="o">=</span> <span class="nx">Timezones</span><span class="o">::</span><span class="na">getName</span><span class="p">(</span><span class="s1">&#39;Africa/Nairobi&#39;</span><span class="p">);</span>
<span class="c1">// =&gt; &#39;East Africa Time (Nairobi)&#39;</span>
</pre></div>
</div>
<p>All methods accept the translation locale as the last, optional parameter,
which defaults to the current default locale:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$timezones</span> <span class="o">=</span> <span class="nx">Timezones</span><span class="o">::</span><span class="na">getNames</span><span class="p">(</span><span class="s1">&#39;de&#39;</span><span class="p">);</span>
<span class="c1">// =&gt; [&#39;America/Eirunepe&#39; =&gt; &#39;Acre-Zeit (Eirunepe)&#39;, &#39;America/Rio_Branco&#39; =&gt; &#39;Acre-Zeit (Rio Branco)&#39;, ...]</span>

<span class="nv">$timezone</span> <span class="o">=</span> <span class="nx">Timezones</span><span class="o">::</span><span class="na">getName</span><span class="p">(</span><span class="s1">&#39;Africa/Nairobi&#39;</span><span class="p">,</span> <span class="s1">&#39;de&#39;</span><span class="p">);</span>
<span class="c1">// =&gt; &#39;Ostafrikanische Zeit (Nairobi)&#39;</span>
</pre></div>
</div>
<p>You can also get all the timezones that exist in a given country. The
<code class="docutils literal notranslate"><span class="pre">forCountryCode()</span></code> method returns one or more timezone IDs, which you can
translate into any locale with the <code class="docutils literal notranslate"><span class="pre">getName()</span></code> method shown earlier:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// unlike language codes, country codes are always uppercase (CL = Chile)</span>
<span class="nv">$timezones</span> <span class="o">=</span> <span class="nx">Timezones</span><span class="o">::</span><span class="na">forCountryCode</span><span class="p">(</span><span class="s1">&#39;CL&#39;</span><span class="p">);</span>
<span class="c1">// =&gt; [&#39;America/Punta_Arenas&#39;, &#39;America/Santiago&#39;, &#39;Pacific/Easter&#39;]</span>
</pre></div>
</div>
<p>The reverse lookup is also possible thanks to the <code class="docutils literal notranslate"><span class="pre">getCountryCode()</span></code> method,
which returns the code of the country where the given timezone ID belongs to:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$countryCode</span> <span class="o">=</span> <span class="nx">Timezones</span><span class="o">::</span><span class="na">getCountryCode</span><span class="p">(</span><span class="s1">&#39;America/Vancouver&#39;</span><span class="p">)</span>
<span class="c1">// =&gt; $countryCode = &#39;CA&#39; (CA = Canada)</span>
</pre></div>
</div>
<p>The <a class="reference external" href="https://en.wikipedia.org/wiki/List_of_UTC_time_offsets">UTC/GMT time offsets</a><span class="link-target"> [https://en.wikipedia.org/wiki/List_of_UTC_time_offsets]</span> of all timezones are provided by <code class="docutils literal notranslate"><span class="pre">getRawOffset()</span></code>
(which returns an integer representing the offset in seconds) and
<code class="docutils literal notranslate"><span class="pre">getGmtOffset()</span></code> (which returns a string representation of the offset to
display it to users):</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$offset</span> <span class="o">=</span> <span class="nx">Timezones</span><span class="o">::</span><span class="na">getRawOffset</span><span class="p">(</span><span class="s1">&#39;Etc/UTC&#39;</span><span class="p">);</span>              <span class="c1">// $offset = 0</span>
<span class="nv">$offset</span> <span class="o">=</span> <span class="nx">Timezones</span><span class="o">::</span><span class="na">getRawOffset</span><span class="p">(</span><span class="s1">&#39;America/Buenos_Aires&#39;</span><span class="p">);</span> <span class="c1">// $offset = -10800</span>
<span class="nv">$offset</span> <span class="o">=</span> <span class="nx">Timezones</span><span class="o">::</span><span class="na">getRawOffset</span><span class="p">(</span><span class="s1">&#39;Asia/Katmandu&#39;</span><span class="p">);</span>        <span class="c1">// $offset = 20700</span>

<span class="nv">$offset</span> <span class="o">=</span> <span class="nx">Timezones</span><span class="o">::</span><span class="na">getGmtOffset</span><span class="p">(</span><span class="s1">&#39;Etc/UTC&#39;</span><span class="p">);</span>              <span class="c1">// $offset = &#39;GMT+00:00&#39;</span>
<span class="nv">$offset</span> <span class="o">=</span> <span class="nx">Timezones</span><span class="o">::</span><span class="na">getGmtOffset</span><span class="p">(</span><span class="s1">&#39;America/Buenos_Aires&#39;</span><span class="p">);</span> <span class="c1">// $offset = &#39;GMT-03:00&#39;</span>
<span class="nv">$offset</span> <span class="o">=</span> <span class="nx">Timezones</span><span class="o">::</span><span class="na">getGmtOffset</span><span class="p">(</span><span class="s1">&#39;Asia/Katmandu&#39;</span><span class="p">);</span>        <span class="c1">// $offset = &#39;GMT+05:45&#39;</span>
</pre></div>
</div>
<p>The timezone offset can vary in time because of the <a class="reference external" href="https://en.wikipedia.org/wiki/Daylight_saving_time">daylight saving time (DST)</a><span class="link-target"> [https://en.wikipedia.org/wiki/Daylight_saving_time]</span>
practice. By default these methods use the <code class="docutils literal notranslate"><span class="pre">time()</span></code> PHP function to get the
current timezone offset value, but you can pass a timestamp as their second
arguments to get the offset at any given point in time:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// In 2019, the DST period in Madrid (Spain) went from March 31 to October 27</span>
<span class="nv">$offset</span> <span class="o">=</span> <span class="nx">Timezones</span><span class="o">::</span><span class="na">getRawOffset</span><span class="p">(</span><span class="s1">&#39;Europe/Madrid&#39;</span><span class="p">,</span> <span class="nb">strtotime</span><span class="p">(</span><span class="s1">&#39;March 31, 2019&#39;</span><span class="p">));</span>   <span class="c1">// $offset = 3600</span>
<span class="nv">$offset</span> <span class="o">=</span> <span class="nx">Timezones</span><span class="o">::</span><span class="na">getRawOffset</span><span class="p">(</span><span class="s1">&#39;Europe/Madrid&#39;</span><span class="p">,</span> <span class="nb">strtotime</span><span class="p">(</span><span class="s1">&#39;April 1, 2019&#39;</span><span class="p">));</span>    <span class="c1">// $offset = 7200</span>
<span class="nv">$offset</span> <span class="o">=</span> <span class="nx">Timezones</span><span class="o">::</span><span class="na">getGmtOffset</span><span class="p">(</span><span class="s1">&#39;Europe/Madrid&#39;</span><span class="p">,</span> <span class="nb">strtotime</span><span class="p">(</span><span class="s1">&#39;October 27, 2019&#39;</span><span class="p">));</span> <span class="c1">// $offset = &#39;GMT+02:00&#39;</span>
<span class="nv">$offset</span> <span class="o">=</span> <span class="nx">Timezones</span><span class="o">::</span><span class="na">getGmtOffset</span><span class="p">(</span><span class="s1">&#39;Europe/Madrid&#39;</span><span class="p">,</span> <span class="nb">strtotime</span><span class="p">(</span><span class="s1">&#39;October 28, 2019&#39;</span><span class="p">));</span> <span class="c1">// $offset = &#39;GMT+01:00&#39;</span>
</pre></div>
</div>
<p>The string representation of the GMT offset can vary depending on the locale, so
you can pass the locale as the third optional argument:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$offset</span> <span class="o">=</span> <span class="nx">Timezones</span><span class="o">::</span><span class="na">getGmtOffset</span><span class="p">(</span><span class="s1">&#39;Europe/Madrid&#39;</span><span class="p">,</span> <span class="nb">strtotime</span><span class="p">(</span><span class="s1">&#39;October 28, 2019&#39;</span><span class="p">),</span> <span class="s1">&#39;ar&#39;</span><span class="p">));</span> <span class="c1">// $offset = &#39;غرينتش+01:00&#39;</span>
<span class="nv">$offset</span> <span class="o">=</span> <span class="nx">Timezones</span><span class="o">::</span><span class="na">getGmtOffset</span><span class="p">(</span><span class="s1">&#39;Europe/Madrid&#39;</span><span class="p">,</span> <span class="nb">strtotime</span><span class="p">(</span><span class="s1">&#39;October 28, 2019&#39;</span><span class="p">),</span> <span class="s1">&#39;dz&#39;</span><span class="p">));</span> <span class="c1">// $offset = &#39;ཇི་ཨེམ་ཏི་+01:00&#39;</span>
</pre></div>
</div>
<p>If the given timezone ID doesn’t exist, the methods trigger a
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Intl/Exception/MissingResourceException.php" title="Symfony\Component\Intl\Exception\MissingResourceException"><span class="pre">MissingResourceException</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Intl/Exception/MissingResourceException.php]</span></span></code>. In addition
to catching the exception, you can also check if a given timezone ID is valid:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$isValidTimezone</span> <span class="o">=</span> <span class="nx">Timezones</span><span class="o">::</span><span class="na">exists</span><span class="p">(</span><span class="nv">$timezoneId</span><span class="p">);</span>
</pre></div>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 4.3: </span>The <code class="docutils literal notranslate"><span class="pre">Timezones</span></code> class was introduced in Symfony 4.3.</p>
</div>
</div>
</div>
<div class="section" id="learn-more">
<h2>Learn more</h2>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="../reference/forms/types/country.xhtml">CountryType Field</a></li>
<li class="toctree-l1"><a class="reference internal" href="../reference/forms/types/currency.xhtml">CurrencyType Field</a></li>
<li class="toctree-l1"><a class="reference internal" href="../reference/forms/types/language.xhtml">LanguageType Field</a></li>
<li class="toctree-l1"><a class="reference internal" href="../reference/forms/types/locale.xhtml">LocaleType Field</a></li>
<li class="toctree-l1"><a class="reference internal" href="../reference/forms/types/timezone.xhtml">TimezoneType Field</a></li>
</ul>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>