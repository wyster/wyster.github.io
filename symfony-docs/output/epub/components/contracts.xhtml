<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>The Contracts Component</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="the-contracts-component">
<span id="index-0"></span><h1>The Contracts Component</h1>
<blockquote>
<div><p>The Contracts component provides a set of abstractions extracted out of the
Symfony components. They can be used to build on semantics that the Symfony
components proved useful - and that already have battle-tested implementations.</p>
</div></blockquote>
<div class="section" id="installation">
<h2>Installation</h2>
<p>Contracts are provided as separate packages, so you can install only the ones
your projects really need:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require symfony/cache-contracts
<span class="gp">$</span> composer require symfony/event-dispatcher-contracts
<span class="gp">$</span> composer require symfony/deprecation-contracts
<span class="gp">$</span> composer require symfony/http-client-contracts
<span class="gp">$</span> composer require symfony/service-contracts
<span class="gp">$</span> composer require symfony/translation-contracts
</pre></div>
</td></tr></table></div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If you install this component outside of a Symfony application, you must
require the <code class="docutils literal notranslate"><span class="pre">vendor/autoload.php</span></code> file in your code to enable the class
autoloading mechanism provided by Composer. Read
<a class="reference internal" href="using_components.xhtml"><span class="doc">this article</span></a> for more details.</p>
</div>
</div>
<div class="section" id="usage">
<h2>Usage</h2>
<p>The abstractions in this package are useful to achieve loose coupling and
interoperability. By using the provided interfaces as type hints, you are able
to reuse any implementations that match their contracts. It could be a Symfony
component, or another package provided by the PHP community at large.</p>
<p>Depending on their semantics, some interfaces can be combined with
<a class="reference internal" href="../service_container/autowiring.xhtml"><span class="doc">autowiring</span></a> to seamlessly inject a service
in your classes.</p>
<p>Others might be useful as labeling interfaces, to hint about a specific behavior
that can be enabled when using <a class="reference internal" href="../service_container.xhtml#services-autoconfigure"><span class="std std-ref">autoconfiguration</span></a>
or manual <a class="reference internal" href="../service_container/tags.xhtml"><span class="doc">service tagging</span></a> (or any other means
provided by your framework.)</p>
</div>
<div class="section" id="design-principles">
<h2>Design Principles</h2>
<ul class="simple">
<li><p>Contracts are split by domain, each into their own sub-namespaces;</p></li>
<li><p>Contracts are small and consistent sets of PHP interfaces, traits, normative
docblocks and reference test suites when applicable, …;</p></li>
<li><p>Contracts must have a proven implementation to enter this repository;</p></li>
<li><p>Contracts must be backward compatible with existing Symfony components.</p></li>
</ul>
<p>Packages that implement specific contracts should list them in the <code class="docutils literal notranslate"><span class="pre">provide</span></code>
section of their <code class="docutils literal notranslate"><span class="pre">composer.json</span></code> file, using the <code class="docutils literal notranslate"><span class="pre">symfony/*-implementation</span></code>
convention. For example:</p>
<div class="highlight-javascript notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="p">{</span>
    <span class="s2">&quot;...&quot;</span><span class="o">:</span> <span class="s2">&quot;...&quot;</span><span class="p">,</span>
    <span class="s2">&quot;provide&quot;</span><span class="o">:</span> <span class="p">{</span>
        <span class="s2">&quot;symfony/cache-implementation&quot;</span><span class="o">:</span> <span class="s2">&quot;1.0&quot;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="frequently-asked-questions">
<h2>Frequently Asked Questions</h2>
<div class="section" id="how-is-this-different-from-php-fig-s-psrs">
<h3>How Is this Different From PHP-FIG’s PSRs?</h3>
<p>When applicable, the provided contracts are built on top of <a class="reference external" href="https://www.php-fig.org/">PHP-FIG</a><span class="link-target"> [https://www.php-fig.org/]</span>’s PSRs.
However, PHP-FIG has different goals and different processes. Symfony Contracts
focuses  on providing abstractions that are useful on their own while still
compatible with implementations provided by Symfony.</p>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>