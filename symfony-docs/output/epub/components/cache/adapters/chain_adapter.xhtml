<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Chain Cache Adapter</title>
    <link rel="stylesheet" href="../../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="chain-cache-adapter">
<span id="component-cache-chain-adapter"></span><span id="index-0"></span><h1>Chain Cache Adapter</h1>
<p>This adapter allows combining any number of the other
<a class="reference internal" href="../cache_pools.xhtml#component-cache-creating-cache-pools"><span class="std std-ref">available cache adapters</span></a>. Cache items are
fetched from the first adapter containing them and cache items are saved to all the
given adapters. This exposes a simple and efficient method for creating a layered cache.</p>
<p>The ChainAdapter must be provided an array of adapters and optionally a maximum cache
lifetime as its constructor arguments:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Cache\Adapter\ChainAdapter</span><span class="p">;</span>

<span class="nv">$cache</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ChainAdapter</span><span class="p">(</span>
    <span class="c1">// The ordered list of adapters used to fetch cached items</span>
    <span class="k">array</span> <span class="nv">$adapters</span><span class="p">,</span>

    <span class="c1">// The max lifetime of items propagated from lower adapters to upper ones</span>
    <span class="nv">$maxLifetime</span> <span class="o">=</span> <span class="mi">0</span>
<span class="p">);</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>When an item is not found in the first adapter but is found in the next ones, this
adapter ensures that the fetched item is saved to all the adapters where it was
previously missing.</p>
</div>
<p>The following example shows how to create a chain adapter instance using the fastest and
slowest storage engines, <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Cache/Adapter/ApcuAdapter.php" title="Symfony\Component\Cache\Adapter\ApcuAdapter"><span class="pre">ApcuAdapter</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Cache/Adapter/ApcuAdapter.php]</span></span></code> and
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Cache/Adapter/FilesystemAdapter.php" title="Symfony\Component\Cache\Adapter\FilesystemAdapter"><span class="pre">FilesystemAdapter</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Cache/Adapter/FilesystemAdapter.php]</span></span></code>, respectfully:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Cache\Adapter\ApcuAdapter</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Cache\Adapter\ChainAdapter</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Cache\Adapter\FilesystemAdapter</span><span class="p">;</span>

<span class="nv">$cache</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ChainAdapter</span><span class="p">([</span>
    <span class="k">new</span> <span class="nx">ApcuAdapter</span><span class="p">(),</span>
    <span class="k">new</span> <span class="nx">FilesystemAdapter</span><span class="p">(),</span>
<span class="p">]);</span>
</pre></div>
</div>
<p>When calling this adapterâ€™s <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Cache/Adapter/ChainAdapter.php" title="Symfony\Component\Cache\Adapter\ChainAdapter::prune()"><span class="pre">prune()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Cache/Adapter/ChainAdapter.php]</span></span></code> method,
the call is delegated to all its compatible cache adapters. It is safe to mix both adapters
that <em>do</em> and do <em>not</em> implement <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Cache/PruneableInterface.php" title="Symfony\Component\Cache\PruneableInterface"><span class="pre">PruneableInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Cache/PruneableInterface.php]</span></span></code>, as
incompatible adapters are silently ignored:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Cache\Adapter\ApcuAdapter</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Cache\Adapter\ChainAdapter</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Cache\Adapter\FilesystemAdapter</span><span class="p">;</span>

<span class="nv">$cache</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ChainAdapter</span><span class="p">([</span>
    <span class="k">new</span> <span class="nx">ApcuAdapter</span><span class="p">(),</span>        <span class="c1">// does NOT implement PruneableInterface</span>
    <span class="k">new</span> <span class="nx">FilesystemAdapter</span><span class="p">(),</span>  <span class="c1">// DOES implement PruneableInterface</span>
<span class="p">]);</span>

<span class="c1">// prune will proxy the call to FilesystemAdapter while silently skip ApcuAdapter</span>
<span class="nv">$cache</span><span class="o">-&gt;</span><span class="na">prune</span><span class="p">();</span>
</pre></div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>