<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Filesystem Cache Adapter</title>
    <link rel="stylesheet" href="../../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="filesystem-cache-adapter">
<span id="component-cache-filesystem-adapter"></span><span id="index-0"></span><h1>Filesystem Cache Adapter</h1>
<p>This adapter offers improved application performance for those who cannot install
tools like <a class="reference internal" href="apcu_adapter.xhtml#apcu-adapter"><span class="std std-ref">APCu</span></a> or <a class="reference internal" href="redis_adapter.xhtml#redis-adapter"><span class="std std-ref">Redis</span></a> in their
environment. It stores the cache item expiration and content as regular files in
a collection of directories on a locally mounted filesystem.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The performance of this adapter can be greatly increased by utilizing a
temporary, in-memory filesystem, such as <a class="reference external" href="https://wiki.archlinux.org/index.php/tmpfs">tmpfs</a><span class="link-target"> [https://wiki.archlinux.org/index.php/tmpfs]</span> on Linux, or one of the
many other <a class="reference external" href="https://en.wikipedia.org/wiki/List_of_RAM_drive_software">RAM disk solutions</a><span class="link-target"> [https://en.wikipedia.org/wiki/List_of_RAM_drive_software]</span> available.</p>
</div>
<p>The FilesystemAdapter can optionally be provided a namespace, default cache lifetime,
and cache root path as constructor parameters:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Cache\Adapter\FilesystemAdapter</span><span class="p">;</span>

<span class="nv">$cache</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FilesystemAdapter</span><span class="p">(</span>

    <span class="c1">// a string used as the subdirectory of the root cache directory, where cache</span>
    <span class="c1">// items will be stored</span>
    <span class="nv">$namespace</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>

    <span class="c1">// the default lifetime (in seconds) for cache items that do not define their</span>
    <span class="c1">// own lifetime, with a value 0 causing items to be stored indefinitely (i.e.</span>
    <span class="c1">// until the files are deleted)</span>
    <span class="nv">$defaultLifetime</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>

    <span class="c1">// the main cache directory (the application needs read-write permissions on it)</span>
    <span class="c1">// if none is specified, a directory is created inside the system temporary directory</span>
    <span class="nv">$directory</span> <span class="o">=</span> <span class="k">null</span>
<span class="p">);</span>
</pre></div>
</div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>The overhead of filesystem IO often makes this adapter one of the <em>slower</em>
choices. If throughput is paramount, the in-memory adapters
(<a class="reference internal" href="apcu_adapter.xhtml#apcu-adapter"><span class="std std-ref">Apcu</span></a>, <a class="reference internal" href="memcached_adapter.xhtml#memcached-adapter"><span class="std std-ref">Memcached</span></a>, and
<a class="reference internal" href="redis_adapter.xhtml#redis-adapter"><span class="std std-ref">Redis</span></a>) or the database adapters
(<a class="reference internal" href="doctrine_adapter.xhtml#doctrine-adapter"><span class="std std-ref">Doctrine</span></a> and <a class="reference internal" href="pdo_doctrine_dbal_adapter.xhtml#pdo-doctrine-adapter"><span class="std std-ref">PDO</span></a>)
are recommended.</p>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>This adapter implements <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Cache/PruneableInterface.php" title="Symfony\Component\Cache\PruneableInterface"><span class="pre">PruneableInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Cache/PruneableInterface.php]</span></span></code>,
enabling manual <a class="reference internal" href="../cache_pools.xhtml#component-cache-cache-pool-prune"><span class="std std-ref">pruning of expired cache items</span></a>
by calling its <code class="docutils literal notranslate"><span class="pre">prune()</span></code> method.</p>
</div>
<div class="section" id="working-with-tags">
<span id="filesystem-tag-aware-adapter"></span><h2>Working with Tags</h2>
<p>In order to use tag-based invalidation, you can wrap your adapter in
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Cache/Adapter/TagAwareAdapter.php" title="Symfony\Component\Cache\Adapter\TagAwareAdapter"><span class="pre">TagAwareAdapter</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Cache/Adapter/TagAwareAdapter.php]</span></span></code>, but itâ€™s often
more interesting to use the dedicated <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Cache/Adapter/FilesystemTagAwareAdapter.php" title="Symfony\Component\Cache\Adapter\FilesystemTagAwareAdapter"><span class="pre">FilesystemTagAwareAdapter</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Cache/Adapter/FilesystemTagAwareAdapter.php]</span></span></code>.
Since tag invalidation logic is implemented using links on filesystem, this
adapter offers better read performance when using tag-based invalidation:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Cache\Adapter\FilesystemTagAwareAdapter</span><span class="p">;</span>

<span class="nv">$cache</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FilesystemTagAwareAdapter</span><span class="p">();</span>
</pre></div>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>