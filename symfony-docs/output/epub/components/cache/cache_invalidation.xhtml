<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Cache Invalidation</title>
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="cache-invalidation">
<span id="index-0"></span><h1>Cache Invalidation</h1>
<p>Cache invalidation is the process of removing all cached items related to a
change in the state of your model. The most basic kind of invalidation is direct
items deletion. But when the state of a primary resource has spread across
several cached items, keeping them in sync can be difficult.</p>
<p>The Symfony Cache component provides two mechanisms to help solve this problem:</p>
<ul class="simple">
<li><p><a class="reference internal" href="#cache-component-tags"><span class="std std-ref">Tags-based invalidation</span></a> for managing data dependencies;</p></li>
<li><p><a class="reference internal" href="#cache-component-expiration"><span class="std std-ref">Expiration based invalidation</span></a> for time-related dependencies.</p></li>
</ul>
<div class="section" id="using-cache-tags">
<span id="cache-component-tags"></span><h2>Using Cache Tags</h2>
<p>To benefit from tags-based invalidation, you need to attach the proper tags to
each cached item. Each tag is a plain string identifier that you can use at any
time to trigger the removal of all items associated with this tag.</p>
<p>To attach tags to cached items, you need to use the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Contracts/Cache/ItemInterface.php" title="Symfony\Contracts\Cache\ItemInterface::tag()"><span class="pre">tag()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Contracts/Cache/ItemInterface.php]</span></span></code> method that is implemented by
cache items:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$item</span> <span class="o">=</span> <span class="nv">$cache</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;cache_key&#39;</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nx">ItemInterface</span> <span class="nv">$item</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// [...]</span>
    <span class="c1">// add one or more tags</span>
    <span class="nv">$item</span><span class="o">-&gt;</span><span class="na">tag</span><span class="p">(</span><span class="s1">&#39;tag_1&#39;</span><span class="p">);</span>
    <span class="nv">$item</span><span class="o">-&gt;</span><span class="na">tag</span><span class="p">([</span><span class="s1">&#39;tag_2&#39;</span><span class="p">,</span> <span class="s1">&#39;tag_3&#39;</span><span class="p">]);</span>

    <span class="k">return</span> <span class="nv">$cachedValue</span><span class="p">;</span>
<span class="p">});</span>
</pre></div>
</div>
<p>If <code class="docutils literal notranslate"><span class="pre">$cache</span></code> implements <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Contracts/Cache/TagAwareCacheInterface.php" title="Symfony\Contracts\Cache\TagAwareCacheInterface"><span class="pre">TagAwareCacheInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Contracts/Cache/TagAwareCacheInterface.php]</span></span></code>,
you can invalidate the cached items by calling
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Contracts/Cache/TagAwareCacheInterface.php" title="Symfony\Contracts\Cache\TagAwareCacheInterface::invalidateTags()"><span class="pre">invalidateTags()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Contracts/Cache/TagAwareCacheInterface.php]</span></span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// invalidate all items related to `tag_1` or `tag_3`</span>
<span class="nv">$cache</span><span class="o">-&gt;</span><span class="na">invalidateTags</span><span class="p">([</span><span class="s1">&#39;tag_1&#39;</span><span class="p">,</span> <span class="s1">&#39;tag_3&#39;</span><span class="p">]);</span>

<span class="c1">// if you know the cache key, you can also delete the item directly</span>
<span class="nv">$cache</span><span class="o">-&gt;</span><span class="na">delete</span><span class="p">(</span><span class="s1">&#39;cache_key&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>Using tags invalidation is very useful when tracking cache keys becomes difficult.</p>
<div class="section" id="tag-aware-adapters">
<h3>Tag Aware Adapters</h3>
<p>To store tags, you need to wrap a cache adapter with the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Cache/Adapter/TagAwareAdapter.php" title="Symfony\Component\Cache\Adapter\TagAwareAdapter"><span class="pre">TagAwareAdapter</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Cache/Adapter/TagAwareAdapter.php]</span></span></code> class or implement
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Contracts/Cache/TagAwareCacheInterface.php" title="Symfony\Contracts\Cache\TagAwareCacheInterface"><span class="pre">TagAwareCacheInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Contracts/Cache/TagAwareCacheInterface.php]</span></span></code> and its
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Cache/Adapter/TagAwareAdapterInterface.php" title="Symfony\Component\Cache\Adapter\TagAwareAdapterInterface::invalidateTags()"><span class="pre">invalidateTags()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Cache/Adapter/TagAwareAdapterInterface.php]</span></span></code>
method.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>When using a Redis backend, consider using <a class="reference internal" href="adapters/redis_adapter.xhtml#redis-tag-aware-adapter"><span class="std std-ref">RedisTagAwareAdapter</span></a>
which is optimized for this purpose. When using filesystem, likewise consider to use
<a class="reference internal" href="adapters/filesystem_adapter.xhtml#filesystem-tag-aware-adapter"><span class="std std-ref">FilesystemTagAwareAdapter</span></a>.</p>
</div>
<p>The <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Cache/Adapter/TagAwareAdapter.php" title="Symfony\Component\Cache\Adapter\TagAwareAdapter"><span class="pre">TagAwareAdapter</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Cache/Adapter/TagAwareAdapter.php]</span></span></code> class implements
instantaneous invalidation (time complexity is <code class="docutils literal notranslate"><span class="pre">O(N)</span></code> where <code class="docutils literal notranslate"><span class="pre">N</span></code> is the number
of invalidated tags). It needs one or two cache adapters: the first required
one is used to store cached items; the second optional one is used to store tags
and their invalidation version number (conceptually similar to their latest
invalidation date). When only one adapter is used, items and tags are all stored
in the same place. By using two adapters, you can e.g. store some big cached items
on the filesystem or in the database and keep tags in a Redis database to sync all
your fronts and have very fast invalidation checks:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Cache\Adapter\FilesystemAdapter</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Cache\Adapter\RedisAdapter</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Cache\Adapter\TagAwareAdapter</span><span class="p">;</span>

<span class="nv">$cache</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TagAwareAdapter</span><span class="p">(</span>
    <span class="c1">// Adapter for cached items</span>
    <span class="k">new</span> <span class="nx">FilesystemAdapter</span><span class="p">(),</span>
    <span class="c1">// Adapter for tags</span>
    <span class="k">new</span> <span class="nx">RedisAdapter</span><span class="p">(</span><span class="s1">&#39;redis://localhost&#39;</span><span class="p">)</span>
<span class="p">);</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Cache/Adapter/TagAwareAdapter.php" title="Symfony\Component\Cache\Adapter\TagAwareAdapter"><span class="pre">TagAwareAdapter</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Cache/Adapter/TagAwareAdapter.php]</span></span></code>
implements <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Cache/PruneableInterface.php" title="Symfony\Component\Cache\PruneableInterface"><span class="pre">PruneableInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Cache/PruneableInterface.php]</span></span></code>,
enabling manual
<a class="reference internal" href="cache_pools.xhtml#component-cache-cache-pool-prune"><span class="std std-ref">pruning of expired cache entries</span></a> by
calling its <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Cache/Adapter/TagAwareAdapter.php" title="Symfony\Component\Cache\Adapter\TagAwareAdapter::prune()"><span class="pre">prune()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Cache/Adapter/TagAwareAdapter.php]</span></span></code>
method (assuming the wrapped adapter itself implements
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Cache/PruneableInterface.php" title="Symfony\Component\Cache\PruneableInterface"><span class="pre">PruneableInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Cache/PruneableInterface.php]</span></span></code>).</p>
</div>
</div>
</div>
<div class="section" id="using-cache-expiration">
<span id="cache-component-expiration"></span><h2>Using Cache Expiration</h2>
<p>If your data is valid only for a limited period of time, you can specify their
lifetime or their expiration date with the PSR-6 interface, as explained in the
<a class="reference internal" href="cache_items.xhtml"><span class="doc">Cache Items</span></a> article.</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>