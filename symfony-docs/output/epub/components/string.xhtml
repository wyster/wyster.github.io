<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>The String Component</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="the-string-component">
<span id="index-0"></span><h1>The String Component</h1>
<blockquote>
<div><p>The String component provides a single object-oriented API to work with
three “unit systems” of strings: bytes, code points and grapheme clusters.</p>
</div></blockquote>
<div class="section" id="installation">
<h2>Installation</h2>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require symfony/string
</pre></div>
</td></tr></table></div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If you install this component outside of a Symfony application, you must
require the <code class="docutils literal notranslate"><span class="pre">vendor/autoload.php</span></code> file in your code to enable the class
autoloading mechanism provided by Composer. Read
<a class="reference internal" href="using_components.xhtml"><span class="doc">this article</span></a> for more details.</p>
</div>
</div>
<div class="section" id="what-is-a-string">
<h2>What is a String?</h2>
<p>You can skip this section if you already know what a <em>“code point”</em> or a
<em>“grapheme cluster”</em> are in the context of handling strings. Otherwise, read
this section to learn about the terminology used by this component.</p>
<p>Languages like English require a very limited set of characters and symbols to
display any content. Each string is a series of characters (letters or symbols)
and they can be encoded even with the most limited standards (e.g. <a class="reference external" href="https://en.wikipedia.org/wiki/ASCII">ASCII</a><span class="link-target"> [https://en.wikipedia.org/wiki/ASCII]</span>).</p>
<p>However, other languages require thousands of symbols to display their contents.
They need complex encoding standards such as <a class="reference external" href="https://en.wikipedia.org/wiki/Unicode">Unicode</a><span class="link-target"> [https://en.wikipedia.org/wiki/Unicode]</span> and concepts like
“character” no longer make sense. Instead, you have to deal with these terms:</p>
<ul class="simple">
<li><p><a class="reference external" href="https://en.wikipedia.org/wiki/Code_point">Code points</a><span class="link-target"> [https://en.wikipedia.org/wiki/Code_point]</span>: they are the atomic unit of information. A string is a series
of code points. Each code point is a number whose meaning is given by the
<a class="reference external" href="https://en.wikipedia.org/wiki/Unicode">Unicode</a><span class="link-target"> [https://en.wikipedia.org/wiki/Unicode]</span> standard. For example, the English letter <code class="docutils literal notranslate"><span class="pre">A</span></code> is the <code class="docutils literal notranslate"><span class="pre">U+0041</span></code>
code point and the Japanese <em>kana</em> <code class="docutils literal notranslate"><span class="pre">の</span></code> is the <code class="docutils literal notranslate"><span class="pre">U+306E</span></code> code point.</p></li>
<li><p><a class="reference external" href="https://en.wikipedia.org/wiki/Grapheme">Grapheme clusters</a><span class="link-target"> [https://en.wikipedia.org/wiki/Grapheme]</span>: they are a sequence of one or more code points which are
displayed as a single graphical unit. For example, the Spanish letter <code class="docutils literal notranslate"><span class="pre">ñ</span></code> is
a grapheme cluster that contains two code points: <code class="docutils literal notranslate"><span class="pre">U+006E</span></code> = <code class="docutils literal notranslate"><span class="pre">n</span></code> (<em>“latin
small letter N”</em>) + <code class="docutils literal notranslate"><span class="pre">U+0303</span></code> = <code class="docutils literal notranslate"><span class="pre">◌̃</span></code> (<em>“combining tilde”</em>).</p></li>
<li><p>Bytes: they are the actual information stored for the string contents. Each
code point can require one or more bytes of storage depending on the standard
being used (UTF-8, UTF-16, etc.).</p></li>
</ul>
<p>The following image displays the bytes, code points and grapheme clusters for
the same word written in English (<code class="docutils literal notranslate"><span class="pre">hello</span></code>) and Hindi (<code class="docutils literal notranslate"><span class="pre">नमस्ते</span></code>):</p>
<img alt="../_images/bytes-points-graphemes.png" class="align-center" src="../_images/bytes-points-graphemes.png" />
</div>
<div class="section" id="usage">
<h2>Usage</h2>
<p>Create a new object of type <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/String/ByteString.php" title="Symfony\Component\String\ByteString"><span class="pre">ByteString</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/String/ByteString.php]</span></span></code>,
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/String/CodePointString.php" title="Symfony\Component\String\CodePointString"><span class="pre">CodePointString</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/String/CodePointString.php]</span></span></code> or
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/String/UnicodeString.php" title="Symfony\Component\String\UnicodeString"><span class="pre">UnicodeString</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/String/UnicodeString.php]</span></span></code>, pass the string contents as
their arguments and then use the object-oriented API to work with those strings:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\String\UnicodeString</span><span class="p">;</span>

<span class="nv">$text</span> <span class="o">=</span> <span class="p">(</span><span class="k">new</span> <span class="nx">UnicodeString</span><span class="p">(</span><span class="s1">&#39;This is a déjà-vu situation.&#39;</span><span class="p">))</span>
    <span class="o">-&gt;</span><span class="na">trimEnd</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="na">replace</span><span class="p">(</span><span class="s1">&#39;déjà-vu&#39;</span><span class="p">,</span> <span class="s1">&#39;jamais-vu&#39;</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="na">append</span><span class="p">(</span><span class="s1">&#39;!&#39;</span><span class="p">);</span>
<span class="c1">// $text = &#39;This is a jamais-vu situation!&#39;</span>

<span class="nv">$content</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UnicodeString</span><span class="p">(</span><span class="s1">&#39;नमस्ते दुनिया&#39;</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="nv">$content</span><span class="o">-&gt;</span><span class="na">ignoreCase</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">startsWith</span><span class="p">(</span><span class="s1">&#39;नमस्ते&#39;</span><span class="p">))</span> <span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="method-reference">
<h2>Method Reference</h2>
<div class="section" id="methods-to-create-string-objects">
<h3>Methods to Create String Objects</h3>
<p>First, you can create objects prepared to store strings as bytes, code points
and grapheme clusters with the following classes:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\String\ByteString</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\String\CodePointString</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\String\UnicodeString</span><span class="p">;</span>

<span class="nv">$foo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ByteString</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">);</span>
<span class="nv">$bar</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CodePointString</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">);</span>
<span class="c1">// UnicodeString is the most commonly used class</span>
<span class="nv">$baz</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UnicodeString</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>Use the <code class="docutils literal notranslate"><span class="pre">wrap()</span></code> static method to instantiate more than one string object:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$contents</span> <span class="o">=</span> <span class="nx">ByteString</span><span class="o">::</span><span class="na">wrap</span><span class="p">([</span><span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="s1">&#39;world&#39;</span><span class="p">]);</span>        <span class="c1">// $contents = ByteString[]</span>
<span class="nv">$contents</span> <span class="o">=</span> <span class="nx">UnicodeString</span><span class="o">::</span><span class="na">wrap</span><span class="p">([</span><span class="s1">&#39;I&#39;</span><span class="p">,</span> <span class="s1">&#39;❤️&#39;</span><span class="p">,</span> <span class="s1">&#39;Symfony&#39;</span><span class="p">]);</span> <span class="c1">// $contents = UnicodeString[]</span>

<span class="c1">// use the unwrap method to make the inverse conversion</span>
<span class="nv">$contents</span> <span class="o">=</span> <span class="nx">UnicodeString</span><span class="o">::</span><span class="na">unwrap</span><span class="p">([</span>
    <span class="k">new</span> <span class="nx">UnicodeString</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">),</span> <span class="k">new</span> <span class="nx">UnicodeString</span><span class="p">(</span><span class="s1">&#39;world&#39;</span><span class="p">),</span>
<span class="p">]);</span> <span class="c1">// $contents = [&#39;hello&#39;, &#39;world&#39;]</span>
</pre></div>
</div>
<p>If you work with lots of String objects, consider using the shortcut functions
to make your code more concise:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// the b() function creates byte strings</span>
<span class="k">use</span> <span class="k">function</span> <span class="nf">Symfony\Component\String\b</span><span class="p">;</span>

<span class="c1">// both lines are equivalent</span>
<span class="nv">$foo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ByteString</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">);</span>
<span class="nv">$foo</span> <span class="o">=</span> <span class="nx">b</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">);</span>

<span class="c1">// the u() function creates Unicode strings</span>
<span class="k">use</span> <span class="k">function</span> <span class="nf">Symfony\Component\String\u</span><span class="p">;</span>

<span class="c1">// both lines are equivalent</span>
<span class="nv">$foo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UnicodeString</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">);</span>
<span class="nv">$foo</span> <span class="o">=</span> <span class="nx">u</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">);</span>

<span class="c1">// the s() function creates a byte string or Unicode string</span>
<span class="c1">// depending on the given contents</span>
<span class="k">use</span> <span class="k">function</span> <span class="nf">Symfony\Component\String\s</span><span class="p">;</span>

<span class="c1">// creates a ByteString object</span>
<span class="nv">$foo</span> <span class="o">=</span> <span class="nx">s</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\xfe\xff</span><span class="s2">&quot;</span><span class="p">);</span>
<span class="c1">// creates a UnicodeString object</span>
<span class="nv">$foo</span> <span class="o">=</span> <span class="nx">s</span><span class="p">(</span><span class="s1">&#39;अनुच्छेद&#39;</span><span class="p">);</span>
</pre></div>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 5.1: </span>The <code class="docutils literal notranslate"><span class="pre">s()</span></code> function was introduced in Symfony 5.1.</p>
</div>
<p>There are also some specialized constructors:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ByteString can create a random string of the given length</span>
<span class="nv">$foo</span> <span class="o">=</span> <span class="nx">ByteString</span><span class="o">::</span><span class="na">fromRandom</span><span class="p">(</span><span class="mi">12</span><span class="p">);</span>
<span class="c1">// by default, random strings use A-Za-z0-9 characters; you can restrict</span>
<span class="c1">// the characters to use with the second optional argument</span>
<span class="nv">$foo</span> <span class="o">=</span> <span class="nx">ByteString</span><span class="o">::</span><span class="na">fromRandom</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="s1">&#39;AEIOU0123456789&#39;</span><span class="p">);</span>
<span class="nv">$foo</span> <span class="o">=</span> <span class="nx">ByteString</span><span class="o">::</span><span class="na">fromRandom</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="s1">&#39;qwertyuiop&#39;</span><span class="p">);</span>

<span class="c1">// CodePointString and UnicodeString can create a string from code points</span>
<span class="nv">$foo</span> <span class="o">=</span> <span class="nx">UnicodeString</span><span class="o">::</span><span class="na">fromCodePoints</span><span class="p">(</span><span class="mh">0x928</span><span class="p">,</span> <span class="mh">0x92E</span><span class="p">,</span> <span class="mh">0x938</span><span class="p">,</span> <span class="mh">0x94D</span><span class="p">,</span> <span class="mh">0x924</span><span class="p">,</span> <span class="mh">0x947</span><span class="p">);</span>
<span class="c1">// equivalent to: $foo = new UnicodeString(&#39;नमस्ते&#39;);</span>
</pre></div>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 5.1: </span>The second argument of <code class="docutils literal notranslate"><span class="pre">ByteString::fromRandom()</span></code> was introduced in Symfony 5.1.</p>
</div>
</div>
<div class="section" id="methods-to-transform-string-objects">
<h3>Methods to Transform String Objects</h3>
<p>Each string object can be transformed into the other two types of objects:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$foo</span> <span class="o">=</span> <span class="nx">ByteString</span><span class="o">::</span><span class="na">fromRandom</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">toCodePointString</span><span class="p">();</span>
<span class="nv">$foo</span> <span class="o">=</span> <span class="p">(</span><span class="k">new</span> <span class="nx">CodePointString</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">))</span><span class="o">-&gt;</span><span class="na">toUnicodeString</span><span class="p">();</span>
<span class="nv">$foo</span> <span class="o">=</span> <span class="nx">UnicodeString</span><span class="o">::</span><span class="na">fromCodePoints</span><span class="p">(</span><span class="mh">0x68</span><span class="p">,</span> <span class="mh">0x65</span><span class="p">,</span> <span class="mh">0x6C</span><span class="p">,</span> <span class="mh">0x6C</span><span class="p">,</span> <span class="mh">0x6F</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">toByteString</span><span class="p">();</span>

<span class="c1">// the optional $toEncoding argument defines the encoding of the target string</span>
<span class="nv">$foo</span> <span class="o">=</span> <span class="p">(</span><span class="k">new</span> <span class="nx">CodePointString</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">))</span><span class="o">-&gt;</span><span class="na">toByteString</span><span class="p">(</span><span class="s1">&#39;Windows-1252&#39;</span><span class="p">);</span>
<span class="c1">// the optional $fromEncoding argument defines the encoding of the original string</span>
<span class="nv">$foo</span> <span class="o">=</span> <span class="p">(</span><span class="k">new</span> <span class="nx">ByteString</span><span class="p">(</span><span class="s1">&#39;さよなら&#39;</span><span class="p">))</span><span class="o">-&gt;</span><span class="na">toCodePointString</span><span class="p">(</span><span class="s1">&#39;ISO-2022-JP&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>If the conversion is not possible for any reason, you’ll get an
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/String/Exception/InvalidArgumentException.php" title="Symfony\Component\String\Exception\InvalidArgumentException"><span class="pre">InvalidArgumentException</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/String/Exception/InvalidArgumentException.php]</span></span></code>.</p>
<p>There is also a method to get the bytes stored at some position:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// (&#39;नमस्ते&#39; bytes = [224, 164, 168, 224, 164, 174, 224, 164, 184,</span>
<span class="c1">//                  224, 165, 141, 224, 164, 164, 224, 165, 135])</span>
<span class="nx">b</span><span class="p">(</span><span class="s1">&#39;नमस्ते&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">bytesAt</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>   <span class="c1">// [224]</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;नमस्ते&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">bytesAt</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>   <span class="c1">// [224, 164, 168]</span>

<span class="nx">b</span><span class="p">(</span><span class="s1">&#39;नमस्ते&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">bytesAt</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>   <span class="c1">// [164]</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;नमस्ते&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">bytesAt</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>   <span class="c1">// [224, 164, 174]</span>
</pre></div>
</div>
</div>
<div class="section" id="methods-related-to-length-and-white-spaces">
<h3>Methods Related to Length and White Spaces</h3>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// returns the number of graphemes, code points or bytes of the given string</span>
<span class="nv">$word</span> <span class="o">=</span> <span class="s1">&#39;नमस्ते&#39;</span><span class="p">;</span>
<span class="p">(</span><span class="k">new</span> <span class="nx">ByteString</span><span class="p">(</span><span class="nv">$word</span><span class="p">))</span><span class="o">-&gt;</span><span class="na">length</span><span class="p">();</span>      <span class="c1">// 18 (bytes)</span>
<span class="p">(</span><span class="k">new</span> <span class="nx">CodePointString</span><span class="p">(</span><span class="nv">$word</span><span class="p">))</span><span class="o">-&gt;</span><span class="na">length</span><span class="p">();</span> <span class="c1">// 6 (code points)</span>
<span class="p">(</span><span class="k">new</span> <span class="nx">UnicodeString</span><span class="p">(</span><span class="nv">$word</span><span class="p">))</span><span class="o">-&gt;</span><span class="na">length</span><span class="p">();</span>   <span class="c1">// 4 (graphemes)</span>

<span class="c1">// some symbols require double the width of others to represent them when using</span>
<span class="c1">// a monospaced font (e.g. in a console). This method returns the total width</span>
<span class="c1">// needed to represent the entire word</span>
<span class="nv">$word</span> <span class="o">=</span> <span class="s1">&#39;नमस्ते&#39;</span><span class="p">;</span>
<span class="p">(</span><span class="k">new</span> <span class="nx">ByteString</span><span class="p">(</span><span class="nv">$word</span><span class="p">))</span><span class="o">-&gt;</span><span class="na">width</span><span class="p">();</span>      <span class="c1">// 18</span>
<span class="p">(</span><span class="k">new</span> <span class="nx">CodePointString</span><span class="p">(</span><span class="nv">$word</span><span class="p">))</span><span class="o">-&gt;</span><span class="na">width</span><span class="p">();</span> <span class="c1">// 4</span>
<span class="p">(</span><span class="k">new</span> <span class="nx">UnicodeString</span><span class="p">(</span><span class="nv">$word</span><span class="p">))</span><span class="o">-&gt;</span><span class="na">width</span><span class="p">();</span>   <span class="c1">// 4</span>
<span class="c1">// if the text contains multiple lines, it returns the max width of all lines</span>
<span class="nv">$text</span> <span class="o">=</span> <span class="s2">&quot;&lt;&lt;&lt;END</span>
<span class="s2">This is a</span>
<span class="s2">multiline text</span>
<span class="s2">END&quot;</span><span class="p">;</span>
<span class="nx">u</span><span class="p">(</span><span class="nv">$text</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">width</span><span class="p">();</span> <span class="c1">// 14</span>

<span class="c1">// only returns TRUE if the string is exactly an empty string (not even white spaces)</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;hello world&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">isEmpty</span><span class="p">();</span>  <span class="c1">// false</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;     &#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">isEmpty</span><span class="p">();</span>        <span class="c1">// false</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">isEmpty</span><span class="p">();</span>             <span class="c1">// true</span>

<span class="c1">// removes all white spaces from the start and end of the string and replaces two</span>
<span class="c1">// or more consecutive white spaces inside contents by a single white space</span>
<span class="nx">u</span><span class="p">(</span><span class="s2">&quot;  </span><span class="se">\n\n</span><span class="s2">   hello        world </span><span class="se">\n</span><span class="s2">    </span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">collapseWhitespace</span><span class="p">();</span> <span class="c1">// &#39;hello world&#39;</span>
</pre></div>
</div>
</div>
<div class="section" id="methods-to-change-case">
<h3>Methods to Change Case</h3>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// changes all graphemes/code points to lower case</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;FOO Bar&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">lower</span><span class="p">();</span>  <span class="c1">// &#39;foo bar&#39;</span>

<span class="c1">// when dealing with different languages, uppercase/lowercase is not enough</span>
<span class="c1">// there are three cases (lower, upper, title), some characters have no case,</span>
<span class="c1">// case is context-sensitive and locale-sensitive, etc.</span>
<span class="c1">// this method returns a string that you can use in case-insensitive comparisons</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;FOO Bar&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">folded</span><span class="p">();</span>             <span class="c1">// &#39;foo bar&#39;</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;Die O\&#39;Brian Straße&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">folded</span><span class="p">();</span> <span class="c1">// &quot;die o&#39;brian strasse&quot;</span>

<span class="c1">// changes all graphemes/code points to upper case</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;foo BAR&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">upper</span><span class="p">();</span> <span class="c1">// &#39;FOO BAR&#39;</span>

<span class="c1">// changes all graphemes/code points to &quot;title case&quot;</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;foo bar&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">title</span><span class="p">();</span>     <span class="c1">// &#39;Foo bar&#39;</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;foo bar&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">title</span><span class="p">(</span><span class="k">true</span><span class="p">);</span> <span class="c1">// &#39;Foo Bar&#39;</span>

<span class="c1">// changes all graphemes/code points to camelCase</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;Foo: Bar-baz.&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">camel</span><span class="p">();</span> <span class="c1">// &#39;fooBarBaz&#39;</span>
<span class="c1">// changes all graphemes/code points to snake_case</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;Foo: Bar-baz.&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">snake</span><span class="p">();</span> <span class="c1">// &#39;foo_bar_baz&#39;</span>
<span class="c1">// other cases can be achieved by chaining methods. E.g. PascalCase:</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;Foo: Bar-baz.&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">camel</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">title</span><span class="p">();</span> <span class="c1">// &#39;FooBarBaz&#39;</span>
</pre></div>
</div>
<p>The methods of all string classes are case-sensitive by default. You can perform
case-insensitive operations with the <code class="docutils literal notranslate"><span class="pre">ignoreCase()</span></code> method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nx">u</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">indexOf</span><span class="p">(</span><span class="s1">&#39;B&#39;</span><span class="p">);</span>               <span class="c1">// null</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">ignoreCase</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">indexOf</span><span class="p">(</span><span class="s1">&#39;B&#39;</span><span class="p">);</span> <span class="c1">// 1</span>
</pre></div>
</div>
</div>
<div class="section" id="methods-to-append-and-prepend">
<h3>Methods to Append and Prepend</h3>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// adds the given content (one or more strings) at the beginning/end of the string</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;world&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">prepend</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">);</span>      <span class="c1">// &#39;helloworld&#39;</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;world&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">prepend</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">);</span> <span class="c1">// &#39;hello world&#39;</span>

<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">append</span><span class="p">(</span><span class="s1">&#39;world&#39;</span><span class="p">);</span>      <span class="c1">// &#39;helloworld&#39;</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">append</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;world&#39;</span><span class="p">);</span> <span class="c1">// &#39;hello world&#39;</span>

<span class="c1">// adds the given content at the beginning of the string (or removes it) to</span>
<span class="c1">// make sure that the content starts exactly with that content</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;Name&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">ensureStart</span><span class="p">(</span><span class="s1">&#39;get&#39;</span><span class="p">);</span>       <span class="c1">// &#39;getName&#39;</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;getName&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">ensureStart</span><span class="p">(</span><span class="s1">&#39;get&#39;</span><span class="p">);</span>    <span class="c1">// &#39;getName&#39;</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;getgetName&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">ensureStart</span><span class="p">(</span><span class="s1">&#39;get&#39;</span><span class="p">);</span> <span class="c1">// &#39;getName&#39;</span>
<span class="c1">// this method is similar, but works on the end of the content instead of on the beginning</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;User&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">ensureEnd</span><span class="p">(</span><span class="s1">&#39;Controller&#39;</span><span class="p">);</span>           <span class="c1">// &#39;UserController&#39;</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;UserController&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">ensureEnd</span><span class="p">(</span><span class="s1">&#39;Controller&#39;</span><span class="p">);</span> <span class="c1">// &#39;UserController&#39;</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;UserControllerController&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">ensureEnd</span><span class="p">(</span><span class="s1">&#39;Controller&#39;</span><span class="p">);</span> <span class="c1">// &#39;UserController&#39;</span>

<span class="c1">// returns the contents found before/after the first occurrence of the given string</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;hello world&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">before</span><span class="p">(</span><span class="s1">&#39;world&#39;</span><span class="p">);</span>   <span class="c1">// &#39;hello &#39;</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;hello world&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">before</span><span class="p">(</span><span class="s1">&#39;o&#39;</span><span class="p">);</span>       <span class="c1">// &#39;hell&#39;</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;hello world&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">before</span><span class="p">(</span><span class="s1">&#39;o&#39;</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span> <span class="c1">// &#39;hello&#39;</span>

<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;hello world&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">after</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">);</span>   <span class="c1">// &#39; world&#39;</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;hello world&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">after</span><span class="p">(</span><span class="s1">&#39;o&#39;</span><span class="p">);</span>       <span class="c1">// &#39; world&#39;</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;hello world&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">after</span><span class="p">(</span><span class="s1">&#39;o&#39;</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span> <span class="c1">// &#39;o world&#39;</span>

<span class="c1">// returns the contents found before/after the last occurrence of the given string</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;hello world&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">beforeLast</span><span class="p">(</span><span class="s1">&#39;o&#39;</span><span class="p">);</span>       <span class="c1">// &#39;hello w&#39;</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;hello world&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">beforeLast</span><span class="p">(</span><span class="s1">&#39;o&#39;</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span> <span class="c1">// &#39;hello wo&#39;</span>

<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;hello world&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">afterLast</span><span class="p">(</span><span class="s1">&#39;o&#39;</span><span class="p">);</span>       <span class="c1">// &#39;rld&#39;</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;hello world&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">afterLast</span><span class="p">(</span><span class="s1">&#39;o&#39;</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span> <span class="c1">// &#39;orld&#39;</span>
</pre></div>
</div>
</div>
<div class="section" id="methods-to-pad-and-trim">
<h3>Methods to Pad and Trim</h3>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// makes a string as long as the first argument by adding the given</span>
<span class="c1">// string at the beginning, end or both sides of the string</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39; Lorem Ipsum &#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">padBoth</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">);</span> <span class="c1">// &#39;--- Lorem Ipsum ----&#39;</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39; Lorem Ipsum&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">padStart</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">);</span> <span class="c1">// &#39;-------- Lorem Ipsum&#39;</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;Lorem Ipsum &#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">padEnd</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">);</span>   <span class="c1">// &#39;Lorem Ipsum --------&#39;</span>

<span class="c1">// repeats the given string the number of times passed as argument</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;_.&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">repeat</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span> <span class="c1">// &#39;_._._._._._._._._._.&#39;</span>

<span class="c1">// removes the given characters (by default, white spaces) from the string</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;   Lorem Ipsum   &#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">trim</span><span class="p">();</span> <span class="c1">// &#39;Lorem Ipsum&#39;</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;Lorem Ipsum   &#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">trim</span><span class="p">(</span><span class="s1">&#39;m&#39;</span><span class="p">);</span> <span class="c1">// &#39;Lorem Ipsum   &#39;</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;Lorem Ipsum&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">trim</span><span class="p">(</span><span class="s1">&#39;m&#39;</span><span class="p">);</span>    <span class="c1">// &#39;Lorem Ipsu&#39;</span>

<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;   Lorem Ipsum   &#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">trimStart</span><span class="p">();</span> <span class="c1">// &#39;Lorem Ipsum   &#39;</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;   Lorem Ipsum   &#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">trimEnd</span><span class="p">();</span>   <span class="c1">// &#39;   Lorem Ipsum&#39;</span>
</pre></div>
</div>
</div>
<div class="section" id="methods-to-search-and-replace">
<h3>Methods to Search and Replace</h3>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// checks if the string starts/ends with the given string</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;https://symfony.com&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">startsWith</span><span class="p">(</span><span class="s1">&#39;https&#39;</span><span class="p">);</span> <span class="c1">// true</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;report-1234.pdf&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">endsWith</span><span class="p">(</span><span class="s1">&#39;.pdf&#39;</span><span class="p">);</span>        <span class="c1">// true</span>

<span class="c1">// checks if the string contents are exactly the same as the given contents</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">equalsTo</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span> <span class="c1">// true</span>

<span class="c1">// checks if the string content match the given regular expression</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;avatar-73647.png&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">match</span><span class="p">(</span><span class="s1">&#39;/avatar-(\d+)\.png/&#39;</span><span class="p">);</span>
<span class="c1">// result = [&#39;avatar-73647.png&#39;, &#39;73647&#39;]</span>

<span class="c1">// checks if the string contains any of the other given strings</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;aeiou&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">containsAny</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">);</span>                 <span class="c1">// true</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;aeiou&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">containsAny</span><span class="p">([</span><span class="s1">&#39;ab&#39;</span><span class="p">,</span> <span class="s1">&#39;efg&#39;</span><span class="p">]);</span>       <span class="c1">// false</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;aeiou&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">containsAny</span><span class="p">([</span><span class="s1">&#39;eio&#39;</span><span class="p">,</span> <span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;z&#39;</span><span class="p">]);</span> <span class="c1">// true</span>

<span class="c1">// finds the position of the first occurrence of the given string</span>
<span class="c1">// (the second argument is the position where the search starts and negative</span>
<span class="c1">// values have the same meaning as in PHP functions)</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;abcdeabcde&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">indexOf</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">);</span>     <span class="c1">// 2</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;abcdeabcde&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">indexOf</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>  <span class="c1">// 2</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;abcdeabcde&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">indexOf</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">);</span> <span class="c1">// 7</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;abcdeabcde&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">indexOf</span><span class="p">(</span><span class="s1">&#39;eab&#39;</span><span class="p">);</span>   <span class="c1">// 4</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;abcdeabcde&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">indexOf</span><span class="p">(</span><span class="s1">&#39;k&#39;</span><span class="p">);</span>     <span class="c1">// null</span>

<span class="c1">// finds the position of the last occurrence of the given string</span>
<span class="c1">// (the second argument is the position where the search starts and negative</span>
<span class="c1">// values have the same meaning as in PHP functions)</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;abcdeabcde&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">indexOfLast</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">);</span>     <span class="c1">// 7</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;abcdeabcde&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">indexOfLast</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>  <span class="c1">// 7</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;abcdeabcde&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">indexOfLast</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="o">-</span><span class="mi">4</span><span class="p">);</span> <span class="c1">// 2</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;abcdeabcde&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">indexOfLast</span><span class="p">(</span><span class="s1">&#39;eab&#39;</span><span class="p">);</span>   <span class="c1">// 4</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;abcdeabcde&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">indexOfLast</span><span class="p">(</span><span class="s1">&#39;k&#39;</span><span class="p">);</span>     <span class="c1">// null</span>

<span class="c1">// replaces all occurrences of the given string</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;http://symfony.com&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">replace</span><span class="p">(</span><span class="s1">&#39;http://&#39;</span><span class="p">,</span> <span class="s1">&#39;https://&#39;</span><span class="p">);</span> <span class="c1">// &#39;https://symfony.com&#39;</span>
<span class="c1">// replaces all occurrences of the given regular expression</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;(+1) 206-555-0100&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">replaceMatches</span><span class="p">(</span><span class="s1">&#39;/[^A-Za-z0-9]++/&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span> <span class="c1">// &#39;12065550100&#39;</span>
<span class="c1">// you can pass a callable as the second argument to perform advanced replacements</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;123&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">replaceMatches</span><span class="p">(</span><span class="s1">&#39;/\d/&#39;</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$match</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s1">&#39;[&#39;</span><span class="o">.</span><span class="nv">$match</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="s1">&#39;]&#39;</span><span class="p">;</span>
<span class="p">});</span> <span class="c1">// result = &#39;[1][2][3]&#39;</span>
</pre></div>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 5.1: </span>The <code class="docutils literal notranslate"><span class="pre">containsAny()</span></code> method was introduced in Symfony 5.1.</p>
</div>
</div>
<div class="section" id="methods-to-join-split-truncate-and-reverse">
<h3>Methods to Join, Split, Truncate and Reverse</h3>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// uses the string as the &quot;glue&quot; to merge all the given strings</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">join</span><span class="p">([</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">]);</span> <span class="c1">// &#39;foo, bar&#39;</span>

<span class="c1">// breaks the string into pieces using the given delimiter</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;template_name.html.twig&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">split</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">);</span>    <span class="c1">// [&#39;template_name&#39;, &#39;html&#39;, &#39;twig&#39;]</span>
<span class="c1">// you can set the maximum number of pieces as the second argument</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;template_name.html.twig&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">split</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span> <span class="c1">// [&#39;template_name&#39;, &#39;html.twig&#39;]</span>

<span class="c1">// returns a substring which starts at the first argument and has the length of the</span>
<span class="c1">// second optional argument (negative values have the same meaning as in PHP functions)</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;Symfony is great&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">7</span><span class="p">);</span>  <span class="c1">// &#39;Symfony&#39;</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;Symfony is great&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">6</span><span class="p">);</span> <span class="c1">// &#39;Symfony is&#39;</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;Symfony is great&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">slice</span><span class="p">(</span><span class="mi">11</span><span class="p">);</span>    <span class="c1">// &#39;great&#39;</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;Symfony is great&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">slice</span><span class="p">(</span><span class="o">-</span><span class="mi">5</span><span class="p">);</span>    <span class="c1">// &#39;great&#39;</span>

<span class="c1">// reduces the string to the length given as argument (if it&#39;s longer)</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;Lorem Ipsum&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">truncate</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>             <span class="c1">// &#39;Lor&#39;</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;Lorem Ipsum&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">truncate</span><span class="p">(</span><span class="mi">80</span><span class="p">);</span>            <span class="c1">// &#39;Lorem Ipsum&#39;</span>
<span class="c1">// the second argument is the character(s) added when a string is cut</span>
<span class="c1">// (the total length includes the length of this character(s))</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;Lorem Ipsum&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">truncate</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="s1">&#39;…&#39;</span><span class="p">);</span>        <span class="c1">// &#39;Lorem I…&#39;</span>
<span class="c1">// if the third argument is false, the last word before the cut is kept</span>
<span class="c1">// even if that generates a string longer than the desired length</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;Lorem Ipsum&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">truncate</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="s1">&#39;…&#39;</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span> <span class="c1">// &#39;Lorem Ipsum&#39;</span>
</pre></div>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 5.1: </span>The third argument of <code class="docutils literal notranslate"><span class="pre">truncate()</span></code> was introduced in Symfony 5.1.</p>
</div>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// breaks the string into lines of the given length</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;Lorem Ipsum&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">wordwrap</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>             <span class="c1">// &#39;Lorem\nIpsum&#39;</span>
<span class="c1">// by default it breaks by white space; pass TRUE to break unconditionally</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;Lorem Ipsum&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">wordwrap</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span> <span class="c1">// &#39;Lore\nm\nIpsu\nm&#39;</span>

<span class="c1">// replaces a portion of the string with the given contents:</span>
<span class="c1">// the second argument is the position where the replacement starts;</span>
<span class="c1">// the third argument is the number of graphemes/code points removed from the string</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;0123456789&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">splice</span><span class="p">(</span><span class="s1">&#39;xxx&#39;</span><span class="p">);</span>       <span class="c1">// &#39;xxx&#39;</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;0123456789&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">splice</span><span class="p">(</span><span class="s1">&#39;xxx&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span> <span class="c1">// &#39;xxx23456789&#39;</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;0123456789&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">splice</span><span class="p">(</span><span class="s1">&#39;xxx&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span> <span class="c1">// &#39;xxx6789&#39;</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;0123456789&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">splice</span><span class="p">(</span><span class="s1">&#39;xxx&#39;</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>    <span class="c1">// &#39;012345xxx&#39;</span>

<span class="c1">// breaks the string into pieces of the length given as argument</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;0123456789&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">chunk</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>  <span class="c1">// [&#39;012&#39;, &#39;345&#39;, &#39;678&#39;, &#39;9&#39;]</span>

<span class="c1">// reverses the order of the string contents</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;foo bar&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">reverse</span><span class="p">();</span> <span class="c1">// &#39;rab oof&#39;</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;さよなら&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">reverse</span><span class="p">();</span> <span class="c1">// &#39;らなよさ&#39;</span>
</pre></div>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 5.1: </span>The <code class="docutils literal notranslate"><span class="pre">reverse()</span></code> method was introduced in Symfony 5.1.</p>
</div>
</div>
<div class="section" id="methods-added-by-bytestring">
<h3>Methods Added by ByteString</h3>
<p>These methods are only available for <code class="docutils literal notranslate"><span class="pre">ByteString</span></code> objects:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// returns TRUE if the string contents are valid UTF-8 contents</span>
<span class="nx">b</span><span class="p">(</span><span class="s1">&#39;Lorem Ipsum&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">isUtf8</span><span class="p">();</span> <span class="c1">// true</span>
<span class="nx">b</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\xc3\x28</span><span class="s2">&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">isUtf8</span><span class="p">();</span>    <span class="c1">// false</span>
</pre></div>
</div>
</div>
<div class="section" id="methods-added-by-codepointstring-and-unicodestring">
<h3>Methods Added by CodePointString and UnicodeString</h3>
<p>These methods are only available for <code class="docutils literal notranslate"><span class="pre">CodePointString</span></code> and <code class="docutils literal notranslate"><span class="pre">UnicodeString</span></code>
objects:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// transliterates any string into the latin alphabet defined by the ASCII encoding</span>
<span class="c1">// (don&#39;t use this method to build a slugger because this component already provides</span>
<span class="c1">// a slugger, as explained later in this article)</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;नमस्ते&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">ascii</span><span class="p">();</span>    <span class="c1">// &#39;namaste&#39;</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;さよなら&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">ascii</span><span class="p">();</span> <span class="c1">// &#39;sayonara&#39;</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;спасибо&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">ascii</span><span class="p">();</span> <span class="c1">// &#39;spasibo&#39;</span>

<span class="c1">// returns an array with the code point or points stored at the given position</span>
<span class="c1">// (code points of &#39;नमस्ते&#39; graphemes = [2344, 2350, 2360, 2340]</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;नमस्ते&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">codePointsAt</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">// [2344]</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;नमस्ते&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">codePointsAt</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span> <span class="c1">// [2360]</span>
</pre></div>
</div>
<p><a class="reference external" href="https://en.wikipedia.org/wiki/Unicode_equivalence">Unicode equivalence</a><span class="link-target"> [https://en.wikipedia.org/wiki/Unicode_equivalence]</span> is the specification by the Unicode standard that
different sequences of code points represent the same character. For example,
the Swedish letter <code class="docutils literal notranslate"><span class="pre">å</span></code> can be a single code point (<code class="docutils literal notranslate"><span class="pre">U+00E5</span></code> = <em>“latin small
letter A with ring above”</em>) or a sequence of two code points (<code class="docutils literal notranslate"><span class="pre">U+0061</span></code> =
<em>“latin small letter A”</em> + <code class="docutils literal notranslate"><span class="pre">U+030A</span></code> = <em>“combining ring above”</em>). The
<code class="docutils literal notranslate"><span class="pre">normalize()</span></code> method allows to pick the normalization mode:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// these encode the letter as a single code point: U+00E5</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;å&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">normalize</span><span class="p">(</span><span class="nx">UnicodeString</span><span class="o">::</span><span class="na">NFC</span><span class="p">);</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;å&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">normalize</span><span class="p">(</span><span class="nx">UnicodeString</span><span class="o">::</span><span class="na">NFKC</span><span class="p">);</span>
<span class="c1">// these encode the letter as two code points: U+0061 + U+030A</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;å&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">normalize</span><span class="p">(</span><span class="nx">UnicodeString</span><span class="o">::</span><span class="na">NFD</span><span class="p">);</span>
<span class="nx">u</span><span class="p">(</span><span class="s1">&#39;å&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">normalize</span><span class="p">(</span><span class="nx">UnicodeString</span><span class="o">::</span><span class="na">NFKD</span><span class="p">);</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="slugger">
<h2>Slugger</h2>
<p>In some contexts, such as URLs and file/directory names, it’s not safe to use
any Unicode character. A <em>slugger</em> transforms a given string into another string
that only includes safe ASCII characters:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\String\Slugger\AsciiSlugger</span><span class="p">;</span>

<span class="nv">$slugger</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AsciiSlugger</span><span class="p">();</span>
<span class="nv">$slug</span> <span class="o">=</span> <span class="nv">$slugger</span><span class="o">-&gt;</span><span class="na">slug</span><span class="p">(</span><span class="s1">&#39;Wôrķšƥáçè ~~sèťtïñğš~~&#39;</span><span class="p">);</span>
<span class="c1">// $slug = &#39;Workspace-settings&#39;</span>

<span class="c1">// you can also pass an array with additional character substitutions</span>
<span class="nv">$slugger</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AsciiSlugger</span><span class="p">(</span><span class="s1">&#39;en&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;en&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;%&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;percent&#39;</span><span class="p">,</span> <span class="s1">&#39;€&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;euro&#39;</span><span class="p">]]);</span>
<span class="nv">$slug</span> <span class="o">=</span> <span class="nv">$slugger</span><span class="o">-&gt;</span><span class="na">slug</span><span class="p">(</span><span class="s1">&#39;10% or 5€&#39;</span><span class="p">);</span>
<span class="c1">// $slug = &#39;10-percent-or-5-euro&#39;</span>

<span class="c1">// for more dynamic substitutions, pass a PHP closure instead of an array</span>
<span class="nv">$slugger</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AsciiSlugger</span><span class="p">(</span><span class="s1">&#39;en&#39;</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$string</span><span class="p">,</span> <span class="nv">$locale</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">str_replace</span><span class="p">(</span><span class="s1">&#39;❤️&#39;</span><span class="p">,</span> <span class="s1">&#39;love&#39;</span><span class="p">,</span> <span class="nv">$string</span><span class="p">);</span>
<span class="p">});</span>
</pre></div>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 5.1: </span>The feature to define additional substitutions was introduced in Symfony 5.1.</p>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 5.2: </span>The feature to use a PHP closure to define substitutions was introduced in Symfony 5.2.</p>
</div>
<p>The separator between words is a dash (<code class="docutils literal notranslate"><span class="pre">-</span></code>) by default, but you can define
another separator as the second argument:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$slug</span> <span class="o">=</span> <span class="nv">$slugger</span><span class="o">-&gt;</span><span class="na">slug</span><span class="p">(</span><span class="s1">&#39;Wôrķšƥáçè ~~sèťtïñğš~~&#39;</span><span class="p">,</span> <span class="s1">&#39;/&#39;</span><span class="p">);</span>
<span class="c1">// $slug = &#39;Workspace/settings&#39;</span>
</pre></div>
</div>
<p>The slugger transliterates the original string into the Latin script before
applying the other transformations. The locale of the original string is
detected automatically, but you can define it explicitly:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// this tells the slugger to transliterate from Korean language</span>
<span class="nv">$slugger</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AsciiSlugger</span><span class="p">(</span><span class="s1">&#39;ko&#39;</span><span class="p">);</span>

<span class="c1">// you can override the locale as the third optional parameter of slug()</span>
<span class="nv">$slug</span> <span class="o">=</span> <span class="nv">$slugger</span><span class="o">-&gt;</span><span class="na">slug</span><span class="p">(</span><span class="s1">&#39;...&#39;</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">,</span> <span class="s1">&#39;fa&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>In a Symfony application, you don’t need to create the slugger yourself. Thanks
to <a class="reference internal" href="../service_container/autowiring.xhtml"><span class="doc">service autowiring</span></a>, you can inject a
slugger by type-hinting a service constructor argument with the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/String/Slugger/SluggerInterface.php" title="Symfony\Component\String\Slugger\SluggerInterface"><span class="pre">SluggerInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/String/Slugger/SluggerInterface.php]</span></span></code>. The locale of
the injected slugger is the same as the request locale:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\String\Slugger\SluggerInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">MyService</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$slugger</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nx">SluggerInterface</span> <span class="nv">$slugger</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">slugger</span> <span class="o">=</span> <span class="nv">$slugger</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">someMethod</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$slug</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">slugger</span><span class="o">-&gt;</span><span class="na">slug</span><span class="p">(</span><span class="s1">&#39;...&#39;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="inflector">
<span id="string-inflector"></span><h2>Inflector</h2>
<div class="versionadded">
<p><span class="versionmodified">New in version 5.1: </span>The inflector feature was introduced in Symfony 5.1.</p>
</div>
<p>In some scenarios such as code generation and code introspection, you need to
convert words from/to singular/plural. For example, to know the property
associated with an <em>adder</em> method, you must convert from plural
(<code class="docutils literal notranslate"><span class="pre">addStories()</span></code> method) to singular (<code class="docutils literal notranslate"><span class="pre">$story</span></code> property).</p>
<p>Most human languages have simple pluralization rules, but at the same time they
define lots of exceptions. For example, the general rule in English is to add an
<code class="docutils literal notranslate"><span class="pre">s</span></code> at the end of the word (<code class="docutils literal notranslate"><span class="pre">book</span></code> -&gt; <code class="docutils literal notranslate"><span class="pre">books</span></code>) but there are lots of
exceptions even for common words (<code class="docutils literal notranslate"><span class="pre">woman</span></code> -&gt; <code class="docutils literal notranslate"><span class="pre">women</span></code>, <code class="docutils literal notranslate"><span class="pre">life</span></code> -&gt; <code class="docutils literal notranslate"><span class="pre">lives</span></code>,
<code class="docutils literal notranslate"><span class="pre">news</span></code> -&gt; <code class="docutils literal notranslate"><span class="pre">news</span></code>, <code class="docutils literal notranslate"><span class="pre">radius</span></code> -&gt; <code class="docutils literal notranslate"><span class="pre">radii</span></code>, etc.)</p>
<p>This component provides an <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/String/Inflector/EnglishInflector.php" title="Symfony\Component\String\Inflector\EnglishInflector"><span class="pre">EnglishInflector</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/String/Inflector/EnglishInflector.php]</span></span></code>
class to convert English words from/to singular/plural with confidence:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\String\Inflector\EnglishInflector</span><span class="p">;</span>

<span class="nv">$inflector</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EnglishInflector</span><span class="p">();</span>

<span class="nv">$result</span> <span class="o">=</span> <span class="nv">$inflector</span><span class="o">-&gt;</span><span class="na">singularize</span><span class="p">(</span><span class="s1">&#39;teeth&#39;</span><span class="p">);</span>   <span class="c1">// [&#39;tooth&#39;]</span>
<span class="nv">$result</span> <span class="o">=</span> <span class="nv">$inflector</span><span class="o">-&gt;</span><span class="na">singularize</span><span class="p">(</span><span class="s1">&#39;radii&#39;</span><span class="p">);</span>   <span class="c1">// [&#39;radius&#39;]</span>
<span class="nv">$result</span> <span class="o">=</span> <span class="nv">$inflector</span><span class="o">-&gt;</span><span class="na">singularize</span><span class="p">(</span><span class="s1">&#39;leaves&#39;</span><span class="p">);</span>  <span class="c1">// [&#39;leaf&#39;, &#39;leave&#39;, &#39;leaff&#39;]</span>

<span class="nv">$result</span> <span class="o">=</span> <span class="nv">$inflector</span><span class="o">-&gt;</span><span class="na">pluralize</span><span class="p">(</span><span class="s1">&#39;bacterium&#39;</span><span class="p">);</span> <span class="c1">// [&#39;bacteria&#39;]</span>
<span class="nv">$result</span> <span class="o">=</span> <span class="nv">$inflector</span><span class="o">-&gt;</span><span class="na">pluralize</span><span class="p">(</span><span class="s1">&#39;news&#39;</span><span class="p">);</span>      <span class="c1">// [&#39;news&#39;]</span>
<span class="nv">$result</span> <span class="o">=</span> <span class="nv">$inflector</span><span class="o">-&gt;</span><span class="na">pluralize</span><span class="p">(</span><span class="s1">&#39;person&#39;</span><span class="p">);</span>    <span class="c1">// [&#39;persons&#39;, &#39;people&#39;]</span>
</pre></div>
</div>
<p>The value returned by both methods is always an array because sometimes it’s not
possible to determine a unique singular/plural form for the given word.</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>