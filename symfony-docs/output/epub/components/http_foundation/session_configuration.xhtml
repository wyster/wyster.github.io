<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Configuring Sessions and Save Handlers</title>
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="configuring-sessions-and-save-handlers">
<span id="index-0"></span><h1>Configuring Sessions and Save Handlers</h1>
<p>This article deals with how to configure session management and fine tune it
to your specific needs. This documentation covers save handlers, which
store and retrieve session data, and configuring session behavior.</p>
<div class="section" id="save-handlers">
<h2>Save Handlers</h2>
<p>The PHP session workflow has 6 possible operations that may occur. The normal
session follows <code class="docutils literal notranslate"><span class="pre">open</span></code>, <code class="docutils literal notranslate"><span class="pre">read</span></code>, <code class="docutils literal notranslate"><span class="pre">write</span></code> and <code class="docutils literal notranslate"><span class="pre">close</span></code>, with the possibility
of <code class="docutils literal notranslate"><span class="pre">destroy</span></code> and <code class="docutils literal notranslate"><span class="pre">gc</span></code> (garbage collection which will expire any old sessions:
<code class="docutils literal notranslate"><span class="pre">gc</span></code> is called randomly according to PHP’s configuration and if called, it is
invoked after the <code class="docutils literal notranslate"><span class="pre">open</span></code> operation). You can read more about this at
<a class="reference external" href="https://www.php.net/session.customhandler">php.net/session.customhandler</a><span class="link-target"> [https://www.php.net/session.customhandler]</span></p>
<div class="section" id="native-php-save-handlers">
<h3>Native PHP Save Handlers</h3>
<p>So-called native handlers, are save handlers which are either compiled into
PHP or provided by PHP extensions, such as PHP-SQLite, PHP-Memcached and so on.</p>
<p>All native save handlers are internal to PHP and as such, have no public facing API.
They must be configured by <code class="docutils literal notranslate"><span class="pre">php.ini</span></code> directives, usually <code class="docutils literal notranslate"><span class="pre">session.save_path</span></code> and
potentially other driver specific directives. Specific details can be found in
the docblock of the <code class="docutils literal notranslate"><span class="pre">setOptions()</span></code> method of each class. For instance, the one
provided by the Memcached extension can be found on <code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/memcached.setoption.php" title="Memcached"><span class="pre">php.net</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/memcached.setoption.php]</span></span></code>.</p>
<p>While native save handlers can be activated by directly using
<code class="docutils literal notranslate"><span class="pre">ini_set('session.save_handler',</span> <span class="pre">$name);</span></code>, Symfony provides a convenient way to
activate these in the same way as it does for custom handlers.</p>
<p>Symfony provides drivers for the following native save handler as an example:</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Storage/Handler/NativeFileSessionHandler.php" title="Symfony\Component\HttpFoundation\Session\Storage\Handler\NativeFileSessionHandler"><span class="pre">NativeFileSessionHandler</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Storage/Handler/NativeFileSessionHandler.php]</span></span></code></p></li>
</ul>
<p>Example usage:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Session\Session</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Session\Storage\Handler\NativeFileSessionHandler</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage</span><span class="p">;</span>

<span class="nv">$sessionStorage</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">NativeSessionStorage</span><span class="p">([],</span> <span class="k">new</span> <span class="nx">NativeFileSessionHandler</span><span class="p">());</span>
<span class="nv">$session</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Session</span><span class="p">(</span><span class="nv">$sessionStorage</span><span class="p">);</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>With the exception of the <code class="docutils literal notranslate"><span class="pre">files</span></code> handler which is built into PHP and
always available, the availability of the other handlers depends on those
PHP extensions being active at runtime.</p>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Native save handlers provide a quick solution to session storage, however,
in complex systems where you need more control, custom save handlers may
provide more freedom and flexibility. Symfony provides several implementations
which you may further customize as required.</p>
</div>
</div>
<div class="section" id="custom-save-handlers">
<h3>Custom Save Handlers</h3>
<p>Custom handlers are those which completely replace PHP’s built-in session save
handlers by providing six callback functions which PHP calls internally at
various points in the session workflow.</p>
<p>The Symfony HttpFoundation component provides some by default and these can
serve as examples if you wish to write your own.</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Storage/Handler/PdoSessionHandler.php" title="Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler"><span class="pre">PdoSessionHandler</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Storage/Handler/PdoSessionHandler.php]</span></span></code></p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Storage/Handler/MemcachedSessionHandler.php" title="Symfony\Component\HttpFoundation\Session\Storage\Handler\MemcachedSessionHandler"><span class="pre">MemcachedSessionHandler</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Storage/Handler/MemcachedSessionHandler.php]</span></span></code></p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Storage/Handler/MigratingSessionHandler.php" title="Symfony\Component\HttpFoundation\Session\Storage\Handler\MigratingSessionHandler"><span class="pre">MigratingSessionHandler</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Storage/Handler/MigratingSessionHandler.php]</span></span></code></p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Storage/Handler/RedisSessionHandler.php" title="Symfony\Component\HttpFoundation\Session\Storage\Handler\RedisSessionHandler"><span class="pre">RedisSessionHandler</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Storage/Handler/RedisSessionHandler.php]</span></span></code></p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Storage/Handler/MongoDbSessionHandler.php" title="Symfony\Component\HttpFoundation\Session\Storage\Handler\MongoDbSessionHandler"><span class="pre">MongoDbSessionHandler</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Storage/Handler/MongoDbSessionHandler.php]</span></span></code></p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Storage/Handler/NullSessionHandler.php" title="Symfony\Component\HttpFoundation\Session\Storage\Handler\NullSessionHandler"><span class="pre">NullSessionHandler</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Storage/Handler/NullSessionHandler.php]</span></span></code></p></li>
</ul>
<p>Example usage:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Session\Session</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage</span><span class="p">;</span>

<span class="nv">$pdo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\PDO</span><span class="p">(</span><span class="o">...</span><span class="p">);</span>
<span class="nv">$sessionStorage</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">NativeSessionStorage</span><span class="p">([],</span> <span class="k">new</span> <span class="nx">PdoSessionHandler</span><span class="p">(</span><span class="nv">$pdo</span><span class="p">));</span>
<span class="nv">$session</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Session</span><span class="p">(</span><span class="nv">$sessionStorage</span><span class="p">);</span>
</pre></div>
</div>
</div>
<div class="section" id="migrating-between-save-handlers">
<h3>Migrating Between Save Handlers</h3>
<p>If your application changes the way sessions are stored, use the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Storage/Handler/MigratingSessionHandler.php" title="Symfony\Component\HttpFoundation\Session\Storage\Handler\MigratingSessionHandler"><span class="pre">MigratingSessionHandler</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Storage/Handler/MigratingSessionHandler.php]</span></span></code>
to migrate between old and new save handlers without losing session data.</p>
<p>This is the recommended migration workflow:</p>
<ol class="arabic">
<li><p>Switch to the migrating handler, with your new handler as the write-only one.
The old handler behaves as usual and sessions get written to the new one:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$sessionStorage</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MigratingSessionHandler</span><span class="p">(</span><span class="nv">$oldSessionStorage</span><span class="p">,</span> <span class="nv">$newSessionStorage</span><span class="p">);</span>
</pre></div>
</div>
</li>
<li><p>After your session gc period, verify that the data in the new handler is correct.</p></li>
<li><p>Update the migrating handler to use the old handler as the write-only one, so
the sessions will now be read from the new handler. This step allows easier rollbacks:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$sessionStorage</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MigratingSessionHandler</span><span class="p">(</span><span class="nv">$newSessionStorage</span><span class="p">,</span> <span class="nv">$oldSessionStorage</span><span class="p">);</span>
</pre></div>
</div>
</li>
<li><p>After verifying that the sessions in your application are working, switch
from the migrating handler to the new handler.</p></li>
</ol>
</div>
</div>
<div class="section" id="configuring-php-sessions">
<h2>Configuring PHP Sessions</h2>
<p>The <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php" title="Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage"><span class="pre">NativeSessionStorage</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php]</span></span></code>
can configure most of the <code class="docutils literal notranslate"><span class="pre">php.ini</span></code> configuration directives which are documented
at <a class="reference external" href="https://www.php.net/session.configuration">php.net/session.configuration</a><span class="link-target"> [https://www.php.net/session.configuration]</span>.</p>
<p>To configure these settings, pass the keys (omitting the initial <code class="docutils literal notranslate"><span class="pre">session.</span></code> part
of the key) as a key-value array to the <code class="docutils literal notranslate"><span class="pre">$options</span></code> constructor argument.
Or set them via the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php" title="Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage::setOptions()"><span class="pre">setOptions()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php]</span></span></code>
method.</p>
<p>For the sake of clarity, some key options are explained in this documentation.</p>
</div>
<div class="section" id="session-cookie-lifetime">
<h2>Session Cookie Lifetime</h2>
<p>For security, session tokens are generally recommended to be sent as session cookies.
You can configure the lifetime of session cookies by specifying the lifetime
(in seconds) using the <code class="docutils literal notranslate"><span class="pre">cookie_lifetime</span></code> key in the constructor’s <code class="docutils literal notranslate"><span class="pre">$options</span></code>
argument in <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php" title="Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage"><span class="pre">NativeSessionStorage</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php]</span></span></code>.</p>
<p>Setting a <code class="docutils literal notranslate"><span class="pre">cookie_lifetime</span></code> to <code class="docutils literal notranslate"><span class="pre">0</span></code> will cause the cookie to live only as
long as the browser remains open. Generally, <code class="docutils literal notranslate"><span class="pre">cookie_lifetime</span></code> would be set to
a relatively large number of days, weeks or months. It is not uncommon to set
cookies for a year or more depending on the application.</p>
<p>Since session cookies are just a client-side token, they are less important in
controlling the fine details of your security settings which ultimately can only
be securely controlled from the server side.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The <code class="docutils literal notranslate"><span class="pre">cookie_lifetime</span></code> setting is the number of seconds the cookie should live
for, it is not a Unix timestamp. The resulting session cookie will be stamped
with an expiry time of <code class="docutils literal notranslate"><span class="pre">time()</span></code> + <code class="docutils literal notranslate"><span class="pre">cookie_lifetime</span></code> where the time is taken
from the server.</p>
</div>
</div>
<div class="section" id="configuring-garbage-collection">
<h2>Configuring Garbage Collection</h2>
<p>When a session opens, PHP will call the <code class="docutils literal notranslate"><span class="pre">gc</span></code> handler randomly according to the
probability set by <code class="docutils literal notranslate"><span class="pre">session.gc_probability</span></code> / <code class="docutils literal notranslate"><span class="pre">session.gc_divisor</span></code>. For
example if these were set to <code class="docutils literal notranslate"><span class="pre">5/100</span></code> respectively, it would mean a probability
of 5%. Similarly, <code class="docutils literal notranslate"><span class="pre">3/4</span></code> would mean a 3 in 4 chance of being called, i.e. 75%.</p>
<p>If the garbage collection handler is invoked, PHP will pass the value stored in
the <code class="docutils literal notranslate"><span class="pre">php.ini</span></code> directive <code class="docutils literal notranslate"><span class="pre">session.gc_maxlifetime</span></code>. The meaning in this context is
that any stored session that was saved more than <code class="docutils literal notranslate"><span class="pre">gc_maxlifetime</span></code> ago should be
deleted. This allows one to expire records based on idle time.</p>
<p>However, some operating systems (e.g. Debian) do their own session handling and set
the <code class="docutils literal notranslate"><span class="pre">session.gc_probability</span></code> variable to <code class="docutils literal notranslate"><span class="pre">0</span></code> to stop PHP doing garbage
collection. That’s why Symfony now overwrites this value to <code class="docutils literal notranslate"><span class="pre">1</span></code>.</p>
<p>If you wish to use the original value set in your <code class="docutils literal notranslate"><span class="pre">php.ini</span></code>, add the following
configuration:</p>
<div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/packages/framework.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">framework</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">session</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">gc_probability</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">null</span>
</pre></div>
</td></tr></table></div>
<p>You can configure these settings by passing <code class="docutils literal notranslate"><span class="pre">gc_probability</span></code>, <code class="docutils literal notranslate"><span class="pre">gc_divisor</span></code>
and <code class="docutils literal notranslate"><span class="pre">gc_maxlifetime</span></code> in an array to the constructor of
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php" title="Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage"><span class="pre">NativeSessionStorage</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php]</span></span></code>
or to the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php" title="Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage::setOptions()"><span class="pre">setOptions()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php]</span></span></code>
method.</p>
</div>
<div class="section" id="session-lifetime">
<h2>Session Lifetime</h2>
<p>When a new session is created, meaning Symfony issues a new session cookie
to the client, the cookie will be stamped with an expiry time. This is
calculated by adding the PHP runtime configuration value in
<code class="docutils literal notranslate"><span class="pre">session.cookie_lifetime</span></code> with the current server time.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>PHP will only issue a cookie once. The client is expected to store that cookie
for the entire lifetime. A new cookie will only be issued when the session is
destroyed, the browser cookie is deleted, or the session ID is regenerated
using the <code class="docutils literal notranslate"><span class="pre">migrate()</span></code> or <code class="docutils literal notranslate"><span class="pre">invalidate()</span></code> methods of the <code class="docutils literal notranslate"><span class="pre">Session</span></code> class.</p>
<p>The initial cookie lifetime can be set by configuring <code class="docutils literal notranslate"><span class="pre">NativeSessionStorage</span></code>
using the <code class="docutils literal notranslate"><span class="pre">setOptions(['cookie_lifetime'</span> <span class="pre">=&gt;</span> <span class="pre">1234])</span></code> method.</p>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>A cookie lifetime of <code class="docutils literal notranslate"><span class="pre">0</span></code> means the cookie expires when the browser is closed.</p>
</div>
</div>
<div class="section" id="session-idle-time-keep-alive">
<h2>Session Idle Time/Keep Alive</h2>
<p>There are often circumstances where you may want to protect, or minimize
unauthorized use of a session when a user steps away from their terminal while
logged in by destroying the session after a certain period of idle time. For
example, it is common for banking applications to log the user out after just
5 to 10 minutes of inactivity. Setting the cookie lifetime here is not
appropriate because that can be manipulated by the client, so we must do the expiry
on the server side. The easiest way is to implement this via garbage collection
which runs reasonably frequently. The <code class="docutils literal notranslate"><span class="pre">cookie_lifetime</span></code> would be set to a
relatively high value, and the garbage collection <code class="docutils literal notranslate"><span class="pre">gc_maxlifetime</span></code> would be set
to destroy sessions at whatever the desired idle period is.</p>
<p>The other option is specifically check if a session has expired after the
session is started. The session can be destroyed as required. This method of
processing can allow the expiry of sessions to be integrated into the user
experience, for example, by displaying a message.</p>
<p>Symfony records some basic metadata about each session to give you complete
freedom in this area.</p>
</div>
<div class="section" id="session-cache-limiting">
<h2>Session Cache Limiting</h2>
<p>To avoid users seeing stale data, it’s common for session-enabled resources to be
sent with headers that disable caching. For this purpose PHP Sessions has the
<code class="docutils literal notranslate"><span class="pre">sessions.cache_limiter</span></code> option, which determines which headers, if any, will be
sent with the response when the session in started.</p>
<p>Upon construction,
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php" title="Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage"><span class="pre">NativeSessionStorage</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php]</span></span></code>
sets this global option to <code class="docutils literal notranslate"><span class="pre">&quot;&quot;</span></code> (send no headers) in case the developer wishes to
use a <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Response.php" title="Symfony\Component\HttpFoundation\Response"><span class="pre">Response</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Response.php]</span></span></code> object to manage
response headers.</p>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>If you rely on PHP Sessions to manage HTTP caching, you <em>must</em> manually set the
<code class="docutils literal notranslate"><span class="pre">cache_limiter</span></code> option in
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php" title="Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage"><span class="pre">NativeSessionStorage</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php]</span></span></code>
to a non-empty value.</p>
<p>For example, you may set it to PHP’s default value during construction:</p>
<p>Example usage:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage</span><span class="p">;</span>

<span class="nv">$options</span><span class="p">[</span><span class="s1">&#39;cache_limiter&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">session_cache_limiter</span><span class="p">();</span>
<span class="nv">$sessionStorage</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">NativeSessionStorage</span><span class="p">(</span><span class="nv">$options</span><span class="p">);</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="session-metadata">
<h2>Session Metadata</h2>
<p>Sessions are decorated with some basic metadata to enable fine control over the
security settings. The session object has a getter for the metadata,
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Session.php" title="Symfony\Component\HttpFoundation\Session\Session::getMetadataBag()"><span class="pre">getMetadataBag()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Session.php]</span></span></code> which
exposes an instance of <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Storage/MetadataBag.php" title="Symfony\Component\HttpFoundation\Session\Storage\MetadataBag"><span class="pre">MetadataBag</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Storage/MetadataBag.php]</span></span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$session</span><span class="o">-&gt;</span><span class="na">getMetadataBag</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getCreated</span><span class="p">();</span>
<span class="nv">$session</span><span class="o">-&gt;</span><span class="na">getMetadataBag</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getLastUsed</span><span class="p">();</span>
</pre></div>
</div>
<p>Both methods return a Unix timestamp (relative to the server).</p>
<p>This metadata can be used to explicitly expire a session on access, e.g.:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$session</span><span class="o">-&gt;</span><span class="na">start</span><span class="p">();</span>
<span class="k">if</span> <span class="p">(</span><span class="nb">time</span><span class="p">()</span> <span class="o">-</span> <span class="nv">$session</span><span class="o">-&gt;</span><span class="na">getMetadataBag</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getLastUsed</span><span class="p">()</span> <span class="o">&gt;</span> <span class="nv">$maxIdleTime</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$session</span><span class="o">-&gt;</span><span class="na">invalidate</span><span class="p">();</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nx">SessionExpired</span><span class="p">();</span> <span class="c1">// redirect to expired session page</span>
<span class="p">}</span>
</pre></div>
</div>
<p>It is also possible to tell what the <code class="docutils literal notranslate"><span class="pre">cookie_lifetime</span></code> was set to for a
particular cookie by reading the <code class="docutils literal notranslate"><span class="pre">getLifetime()</span></code> method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$session</span><span class="o">-&gt;</span><span class="na">getMetadataBag</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getLifetime</span><span class="p">();</span>
</pre></div>
</div>
<p>The expiry time of the cookie can be determined by adding the created
timestamp and the lifetime.</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>