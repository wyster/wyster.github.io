<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>The PropertyAccess Component</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="the-propertyaccess-component">
<span id="index-0"></span><h1>The PropertyAccess Component</h1>
<blockquote>
<div><p>The PropertyAccess component provides function to read and write from/to an
object or array using a simple string notation.</p>
</div></blockquote>
<div class="section" id="installation">
<h2>Installation</h2>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require symfony/property-access
</pre></div>
</td></tr></table></div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If you install this component outside of a Symfony application, you must
require the <code class="docutils literal notranslate"><span class="pre">vendor/autoload.php</span></code> file in your code to enable the class
autoloading mechanism provided by Composer. Read
<a class="reference internal" href="using_components.xhtml"><span class="doc">this article</span></a> for more details.</p>
</div>
</div>
<div class="section" id="usage">
<h2>Usage</h2>
<p>The entry point of this component is the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyAccess/PropertyAccess.php" title="Symfony\Component\PropertyAccess\PropertyAccess::createPropertyAccessor()"><span class="pre">createPropertyAccessor()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyAccess/PropertyAccess.php]</span></span></code>
factory. This factory will create a new instance of the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyAccess/PropertyAccessor.php" title="Symfony\Component\PropertyAccess\PropertyAccessor"><span class="pre">PropertyAccessor</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyAccess/PropertyAccessor.php]</span></span></code> class with the
default configuration:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\PropertyAccess\PropertyAccess</span><span class="p">;</span>

<span class="nv">$propertyAccessor</span> <span class="o">=</span> <span class="nx">PropertyAccess</span><span class="o">::</span><span class="na">createPropertyAccessor</span><span class="p">();</span>
</pre></div>
</div>
</div>
<div class="section" id="reading-from-arrays">
<h2>Reading from Arrays</h2>
<p>You can read an array with the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyAccess/PropertyAccessor.php" title="Symfony\Component\PropertyAccess\PropertyAccessor::getValue()"><span class="pre">getValue()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyAccess/PropertyAccessor.php]</span></span></code> method.
This is done using the index notation that is used in PHP:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="nv">$person</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s1">&#39;first_name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Wouter&#39;</span><span class="p">,</span>
<span class="p">];</span>

<span class="nb">var_dump</span><span class="p">(</span><span class="nv">$propertyAccessor</span><span class="o">-&gt;</span><span class="na">getValue</span><span class="p">(</span><span class="nv">$person</span><span class="p">,</span> <span class="s1">&#39;[first_name]&#39;</span><span class="p">));</span> <span class="c1">// &#39;Wouter&#39;</span>
<span class="nb">var_dump</span><span class="p">(</span><span class="nv">$propertyAccessor</span><span class="o">-&gt;</span><span class="na">getValue</span><span class="p">(</span><span class="nv">$person</span><span class="p">,</span> <span class="s1">&#39;[age]&#39;</span><span class="p">));</span> <span class="c1">// null</span>
</pre></div>
</div>
<p>As you can see, the method will return <code class="docutils literal notranslate"><span class="pre">null</span></code> if the index does not exist.
But you can change this behavior with the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyAccess/PropertyAccessorBuilder.php" title="Symfony\Component\PropertyAccess\PropertyAccessorBuilder::enableExceptionOnInvalidIndex()"><span class="pre">enableExceptionOnInvalidIndex()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyAccess/PropertyAccessorBuilder.php]</span></span></code>
method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="nv">$propertyAccessor</span> <span class="o">=</span> <span class="nx">PropertyAccess</span><span class="o">::</span><span class="na">createPropertyAccessorBuilder</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">enableExceptionOnInvalidIndex</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">getPropertyAccessor</span><span class="p">();</span>

<span class="nv">$person</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s1">&#39;first_name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Wouter&#39;</span><span class="p">,</span>
<span class="p">];</span>

<span class="c1">// instead of returning null, the code now throws an exception of type</span>
<span class="c1">// Symfony\Component\PropertyAccess\Exception\NoSuchIndexException</span>
<span class="nv">$value</span> <span class="o">=</span> <span class="nv">$propertyAccessor</span><span class="o">-&gt;</span><span class="na">getValue</span><span class="p">(</span><span class="nv">$person</span><span class="p">,</span> <span class="s1">&#39;[age]&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>You can also use multi dimensional arrays:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="nv">$persons</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">[</span>
        <span class="s1">&#39;first_name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Wouter&#39;</span><span class="p">,</span>
    <span class="p">],</span>
    <span class="p">[</span>
        <span class="s1">&#39;first_name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Ryan&#39;</span><span class="p">,</span>
    <span class="p">]</span>
<span class="p">];</span>

<span class="nb">var_dump</span><span class="p">(</span><span class="nv">$propertyAccessor</span><span class="o">-&gt;</span><span class="na">getValue</span><span class="p">(</span><span class="nv">$persons</span><span class="p">,</span> <span class="s1">&#39;[0][first_name]&#39;</span><span class="p">));</span> <span class="c1">// &#39;Wouter&#39;</span>
<span class="nb">var_dump</span><span class="p">(</span><span class="nv">$propertyAccessor</span><span class="o">-&gt;</span><span class="na">getValue</span><span class="p">(</span><span class="nv">$persons</span><span class="p">,</span> <span class="s1">&#39;[1][first_name]&#39;</span><span class="p">));</span> <span class="c1">// &#39;Ryan&#39;</span>
</pre></div>
</div>
</div>
<div class="section" id="reading-from-objects">
<h2>Reading from Objects</h2>
<p>The <code class="docutils literal notranslate"><span class="pre">getValue()</span></code> method is a very robust method, and you can see all of its
features when working with objects.</p>
<div class="section" id="accessing-public-properties">
<h3>Accessing public Properties</h3>
<p>To read from properties, use the “dot” notation:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="nv">$person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>
<span class="nv">$person</span><span class="o">-&gt;</span><span class="na">firstName</span> <span class="o">=</span> <span class="s1">&#39;Wouter&#39;</span><span class="p">;</span>

<span class="nb">var_dump</span><span class="p">(</span><span class="nv">$propertyAccessor</span><span class="o">-&gt;</span><span class="na">getValue</span><span class="p">(</span><span class="nv">$person</span><span class="p">,</span> <span class="s1">&#39;firstName&#39;</span><span class="p">));</span> <span class="c1">// &#39;Wouter&#39;</span>

<span class="nv">$child</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>
<span class="nv">$child</span><span class="o">-&gt;</span><span class="na">firstName</span> <span class="o">=</span> <span class="s1">&#39;Bar&#39;</span><span class="p">;</span>
<span class="nv">$person</span><span class="o">-&gt;</span><span class="na">children</span> <span class="o">=</span> <span class="p">[</span><span class="nv">$child</span><span class="p">];</span>

<span class="nb">var_dump</span><span class="p">(</span><span class="nv">$propertyAccessor</span><span class="o">-&gt;</span><span class="na">getValue</span><span class="p">(</span><span class="nv">$person</span><span class="p">,</span> <span class="s1">&#39;children[0].firstName&#39;</span><span class="p">));</span> <span class="c1">// &#39;Bar&#39;</span>
</pre></div>
</div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>Accessing public properties is the last option used by <code class="docutils literal notranslate"><span class="pre">PropertyAccessor</span></code>.
It tries to access the value using the below methods first before using
the property directly. For example, if you have a public property that
has a getter method, it will use the getter.</p>
</div>
</div>
<div class="section" id="using-getters">
<h3>Using Getters</h3>
<p>The <code class="docutils literal notranslate"><span class="pre">getValue()</span></code> method also supports reading using getters. The method will
be created using common naming conventions for getters. It transforms the
property name to camelCase (<code class="docutils literal notranslate"><span class="pre">first_name</span></code> becomes <code class="docutils literal notranslate"><span class="pre">FirstName</span></code>) and prefixes
it with <code class="docutils literal notranslate"><span class="pre">get</span></code>. So the actual method becomes <code class="docutils literal notranslate"><span class="pre">getFirstName()</span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="k">class</span> <span class="nc">Person</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$firstName</span> <span class="o">=</span> <span class="s1">&#39;Wouter&#39;</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">getFirstName</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">firstName</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nv">$person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>

<span class="nb">var_dump</span><span class="p">(</span><span class="nv">$propertyAccessor</span><span class="o">-&gt;</span><span class="na">getValue</span><span class="p">(</span><span class="nv">$person</span><span class="p">,</span> <span class="s1">&#39;first_name&#39;</span><span class="p">));</span> <span class="c1">// &#39;Wouter&#39;</span>
</pre></div>
</div>
</div>
<div class="section" id="using-hassers-issers">
<h3>Using Hassers/Issers</h3>
<p>And it doesn’t even stop there. If there is no getter found, the accessor will
look for an isser or hasser. This method is created using the same way as
getters, this means that you can do something like this:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="k">class</span> <span class="nc">Person</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$author</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
    <span class="k">private</span> <span class="nv">$children</span> <span class="o">=</span> <span class="p">[];</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">isAuthor</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">author</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">hasChildren</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="mi">0</span> <span class="o">!==</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">children</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nv">$person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$propertyAccessor</span><span class="o">-&gt;</span><span class="na">getValue</span><span class="p">(</span><span class="nv">$person</span><span class="p">,</span> <span class="s1">&#39;author&#39;</span><span class="p">))</span> <span class="p">{</span>
    <span class="nb">var_dump</span><span class="p">(</span><span class="s1">&#39;This person is an author&#39;</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="nv">$propertyAccessor</span><span class="o">-&gt;</span><span class="na">getValue</span><span class="p">(</span><span class="nv">$person</span><span class="p">,</span> <span class="s1">&#39;children&#39;</span><span class="p">))</span> <span class="p">{</span>
    <span class="nb">var_dump</span><span class="p">(</span><span class="s1">&#39;This person has children&#39;</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>This will produce: <code class="docutils literal notranslate"><span class="pre">This</span> <span class="pre">person</span> <span class="pre">is</span> <span class="pre">an</span> <span class="pre">author</span></code></p>
</div>
<div class="section" id="accessing-a-non-existing-property-path">
<h3>Accessing a non Existing Property Path</h3>
<p>By default a <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyAccess/Exception/NoSuchPropertyException.php" title="Symfony\Component\PropertyAccess\Exception\NoSuchPropertyException"><span class="pre">NoSuchPropertyException</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyAccess/Exception/NoSuchPropertyException.php]</span></span></code>
is thrown if the property path passed to <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyAccess/PropertyAccessor.php" title="Symfony\Component\PropertyAccess\PropertyAccessor::getValue()"><span class="pre">getValue()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyAccess/PropertyAccessor.php]</span></span></code>
does not exist. You can change this behavior using the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyAccess/PropertyAccessorBuilder.php" title="Symfony\Component\PropertyAccess\PropertyAccessorBuilder::disableExceptionOnInvalidPropertyPath()"><span class="pre">disableExceptionOnInvalidPropertyPath()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyAccess/PropertyAccessorBuilder.php]</span></span></code>
method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="k">class</span> <span class="nc">Person</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nv">$name</span><span class="p">;</span>
<span class="p">}</span>

<span class="nv">$person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>

<span class="nv">$propertyAccessor</span> <span class="o">=</span> <span class="nx">PropertyAccess</span><span class="o">::</span><span class="na">createPropertyAccessorBuilder</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">disableExceptionOnInvalidPropertyPath</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">getPropertyAccessor</span><span class="p">();</span>

<span class="c1">// instead of throwing an exception the following code returns null</span>
<span class="nv">$value</span> <span class="o">=</span> <span class="nv">$propertyAccessor</span><span class="o">-&gt;</span><span class="na">getValue</span><span class="p">(</span><span class="nv">$person</span><span class="p">,</span> <span class="s1">&#39;birthday&#39;</span><span class="p">);</span>
</pre></div>
</div>
</div>
<div class="section" id="magic-get-method">
<span id="components-property-access-magic-get"></span><h3>Magic <code class="docutils literal notranslate"><span class="pre">__get()</span></code> Method</h3>
<p>The <code class="docutils literal notranslate"><span class="pre">getValue()</span></code> method can also use the magic <code class="docutils literal notranslate"><span class="pre">__get()</span></code> method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="k">class</span> <span class="nc">Person</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$children</span> <span class="o">=</span> <span class="p">[</span>
        <span class="s1">&#39;Wouter&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="o">...</span><span class="p">],</span>
    <span class="p">];</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__get</span><span class="p">(</span><span class="nv">$id</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">children</span><span class="p">[</span><span class="nv">$id</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nv">$person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>

<span class="nb">var_dump</span><span class="p">(</span><span class="nv">$propertyAccessor</span><span class="o">-&gt;</span><span class="na">getValue</span><span class="p">(</span><span class="nv">$person</span><span class="p">,</span> <span class="s1">&#39;Wouter&#39;</span><span class="p">));</span> <span class="c1">// [...]</span>
</pre></div>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 5.2: </span>The magic <code class="docutils literal notranslate"><span class="pre">__get()</span></code> method can be disabled since in Symfony 5.2.
see <a class="reference internal" href="#enable-other-features">Enable other Features</a>.</p>
</div>
</div>
<div class="section" id="magic-call-method">
<span id="components-property-access-magic-call"></span><h3>Magic <code class="docutils literal notranslate"><span class="pre">__call()</span></code> Method</h3>
<p>At last, <code class="docutils literal notranslate"><span class="pre">getValue()</span></code> can use the magic <code class="docutils literal notranslate"><span class="pre">__call()</span></code> method, but you need to
enable this feature by using <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyAccess/PropertyAccessorBuilder.php" title="Symfony\Component\PropertyAccess\PropertyAccessorBuilder"><span class="pre">PropertyAccessorBuilder</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyAccess/PropertyAccessorBuilder.php]</span></span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="k">class</span> <span class="nc">Person</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$children</span> <span class="o">=</span> <span class="p">[</span>
        <span class="s1">&#39;wouter&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="o">...</span><span class="p">],</span>
    <span class="p">];</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__call</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="nv">$args</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$property</span> <span class="o">=</span> <span class="nb">lcfirst</span><span class="p">(</span><span class="nb">substr</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span>
        <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;get&#39;</span> <span class="o">===</span> <span class="nb">substr</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nb">isset</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">children</span><span class="p">[</span><span class="nv">$property</span><span class="p">])</span>
                <span class="o">?</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">children</span><span class="p">[</span><span class="nv">$property</span><span class="p">]</span>
                <span class="o">:</span> <span class="k">null</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">elseif</span> <span class="p">(</span><span class="s1">&#39;set&#39;</span> <span class="o">===</span> <span class="nb">substr</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$value</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">==</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$args</span><span class="p">)</span> <span class="o">?</span> <span class="nv">$args</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">:</span> <span class="k">null</span><span class="p">;</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">children</span><span class="p">[</span><span class="nv">$property</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nv">$person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>

<span class="c1">// enables PHP __call() magic method</span>
<span class="nv">$propertyAccessor</span> <span class="o">=</span> <span class="nx">PropertyAccess</span><span class="o">::</span><span class="na">createPropertyAccessorBuilder</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">enableMagicCall</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">getPropertyAccessor</span><span class="p">();</span>

<span class="nb">var_dump</span><span class="p">(</span><span class="nv">$propertyAccessor</span><span class="o">-&gt;</span><span class="na">getValue</span><span class="p">(</span><span class="nv">$person</span><span class="p">,</span> <span class="s1">&#39;wouter&#39;</span><span class="p">));</span> <span class="c1">// [...]</span>
</pre></div>
</div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>The <code class="docutils literal notranslate"><span class="pre">__call()</span></code> feature is disabled by default, you can enable it by calling
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyAccess/PropertyAccessorBuilder.php" title="Symfony\Component\PropertyAccess\PropertyAccessorBuilder::enableMagicCall()"><span class="pre">enableMagicCall()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyAccess/PropertyAccessorBuilder.php]</span></span></code>
see <a class="reference internal" href="#enable-other-features">Enable other Features</a>.</p>
</div>
</div>
</div>
<div class="section" id="writing-to-arrays">
<h2>Writing to Arrays</h2>
<p>The <code class="docutils literal notranslate"><span class="pre">PropertyAccessor</span></code> class can do more than just read an array, it can
also write to an array. This can be achieved using the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyAccess/PropertyAccessor.php" title="Symfony\Component\PropertyAccess\PropertyAccessor::setValue()"><span class="pre">setValue()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyAccess/PropertyAccessor.php]</span></span></code> method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="nv">$person</span> <span class="o">=</span> <span class="p">[];</span>

<span class="nv">$propertyAccessor</span><span class="o">-&gt;</span><span class="na">setValue</span><span class="p">(</span><span class="nv">$person</span><span class="p">,</span> <span class="s1">&#39;[first_name]&#39;</span><span class="p">,</span> <span class="s1">&#39;Wouter&#39;</span><span class="p">);</span>

<span class="nb">var_dump</span><span class="p">(</span><span class="nv">$propertyAccessor</span><span class="o">-&gt;</span><span class="na">getValue</span><span class="p">(</span><span class="nv">$person</span><span class="p">,</span> <span class="s1">&#39;[first_name]&#39;</span><span class="p">));</span> <span class="c1">// &#39;Wouter&#39;</span>
<span class="c1">// or</span>
<span class="c1">// var_dump($person[&#39;first_name&#39;]); // &#39;Wouter&#39;</span>
</pre></div>
</div>
</div>
<div class="section" id="writing-to-objects">
<span id="components-property-access-writing-to-objects"></span><h2>Writing to Objects</h2>
<p>The <code class="docutils literal notranslate"><span class="pre">setValue()</span></code> method has the same features as the <code class="docutils literal notranslate"><span class="pre">getValue()</span></code> method. You
can use setters, the magic <code class="docutils literal notranslate"><span class="pre">__set()</span></code> method or properties to set values:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="k">class</span> <span class="nc">Person</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nv">$firstName</span><span class="p">;</span>
    <span class="k">private</span> <span class="nv">$lastName</span><span class="p">;</span>
    <span class="k">private</span> <span class="nv">$children</span> <span class="o">=</span> <span class="p">[];</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">setLastName</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">lastName</span> <span class="o">=</span> <span class="nv">$name</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">getLastName</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">lastName</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">getChildren</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">children</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__set</span><span class="p">(</span><span class="nv">$property</span><span class="p">,</span> <span class="nv">$value</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="nv">$property</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nv">$person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>

<span class="nv">$propertyAccessor</span><span class="o">-&gt;</span><span class="na">setValue</span><span class="p">(</span><span class="nv">$person</span><span class="p">,</span> <span class="s1">&#39;firstName&#39;</span><span class="p">,</span> <span class="s1">&#39;Wouter&#39;</span><span class="p">);</span>
<span class="nv">$propertyAccessor</span><span class="o">-&gt;</span><span class="na">setValue</span><span class="p">(</span><span class="nv">$person</span><span class="p">,</span> <span class="s1">&#39;lastName&#39;</span><span class="p">,</span> <span class="s1">&#39;de Jong&#39;</span><span class="p">);</span> <span class="c1">// setLastName is called</span>
<span class="nv">$propertyAccessor</span><span class="o">-&gt;</span><span class="na">setValue</span><span class="p">(</span><span class="nv">$person</span><span class="p">,</span> <span class="s1">&#39;children&#39;</span><span class="p">,</span> <span class="p">[</span><span class="k">new</span> <span class="nx">Person</span><span class="p">()]);</span> <span class="c1">// __set is called</span>

<span class="nb">var_dump</span><span class="p">(</span><span class="nv">$person</span><span class="o">-&gt;</span><span class="na">firstName</span><span class="p">);</span> <span class="c1">// &#39;Wouter&#39;</span>
<span class="nb">var_dump</span><span class="p">(</span><span class="nv">$person</span><span class="o">-&gt;</span><span class="na">getLastName</span><span class="p">());</span> <span class="c1">// &#39;de Jong&#39;</span>
<span class="nb">var_dump</span><span class="p">(</span><span class="nv">$person</span><span class="o">-&gt;</span><span class="na">getChildren</span><span class="p">());</span> <span class="c1">// [Person()];</span>
</pre></div>
</div>
<p>You can also use <code class="docutils literal notranslate"><span class="pre">__call()</span></code> to set values but you need to enable the feature,
see <a class="reference internal" href="#enable-other-features">Enable other Features</a>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="k">class</span> <span class="nc">Person</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$children</span> <span class="o">=</span> <span class="p">[];</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__call</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="nv">$args</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$property</span> <span class="o">=</span> <span class="nb">lcfirst</span><span class="p">(</span><span class="nb">substr</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span>
        <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;get&#39;</span> <span class="o">===</span> <span class="nb">substr</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nb">isset</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">children</span><span class="p">[</span><span class="nv">$property</span><span class="p">])</span>
                <span class="o">?</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">children</span><span class="p">[</span><span class="nv">$property</span><span class="p">]</span>
                <span class="o">:</span> <span class="k">null</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">elseif</span> <span class="p">(</span><span class="s1">&#39;set&#39;</span> <span class="o">===</span> <span class="nb">substr</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$value</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">==</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$args</span><span class="p">)</span> <span class="o">?</span> <span class="nv">$args</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">:</span> <span class="k">null</span><span class="p">;</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">children</span><span class="p">[</span><span class="nv">$property</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

<span class="p">}</span>

<span class="nv">$person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>

<span class="c1">// Enable magic __call</span>
<span class="nv">$propertyAccessor</span> <span class="o">=</span> <span class="nx">PropertyAccess</span><span class="o">::</span><span class="na">createPropertyAccessorBuilder</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">enableMagicCall</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">getPropertyAccessor</span><span class="p">();</span>

<span class="nv">$propertyAccessor</span><span class="o">-&gt;</span><span class="na">setValue</span><span class="p">(</span><span class="nv">$person</span><span class="p">,</span> <span class="s1">&#39;wouter&#39;</span><span class="p">,</span> <span class="p">[</span><span class="o">...</span><span class="p">]);</span>

<span class="nb">var_dump</span><span class="p">(</span><span class="nv">$person</span><span class="o">-&gt;</span><span class="na">getWouter</span><span class="p">());</span> <span class="c1">// [...]</span>
</pre></div>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 5.2: </span>The magic <code class="docutils literal notranslate"><span class="pre">__set()</span></code> method can be disabled since in Symfony 5.2.
see <a class="reference internal" href="#enable-other-features">Enable other Features</a>.</p>
</div>
<div class="section" id="writing-to-array-properties">
<h3>Writing to Array Properties</h3>
<p>The <code class="docutils literal notranslate"><span class="pre">PropertyAccessor</span></code> class allows to update the content of arrays stored in
properties through <em>adder</em> and <em>remover</em> methods:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="k">class</span> <span class="nc">Person</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @var string[]</span>
<span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$children</span> <span class="o">=</span> <span class="p">[];</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">getChildren</span><span class="p">()</span><span class="o">:</span> <span class="k">array</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">children</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">addChild</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$name</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">children</span><span class="p">[</span><span class="nv">$name</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$name</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">removeChild</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$name</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="nb">unset</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">children</span><span class="p">[</span><span class="nv">$name</span><span class="p">]);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nv">$person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>
<span class="nv">$propertyAccessor</span><span class="o">-&gt;</span><span class="na">setValue</span><span class="p">(</span><span class="nv">$person</span><span class="p">,</span> <span class="s1">&#39;children&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;kevin&#39;</span><span class="p">,</span> <span class="s1">&#39;wouter&#39;</span><span class="p">]);</span>

<span class="nb">var_dump</span><span class="p">(</span><span class="nv">$person</span><span class="o">-&gt;</span><span class="na">getChildren</span><span class="p">());</span> <span class="c1">// [&#39;kevin&#39;, &#39;wouter&#39;]</span>
</pre></div>
</div>
<p>The PropertyAccess component checks for methods called <code class="docutils literal notranslate"><span class="pre">add&lt;SingularOfThePropertyName&gt;()</span></code>
and <code class="docutils literal notranslate"><span class="pre">remove&lt;SingularOfThePropertyName&gt;()</span></code>. Both methods must be defined.
For instance, in the previous example, the component looks for the <code class="docutils literal notranslate"><span class="pre">addChild()</span></code>
and <code class="docutils literal notranslate"><span class="pre">removeChild()</span></code> methods to access to the <code class="docutils literal notranslate"><span class="pre">children</span></code> property.
<a class="reference external" href="https://github.com/symfony/inflector">The Inflector component</a><span class="link-target"> [https://github.com/symfony/inflector]</span> is used to find the singular of a property name.</p>
<p>If available, <em>adder</em> and <em>remover</em> methods have priority over a <em>setter</em> method.</p>
</div>
<div class="section" id="using-non-standard-adder-remover-methods">
<h3>Using non-standard adder/remover methods</h3>
<p>Sometimes, adder and remover methods don’t use the standard <code class="docutils literal notranslate"><span class="pre">add</span></code> or <code class="docutils literal notranslate"><span class="pre">remove</span></code> prefix, like in this example:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="k">class</span> <span class="nc">PeopleList</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">joinPeople</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$people</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">peoples</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$people</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">leavePeople</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$people</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">peoples</span> <span class="k">as</span> <span class="nv">$id</span> <span class="o">=&gt;</span> <span class="nv">$item</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nv">$people</span> <span class="o">===</span> <span class="nv">$item</span><span class="p">)</span> <span class="p">{</span>
                <span class="nb">unset</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">peoples</span><span class="p">[</span><span class="nv">$id</span><span class="p">]);</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">use</span> <span class="nx">Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\PropertyAccess\PropertyAccessor</span><span class="p">;</span>

<span class="nv">$list</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PeopleList</span><span class="p">();</span>
<span class="nv">$reflectionExtractor</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ReflectionExtractor</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;join&#39;</span><span class="p">,</span> <span class="s1">&#39;leave&#39;</span><span class="p">]);</span>
<span class="nv">$propertyAccessor</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PropertyAccessor</span><span class="p">(</span><span class="k">false</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="nv">$reflectionExtractor</span><span class="p">,</span> <span class="nv">$reflectionExtractor</span><span class="p">);</span>
<span class="nv">$propertyAccessor</span><span class="o">-&gt;</span><span class="na">setValue</span><span class="p">(</span><span class="nv">$person</span><span class="p">,</span> <span class="s1">&#39;peoples&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;kevin&#39;</span><span class="p">,</span> <span class="s1">&#39;wouter&#39;</span><span class="p">]);</span>

<span class="nb">var_dump</span><span class="p">(</span><span class="nv">$person</span><span class="o">-&gt;</span><span class="na">getPeoples</span><span class="p">());</span> <span class="c1">// [&#39;kevin&#39;, &#39;wouter&#39;]</span>
</pre></div>
</div>
<p>Instead of calling <code class="docutils literal notranslate"><span class="pre">add&lt;SingularOfThePropertyName&gt;()</span></code> and <code class="docutils literal notranslate"><span class="pre">remove&lt;SingularOfThePropertyName&gt;()</span></code>, the PropertyAccess
component will call <code class="docutils literal notranslate"><span class="pre">join&lt;SingularOfThePropertyName&gt;()</span></code> and <code class="docutils literal notranslate"><span class="pre">leave&lt;SingularOfThePropertyName&gt;()</span></code> methods.</p>
</div>
</div>
<div class="section" id="checking-property-paths">
<h2>Checking Property Paths</h2>
<p>When you want to check whether
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyAccess/PropertyAccessor.php" title="Symfony\Component\PropertyAccess\PropertyAccessor::getValue()"><span class="pre">getValue()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyAccess/PropertyAccessor.php]</span></span></code> can
safely be called without actually calling that method, you can use
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyAccess/PropertyAccessor.php" title="Symfony\Component\PropertyAccess\PropertyAccessor::isReadable()"><span class="pre">isReadable()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyAccess/PropertyAccessor.php]</span></span></code> instead:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$propertyAccessor</span><span class="o">-&gt;</span><span class="na">isReadable</span><span class="p">(</span><span class="nv">$person</span><span class="p">,</span> <span class="s1">&#39;firstName&#39;</span><span class="p">))</span> <span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The same is possible for <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyAccess/PropertyAccessor.php" title="Symfony\Component\PropertyAccess\PropertyAccessor::setValue()"><span class="pre">setValue()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyAccess/PropertyAccessor.php]</span></span></code>:
Call the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyAccess/PropertyAccessor.php" title="Symfony\Component\PropertyAccess\PropertyAccessor::isWritable()"><span class="pre">isWritable()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyAccess/PropertyAccessor.php]</span></span></code>
method to find out whether a property path can be updated:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$propertyAccessor</span><span class="o">-&gt;</span><span class="na">isWritable</span><span class="p">(</span><span class="nv">$person</span><span class="p">,</span> <span class="s1">&#39;firstName&#39;</span><span class="p">))</span> <span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="mixing-objects-and-arrays">
<h2>Mixing Objects and Arrays</h2>
<p>You can also mix objects and arrays:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="k">class</span> <span class="nc">Person</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nv">$firstName</span><span class="p">;</span>
    <span class="k">private</span> <span class="nv">$children</span> <span class="o">=</span> <span class="p">[];</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">setChildren</span><span class="p">(</span><span class="nv">$children</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">children</span> <span class="o">=</span> <span class="nv">$children</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">getChildren</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">children</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nv">$person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>

<span class="nv">$propertyAccessor</span><span class="o">-&gt;</span><span class="na">setValue</span><span class="p">(</span><span class="nv">$person</span><span class="p">,</span> <span class="s1">&#39;children[0]&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">);</span>
<span class="c1">// equal to $person-&gt;getChildren()[0] = new Person()</span>

<span class="nv">$propertyAccessor</span><span class="o">-&gt;</span><span class="na">setValue</span><span class="p">(</span><span class="nv">$person</span><span class="p">,</span> <span class="s1">&#39;children[0].firstName&#39;</span><span class="p">,</span> <span class="s1">&#39;Wouter&#39;</span><span class="p">);</span>
<span class="c1">// equal to $person-&gt;getChildren()[0]-&gt;firstName = &#39;Wouter&#39;</span>

<span class="nb">var_dump</span><span class="p">(</span><span class="s1">&#39;Hello &#39;</span><span class="o">.</span><span class="nv">$propertyAccessor</span><span class="o">-&gt;</span><span class="na">getValue</span><span class="p">(</span><span class="nv">$person</span><span class="p">,</span> <span class="s1">&#39;children[0].firstName&#39;</span><span class="p">));</span> <span class="c1">// &#39;Wouter&#39;</span>
<span class="c1">// equal to $person-&gt;getChildren()[0]-&gt;firstName</span>
</pre></div>
</div>
<div class="section" id="enable-other-features">
<h3>Enable other Features</h3>
<p>The <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyAccess/PropertyAccessor.php" title="Symfony\Component\PropertyAccess\PropertyAccessor"><span class="pre">PropertyAccessor</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyAccess/PropertyAccessor.php]</span></span></code> can be
configured to enable extra features. To do that you could use the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyAccess/PropertyAccessorBuilder.php" title="Symfony\Component\PropertyAccess\PropertyAccessorBuilder"><span class="pre">PropertyAccessorBuilder</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyAccess/PropertyAccessorBuilder.php]</span></span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="nv">$propertyAccessorBuilder</span> <span class="o">=</span> <span class="nx">PropertyAccess</span><span class="o">::</span><span class="na">createPropertyAccessorBuilder</span><span class="p">();</span>

<span class="nv">$propertyAccessorBuilder</span><span class="o">-&gt;</span><span class="na">enableMagicCall</span><span class="p">();</span> <span class="c1">// enables magic __call</span>
<span class="nv">$propertyAccessorBuilder</span><span class="o">-&gt;</span><span class="na">enableMagicGet</span><span class="p">();</span> <span class="c1">// enables magic __get</span>
<span class="nv">$propertyAccessorBuilder</span><span class="o">-&gt;</span><span class="na">enableMagicSet</span><span class="p">();</span> <span class="c1">// enables magic __set</span>
<span class="nv">$propertyAccessorBuilder</span><span class="o">-&gt;</span><span class="na">enableMagicMethods</span><span class="p">();</span> <span class="c1">// enables magic __get, __set and __call</span>

<span class="nv">$propertyAccessorBuilder</span><span class="o">-&gt;</span><span class="na">disableMagicCall</span><span class="p">();</span> <span class="c1">// disables magic __call</span>
<span class="nv">$propertyAccessorBuilder</span><span class="o">-&gt;</span><span class="na">disableMagicGet</span><span class="p">();</span> <span class="c1">// disables magic __get</span>
<span class="nv">$propertyAccessorBuilder</span><span class="o">-&gt;</span><span class="na">disableMagicSet</span><span class="p">();</span> <span class="c1">// disables magic __set</span>
<span class="nv">$propertyAccessorBuilder</span><span class="o">-&gt;</span><span class="na">disableMagicMethods</span><span class="p">();</span> <span class="c1">// disables magic __get, __set and __call</span>

<span class="c1">// checks if magic __call, __get or __set handling are enabled</span>
<span class="nv">$propertyAccessorBuilder</span><span class="o">-&gt;</span><span class="na">isMagicCallEnabled</span><span class="p">();</span> <span class="c1">// true or false</span>
<span class="nv">$propertyAccessorBuilder</span><span class="o">-&gt;</span><span class="na">isMagicGetEnabled</span><span class="p">();</span> <span class="c1">// true or false</span>
<span class="nv">$propertyAccessorBuilder</span><span class="o">-&gt;</span><span class="na">isMagicSetEnabled</span><span class="p">();</span> <span class="c1">// true or false</span>

<span class="c1">// At the end get the configured property accessor</span>
<span class="nv">$propertyAccessor</span> <span class="o">=</span> <span class="nv">$propertyAccessorBuilder</span><span class="o">-&gt;</span><span class="na">getPropertyAccessor</span><span class="p">();</span>

<span class="c1">// Or all in one</span>
<span class="nv">$propertyAccessor</span> <span class="o">=</span> <span class="nx">PropertyAccess</span><span class="o">::</span><span class="na">createPropertyAccessorBuilder</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">enableMagicCall</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">getPropertyAccessor</span><span class="p">();</span>
</pre></div>
</div>
<p>Or you can pass parameters directly to the constructor (not the recommended way):</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// enable handling of magic __call, __set but not __get:</span>
<span class="nv">$propertyAccessor</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PropertyAccessor</span><span class="p">(</span><span class="nx">PropertyAccessor</span><span class="o">::</span><span class="na">MAGIC_CALL</span> <span class="o">|</span> <span class="nx">PropertyAccessor</span><span class="o">::</span><span class="na">MAGIC_SET</span><span class="p">);</span>
</pre></div>
</div>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>