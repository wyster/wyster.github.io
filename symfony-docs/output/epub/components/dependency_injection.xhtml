<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>The DependencyInjection Component</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="the-dependencyinjection-component">
<span id="index-0"></span><h1>The DependencyInjection Component</h1>
<blockquote>
<div><p>The DependencyInjection component implements a <a class="reference external" href="https://www.php-fig.org/psr/psr-11/">PSR-11</a><span class="link-target"> [https://www.php-fig.org/psr/psr-11/]</span> compatible service
container that allows you to standardize and centralize the way objects are
constructed in your application.</p>
</div></blockquote>
<p>For an introduction to Dependency Injection and service containers see
<a class="reference internal" href="../service_container.xhtml"><span class="doc">Service Container</span></a>.</p>
<div class="section" id="installation">
<h2>Installation</h2>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require symfony/dependency-injection
</pre></div>
</td></tr></table></div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If you install this component outside of a Symfony application, you must
require the <code class="docutils literal notranslate"><span class="pre">vendor/autoload.php</span></code> file in your code to enable the class
autoloading mechanism provided by Composer. Read
<a class="reference internal" href="using_components.xhtml"><span class="doc">this article</span></a> for more details.</p>
</div>
</div>
<div class="section" id="basic-usage">
<h2>Basic Usage</h2>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>This article explains how to use the DependencyInjection features as an
independent component in any PHP application. Read the <a class="reference internal" href="../service_container.xhtml"><span class="doc">Service Container</span></a>
article to learn about how to use it in Symfony applications.</p>
</div>
<p>You might have a class like the following <code class="docutils literal notranslate"><span class="pre">Mailer</span></code> that
you want to make available as a service:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">Mailer</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$transport</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">transport</span> <span class="o">=</span> <span class="s1">&#39;sendmail&#39;</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>You can register this in the container as a service:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\ContainerBuilder</span><span class="p">;</span>

<span class="nv">$containerBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ContainerBuilder</span><span class="p">();</span>
<span class="nv">$containerBuilder</span><span class="o">-&gt;</span><span class="na">register</span><span class="p">(</span><span class="s1">&#39;mailer&#39;</span><span class="p">,</span> <span class="s1">&#39;Mailer&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>An improvement to the class to make it more flexible would be to allow
the container to set the <code class="docutils literal notranslate"><span class="pre">transport</span></code> used. If you change the class
so this is passed into the constructor:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">Mailer</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$transport</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$transport</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">transport</span> <span class="o">=</span> <span class="nv">$transport</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Then you can set the choice of transport in the container:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\ContainerBuilder</span><span class="p">;</span>

<span class="nv">$containerBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ContainerBuilder</span><span class="p">();</span>
<span class="nv">$containerBuilder</span>
    <span class="o">-&gt;</span><span class="na">register</span><span class="p">(</span><span class="s1">&#39;mailer&#39;</span><span class="p">,</span> <span class="s1">&#39;Mailer&#39;</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="na">addArgument</span><span class="p">(</span><span class="s1">&#39;sendmail&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>This class is now much more flexible as you have separated the choice of
transport out of the implementation and into the container.</p>
<p>Which mail transport you have chosen may be something other services need
to know about. You can avoid having to change it in multiple places by making
it a parameter in the container and then referring to this parameter for
the <code class="docutils literal notranslate"><span class="pre">Mailer</span></code> serviceâ€™s constructor argument:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\ContainerBuilder</span><span class="p">;</span>

<span class="nv">$containerBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ContainerBuilder</span><span class="p">();</span>
<span class="nv">$containerBuilder</span><span class="o">-&gt;</span><span class="na">setParameter</span><span class="p">(</span><span class="s1">&#39;mailer.transport&#39;</span><span class="p">,</span> <span class="s1">&#39;sendmail&#39;</span><span class="p">);</span>
<span class="nv">$containerBuilder</span>
    <span class="o">-&gt;</span><span class="na">register</span><span class="p">(</span><span class="s1">&#39;mailer&#39;</span><span class="p">,</span> <span class="s1">&#39;Mailer&#39;</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="na">addArgument</span><span class="p">(</span><span class="s1">&#39;%mailer.transport%&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>Now that the <code class="docutils literal notranslate"><span class="pre">mailer</span></code> service is in the container you can inject it as
a dependency of other classes. If you have a <code class="docutils literal notranslate"><span class="pre">NewsletterManager</span></code> class
like this:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">NewsletterManager</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$mailer</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nx">\Mailer</span> <span class="nv">$mailer</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mailer</span> <span class="o">=</span> <span class="nv">$mailer</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>When defining the <code class="docutils literal notranslate"><span class="pre">newsletter_manager</span></code> service, the <code class="docutils literal notranslate"><span class="pre">mailer</span></code> service does
not exist yet. Use the <code class="docutils literal notranslate"><span class="pre">Reference</span></code> class to tell the container to inject the
<code class="docutils literal notranslate"><span class="pre">mailer</span></code> service when it initializes the newsletter manager:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\ContainerBuilder</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\Reference</span><span class="p">;</span>

<span class="nv">$containerBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ContainerBuilder</span><span class="p">();</span>

<span class="nv">$containerBuilder</span><span class="o">-&gt;</span><span class="na">setParameter</span><span class="p">(</span><span class="s1">&#39;mailer.transport&#39;</span><span class="p">,</span> <span class="s1">&#39;sendmail&#39;</span><span class="p">);</span>
<span class="nv">$containerBuilder</span>
    <span class="o">-&gt;</span><span class="na">register</span><span class="p">(</span><span class="s1">&#39;mailer&#39;</span><span class="p">,</span> <span class="s1">&#39;Mailer&#39;</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="na">addArgument</span><span class="p">(</span><span class="s1">&#39;%mailer.transport%&#39;</span><span class="p">);</span>

<span class="nv">$containerBuilder</span>
    <span class="o">-&gt;</span><span class="na">register</span><span class="p">(</span><span class="s1">&#39;newsletter_manager&#39;</span><span class="p">,</span> <span class="s1">&#39;NewsletterManager&#39;</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="na">addArgument</span><span class="p">(</span><span class="k">new</span> <span class="nx">Reference</span><span class="p">(</span><span class="s1">&#39;mailer&#39;</span><span class="p">));</span>
</pre></div>
</div>
<p>If the <code class="docutils literal notranslate"><span class="pre">NewsletterManager</span></code> did not require the <code class="docutils literal notranslate"><span class="pre">Mailer</span></code> and injecting
it was only optional then you could use setter injection instead:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">NewsletterManager</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$mailer</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">setMailer</span><span class="p">(</span><span class="nx">\Mailer</span> <span class="nv">$mailer</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mailer</span> <span class="o">=</span> <span class="nv">$mailer</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>You can now choose not to inject a <code class="docutils literal notranslate"><span class="pre">Mailer</span></code> into the <code class="docutils literal notranslate"><span class="pre">NewsletterManager</span></code>.
If you do want to though then the container can call the setter method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\ContainerBuilder</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\Reference</span><span class="p">;</span>

<span class="nv">$containerBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ContainerBuilder</span><span class="p">();</span>

<span class="nv">$containerBuilder</span><span class="o">-&gt;</span><span class="na">setParameter</span><span class="p">(</span><span class="s1">&#39;mailer.transport&#39;</span><span class="p">,</span> <span class="s1">&#39;sendmail&#39;</span><span class="p">);</span>
<span class="nv">$containerBuilder</span>
    <span class="o">-&gt;</span><span class="na">register</span><span class="p">(</span><span class="s1">&#39;mailer&#39;</span><span class="p">,</span> <span class="s1">&#39;Mailer&#39;</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="na">addArgument</span><span class="p">(</span><span class="s1">&#39;%mailer.transport%&#39;</span><span class="p">);</span>

<span class="nv">$containerBuilder</span>
    <span class="o">-&gt;</span><span class="na">register</span><span class="p">(</span><span class="s1">&#39;newsletter_manager&#39;</span><span class="p">,</span> <span class="s1">&#39;NewsletterManager&#39;</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="na">addMethodCall</span><span class="p">(</span><span class="s1">&#39;setMailer&#39;</span><span class="p">,</span> <span class="p">[</span><span class="k">new</span> <span class="nx">Reference</span><span class="p">(</span><span class="s1">&#39;mailer&#39;</span><span class="p">)]);</span>
</pre></div>
</div>
<p>You could then get your <code class="docutils literal notranslate"><span class="pre">newsletter_manager</span></code> service from the container
like this:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\ContainerBuilder</span><span class="p">;</span>

<span class="nv">$containerBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ContainerBuilder</span><span class="p">();</span>

<span class="c1">// ...</span>

<span class="nv">$newsletterManager</span> <span class="o">=</span> <span class="nv">$containerBuilder</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;newsletter_manager&#39;</span><span class="p">);</span>
</pre></div>
</div>
</div>
<div class="section" id="avoiding-your-code-becoming-dependent-on-the-container">
<h2>Avoiding your Code Becoming Dependent on the Container</h2>
<p>Whilst you can retrieve services from the container directly it is best
to minimize this. For example, in the <code class="docutils literal notranslate"><span class="pre">NewsletterManager</span></code> you injected
the <code class="docutils literal notranslate"><span class="pre">mailer</span></code> service in rather than asking for it from the container.
You could have injected the container in and retrieved the <code class="docutils literal notranslate"><span class="pre">mailer</span></code> service
from it but it would then be tied to this particular container making it
difficult to reuse the class elsewhere.</p>
<p>You will need to get a service from the container at some point but this
should be as few times as possible at the entry point to your application.</p>
</div>
<div class="section" id="setting-up-the-container-with-configuration-files">
<span id="components-dependency-injection-loading-config"></span><h2>Setting up the Container with Configuration Files</h2>
<p>As well as setting up the services using PHP as above you can also use
configuration files. This allows you to use XML or YAML to write the definitions
for the services rather than using PHP to define the services as in the
above examples. In anything but the smallest applications it makes sense
to organize the service definitions by moving them into one or more configuration
files. To do this you also need to install
<a class="reference internal" href="config.xhtml"><span class="doc">the Config component</span></a>.</p>
<p>Loading an XML config file:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Config\FileLocator</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\ContainerBuilder</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\XmlFileLoader</span><span class="p">;</span>

<span class="nv">$containerBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ContainerBuilder</span><span class="p">();</span>
<span class="nv">$loader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XmlFileLoader</span><span class="p">(</span><span class="nv">$containerBuilder</span><span class="p">,</span> <span class="k">new</span> <span class="nx">FileLocator</span><span class="p">(</span><span class="no">__DIR__</span><span class="p">));</span>
<span class="nv">$loader</span><span class="o">-&gt;</span><span class="na">load</span><span class="p">(</span><span class="s1">&#39;services.xml&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>Loading a YAML config file:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Config\FileLocator</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\ContainerBuilder</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\YamlFileLoader</span><span class="p">;</span>

<span class="nv">$containerBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ContainerBuilder</span><span class="p">();</span>
<span class="nv">$loader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">YamlFileLoader</span><span class="p">(</span><span class="nv">$containerBuilder</span><span class="p">,</span> <span class="k">new</span> <span class="nx">FileLocator</span><span class="p">(</span><span class="no">__DIR__</span><span class="p">));</span>
<span class="nv">$loader</span><span class="o">-&gt;</span><span class="na">load</span><span class="p">(</span><span class="s1">&#39;services.yaml&#39;</span><span class="p">);</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If you want to load YAML config files then you will also need to install
<a class="reference internal" href="yaml.xhtml"><span class="doc">the Yaml component</span></a>.</p>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>If your application uses unconventional file extensions (for example, your
XML files have a <code class="docutils literal notranslate"><span class="pre">.config</span></code> extension) you can pass the file type as the
second optional parameter of the <code class="docutils literal notranslate"><span class="pre">load()</span></code> method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="nv">$loader</span><span class="o">-&gt;</span><span class="na">load</span><span class="p">(</span><span class="s1">&#39;services.config&#39;</span><span class="p">,</span> <span class="s1">&#39;xml&#39;</span><span class="p">);</span>
</pre></div>
</div>
</div>
<p>If you <em>do</em> want to use PHP to create the services then you can move this
into a separate config file and load it in a similar way:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Config\FileLocator</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\ContainerBuilder</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\PhpFileLoader</span><span class="p">;</span>

<span class="nv">$containerBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ContainerBuilder</span><span class="p">();</span>
<span class="nv">$loader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PhpFileLoader</span><span class="p">(</span><span class="nv">$containerBuilder</span><span class="p">,</span> <span class="k">new</span> <span class="nx">FileLocator</span><span class="p">(</span><span class="no">__DIR__</span><span class="p">));</span>
<span class="nv">$loader</span><span class="o">-&gt;</span><span class="na">load</span><span class="p">(</span><span class="s1">&#39;services.php&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>You can now set up the <code class="docutils literal notranslate"><span class="pre">newsletter_manager</span></code> and <code class="docutils literal notranslate"><span class="pre">mailer</span></code> services using
config files:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="l l-Scalar l-Scalar-Plain">parameters</span><span class="p p-Indicator">:</span>
    <span class="c1"># ...</span>
    <span class="l l-Scalar l-Scalar-Plain">mailer.transport</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">sendmail</span>

<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">mailer</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">class</span><span class="p p-Indicator">:</span>     <span class="l l-Scalar l-Scalar-Plain">Mailer</span>
        <span class="l l-Scalar l-Scalar-Plain">arguments</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="s">&#39;%mailer.transport%&#39;</span><span class="p p-Indicator">]</span>
    <span class="l l-Scalar l-Scalar-Plain">newsletter_manager</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">class</span><span class="p p-Indicator">:</span>     <span class="l l-Scalar l-Scalar-Plain">NewsletterManager</span>
        <span class="l l-Scalar l-Scalar-Plain">calls</span><span class="p p-Indicator">:</span>
            <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">setMailer</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="s">&#39;@mailer&#39;</span><span class="p p-Indicator">]</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;parameters&gt;</span>
        <span class="c">&lt;!-- ... --&gt;</span>
        <span class="nt">&lt;parameter</span> <span class="na">key=</span><span class="s">&quot;mailer.transport&quot;</span><span class="nt">&gt;</span>sendmail<span class="nt">&lt;/parameter&gt;</span>
    <span class="nt">&lt;/parameters&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;mailer&quot;</span> <span class="na">class=</span><span class="s">&quot;Mailer&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;argument&gt;</span>%mailer.transport%<span class="nt">&lt;/argument&gt;</span>
        <span class="nt">&lt;/service&gt;</span>

        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;newsletter_manager&quot;</span> <span class="na">class=</span><span class="s">&quot;NewsletterManager&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;call</span> <span class="na">method=</span><span class="s">&quot;setMailer&quot;</span><span class="nt">&gt;</span>
                <span class="nt">&lt;argument</span> <span class="na">type=</span><span class="s">&quot;service&quot;</span> <span class="na">id=</span><span class="s">&quot;mailer&quot;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;/call&gt;</span>
        <span class="nt">&lt;/service&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">parameters</span><span class="p">()</span>
        <span class="c1">// ...</span>
        <span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="s1">&#39;mailer.transport&#39;</span><span class="p">,</span> <span class="s1">&#39;sendmail&#39;</span><span class="p">)</span>
    <span class="p">;</span>

    <span class="nv">$services</span> <span class="o">=</span> <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">services</span><span class="p">();</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="s1">&#39;mailer&#39;</span><span class="p">,</span> <span class="s1">&#39;Mailer&#39;</span><span class="p">)</span>
        <span class="c1">// the param() method was introduced in Symfony 5.2.</span>
        <span class="o">-&gt;</span><span class="na">args</span><span class="p">([</span><span class="nx">param</span><span class="p">(</span><span class="s1">&#39;mailer.transport&#39;</span><span class="p">)])</span>
    <span class="p">;</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="s1">&#39;newsletter_manager&#39;</span><span class="p">,</span> <span class="s1">&#39;NewsletterManager&#39;</span><span class="p">)</span>
        <span class="c1">// In versions earlier to Symfony 5.1 the service() function was called ref()</span>
        <span class="o">-&gt;</span><span class="na">call</span><span class="p">(</span><span class="s1">&#39;setMailer&#39;</span><span class="p">,</span> <span class="p">[</span><span class="nx">service</span><span class="p">(</span><span class="s1">&#39;mailer&#39;</span><span class="p">)])</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
<div class="section" id="learn-more">
<h2>Learn More</h2>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="dependency_injection/compilation.xhtml">Compiling the Container</a></li>
<li class="toctree-l1"><a class="reference internal" href="dependency_injection/workflow.xhtml">Container Building Workflow</a></li>
<li class="toctree-l1"><a class="reference internal" href="../service_container/alias_private.xhtml">How to Create Service Aliases and Mark Services as Private</a></li>
<li class="toctree-l1"><a class="reference internal" href="../service_container/autowiring.xhtml">Defining Services Dependencies Automatically (Autowiring)</a></li>
<li class="toctree-l1"><a class="reference internal" href="../service_container/calls.xhtml">Service Method Calls and Setter Injection</a></li>
<li class="toctree-l1"><a class="reference internal" href="../service_container/compiler_passes.xhtml">How to Work with Compiler Passes</a></li>
<li class="toctree-l1"><a class="reference internal" href="../service_container/configurators.xhtml">How to Configure a Service with a Configurator</a></li>
<li class="toctree-l1"><a class="reference internal" href="../service_container/debug.xhtml">How to Debug the Service Container &amp; List Services</a></li>
<li class="toctree-l1"><a class="reference internal" href="../service_container/definitions.xhtml">How to work with Service Definition Objects</a></li>
<li class="toctree-l1"><a class="reference internal" href="../service_container/expression_language.xhtml">How to Inject Values Based on Complex Expressions</a></li>
<li class="toctree-l1"><a class="reference internal" href="../service_container/factories.xhtml">Using a Factory to Create Services</a></li>
<li class="toctree-l1"><a class="reference internal" href="../service_container/import.xhtml">How to Import Configuration Files/Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="../service_container/injection_types.xhtml">Types of Injection</a></li>
<li class="toctree-l1"><a class="reference internal" href="../service_container/lazy_services.xhtml">Lazy Services</a></li>
<li class="toctree-l1"><a class="reference internal" href="../service_container/optional_dependencies.xhtml">How to Make Service Arguments/References Optional</a></li>
<li class="toctree-l1"><a class="reference internal" href="../service_container/parent_services.xhtml">How to Manage Common Dependencies with Parent Services</a></li>
<li class="toctree-l1"><a class="reference internal" href="../service_container/request.xhtml">How to Retrieve the Request from the Service Container</a></li>
<li class="toctree-l1"><a class="reference internal" href="../service_container/service_decoration.xhtml">How to Decorate Services</a></li>
<li class="toctree-l1"><a class="reference internal" href="../service_container/service_subscribers_locators.xhtml">Service Subscribers &amp; Locators</a></li>
<li class="toctree-l1"><a class="reference internal" href="../service_container/shared.xhtml">How to Define Non Shared Services</a></li>
<li class="toctree-l1"><a class="reference internal" href="../service_container/synthetic_services.xhtml">How to Inject Instances into the Container</a></li>
<li class="toctree-l1"><a class="reference internal" href="../service_container/tags.xhtml">How to Work with Service Tags</a></li>
</ul>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>