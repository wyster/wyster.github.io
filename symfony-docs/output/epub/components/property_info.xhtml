<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>The PropertyInfo Component</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="the-propertyinfo-component">
<span id="index-0"></span><h1>The PropertyInfo Component</h1>
<blockquote>
<div><p>The PropertyInfo component allows you to get information
about class properties by using different sources of metadata.</p>
</div></blockquote>
<p>While the <a class="reference internal" href="property_access.xhtml"><span class="doc">PropertyAccess component</span></a>
allows you to read and write values to/from objects and arrays, the PropertyInfo
component works solely with class definitions to provide information about the
data type and visibility - including via getter or setter methods - of the properties
within that class.</p>
<div class="section" id="installation">
<span id="components-property-information-installation"></span><h2>Installation</h2>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require symfony/property-info
</pre></div>
</td></tr></table></div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If you install this component outside of a Symfony application, you must
require the <code class="docutils literal notranslate"><span class="pre">vendor/autoload.php</span></code> file in your code to enable the class
autoloading mechanism provided by Composer. Read
<a class="reference internal" href="using_components.xhtml"><span class="doc">this article</span></a> for more details.</p>
</div>
<p>Additional dependencies may be required for some of the
<a class="reference internal" href="#components-property-info-extractors"><span class="std std-ref">extractors provided with this component</span></a>.</p>
</div>
<div class="section" id="usage">
<span id="components-property-information-usage"></span><h2>Usage</h2>
<p>To use this component, create a new
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyInfoExtractor.php" title="Symfony\Component\PropertyInfo\PropertyInfoExtractor"><span class="pre">PropertyInfoExtractor</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyInfoExtractor.php]</span></span></code> instance and
provide it with a set of information extractors:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Example\Namespace\YourAwesomeCoolClass</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\PropertyInfo\Extractor\PhpDocExtractor</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\PropertyInfo\PropertyInfoExtractor</span><span class="p">;</span>

<span class="c1">// a full list of extractors is shown further below</span>
<span class="nv">$phpDocExtractor</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PhpDocExtractor</span><span class="p">();</span>
<span class="nv">$reflectionExtractor</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ReflectionExtractor</span><span class="p">();</span>

<span class="c1">// list of PropertyListExtractorInterface (any iterable)</span>
<span class="nv">$listExtractors</span> <span class="o">=</span> <span class="p">[</span><span class="nv">$reflectionExtractor</span><span class="p">];</span>

<span class="c1">// list of PropertyTypeExtractorInterface (any iterable)</span>
<span class="nv">$typeExtractors</span> <span class="o">=</span> <span class="p">[</span><span class="nv">$phpDocExtractor</span><span class="p">,</span> <span class="nv">$reflectionExtractor</span><span class="p">];</span>

<span class="c1">// list of PropertyDescriptionExtractorInterface (any iterable)</span>
<span class="nv">$descriptionExtractors</span> <span class="o">=</span> <span class="p">[</span><span class="nv">$phpDocExtractor</span><span class="p">];</span>

<span class="c1">// list of PropertyAccessExtractorInterface (any iterable)</span>
<span class="nv">$accessExtractors</span> <span class="o">=</span> <span class="p">[</span><span class="nv">$reflectionExtractor</span><span class="p">];</span>

<span class="c1">// list of PropertyInitializableExtractorInterface (any iterable)</span>
<span class="nv">$propertyInitializableExtractors</span> <span class="o">=</span> <span class="p">[</span><span class="nv">$reflectionExtractor</span><span class="p">];</span>

<span class="nv">$propertyInfo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PropertyInfoExtractor</span><span class="p">(</span>
    <span class="nv">$listExtractors</span><span class="p">,</span>
    <span class="nv">$typeExtractors</span><span class="p">,</span>
    <span class="nv">$descriptionExtractors</span><span class="p">,</span>
    <span class="nv">$accessExtractors</span><span class="p">,</span>
    <span class="nv">$propertyInitializableExtractors</span>
<span class="p">);</span>

<span class="c1">// see below for more examples</span>
<span class="nv">$class</span> <span class="o">=</span> <span class="nx">YourAwesomeCoolClass</span><span class="o">::</span><span class="na">class</span><span class="p">;</span>
<span class="nv">$properties</span> <span class="o">=</span> <span class="nv">$propertyInfo</span><span class="o">-&gt;</span><span class="na">getProperties</span><span class="p">(</span><span class="nv">$class</span><span class="p">);</span>
</pre></div>
</div>
<div class="section" id="extractor-ordering">
<h3>Extractor Ordering</h3>
<p>The order of extractor instances within an array matters: the first non-null
result will be returned. That is why you must provide each category of extractors
as a separate array, even if an extractor provides information for more than
one category.</p>
<p>For example, while the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Extractor/ReflectionExtractor.php" title="Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor"><span class="pre">ReflectionExtractor</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Extractor/ReflectionExtractor.php]</span></span></code>
and <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Doctrine/PropertyInfo/DoctrineExtractor.php" title="Symfony\Bridge\Doctrine\PropertyInfo\DoctrineExtractor"><span class="pre">DoctrineExtractor</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Doctrine/PropertyInfo/DoctrineExtractor.php]</span></span></code>
both provide list and type information it is probably better that:</p>
<ul>
<li><p>The <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Extractor/ReflectionExtractor.php" title="Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor"><span class="pre">ReflectionExtractor</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Extractor/ReflectionExtractor.php]</span></span></code>
has priority for list information so that all properties in a class (not
just mapped properties) are returned.</p></li>
<li><p>The <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Doctrine/PropertyInfo/DoctrineExtractor.php" title="Symfony\Bridge\Doctrine\PropertyInfo\DoctrineExtractor"><span class="pre">DoctrineExtractor</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Doctrine/PropertyInfo/DoctrineExtractor.php]</span></span></code>
has priority for type information so that entity metadata is used instead
of type-hinting to provide more accurate type information:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Bridge\Doctrine\PropertyInfo\DoctrineExtractor</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\PropertyInfo\PropertyInfoExtractor</span><span class="p">;</span>

<span class="nv">$reflectionExtractor</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ReflectionExtractor</span><span class="p">();</span>
<span class="nv">$doctrineExtractor</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DoctrineExtractor</span><span class="p">(</span><span class="cm">/* ... */</span><span class="p">);</span>

<span class="nv">$propertyInfo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PropertyInfoExtractor</span><span class="p">(</span>
    <span class="c1">// List extractors</span>
    <span class="p">[</span>
        <span class="nv">$reflectionExtractor</span><span class="p">,</span>
        <span class="nv">$doctrineExtractor</span>
    <span class="p">],</span>
    <span class="c1">// Type extractors</span>
    <span class="p">[</span>
        <span class="nv">$doctrineExtractor</span><span class="p">,</span>
        <span class="nv">$reflectionExtractor</span>
    <span class="p">]</span>
<span class="p">);</span>
</pre></div>
</div>
</li>
</ul>
</div>
</div>
<div class="section" id="extractable-information">
<span id="components-property-information-extractable-information"></span><h2>Extractable Information</h2>
<p>The <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyInfoExtractor.php" title="Symfony\Component\PropertyInfo\PropertyInfoExtractor"><span class="pre">PropertyInfoExtractor</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyInfoExtractor.php]</span></span></code>
class exposes public methods to extract several types of information:</p>
<ul class="simple">
<li><p><a class="reference internal" href="#property-info-list"><span class="std std-ref">List of properties</span></a>: <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyListExtractorInterface.php" title="Symfony\Component\PropertyInfo\PropertyListExtractorInterface::getProperties()"><span class="pre">getProperties()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyListExtractorInterface.php]</span></span></code></p></li>
<li><p><a class="reference internal" href="#property-info-type"><span class="std std-ref">Property type</span></a>: <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyTypeExtractorInterface.php" title="Symfony\Component\PropertyInfo\PropertyTypeExtractorInterface::getTypes()"><span class="pre">getTypes()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyTypeExtractorInterface.php]</span></span></code>
(including typed properties since PHP 7.4)</p></li>
<li><p><a class="reference internal" href="#property-info-description"><span class="std std-ref">Property description</span></a>: <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyDescriptionExtractorInterface.php" title="Symfony\Component\PropertyInfo\PropertyDescriptionExtractorInterface::getShortDescription()"><span class="pre">getShortDescription()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyDescriptionExtractorInterface.php]</span></span></code> and <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyDescriptionExtractorInterface.php" title="Symfony\Component\PropertyInfo\PropertyDescriptionExtractorInterface::getLongDescription()"><span class="pre">getLongDescription()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyDescriptionExtractorInterface.php]</span></span></code></p></li>
<li><p><a class="reference internal" href="#property-info-access"><span class="std std-ref">Property access details</span></a>: <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyAccessExtractorInterface.php" title="Symfony\Component\PropertyInfo\PropertyAccessExtractorInterface::isReadable()"><span class="pre">isReadable()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyAccessExtractorInterface.php]</span></span></code> and  <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyAccessExtractorInterface.php" title="Symfony\Component\PropertyInfo\PropertyAccessExtractorInterface::isWritable()"><span class="pre">isWritable()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyAccessExtractorInterface.php]</span></span></code></p></li>
<li><p><a class="reference internal" href="#property-info-initializable"><span class="std std-ref">Property initializable through the constructor</span></a>:  <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyInitializableExtractorInterface.php" title="Symfony\Component\PropertyInfo\PropertyInitializableExtractorInterface::isInitializable()"><span class="pre">isInitializable()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyInitializableExtractorInterface.php]</span></span></code></p></li>
</ul>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Be sure to pass a <em>class</em> name, not an object to the extractor methods:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// bad! It may work, but not with all extractors</span>
<span class="nv">$propertyInfo</span><span class="o">-&gt;</span><span class="na">getProperties</span><span class="p">(</span><span class="nv">$awesomeObject</span><span class="p">);</span>

<span class="c1">// Good!</span>
<span class="nv">$propertyInfo</span><span class="o">-&gt;</span><span class="na">getProperties</span><span class="p">(</span><span class="nb">get_class</span><span class="p">(</span><span class="nv">$awesomeObject</span><span class="p">));</span>
<span class="nv">$propertyInfo</span><span class="o">-&gt;</span><span class="na">getProperties</span><span class="p">(</span><span class="s1">&#39;Example\Namespace\YourAwesomeClass&#39;</span><span class="p">);</span>
<span class="nv">$propertyInfo</span><span class="o">-&gt;</span><span class="na">getProperties</span><span class="p">(</span><span class="nx">YourAwesomeClass</span><span class="o">::</span><span class="na">class</span><span class="p">);</span>
</pre></div>
</div>
</div>
<div class="section" id="list-information">
<span id="property-info-list"></span><h3>List Information</h3>
<p>Extractors that implement <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyListExtractorInterface.php" title="Symfony\Component\PropertyInfo\PropertyListExtractorInterface"><span class="pre">PropertyListExtractorInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyListExtractorInterface.php]</span></span></code>
provide the list of properties that are available on a class as an array
containing each property name as a string:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$properties</span> <span class="o">=</span> <span class="nv">$propertyInfo</span><span class="o">-&gt;</span><span class="na">getProperties</span><span class="p">(</span><span class="nv">$class</span><span class="p">);</span>
<span class="cm">/*</span>
<span class="cm">    Example Result</span>
<span class="cm">    --------------</span>
<span class="cm">    array(3) {</span>
<span class="cm">        [0] =&gt; string(8) &quot;username&quot;</span>
<span class="cm">        [1] =&gt; string(8) &quot;password&quot;</span>
<span class="cm">        [2] =&gt; string(6) &quot;active&quot;</span>
<span class="cm">    }</span>
<span class="cm">*/</span>
</pre></div>
</div>
</div>
<div class="section" id="type-information">
<span id="property-info-type"></span><h3>Type Information</h3>
<p>Extractors that implement <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyTypeExtractorInterface.php" title="Symfony\Component\PropertyInfo\PropertyTypeExtractorInterface"><span class="pre">PropertyTypeExtractorInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyTypeExtractorInterface.php]</span></span></code>
provide <a class="reference internal" href="#components-property-info-type"><span class="std std-ref">extensive data type information</span></a>
for a property:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$types</span> <span class="o">=</span> <span class="nv">$propertyInfo</span><span class="o">-&gt;</span><span class="na">getTypes</span><span class="p">(</span><span class="nv">$class</span><span class="p">,</span> <span class="nv">$property</span><span class="p">);</span>
<span class="cm">/*</span>
<span class="cm">    Example Result</span>
<span class="cm">    --------------</span>
<span class="cm">    array(1) {</span>
<span class="cm">        [0] =&gt;</span>
<span class="cm">            class Symfony\Component\PropertyInfo\Type (6) {</span>
<span class="cm">            private $builtinType          =&gt; string(6) &quot;string&quot;</span>
<span class="cm">            private $nullable             =&gt; bool(false)</span>
<span class="cm">            private $class                =&gt; NULL</span>
<span class="cm">            private $collection           =&gt; bool(false)</span>
<span class="cm">            private $collectionKeyType    =&gt; NULL</span>
<span class="cm">            private $collectionValueType  =&gt; NULL</span>
<span class="cm">        }</span>
<span class="cm">    }</span>
<span class="cm">*/</span>
</pre></div>
</div>
<p>See <a class="reference internal" href="#components-property-info-type"><span class="std std-ref">Type Objects</span></a> for info about the <code class="docutils literal notranslate"><span class="pre">Type</span></code> class.</p>
</div>
<div class="section" id="description-information">
<span id="property-info-description"></span><h3>Description Information</h3>
<p>Extractors that implement <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyDescriptionExtractorInterface.php" title="Symfony\Component\PropertyInfo\PropertyDescriptionExtractorInterface"><span class="pre">PropertyDescriptionExtractorInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyDescriptionExtractorInterface.php]</span></span></code>
provide long and short descriptions from a properties annotations as
strings:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$title</span> <span class="o">=</span> <span class="nv">$propertyInfo</span><span class="o">-&gt;</span><span class="na">getShortDescription</span><span class="p">(</span><span class="nv">$class</span><span class="p">,</span> <span class="nv">$property</span><span class="p">);</span>
<span class="cm">/*</span>
<span class="cm">    Example Result</span>
<span class="cm">    --------------</span>
<span class="cm">    string(41) &quot;This is the first line of the DocComment.&quot;</span>
<span class="cm">*/</span>

<span class="nv">$paragraph</span> <span class="o">=</span> <span class="nv">$propertyInfo</span><span class="o">-&gt;</span><span class="na">getLongDescription</span><span class="p">(</span><span class="nv">$class</span><span class="p">,</span> <span class="nv">$property</span><span class="p">);</span>
<span class="cm">/*</span>
<span class="cm">    Example Result</span>
<span class="cm">    --------------</span>
<span class="cm">    string(79):</span>
<span class="cm">        These is the subsequent paragraph in the DocComment.</span>
<span class="cm">        It can span multiple lines.</span>
<span class="cm">*/</span>
</pre></div>
</div>
</div>
<div class="section" id="access-information">
<span id="property-info-access"></span><h3>Access Information</h3>
<p>Extractors that implement <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyAccessExtractorInterface.php" title="Symfony\Component\PropertyInfo\PropertyAccessExtractorInterface"><span class="pre">PropertyAccessExtractorInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyAccessExtractorInterface.php]</span></span></code>
provide whether properties are readable or writable as booleans:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$propertyInfo</span><span class="o">-&gt;</span><span class="na">isReadable</span><span class="p">(</span><span class="nv">$class</span><span class="p">,</span> <span class="nv">$property</span><span class="p">);</span>
<span class="c1">// Example Result: bool(true)</span>

<span class="nv">$propertyInfo</span><span class="o">-&gt;</span><span class="na">isWritable</span><span class="p">(</span><span class="nv">$class</span><span class="p">,</span> <span class="nv">$property</span><span class="p">);</span>
<span class="c1">// Example Result: bool(false)</span>
</pre></div>
</div>
<p>The <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Extractor/ReflectionExtractor.php" title="Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor"><span class="pre">ReflectionExtractor</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Extractor/ReflectionExtractor.php]</span></span></code> looks
for getter/isser/setter/hasser method in addition to whether or not a property is public
to determine if it’s accessible. This based on how the <a class="reference internal" href="property_access.xhtml"><span class="doc">PropertyAccess</span></a>
works.</p>
</div>
</div>
<div class="section" id="property-initializable-information">
<span id="property-info-initializable"></span><h2>Property Initializable Information</h2>
<p>Extractors that implement <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyInitializableExtractorInterface.php" title="Symfony\Component\PropertyInfo\PropertyInitializableExtractorInterface"><span class="pre">PropertyInitializableExtractorInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyInitializableExtractorInterface.php]</span></span></code>
provide whether properties are initializable through the class’s constructor as booleans:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$propertyInfo</span><span class="o">-&gt;</span><span class="na">isInitializable</span><span class="p">(</span><span class="nv">$class</span><span class="p">,</span> <span class="nv">$property</span><span class="p">);</span>
<span class="c1">// Example Result: bool(true)</span>
</pre></div>
</div>
<p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Extractor/ReflectionExtractor.php" title="Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor::isInitializable()"><span class="pre">isInitializable()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Extractor/ReflectionExtractor.php]</span></span></code>
returns <code class="docutils literal notranslate"><span class="pre">true</span></code> if a constructor’s parameter of the given class matches the
given property name.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The main <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyInfoExtractor.php" title="Symfony\Component\PropertyInfo\PropertyInfoExtractor"><span class="pre">PropertyInfoExtractor</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyInfoExtractor.php]</span></span></code>
class implements all interfaces, delegating the extraction of property
information to the extractors that have been registered with it.</p>
<p>This means that any method available on each of the extractors is also
available on the main <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyInfoExtractor.php" title="Symfony\Component\PropertyInfo\PropertyInfoExtractor"><span class="pre">PropertyInfoExtractor</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyInfoExtractor.php]</span></span></code>
class.</p>
</div>
</div>
<div class="section" id="type-objects">
<span id="components-property-info-type"></span><h2>Type Objects</h2>
<p>Compared to the other extractors, type information extractors provide much
more information than can be represented as simple scalar values. Because
of this, type extractors return an array of <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Type.php" title="Symfony\Component\PropertyInfo\Type"><span class="pre">Type</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Type.php]</span></span></code>
objects for each type that the property supports.</p>
<p>For example, if a property supports both <code class="docutils literal notranslate"><span class="pre">integer</span></code> and <code class="docutils literal notranslate"><span class="pre">string</span></code> (via
the <code class="docutils literal notranslate"><span class="pre">&#64;return</span> <span class="pre">int|string</span></code> annotation),
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyInfoExtractor.php" title="Symfony\Component\PropertyInfo\PropertyInfoExtractor::getTypes()"><span class="pre">PropertyInfoExtractor::getTypes()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyInfoExtractor.php]</span></span></code>
will return an array containing <strong>two</strong> instances of the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Type.php" title="Symfony\Component\PropertyInfo\Type"><span class="pre">Type</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Type.php]</span></span></code>
class.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Most extractors will return only one <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Type.php" title="Symfony\Component\PropertyInfo\Type"><span class="pre">Type</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Type.php]</span></span></code>
instance. The <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Extractor/PhpDocExtractor.php" title="Symfony\Component\PropertyInfo\Extractor\PhpDocExtractor"><span class="pre">PhpDocExtractor</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Extractor/PhpDocExtractor.php]</span></span></code>
is currently the only extractor that returns multiple instances in the array.</p>
</div>
<p>Each object will provide 6 attributes, available in the 6 methods:</p>
<div class="section" id="type-getbuiltintype">
<span id="components-property-info-type-builtin"></span><h3><code class="docutils literal notranslate"><span class="pre">Type::getBuiltInType()</span></code></h3>
<p>The <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Type.php" title="Symfony\Component\PropertyInfo\Type::getBuiltinType()"><span class="pre">Type::getBuiltinType()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Type.php]</span></span></code>
method returns the built-in PHP data type, which can be one of these
string values: <code class="docutils literal notranslate"><span class="pre">array</span></code>, <code class="docutils literal notranslate"><span class="pre">bool</span></code>, <code class="docutils literal notranslate"><span class="pre">callable</span></code>, <code class="docutils literal notranslate"><span class="pre">float</span></code>, <code class="docutils literal notranslate"><span class="pre">int</span></code>,
<code class="docutils literal notranslate"><span class="pre">iterable</span></code>, <code class="docutils literal notranslate"><span class="pre">null</span></code>, <code class="docutils literal notranslate"><span class="pre">object</span></code>, <code class="docutils literal notranslate"><span class="pre">resource</span></code> or <code class="docutils literal notranslate"><span class="pre">string</span></code>.</p>
<p>Constants inside the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Type.php" title="Symfony\Component\PropertyInfo\Type"><span class="pre">Type</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Type.php]</span></span></code>
class, in the form <code class="docutils literal notranslate"><span class="pre">Type::BUILTIN_TYPE_*</span></code>, are provided for convenience.</p>
<div class="versionadded">
<p><span class="versionmodified">New in version 4.4: </span>Support for typed properties (added in PHP 7.4) was introduced in Symfony 4.4.</p>
</div>
</div>
<div class="section" id="type-isnullable">
<h3><code class="docutils literal notranslate"><span class="pre">Type::isNullable()</span></code></h3>
<p>The <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Type.php" title="Symfony\Component\PropertyInfo\Type::isNullable()"><span class="pre">Type::isNullable()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Type.php]</span></span></code>
method will return a boolean value indicating whether the property parameter
can be set to <code class="docutils literal notranslate"><span class="pre">null</span></code>.</p>
</div>
<div class="section" id="type-getclassname">
<h3><code class="docutils literal notranslate"><span class="pre">Type::getClassName()</span></code></h3>
<p>If the <a class="reference internal" href="#components-property-info-type-builtin"><span class="std std-ref">built-in PHP data type</span></a>
is <code class="docutils literal notranslate"><span class="pre">object</span></code>, the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Type.php" title="Symfony\Component\PropertyInfo\Type::getClassName()"><span class="pre">Type::getClassName()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Type.php]</span></span></code>
method will return the fully-qualified class or interface name accepted.</p>
</div>
<div class="section" id="type-iscollection">
<h3><code class="docutils literal notranslate"><span class="pre">Type::isCollection()</span></code></h3>
<p>The <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Type.php" title="Symfony\Component\PropertyInfo\Type::isCollection()"><span class="pre">Type::isCollection()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Type.php]</span></span></code>
method will return a boolean value indicating if the property parameter is
a collection - a non-scalar value capable of containing other values. Currently
this returns <code class="docutils literal notranslate"><span class="pre">true</span></code> if:</p>
<ul class="simple">
<li><p>The <a class="reference internal" href="#components-property-info-type-builtin"><span class="std std-ref">built-in PHP data type</span></a>
is <code class="docutils literal notranslate"><span class="pre">array</span></code>;</p></li>
<li><p>The mutator method the property is derived from has a prefix of <code class="docutils literal notranslate"><span class="pre">add</span></code>
or <code class="docutils literal notranslate"><span class="pre">remove</span></code> (which are defined as the list of array mutator prefixes);</p></li>
<li><p>The <a class="reference external" href="https://www.phpdoc.org/">phpDocumentor</a><span class="link-target"> [https://www.phpdoc.org/]</span> annotation is of type “collection” (e.g.
<code class="docutils literal notranslate"><span class="pre">&#64;var</span> <span class="pre">SomeClass&lt;DateTime&gt;</span></code>, <code class="docutils literal notranslate"><span class="pre">&#64;var</span> <span class="pre">SomeClass&lt;integer,string&gt;</span></code>,
<code class="docutils literal notranslate"><span class="pre">&#64;var</span> <span class="pre">Doctrine\Common\Collections\Collection&lt;App\Entity\SomeEntity&gt;</span></code>, etc.)</p></li>
</ul>
<div class="versionadded">
<p><span class="versionmodified">New in version 4.2: </span>The support of phpDocumentor collection types was introduced in Symfony 4.2.</p>
</div>
</div>
<div class="section" id="type-getcollectionkeytype-type-getcollectionvaluetype">
<h3><code class="docutils literal notranslate"><span class="pre">Type::getCollectionKeyType()</span></code> &amp; <code class="docutils literal notranslate"><span class="pre">Type::getCollectionValueType()</span></code></h3>
<p>If the property is a collection, additional type objects may be returned
for both the key and value types of the collection (if the information is
available), via the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Type.php" title="Symfony\Component\PropertyInfo\Type::getCollectionKeyType()"><span class="pre">Type::getCollectionKeyType()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Type.php]</span></span></code>
and <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Type.php" title="Symfony\Component\PropertyInfo\Type::getCollectionValueType()"><span class="pre">Type::getCollectionValueType()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Type.php]</span></span></code>
methods.</p>
</div>
</div>
<div class="section" id="extractors">
<span id="components-property-info-extractors"></span><h2>Extractors</h2>
<p>The extraction of property information is performed by <em>extractor classes</em>.
An extraction class can provide one or more types of property information
by implementing the correct interface(s).</p>
<p>The <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyInfoExtractor.php" title="Symfony\Component\PropertyInfo\PropertyInfoExtractor"><span class="pre">PropertyInfoExtractor</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyInfoExtractor.php]</span></span></code> will
iterate over the relevant extractor classes in the order they were set, call
the appropriate method and return the first result that is not <code class="docutils literal notranslate"><span class="pre">null</span></code>.</p>
<p id="components-property-information-extractors-available">While you can create your own extractors, the following are already available
to cover most use-cases:</p>
<div class="section" id="reflectionextractor">
<h3>ReflectionExtractor</h3>
<p>Using PHP reflection, the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Extractor/ReflectionExtractor.php" title="Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor"><span class="pre">ReflectionExtractor</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Extractor/ReflectionExtractor.php]</span></span></code>
provides list, type and access information from setter and accessor methods.
It can also give the type of a property (even extracting it from the constructor
arguments), and if it is initializable through the constructor. It supports
return and scalar types for PHP 7:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor</span><span class="p">;</span>

<span class="nv">$reflectionExtractor</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ReflectionExtractor</span><span class="p">();</span>

<span class="c1">// List information.</span>
<span class="nv">$reflectionExtractor</span><span class="o">-&gt;</span><span class="na">getProperties</span><span class="p">(</span><span class="nv">$class</span><span class="p">);</span>

<span class="c1">// Type information.</span>
<span class="nv">$reflectionExtractor</span><span class="o">-&gt;</span><span class="na">getTypes</span><span class="p">(</span><span class="nv">$class</span><span class="p">,</span> <span class="nv">$property</span><span class="p">);</span>

<span class="c1">// Access information.</span>
<span class="nv">$reflectionExtractor</span><span class="o">-&gt;</span><span class="na">isReadable</span><span class="p">(</span><span class="nv">$class</span><span class="p">,</span> <span class="nv">$property</span><span class="p">);</span>
<span class="nv">$reflectionExtractor</span><span class="o">-&gt;</span><span class="na">isWritable</span><span class="p">(</span><span class="nv">$class</span><span class="p">,</span> <span class="nv">$property</span><span class="p">);</span>

<span class="c1">// Initializable information</span>
<span class="nv">$reflectionExtractor</span><span class="o">-&gt;</span><span class="na">isInitializable</span><span class="p">(</span><span class="nv">$class</span><span class="p">,</span> <span class="nv">$property</span><span class="p">);</span>
</pre></div>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 4.1: </span>The feature to extract the property types from constructor arguments was
introduced in Symfony 4.1.</p>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>When using the Symfony framework, this service is automatically registered
when the <code class="docutils literal notranslate"><span class="pre">property_info</span></code> feature is enabled:</p>
<div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/packages/framework.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">framework</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">property_info</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">enabled</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">true</span>
</pre></div>
</td></tr></table></div>
</div>
</div>
<div class="section" id="phpdocextractor">
<h3>PhpDocExtractor</h3>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>This extractor depends on the <a class="reference external" href="https://packagist.org/packages/phpdocumentor/reflection-docblock">phpdocumentor/reflection-docblock</a><span class="link-target"> [https://packagist.org/packages/phpdocumentor/reflection-docblock]</span> library.</p>
</div>
<p>Using <a class="reference external" href="https://github.com/phpDocumentor/ReflectionDocBlock">phpDocumentor Reflection</a><span class="link-target"> [https://github.com/phpDocumentor/ReflectionDocBlock]</span> to parse property and method annotations,
the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Extractor/PhpDocExtractor.php" title="Symfony\Component\PropertyInfo\Extractor\PhpDocExtractor"><span class="pre">PhpDocExtractor</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Extractor/PhpDocExtractor.php]</span></span></code>
provides type and description information. This extractor is automatically
registered with the <code class="docutils literal notranslate"><span class="pre">property_info</span></code> in the Symfony Framework <em>if</em> the dependent
library is present:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\PropertyInfo\Extractor\PhpDocExtractor</span><span class="p">;</span>

<span class="nv">$phpDocExtractor</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PhpDocExtractor</span><span class="p">();</span>

<span class="c1">// Type information.</span>
<span class="nv">$phpDocExtractor</span><span class="o">-&gt;</span><span class="na">getTypes</span><span class="p">(</span><span class="nv">$class</span><span class="p">,</span> <span class="nv">$property</span><span class="p">);</span>
<span class="c1">// Description information.</span>
<span class="nv">$phpDocExtractor</span><span class="o">-&gt;</span><span class="na">getShortDescription</span><span class="p">(</span><span class="nv">$class</span><span class="p">,</span> <span class="nv">$property</span><span class="p">);</span>
<span class="nv">$phpDocExtractor</span><span class="o">-&gt;</span><span class="na">getLongDescription</span><span class="p">(</span><span class="nv">$class</span><span class="p">,</span> <span class="nv">$property</span><span class="p">);</span>
</pre></div>
</div>
</div>
<div class="section" id="serializerextractor">
<h3>SerializerExtractor</h3>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>This extractor depends on the <a class="reference external" href="https://packagist.org/packages/symfony/serializer">symfony/serializer</a><span class="link-target"> [https://packagist.org/packages/symfony/serializer]</span> library.</p>
</div>
<p>Using <a class="reference internal" href="../serializer.xhtml#serializer-using-serialization-groups-annotations"><span class="std std-ref">groups metadata</span></a>
from the <a class="reference internal" href="serializer.xhtml"><span class="doc">Serializer component</span></a>,
the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Extractor/SerializerExtractor.php" title="Symfony\Component\PropertyInfo\Extractor\SerializerExtractor"><span class="pre">SerializerExtractor</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/Extractor/SerializerExtractor.php]</span></span></code>
provides list information. This extractor is <em>not</em> registered automatically
with the <code class="docutils literal notranslate"><span class="pre">property_info</span></code> service in the Symfony Framework:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Doctrine\Common\Annotations\AnnotationReader</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\PropertyInfo\Extractor\SerializerExtractor</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactory</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Serializer\Mapping\Loader\AnnotationLoader</span><span class="p">;</span>

<span class="nv">$serializerClassMetadataFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ClassMetadataFactory</span><span class="p">(</span>
    <span class="k">new</span> <span class="nx">AnnotationLoader</span><span class="p">(</span><span class="k">new</span> <span class="nx">AnnotationReader</span><span class="p">)</span>
<span class="p">);</span>
<span class="nv">$serializerExtractor</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SerializerExtractor</span><span class="p">(</span><span class="nv">$serializerClassMetadataFactory</span><span class="p">);</span>

<span class="c1">// List information.</span>
<span class="nv">$serializerExtractor</span><span class="o">-&gt;</span><span class="na">getProperties</span><span class="p">(</span><span class="nv">$class</span><span class="p">);</span>
</pre></div>
</div>
</div>
<div class="section" id="doctrineextractor">
<h3>DoctrineExtractor</h3>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>This extractor depends on the <a class="reference external" href="https://packagist.org/packages/symfony/doctrine-bridge">symfony/doctrine-bridge</a><span class="link-target"> [https://packagist.org/packages/symfony/doctrine-bridge]</span> and <a class="reference external" href="https://packagist.org/packages/doctrine/orm">doctrine/orm</a><span class="link-target"> [https://packagist.org/packages/doctrine/orm]</span>
libraries.</p>
</div>
<p>Using entity mapping data from <a class="reference external" href="https://www.doctrine-project.org/projects/orm.html">Doctrine ORM</a><span class="link-target"> [https://www.doctrine-project.org/projects/orm.html]</span>, the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Doctrine/PropertyInfo/DoctrineExtractor.php" title="Symfony\Bridge\Doctrine\PropertyInfo\DoctrineExtractor"><span class="pre">DoctrineExtractor</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Doctrine/PropertyInfo/DoctrineExtractor.php]</span></span></code>
provides list and type information. This extractor is not registered automatically
with the <code class="docutils literal notranslate"><span class="pre">property_info</span></code> service in the Symfony Framework:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Doctrine\ORM\EntityManager</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Doctrine\ORM\Tools\Setup</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Bridge\Doctrine\PropertyInfo\DoctrineExtractor</span><span class="p">;</span>

<span class="nv">$config</span> <span class="o">=</span> <span class="nx">Setup</span><span class="o">::</span><span class="na">createAnnotationMetadataConfiguration</span><span class="p">([</span><span class="no">__DIR__</span><span class="p">],</span> <span class="k">true</span><span class="p">);</span>
<span class="nv">$entityManager</span> <span class="o">=</span> <span class="nx">EntityManager</span><span class="o">::</span><span class="na">create</span><span class="p">([</span>
    <span class="s1">&#39;driver&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;pdo_sqlite&#39;</span><span class="p">,</span>
    <span class="c1">// ...</span>
<span class="p">],</span> <span class="nv">$config</span><span class="p">);</span>
<span class="nv">$doctrineExtractor</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DoctrineExtractor</span><span class="p">(</span><span class="nv">$entityManager</span><span class="p">);</span>

<span class="c1">// List information.</span>
<span class="nv">$doctrineExtractor</span><span class="o">-&gt;</span><span class="na">getProperties</span><span class="p">(</span><span class="nv">$class</span><span class="p">);</span>
<span class="c1">// Type information.</span>
<span class="nv">$doctrineExtractor</span><span class="o">-&gt;</span><span class="na">getTypes</span><span class="p">(</span><span class="nv">$class</span><span class="p">,</span> <span class="nv">$property</span><span class="p">);</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="creating-your-own-extractors">
<span id="components-property-information-extractors-creation"></span><h2>Creating Your Own Extractors</h2>
<p>You can create your own property information extractors by creating a
class that implements one or more of the following interfaces:
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyAccessExtractorInterface.php" title="Symfony\Component\PropertyInfo\PropertyAccessExtractorInterface"><span class="pre">PropertyAccessExtractorInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyAccessExtractorInterface.php]</span></span></code>,
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyDescriptionExtractorInterface.php" title="Symfony\Component\PropertyInfo\PropertyDescriptionExtractorInterface"><span class="pre">PropertyDescriptionExtractorInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyDescriptionExtractorInterface.php]</span></span></code>,
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyListExtractorInterface.php" title="Symfony\Component\PropertyInfo\PropertyListExtractorInterface"><span class="pre">PropertyListExtractorInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyListExtractorInterface.php]</span></span></code>,
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyTypeExtractorInterface.php" title="Symfony\Component\PropertyInfo\PropertyTypeExtractorInterface"><span class="pre">PropertyTypeExtractorInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyTypeExtractorInterface.php]</span></span></code> and
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyInitializableExtractorInterface.php" title="Symfony\Component\PropertyInfo\PropertyInitializableExtractorInterface"><span class="pre">PropertyInitializableExtractorInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/PropertyInfo/PropertyInitializableExtractorInterface.php]</span></span></code>.</p>
<p>If you have enabled the PropertyInfo component with the FrameworkBundle,
you can automatically register your extractor class with the <code class="docutils literal notranslate"><span class="pre">property_info</span></code>
service by defining it as a service with one or more of the following
<a class="reference internal" href="../service_container/tags.xhtml"><span class="doc">tags</span></a>:</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">property_info.list_extractor</span></code> if it provides list information.</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">property_info.type_extractor</span></code> if it provides type information.</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">property_info.description_extractor</span></code> if it provides description information.</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">property_info.access_extractor</span></code> if it provides access information.</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">property_info.initializable_extractor</span></code> if it provides initializable information
(it checks if a property can be initialized through the constructor).</p></li>
</ul>
<div class="versionadded">
<p><span class="versionmodified">New in version 4.2: </span>The <code class="docutils literal notranslate"><span class="pre">property_info.initializable_extractor</span></code> was introduced in Symfony 4.2.</p>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>