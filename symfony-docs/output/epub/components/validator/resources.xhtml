<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Loading Resources</title>
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="loading-resources">
<span id="index-0"></span><h1>Loading Resources</h1>
<p>The Validator component uses metadata to validate a value. This metadata defines
how a class, array or any other value should be validated. When validating a
class, the metadata is defined by the class itself. When validating simple values,
the metadata must be passed to the validation methods.</p>
<p>Class metadata can be defined in a configuration file or in the class itself.
The Validator component collects that metadata using a set of loaders.</p>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>Youâ€™ll learn how to define the metadata in <a class="reference internal" href="metadata.xhtml"><span class="doc">Metadata</span></a>.</p>
</div>
<div class="section" id="the-staticmethodloader">
<h2>The StaticMethodLoader</h2>
<p>The most basic loader is the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Mapping/Loader/StaticMethodLoader.php" title="Symfony\Component\Validator\Mapping\Loader\StaticMethodLoader"><span class="pre">StaticMethodLoader</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Mapping/Loader/StaticMethodLoader.php]</span></span></code>.
This loader gets the metadata by calling a static method of the class. The name
of the method is configured using the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/ValidatorBuilder.php" title="Symfony\Component\Validator\ValidatorBuilder::addMethodMapping()"><span class="pre">addMethodMapping()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/ValidatorBuilder.php]</span></span></code>
method of the validator builder:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Validator\Validation</span><span class="p">;</span>

<span class="nv">$validator</span> <span class="o">=</span> <span class="nx">Validation</span><span class="o">::</span><span class="na">createValidatorBuilder</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">addMethodMapping</span><span class="p">(</span><span class="s1">&#39;loadValidatorMetadata&#39;</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="na">getValidator</span><span class="p">();</span>
</pre></div>
</div>
<p>In this example, the validation metadata is retrieved executing the
<code class="docutils literal notranslate"><span class="pre">loadValidatorMetadata()</span></code> method of the class:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints</span> <span class="k">as</span> <span class="nx">Assert</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Mapping\ClassMetadata</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">User</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="nv">$name</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">loadValidatorMetadata</span><span class="p">(</span><span class="nx">ClassMetadata</span> <span class="nv">$metadata</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$metadata</span><span class="o">-&gt;</span><span class="na">addPropertyConstraint</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">Assert\NotBlank</span><span class="p">());</span>
        <span class="nv">$metadata</span><span class="o">-&gt;</span><span class="na">addPropertyConstraint</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">Assert\Length</span><span class="p">([</span>
            <span class="s1">&#39;min&#39;</span> <span class="o">=&gt;</span> <span class="mi">5</span><span class="p">,</span>
            <span class="s1">&#39;max&#39;</span> <span class="o">=&gt;</span> <span class="mi">20</span><span class="p">,</span>
        <span class="p">]));</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Instead of calling <code class="docutils literal notranslate"><span class="pre">addMethodMapping()</span></code> multiple times to add several
method names, you can also use
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/ValidatorBuilder.php" title="Symfony\Component\Validator\ValidatorBuilder::addMethodMappings()"><span class="pre">addMethodMappings()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/ValidatorBuilder.php]</span></span></code>
to set an array of supported method names.</p>
</div>
</div>
<div class="section" id="the-file-loaders">
<h2>The File Loaders</h2>
<p>The component also provides two file loaders, one to load YAML files and one to
load XML files. Use
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/ValidatorBuilder.php" title="Symfony\Component\Validator\ValidatorBuilder::addYamlMapping()"><span class="pre">addYamlMapping()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/ValidatorBuilder.php]</span></span></code> or
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/ValidatorBuilder.php" title="Symfony\Component\Validator\ValidatorBuilder::addXmlMapping()"><span class="pre">addXmlMapping()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/ValidatorBuilder.php]</span></span></code> to
configure the locations of these files:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Validator\Validation</span><span class="p">;</span>

<span class="nv">$validator</span> <span class="o">=</span> <span class="nx">Validation</span><span class="o">::</span><span class="na">createValidatorBuilder</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">addYamlMapping</span><span class="p">(</span><span class="s1">&#39;validator/validation.yaml&#39;</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="na">getValidator</span><span class="p">();</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If you want to load YAML mapping files then you will also need to install
<a class="reference internal" href="../yaml.xhtml"><span class="doc">the Yaml component</span></a>.</p>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Just like with the method mappings, you can also use
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/ValidatorBuilder.php" title="Symfony\Component\Validator\ValidatorBuilder::addYamlMappings()"><span class="pre">addYamlMappings()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/ValidatorBuilder.php]</span></span></code> and
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/ValidatorBuilder.php" title="Symfony\Component\Validator\ValidatorBuilder::addXmlMappings()"><span class="pre">addXmlMappings()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/ValidatorBuilder.php]</span></span></code>
to configure an array of file paths.</p>
</div>
</div>
<div class="section" id="the-annotationloader">
<h2>The AnnotationLoader</h2>
<p>At last, the component provides an
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Mapping/Loader/AnnotationLoader.php" title="Symfony\Component\Validator\Mapping\Loader\AnnotationLoader"><span class="pre">AnnotationLoader</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Mapping/Loader/AnnotationLoader.php]</span></span></code> to get
the metadata from the annotations of the class. Annotations are defined as <code class="docutils literal notranslate"><span class="pre">&#64;</span></code>
prefixed classes included in doc block comments (<code class="docutils literal notranslate"><span class="pre">/**</span> <span class="pre">...</span> <span class="pre">*/</span></code>). For example:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints</span> <span class="k">as</span> <span class="nx">Assert</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="k">class</span> <span class="nc">User</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @Assert\NotBlank</span>
<span class="sd">     */</span>
    <span class="k">protected</span> <span class="nv">$name</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
<p>To enable the annotation loader, call the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/ValidatorBuilder.php" title="Symfony\Component\Validator\ValidatorBuilder::enableAnnotationMapping()"><span class="pre">enableAnnotationMapping()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/ValidatorBuilder.php]</span></span></code>
method. It takes an optional annotation reader instance, which defaults to
<code class="docutils literal notranslate"><span class="pre">Doctrine\Common\Annotations\AnnotationReader</span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Validator\Validation</span><span class="p">;</span>

<span class="nv">$validator</span> <span class="o">=</span> <span class="nx">Validation</span><span class="o">::</span><span class="na">createValidatorBuilder</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">enableAnnotationMapping</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">getValidator</span><span class="p">();</span>
</pre></div>
</div>
<p>To disable the annotation loader after it was enabled, call
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/ValidatorBuilder.php" title="Symfony\Component\Validator\ValidatorBuilder::disableAnnotationMapping()"><span class="pre">disableAnnotationMapping()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/ValidatorBuilder.php]</span></span></code>.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>In order to use the annotation loader, you should have installed the
<code class="docutils literal notranslate"><span class="pre">doctrine/annotations</span></code> and <code class="docutils literal notranslate"><span class="pre">doctrine/cache</span></code> packages with Composer.</p>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Annotation classes arenâ€™t loaded automatically, so you must load them
using a class loader like this:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Composer\Autoload\ClassLoader</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Doctrine\Common\Annotations\AnnotationRegistry</span><span class="p">;</span>

<span class="sd">/** @var ClassLoader $loader */</span>
<span class="nv">$loader</span> <span class="o">=</span> <span class="k">require</span> <span class="no">__DIR__</span><span class="o">.</span><span class="s1">&#39;/../vendor/autoload.php&#39;</span><span class="p">;</span>

<span class="nx">AnnotationRegistry</span><span class="o">::</span><span class="na">registerLoader</span><span class="p">([</span><span class="nv">$loader</span><span class="p">,</span> <span class="s1">&#39;loadClass&#39;</span><span class="p">]);</span>

<span class="k">return</span> <span class="nv">$loader</span><span class="p">;</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="using-multiple-loaders">
<h2>Using Multiple Loaders</h2>
<p>The component provides a
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Mapping/Loader/LoaderChain.php" title="Symfony\Component\Validator\Mapping\Loader\LoaderChain"><span class="pre">LoaderChain</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Mapping/Loader/LoaderChain.php]</span></span></code> class to
execute several loaders sequentially in the same order they were defined:</p>
<p>The <code class="docutils literal notranslate"><span class="pre">ValidatorBuilder</span></code> will already take care of this when you configure
multiple mappings:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Validator\Validation</span><span class="p">;</span>

<span class="nv">$validator</span> <span class="o">=</span> <span class="nx">Validation</span><span class="o">::</span><span class="na">createValidatorBuilder</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">enableAnnotationMapping</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">addMethodMapping</span><span class="p">(</span><span class="s1">&#39;loadValidatorMetadata&#39;</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="na">addXmlMapping</span><span class="p">(</span><span class="s1">&#39;validator/validation.xml&#39;</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="na">getValidator</span><span class="p">();</span>
</pre></div>
</div>
</div>
<div class="section" id="caching">
<h2>Caching</h2>
<p>Using many loaders to load metadata from different places is convenient, but it
can slow down your application because each file needs to be parsed, validated
and converted into a <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Mapping/ClassMetadata.php" title="Symfony\Component\Validator\Mapping\ClassMetadata"><span class="pre">ClassMetadata</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Mapping/ClassMetadata.php]</span></span></code>
instance.</p>
<p>To solve this problem, call the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/ValidatorBuilder.php" title="Symfony\Component\Validator\ValidatorBuilder::setMappingCache()"><span class="pre">setMappingCache()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/ValidatorBuilder.php]</span></span></code>
method of the Validator builder and pass your own caching class (which must
implement the PSR-6 interface <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Psr/Cache/CacheItemPoolInterface.php" title="Psr\Cache\CacheItemPoolInterface"><span class="pre">CacheItemPoolInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Psr/Cache/CacheItemPoolInterface.php]</span></span></code>):</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Validator\Validation</span><span class="p">;</span>

<span class="nv">$validator</span> <span class="o">=</span> <span class="nx">Validation</span><span class="o">::</span><span class="na">createValidatorBuilder</span><span class="p">()</span>
    <span class="c1">// ... add loaders</span>
    <span class="o">-&gt;</span><span class="na">setMappingCache</span><span class="p">(</span><span class="k">new</span> <span class="nx">SomePsr6Cache</span><span class="p">());</span>
    <span class="o">-&gt;</span><span class="na">getValidator</span><span class="p">();</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The loaders already use a singleton load mechanism. That means that the
loaders will only load and parse a file once and put that in a property,
which will then be used the next time it is asked for metadata. However,
the Validator still needs to merge all metadata of one class from every
loader when it is requested.</p>
</div>
</div>
<div class="section" id="using-a-custom-metadatafactory">
<h2>Using a Custom MetadataFactory</h2>
<p>All the loaders and the cache are passed to an instance of
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Mapping/Factory/LazyLoadingMetadataFactory.php" title="Symfony\Component\Validator\Mapping\Factory\LazyLoadingMetadataFactory"><span class="pre">LazyLoadingMetadataFactory</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Mapping/Factory/LazyLoadingMetadataFactory.php]</span></span></code>.
This class is responsible for creating a <code class="docutils literal notranslate"><span class="pre">ClassMetadata</span></code> instance from all the
configured resources.</p>
<p>You can also use a custom metadata factory implementation by creating a class
which implements
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Mapping/Factory/MetadataFactoryInterface.php" title="Symfony\Component\Validator\Mapping\Factory\MetadataFactoryInterface"><span class="pre">MetadataFactoryInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Mapping/Factory/MetadataFactoryInterface.php]</span></span></code>.
You can set this custom implementation using
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/ValidatorBuilder.php" title="Symfony\Component\Validator\ValidatorBuilder::setMetadataFactory()"><span class="pre">setMetadataFactory()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/ValidatorBuilder.php]</span></span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Acme\Validation\CustomMetadataFactory</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Validation</span><span class="p">;</span>

<span class="nv">$validator</span> <span class="o">=</span> <span class="nx">Validation</span><span class="o">::</span><span class="na">createValidatorBuilder</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">setMetadataFactory</span><span class="p">(</span><span class="k">new</span> <span class="nx">CustomMetadataFactory</span><span class="p">(</span><span class="o">...</span><span class="p">))</span>
    <span class="o">-&gt;</span><span class="na">getValidator</span><span class="p">();</span>
</pre></div>
</div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>Since you are using a custom metadata factory, you canâ€™t configure loaders
and caches using the <code class="docutils literal notranslate"><span class="pre">add*Mapping()</span></code> methods anymore. You now have to
inject them into your custom metadata factory yourself.</p>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>