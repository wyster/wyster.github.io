<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Defining and Processing Configuration Values</title>
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="defining-and-processing-configuration-values">
<span id="index-0"></span><h1>Defining and Processing Configuration Values</h1>
<div class="section" id="validating-configuration-values">
<h2>Validating Configuration Values</h2>
<p>After loading configuration values from all kinds of resources, the values
and their structure can be validated using the “Definition” part of the
Config Component. Configuration values are usually expected to show some
kind of hierarchy. Also, values should be of a certain type, be restricted
in number or be one of a given set of values. For example, the following
configuration (in YAML) shows a clear hierarchy and some validation rules
that should be applied to it (like: “the value for <code class="docutils literal notranslate"><span class="pre">auto_connect</span></code> must
be a boolean value”):</p>
<div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="l l-Scalar l-Scalar-Plain">database</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">auto_connect</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">true</span>
    <span class="l l-Scalar l-Scalar-Plain">default_connection</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">mysql</span>
    <span class="l l-Scalar l-Scalar-Plain">connections</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">mysql</span><span class="p p-Indicator">:</span>
            <span class="l l-Scalar l-Scalar-Plain">host</span><span class="p p-Indicator">:</span>     <span class="l l-Scalar l-Scalar-Plain">localhost</span>
            <span class="l l-Scalar l-Scalar-Plain">driver</span><span class="p p-Indicator">:</span>   <span class="l l-Scalar l-Scalar-Plain">mysql</span>
            <span class="l l-Scalar l-Scalar-Plain">username</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">user</span>
            <span class="l l-Scalar l-Scalar-Plain">password</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">pass</span>
        <span class="l l-Scalar l-Scalar-Plain">sqlite</span><span class="p p-Indicator">:</span>
            <span class="l l-Scalar l-Scalar-Plain">host</span><span class="p p-Indicator">:</span>     <span class="l l-Scalar l-Scalar-Plain">localhost</span>
            <span class="l l-Scalar l-Scalar-Plain">driver</span><span class="p p-Indicator">:</span>   <span class="l l-Scalar l-Scalar-Plain">sqlite</span>
            <span class="l l-Scalar l-Scalar-Plain">memory</span><span class="p p-Indicator">:</span>   <span class="l l-Scalar l-Scalar-Plain">true</span>
            <span class="l l-Scalar l-Scalar-Plain">username</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">user</span>
            <span class="l l-Scalar l-Scalar-Plain">password</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">pass</span>
</pre></div>
</td></tr></table></div>
<p>When loading multiple configuration files, it should be possible to merge
and overwrite some values. Other values should not be merged and stay as
they are when first encountered. Also, some keys are only available when
another key has a specific value (in the sample configuration above: the
<code class="docutils literal notranslate"><span class="pre">memory</span></code> key only makes sense when the <code class="docutils literal notranslate"><span class="pre">driver</span></code> is <code class="docutils literal notranslate"><span class="pre">sqlite</span></code>).</p>
</div>
<div class="section" id="defining-a-hierarchy-of-configuration-values-using-the-treebuilder">
<h2>Defining a Hierarchy of Configuration Values Using the TreeBuilder</h2>
<p>All the rules concerning configuration values can be defined using the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Definition/Builder/TreeBuilder.php" title="Symfony\Component\Config\Definition\Builder\TreeBuilder"><span class="pre">TreeBuilder</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Definition/Builder/TreeBuilder.php]</span></span></code>.</p>
<p>A <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Definition/Builder/TreeBuilder.php" title="Symfony\Component\Config\Definition\Builder\TreeBuilder"><span class="pre">TreeBuilder</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Definition/Builder/TreeBuilder.php]</span></span></code>
instance should be returned from a custom <code class="docutils literal notranslate"><span class="pre">Configuration</span></code> class which
implements the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Definition/ConfigurationInterface.php" title="Symfony\Component\Config\Definition\ConfigurationInterface"><span class="pre">ConfigurationInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Definition/ConfigurationInterface.php]</span></span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">namespace</span> <span class="nx">Acme\DatabaseConfiguration</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Config\Definition\Builder\TreeBuilder</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Config\Definition\ConfigurationInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">DatabaseConfiguration</span> <span class="k">implements</span> <span class="nx">ConfigurationInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">getConfigTreeBuilder</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$treeBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TreeBuilder</span><span class="p">(</span><span class="s1">&#39;database&#39;</span><span class="p">);</span>

        <span class="c1">// ... add node definitions to the root of the tree</span>
        <span class="c1">// $treeBuilder-&gt;getRootNode()-&gt;...</span>

        <span class="k">return</span> <span class="nv">$treeBuilder</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="adding-node-definitions-to-the-tree">
<h2>Adding Node Definitions to the Tree</h2>
<div class="section" id="variable-nodes">
<h3>Variable Nodes</h3>
<p>A tree contains node definitions which can be laid out in a semantic way.
This means, using indentation and the fluent notation, it is possible to
reflect the real structure of the configuration values:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$rootNode</span>
    <span class="o">-&gt;</span><span class="na">children</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">booleanNode</span><span class="p">(</span><span class="s1">&#39;auto_connect&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">defaultTrue</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">scalarNode</span><span class="p">(</span><span class="s1">&#39;default_connection&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">defaultValue</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
<span class="p">;</span>
</pre></div>
</div>
<p>The root node itself is an array node, and has children, like the boolean
node <code class="docutils literal notranslate"><span class="pre">auto_connect</span></code> and the scalar node <code class="docutils literal notranslate"><span class="pre">default_connection</span></code>. In general:
after defining a node, a call to <code class="docutils literal notranslate"><span class="pre">end()</span></code> takes you one step up in the
hierarchy.</p>
</div>
<div class="section" id="node-type">
<h3>Node Type</h3>
<p>It is possible to validate the type of a provided value by using the appropriate
node definition. Node types are available for:</p>
<ul class="simple">
<li><p>scalar (generic type that includes booleans, strings, integers, floats
and <code class="docutils literal notranslate"><span class="pre">null</span></code>)</p></li>
<li><p>boolean</p></li>
<li><p>integer</p></li>
<li><p>float</p></li>
<li><p>enum (similar to scalar, but it only allows a finite set of values)</p></li>
<li><p>array</p></li>
<li><p>variable (no validation)</p></li>
</ul>
<p>and are created with <code class="docutils literal notranslate"><span class="pre">node($name,</span> <span class="pre">$type)</span></code> or their associated shortcut
<code class="docutils literal notranslate"><span class="pre">xxxxNode($name)</span></code> method.</p>
</div>
<div class="section" id="numeric-node-constraints">
<h3>Numeric Node Constraints</h3>
<p>Numeric nodes (float and integer) provide two extra constraints -
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Definition/Builder/IntegerNodeDefinition.php" title="Symfony\Component\Config\Definition\Builder\IntegerNodeDefinition::min()"><span class="pre">min()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Definition/Builder/IntegerNodeDefinition.php]</span></span></code>
and <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Definition/Builder/IntegerNodeDefinition.php" title="Symfony\Component\Config\Definition\Builder\IntegerNodeDefinition::max()"><span class="pre">max()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Definition/Builder/IntegerNodeDefinition.php]</span></span></code>
- allowing to validate the value:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$rootNode</span>
    <span class="o">-&gt;</span><span class="na">children</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">integerNode</span><span class="p">(</span><span class="s1">&#39;positive_value&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">min</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">floatNode</span><span class="p">(</span><span class="s1">&#39;big_value&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">max</span><span class="p">(</span><span class="mf">5E45</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">integerNode</span><span class="p">(</span><span class="s1">&#39;value_inside_a_range&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">min</span><span class="p">(</span><span class="o">-</span><span class="mi">50</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">max</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
<span class="p">;</span>
</pre></div>
</div>
</div>
<div class="section" id="enum-nodes">
<h3>Enum Nodes</h3>
<p>Enum nodes provide a constraint to match the given input against a set of
values:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$rootNode</span>
    <span class="o">-&gt;</span><span class="na">children</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">enumNode</span><span class="p">(</span><span class="s1">&#39;delivery&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">values</span><span class="p">([</span><span class="s1">&#39;standard&#39;</span><span class="p">,</span> <span class="s1">&#39;expedited&#39;</span><span class="p">,</span> <span class="s1">&#39;priority&#39;</span><span class="p">])</span>
        <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
<span class="p">;</span>
</pre></div>
</div>
<p>This will restrict the <code class="docutils literal notranslate"><span class="pre">delivery</span></code> options to be either <code class="docutils literal notranslate"><span class="pre">standard</span></code>,
<code class="docutils literal notranslate"><span class="pre">expedited</span></code>  or <code class="docutils literal notranslate"><span class="pre">priority</span></code>.</p>
</div>
<div class="section" id="array-nodes">
<h3>Array Nodes</h3>
<p>It is possible to add a deeper level to the hierarchy, by adding an array
node. The array node itself, may have a pre-defined set of variable nodes:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$rootNode</span>
    <span class="o">-&gt;</span><span class="na">children</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">arrayNode</span><span class="p">(</span><span class="s1">&#39;connection&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">children</span><span class="p">()</span>
                <span class="o">-&gt;</span><span class="na">scalarNode</span><span class="p">(</span><span class="s1">&#39;driver&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
                <span class="o">-&gt;</span><span class="na">scalarNode</span><span class="p">(</span><span class="s1">&#39;host&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
                <span class="o">-&gt;</span><span class="na">scalarNode</span><span class="p">(</span><span class="s1">&#39;username&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
                <span class="o">-&gt;</span><span class="na">scalarNode</span><span class="p">(</span><span class="s1">&#39;password&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
            <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
<span class="p">;</span>
</pre></div>
</div>
<p>Or you may define a prototype for each node inside an array node:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$rootNode</span>
    <span class="o">-&gt;</span><span class="na">children</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">arrayNode</span><span class="p">(</span><span class="s1">&#39;connections&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">arrayPrototype</span><span class="p">()</span>
                <span class="o">-&gt;</span><span class="na">children</span><span class="p">()</span>
                    <span class="o">-&gt;</span><span class="na">scalarNode</span><span class="p">(</span><span class="s1">&#39;driver&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
                    <span class="o">-&gt;</span><span class="na">scalarNode</span><span class="p">(</span><span class="s1">&#39;host&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
                    <span class="o">-&gt;</span><span class="na">scalarNode</span><span class="p">(</span><span class="s1">&#39;username&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
                    <span class="o">-&gt;</span><span class="na">scalarNode</span><span class="p">(</span><span class="s1">&#39;password&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
                <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
            <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
<span class="p">;</span>
</pre></div>
</div>
<p>A prototype can be used to add a definition which may be repeated many times
inside the current node. According to the prototype definition in the example
above, it is possible to have multiple connection arrays (containing a <code class="docutils literal notranslate"><span class="pre">driver</span></code>,
<code class="docutils literal notranslate"><span class="pre">host</span></code>, etc.).</p>
<p>Sometimes, to improve the user experience of your application or bundle, you may
allow to use a simple string or numeric value where an array value is required.
Use the <code class="docutils literal notranslate"><span class="pre">castToArray()</span></code> helper to turn those variables into arrays:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="o">-&gt;</span><span class="na">arrayNode</span><span class="p">(</span><span class="s1">&#39;hosts&#39;</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="na">beforeNormalization</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">castToArray</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
    <span class="c1">// ...</span>
<span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
</pre></div>
</div>
</div>
<div class="section" id="array-node-options">
<h3>Array Node Options</h3>
<p>Before defining the children of an array node, you can provide options like:</p>
<dl class="simple">
<dt><code class="docutils literal notranslate"><span class="pre">useAttributeAsKey()</span></code></dt>
<dd><p>Provide the name of a child node, whose value should be used as the key in
the resulting array. This method also defines the way config array keys are
treated, as explained in the following example.</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">requiresAtLeastOneElement()</span></code></dt>
<dd><p>There should be at least one element in the array (works only when
<code class="docutils literal notranslate"><span class="pre">isRequired()</span></code> is also called).</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">addDefaultsIfNotSet()</span></code></dt>
<dd><p>If any child nodes have default values, use them if explicit values
haven’t been provided.</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">normalizeKeys(false)</span></code></dt>
<dd><p>If called (with <code class="docutils literal notranslate"><span class="pre">false</span></code>), keys with dashes are <em>not</em> normalized to underscores.
It is recommended to use this with prototype nodes where the user will define
a key-value map, to avoid an unnecessary transformation.</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">ignoreExtraKeys()</span></code></dt>
<dd><p>Allows extra config keys to be specified under an array without
throwing an exception.</p>
</dd>
</dl>
<p>A basic prototyped array configuration can be defined as follows:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$node</span>
    <span class="o">-&gt;</span><span class="na">fixXmlConfig</span><span class="p">(</span><span class="s1">&#39;driver&#39;</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="na">children</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">arrayNode</span><span class="p">(</span><span class="s1">&#39;drivers&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">scalarPrototype</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
<span class="p">;</span>
</pre></div>
</div>
<p>When using the following YAML configuration:</p>
<div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="l l-Scalar l-Scalar-Plain">drivers</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="s">&#39;mysql&#39;</span><span class="p p-Indicator">,</span> <span class="s">&#39;sqlite&#39;</span><span class="p p-Indicator">]</span>
</pre></div>
</td></tr></table></div>
<p>Or the following XML configuration:</p>
<div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="nt">&lt;driver&gt;</span>mysql<span class="nt">&lt;/driver&gt;</span>
<span class="nt">&lt;driver&gt;</span>sqlite<span class="nt">&lt;/driver&gt;</span>
</pre></div>
</td></tr></table></div>
<p>The processed configuration is:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">Array</span><span class="p">(</span>
    <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="s1">&#39;mysql&#39;</span>
    <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="s1">&#39;sqlite&#39;</span>
<span class="p">)</span>
</pre></div>
</div>
<p>A more complex example would be to define a prototyped array with children:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$node</span>
    <span class="o">-&gt;</span><span class="na">fixXmlConfig</span><span class="p">(</span><span class="s1">&#39;connection&#39;</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="na">children</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">arrayNode</span><span class="p">(</span><span class="s1">&#39;connections&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">arrayPrototype</span><span class="p">()</span>
                <span class="o">-&gt;</span><span class="na">children</span><span class="p">()</span>
                    <span class="o">-&gt;</span><span class="na">scalarNode</span><span class="p">(</span><span class="s1">&#39;table&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
                    <span class="o">-&gt;</span><span class="na">scalarNode</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
                    <span class="o">-&gt;</span><span class="na">scalarNode</span><span class="p">(</span><span class="s1">&#39;password&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
                <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
            <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
<span class="p">;</span>
</pre></div>
</div>
<p>When using the following YAML configuration:</p>
<div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="l l-Scalar l-Scalar-Plain">connections</span><span class="p p-Indicator">:</span>
    <span class="p p-Indicator">-</span> <span class="p p-Indicator">{</span> <span class="nv">table</span><span class="p p-Indicator">:</span> <span class="nv">symfony</span><span class="p p-Indicator">,</span> <span class="nv">user</span><span class="p p-Indicator">:</span> <span class="nv">root</span><span class="p p-Indicator">,</span> <span class="nv">password</span><span class="p p-Indicator">:</span> <span class="nv">~</span> <span class="p p-Indicator">}</span>
    <span class="p p-Indicator">-</span> <span class="p p-Indicator">{</span> <span class="nv">table</span><span class="p p-Indicator">:</span> <span class="nv">foo</span><span class="p p-Indicator">,</span> <span class="nv">user</span><span class="p p-Indicator">:</span> <span class="nv">root</span><span class="p p-Indicator">,</span> <span class="nv">password</span><span class="p p-Indicator">:</span> <span class="nv">pa$$</span> <span class="p p-Indicator">}</span>
</pre></div>
</td></tr></table></div>
<p>Or the following XML configuration:</p>
<div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="nt">&lt;connection</span> <span class="na">table=</span><span class="s">&quot;symfony&quot;</span> <span class="na">user=</span><span class="s">&quot;root&quot;</span> <span class="na">password=</span><span class="s">&quot;null&quot;</span><span class="nt">/&gt;</span>
<span class="nt">&lt;connection</span> <span class="na">table=</span><span class="s">&quot;foo&quot;</span> <span class="na">user=</span><span class="s">&quot;root&quot;</span> <span class="na">password=</span><span class="s">&quot;pa$$&quot;</span><span class="nt">/&gt;</span>
</pre></div>
</td></tr></table></div>
<p>The processed configuration is:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">Array</span><span class="p">(</span>
    <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">Array</span><span class="p">(</span>
        <span class="p">[</span><span class="nx">table</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="s1">&#39;symfony&#39;</span>
        <span class="p">[</span><span class="nx">user</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="s1">&#39;root&#39;</span>
        <span class="p">[</span><span class="nx">password</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">null</span>
    <span class="p">)</span>
    <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">Array</span><span class="p">(</span>
        <span class="p">[</span><span class="nx">table</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="s1">&#39;foo&#39;</span>
        <span class="p">[</span><span class="nx">user</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="s1">&#39;root&#39;</span>
        <span class="p">[</span><span class="nx">password</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="s1">&#39;pa$$&#39;</span>
    <span class="p">)</span>
<span class="p">)</span>
</pre></div>
</div>
<p>The previous output matches the expected result. However, given the configuration
tree, when using the following YAML configuration:</p>
<div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="l l-Scalar l-Scalar-Plain">connections</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">sf_connection</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">table</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">symfony</span>
        <span class="l l-Scalar l-Scalar-Plain">user</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">root</span>
        <span class="l l-Scalar l-Scalar-Plain">password</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">~</span>
    <span class="l l-Scalar l-Scalar-Plain">default</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">table</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">foo</span>
        <span class="l l-Scalar l-Scalar-Plain">user</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">root</span>
        <span class="l l-Scalar l-Scalar-Plain">password</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">pa$$</span>
</pre></div>
</td></tr></table></div>
<p>The output configuration will be exactly the same as before. In other words, the
<code class="docutils literal notranslate"><span class="pre">sf_connection</span></code> and <code class="docutils literal notranslate"><span class="pre">default</span></code> configuration keys are lost. The reason is that
the Symfony Config component treats arrays as lists by default.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>As of writing this, there is an inconsistency: if only one file provides the
configuration in question, the keys (i.e. <code class="docutils literal notranslate"><span class="pre">sf_connection</span></code> and <code class="docutils literal notranslate"><span class="pre">default</span></code>)
are <em>not</em> lost. But if more than one file provides the configuration, the keys
are lost as described above.</p>
</div>
<p>In order to maintain the array keys use the <code class="docutils literal notranslate"><span class="pre">useAttributeAsKey()</span></code> method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$node</span>
    <span class="o">-&gt;</span><span class="na">fixXmlConfig</span><span class="p">(</span><span class="s1">&#39;connection&#39;</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="na">children</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">arrayNode</span><span class="p">(</span><span class="s1">&#39;connections&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">useAttributeAsKey</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">arrayPrototype</span><span class="p">()</span>
                <span class="o">-&gt;</span><span class="na">children</span><span class="p">()</span>
                    <span class="o">-&gt;</span><span class="na">scalarNode</span><span class="p">(</span><span class="s1">&#39;table&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
                    <span class="o">-&gt;</span><span class="na">scalarNode</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
                    <span class="o">-&gt;</span><span class="na">scalarNode</span><span class="p">(</span><span class="s1">&#39;password&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
                <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
            <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
<span class="p">;</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>In YAML, the <code class="docutils literal notranslate"><span class="pre">'name'</span></code> argument of <code class="docutils literal notranslate"><span class="pre">useAttributeAsKey()</span></code> has a special
meaning and refers to the key of the map (<code class="docutils literal notranslate"><span class="pre">sf_connection</span></code> and <code class="docutils literal notranslate"><span class="pre">default</span></code>
in this example). If a child node was defined for the <code class="docutils literal notranslate"><span class="pre">connections</span></code> node
with the key <code class="docutils literal notranslate"><span class="pre">name</span></code>, then that key of the map would be lost.</p>
</div>
<p>The argument of this method (<code class="docutils literal notranslate"><span class="pre">name</span></code> in the example above) defines the name of
the attribute added to each XML node to differentiate them. Now you can use the
same YAML configuration shown before or the following XML configuration:</p>
<div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="nt">&lt;connection</span> <span class="na">name=</span><span class="s">&quot;sf_connection&quot;</span>
    <span class="na">table=</span><span class="s">&quot;symfony&quot;</span> <span class="na">user=</span><span class="s">&quot;root&quot;</span> <span class="na">password=</span><span class="s">&quot;null&quot;</span><span class="nt">/&gt;</span>
<span class="nt">&lt;connection</span> <span class="na">name=</span><span class="s">&quot;default&quot;</span>
    <span class="na">table=</span><span class="s">&quot;foo&quot;</span> <span class="na">user=</span><span class="s">&quot;root&quot;</span> <span class="na">password=</span><span class="s">&quot;pa$$&quot;</span><span class="nt">/&gt;</span>
</pre></div>
</td></tr></table></div>
<p>In both cases, the processed configuration maintains the <code class="docutils literal notranslate"><span class="pre">sf_connection</span></code> and
<code class="docutils literal notranslate"><span class="pre">default</span></code> keys:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">Array</span><span class="p">(</span>
    <span class="p">[</span><span class="nx">sf_connection</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">Array</span><span class="p">(</span>
        <span class="p">[</span><span class="nx">table</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="s1">&#39;symfony&#39;</span>
        <span class="p">[</span><span class="nx">user</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="s1">&#39;root&#39;</span>
        <span class="p">[</span><span class="nx">password</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">null</span>
    <span class="p">)</span>
    <span class="p">[</span><span class="k">default</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">Array</span><span class="p">(</span>
        <span class="p">[</span><span class="nx">table</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="s1">&#39;foo&#39;</span>
        <span class="p">[</span><span class="nx">user</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="s1">&#39;root&#39;</span>
        <span class="p">[</span><span class="nx">password</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="s1">&#39;pa$$&#39;</span>
    <span class="p">)</span>
<span class="p">)</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="default-and-required-values">
<h2>Default and Required Values</h2>
<p>For all node types, it is possible to define default values and replacement
values in case a node
has a certain value:</p>
<dl class="simple">
<dt><code class="docutils literal notranslate"><span class="pre">defaultValue()</span></code></dt>
<dd><p>Set a default value</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">isRequired()</span></code></dt>
<dd><p>Must be defined (but may be empty)</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">cannotBeEmpty()</span></code></dt>
<dd><p>May not contain an empty value</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">default*()</span></code></dt>
<dd><p>(<code class="docutils literal notranslate"><span class="pre">null</span></code>, <code class="docutils literal notranslate"><span class="pre">true</span></code>, <code class="docutils literal notranslate"><span class="pre">false</span></code>), shortcut for <code class="docutils literal notranslate"><span class="pre">defaultValue()</span></code></p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">treat*Like()</span></code></dt>
<dd><p>(<code class="docutils literal notranslate"><span class="pre">null</span></code>, <code class="docutils literal notranslate"><span class="pre">true</span></code>, <code class="docutils literal notranslate"><span class="pre">false</span></code>), provide a replacement value in case
the value is <code class="docutils literal notranslate"><span class="pre">*.</span></code></p>
</dd>
</dl>
<p>The following example shows these methods in practice:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$rootNode</span>
    <span class="o">-&gt;</span><span class="na">children</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">arrayNode</span><span class="p">(</span><span class="s1">&#39;connection&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">children</span><span class="p">()</span>
                <span class="o">-&gt;</span><span class="na">scalarNode</span><span class="p">(</span><span class="s1">&#39;driver&#39;</span><span class="p">)</span>
                    <span class="o">-&gt;</span><span class="na">isRequired</span><span class="p">()</span>
                    <span class="o">-&gt;</span><span class="na">cannotBeEmpty</span><span class="p">()</span>
                <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
                <span class="o">-&gt;</span><span class="na">scalarNode</span><span class="p">(</span><span class="s1">&#39;host&#39;</span><span class="p">)</span>
                    <span class="o">-&gt;</span><span class="na">defaultValue</span><span class="p">(</span><span class="s1">&#39;localhost&#39;</span><span class="p">)</span>
                <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
                <span class="o">-&gt;</span><span class="na">scalarNode</span><span class="p">(</span><span class="s1">&#39;username&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
                <span class="o">-&gt;</span><span class="na">scalarNode</span><span class="p">(</span><span class="s1">&#39;password&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
                <span class="o">-&gt;</span><span class="na">booleanNode</span><span class="p">(</span><span class="s1">&#39;memory&#39;</span><span class="p">)</span>
                    <span class="o">-&gt;</span><span class="na">defaultFalse</span><span class="p">()</span>
                <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
            <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">arrayNode</span><span class="p">(</span><span class="s1">&#39;settings&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">addDefaultsIfNotSet</span><span class="p">()</span>
            <span class="o">-&gt;</span><span class="na">children</span><span class="p">()</span>
                <span class="o">-&gt;</span><span class="na">scalarNode</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">)</span>
                    <span class="o">-&gt;</span><span class="na">isRequired</span><span class="p">()</span>
                    <span class="o">-&gt;</span><span class="na">cannotBeEmpty</span><span class="p">()</span>
                    <span class="o">-&gt;</span><span class="na">defaultValue</span><span class="p">(</span><span class="s1">&#39;value&#39;</span><span class="p">)</span>
                <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
            <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
<span class="p">;</span>
</pre></div>
</div>
</div>
<div class="section" id="deprecating-the-option">
<h2>Deprecating the Option</h2>
<div class="versionadded">
<p><span class="versionmodified">New in version 5.1: </span>The signature of the <code class="docutils literal notranslate"><span class="pre">setDeprecated()</span></code> method changed from
<code class="docutils literal notranslate"><span class="pre">setDeprecated(?string</span> <span class="pre">$message)</span></code> to
<code class="docutils literal notranslate"><span class="pre">setDeprecated(string</span> <span class="pre">$package,</span> <span class="pre">string</span> <span class="pre">$version,</span> <span class="pre">?string</span> <span class="pre">$message)</span></code>
in Symfony 5.1.</p>
</div>
<p>You can deprecate options using the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Definition/Builder/NodeDefinition.php" title="Symfony\Component\Config\Definition\Builder\NodeDefinition::setDeprecated()"><span class="pre">setDeprecated()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Definition/Builder/NodeDefinition.php]</span></span></code>
method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$rootNode</span>
    <span class="o">-&gt;</span><span class="na">children</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">integerNode</span><span class="p">(</span><span class="s1">&#39;old_option&#39;</span><span class="p">)</span>
            <span class="c1">// this outputs the following generic deprecation message:</span>
            <span class="c1">// Since acme/package 1.2: The child node &quot;old_option&quot; at path &quot;...&quot; is deprecated.</span>
            <span class="o">-&gt;</span><span class="na">setDeprecated</span><span class="p">(</span><span class="s1">&#39;acme/package&#39;</span><span class="p">,</span> <span class="s1">&#39;1.2&#39;</span><span class="p">)</span>

            <span class="c1">// you can also pass a custom deprecation message (%node% and %path% placeholders are available):</span>
            <span class="o">-&gt;</span><span class="na">setDeprecated</span><span class="p">(</span>
                <span class="s1">&#39;acme/package&#39;</span><span class="p">,</span>
                <span class="s1">&#39;1.2&#39;</span><span class="p">,</span>
                <span class="s1">&#39;The &quot;%node%&quot; option is deprecated. Use &quot;new_config_option&quot; instead.&#39;</span>
            <span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
<span class="p">;</span>
</pre></div>
</div>
<p>If you use the Web Debug Toolbar, these deprecation notices are shown when the
configuration is rebuilt.</p>
</div>
<div class="section" id="documenting-the-option">
<h2>Documenting the Option</h2>
<p>All options can be documented using the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Definition/Builder/NodeDefinition.php" title="Symfony\Component\Config\Definition\Builder\NodeDefinition::info()"><span class="pre">info()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Definition/Builder/NodeDefinition.php]</span></span></code>
method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$rootNode</span>
    <span class="o">-&gt;</span><span class="na">children</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">integerNode</span><span class="p">(</span><span class="s1">&#39;entries_per_page&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">info</span><span class="p">(</span><span class="s1">&#39;This value is only used for the search results page.&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">defaultValue</span><span class="p">(</span><span class="mi">25</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
<span class="p">;</span>
</pre></div>
</div>
<p>The info will be printed as a comment when dumping the configuration tree
with the <code class="docutils literal notranslate"><span class="pre">config:dump-reference</span></code> command.</p>
<p>In YAML you may have:</p>
<div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># This value is only used for the search results page.</span>
<span class="l l-Scalar l-Scalar-Plain">entries_per_page</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">25</span>
</pre></div>
</td></tr></table></div>
<p>and in XML:</p>
<div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- entries-per-page: This value is only used for the search results page. --&gt;</span>
<span class="nt">&lt;config</span> <span class="na">entries-per-page=</span><span class="s">&quot;25&quot;</span><span class="nt">/&gt;</span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="optional-sections">
<h2>Optional Sections</h2>
<p>If you have entire sections which are optional and can be enabled/disabled,
you can take advantage of the shortcut
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Definition/Builder/ArrayNodeDefinition.php" title="Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition::canBeEnabled()"><span class="pre">canBeEnabled()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Definition/Builder/ArrayNodeDefinition.php]</span></span></code>
and
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Definition/Builder/ArrayNodeDefinition.php" title="Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition::canBeDisabled()"><span class="pre">canBeDisabled()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Definition/Builder/ArrayNodeDefinition.php]</span></span></code>
methods:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$arrayNode</span>
    <span class="o">-&gt;</span><span class="na">canBeEnabled</span><span class="p">()</span>
<span class="p">;</span>

<span class="c1">// is equivalent to</span>

<span class="nv">$arrayNode</span>
    <span class="o">-&gt;</span><span class="na">treatFalseLike</span><span class="p">([</span><span class="s1">&#39;enabled&#39;</span> <span class="o">=&gt;</span> <span class="k">false</span><span class="p">])</span>
    <span class="o">-&gt;</span><span class="na">treatTrueLike</span><span class="p">([</span><span class="s1">&#39;enabled&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">])</span>
    <span class="o">-&gt;</span><span class="na">treatNullLike</span><span class="p">([</span><span class="s1">&#39;enabled&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">])</span>
    <span class="o">-&gt;</span><span class="na">children</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">booleanNode</span><span class="p">(</span><span class="s1">&#39;enabled&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">defaultFalse</span><span class="p">()</span>
<span class="p">;</span>
</pre></div>
</div>
<p>The <code class="docutils literal notranslate"><span class="pre">canBeDisabled()</span></code> method looks about the same except that the section
would be enabled by default.</p>
</div>
<div class="section" id="merging-options">
<h2>Merging Options</h2>
<p>Extra options concerning the merge process may be provided. For arrays:</p>
<dl class="simple">
<dt><code class="docutils literal notranslate"><span class="pre">performNoDeepMerging()</span></code></dt>
<dd><p>When the value is also defined in a second configuration array, don’t
try to merge an array, but overwrite it entirely</p>
</dd>
</dl>
<p>For all nodes:</p>
<dl class="simple">
<dt><code class="docutils literal notranslate"><span class="pre">cannotBeOverwritten()</span></code></dt>
<dd><p>don’t let other configuration arrays overwrite an existing value for
this node</p>
</dd>
</dl>
</div>
<div class="section" id="appending-sections">
<h2>Appending Sections</h2>
<p>If you have a complex configuration to validate, then the tree can grow to
be large and you may want to split it up into sections. You can do this
by making a section a separate node and then appending it into the main
tree with <code class="docutils literal notranslate"><span class="pre">append()</span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">public</span> <span class="k">function</span> <span class="nf">getConfigTreeBuilder</span><span class="p">()</span>
<span class="p">{</span>
    <span class="nv">$treeBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TreeBuilder</span><span class="p">(</span><span class="s1">&#39;database&#39;</span><span class="p">);</span>

    <span class="nv">$treeBuilder</span><span class="o">-&gt;</span><span class="na">getRootNode</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">children</span><span class="p">()</span>
            <span class="o">-&gt;</span><span class="na">arrayNode</span><span class="p">(</span><span class="s1">&#39;connection&#39;</span><span class="p">)</span>
                <span class="o">-&gt;</span><span class="na">children</span><span class="p">()</span>
                    <span class="o">-&gt;</span><span class="na">scalarNode</span><span class="p">(</span><span class="s1">&#39;driver&#39;</span><span class="p">)</span>
                        <span class="o">-&gt;</span><span class="na">isRequired</span><span class="p">()</span>
                        <span class="o">-&gt;</span><span class="na">cannotBeEmpty</span><span class="p">()</span>
                    <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
                    <span class="o">-&gt;</span><span class="na">scalarNode</span><span class="p">(</span><span class="s1">&#39;host&#39;</span><span class="p">)</span>
                        <span class="o">-&gt;</span><span class="na">defaultValue</span><span class="p">(</span><span class="s1">&#39;localhost&#39;</span><span class="p">)</span>
                    <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
                    <span class="o">-&gt;</span><span class="na">scalarNode</span><span class="p">(</span><span class="s1">&#39;username&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
                    <span class="o">-&gt;</span><span class="na">scalarNode</span><span class="p">(</span><span class="s1">&#39;password&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
                    <span class="o">-&gt;</span><span class="na">booleanNode</span><span class="p">(</span><span class="s1">&#39;memory&#39;</span><span class="p">)</span>
                        <span class="o">-&gt;</span><span class="na">defaultFalse</span><span class="p">()</span>
                    <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
                <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
                <span class="o">-&gt;</span><span class="na">append</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">addParametersNode</span><span class="p">())</span>
            <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
    <span class="p">;</span>

    <span class="k">return</span> <span class="nv">$treeBuilder</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">addParametersNode</span><span class="p">()</span>
<span class="p">{</span>
    <span class="nv">$treeBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TreeBuilder</span><span class="p">(</span><span class="s1">&#39;parameters&#39;</span><span class="p">);</span>

    <span class="nv">$node</span> <span class="o">=</span> <span class="nv">$treeBuilder</span><span class="o">-&gt;</span><span class="na">getRootNode</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">isRequired</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">requiresAtLeastOneElement</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">useAttributeAsKey</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">arrayPrototype</span><span class="p">()</span>
            <span class="o">-&gt;</span><span class="na">children</span><span class="p">()</span>
                <span class="o">-&gt;</span><span class="na">scalarNode</span><span class="p">(</span><span class="s1">&#39;value&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">isRequired</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
            <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
    <span class="p">;</span>

    <span class="k">return</span> <span class="nv">$node</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
<p>This is also useful to help you avoid repeating yourself if you have sections
of the config that are repeated in different places.</p>
<p>The example results in the following:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="l l-Scalar l-Scalar-Plain">database</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">connection</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">driver</span><span class="p p-Indicator">:</span>               <span class="l l-Scalar l-Scalar-Plain">~</span> <span class="c1"># Required</span>
        <span class="l l-Scalar l-Scalar-Plain">host</span><span class="p p-Indicator">:</span>                 <span class="l l-Scalar l-Scalar-Plain">localhost</span>
        <span class="l l-Scalar l-Scalar-Plain">username</span><span class="p p-Indicator">:</span>             <span class="l l-Scalar l-Scalar-Plain">~</span>
        <span class="l l-Scalar l-Scalar-Plain">password</span><span class="p p-Indicator">:</span>             <span class="l l-Scalar l-Scalar-Plain">~</span>
        <span class="l l-Scalar l-Scalar-Plain">memory</span><span class="p p-Indicator">:</span>               <span class="l l-Scalar l-Scalar-Plain">false</span>
        <span class="l l-Scalar l-Scalar-Plain">parameters</span><span class="p p-Indicator">:</span>           <span class="c1"># Required</span>

            <span class="c1"># Prototype</span>
            <span class="l l-Scalar l-Scalar-Plain">name</span><span class="p p-Indicator">:</span>
                <span class="l l-Scalar l-Scalar-Plain">value</span><span class="p p-Indicator">:</span>                <span class="l l-Scalar l-Scalar-Plain">~</span> <span class="c1"># Required</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="nt">&lt;database&gt;</span>
    <span class="c">&lt;!-- driver: Required --&gt;</span>
    <span class="nt">&lt;connection</span>
        <span class="na">driver=</span><span class="s">&quot;&quot;</span>
        <span class="na">host=</span><span class="s">&quot;localhost&quot;</span>
        <span class="na">username=</span><span class="s">&quot;&quot;</span>
        <span class="na">password=</span><span class="s">&quot;&quot;</span>
        <span class="na">memory=</span><span class="s">&quot;false&quot;</span>
    <span class="nt">&gt;</span>

        <span class="c">&lt;!-- prototype --&gt;</span>
        <span class="c">&lt;!-- value: Required --&gt;</span>
        <span class="nt">&lt;parameters</span>
            <span class="na">name=</span><span class="s">&quot;parameters name&quot;</span>
            <span class="na">value=</span><span class="s">&quot;&quot;</span>
        <span class="nt">/&gt;</span>

    <span class="nt">&lt;/connection&gt;</span>
<span class="nt">&lt;/database&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
<div class="section" id="normalization">
<span id="component-config-normalization"></span><h2>Normalization</h2>
<p>When the config files are processed they are first normalized, then merged
and finally the tree is used to validate the resulting array. The normalization
process is used to remove some of the differences that result from different
configuration formats, mainly the differences between YAML and XML.</p>
<p>The separator used in keys is typically <code class="docutils literal notranslate"><span class="pre">_</span></code> in YAML and <code class="docutils literal notranslate"><span class="pre">-</span></code> in XML.
For example, <code class="docutils literal notranslate"><span class="pre">auto_connect</span></code> in YAML and <code class="docutils literal notranslate"><span class="pre">auto-connect</span></code> in XML. The
normalization would make both of these <code class="docutils literal notranslate"><span class="pre">auto_connect</span></code>.</p>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>The target key will not be altered if it’s mixed like
<code class="docutils literal notranslate"><span class="pre">foo-bar_moo</span></code> or if it already exists.</p>
</div>
<p>Another difference between YAML and XML is in the way arrays of values may
be represented. In YAML you may have:</p>
<div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="l l-Scalar l-Scalar-Plain">twig</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">extensions</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="s">&#39;twig.extension.foo&#39;</span><span class="p p-Indicator">,</span> <span class="s">&#39;twig.extension.bar&#39;</span><span class="p p-Indicator">]</span>
</pre></div>
</td></tr></table></div>
<p>and in XML:</p>
<div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="nt">&lt;twig:config&gt;</span>
    <span class="nt">&lt;twig:extension&gt;</span>twig.extension.foo<span class="nt">&lt;/twig:extension&gt;</span>
    <span class="nt">&lt;twig:extension&gt;</span>twig.extension.bar<span class="nt">&lt;/twig:extension&gt;</span>
<span class="nt">&lt;/twig:config&gt;</span>
</pre></div>
</td></tr></table></div>
<p>This difference can be removed in normalization by pluralizing the key used
in XML. You can specify that you want a key to be pluralized in this way
with <code class="docutils literal notranslate"><span class="pre">fixXmlConfig()</span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$rootNode</span>
    <span class="o">-&gt;</span><span class="na">fixXmlConfig</span><span class="p">(</span><span class="s1">&#39;extension&#39;</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="na">children</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">arrayNode</span><span class="p">(</span><span class="s1">&#39;extensions&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">scalarPrototype</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
<span class="p">;</span>
</pre></div>
</div>
<p>If it is an irregular pluralization you can specify the plural to use as
a second argument:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$rootNode</span>
    <span class="o">-&gt;</span><span class="na">fixXmlConfig</span><span class="p">(</span><span class="s1">&#39;child&#39;</span><span class="p">,</span> <span class="s1">&#39;children&#39;</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="na">children</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">arrayNode</span><span class="p">(</span><span class="s1">&#39;children&#39;</span><span class="p">)</span>
            <span class="c1">// ...</span>
        <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
<span class="p">;</span>
</pre></div>
</div>
<p>As well as fixing this, <code class="docutils literal notranslate"><span class="pre">fixXmlConfig()</span></code> ensures that single XML elements
are still turned into an array. So you may have:</p>
<div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="nt">&lt;connection&gt;</span>default<span class="nt">&lt;/connection&gt;</span>
<span class="nt">&lt;connection&gt;</span>extra<span class="nt">&lt;/connection&gt;</span>
</pre></div>
</td></tr></table></div>
<p>and sometimes only:</p>
<div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="nt">&lt;connection&gt;</span>default<span class="nt">&lt;/connection&gt;</span>
</pre></div>
</td></tr></table></div>
<p>By default, <code class="docutils literal notranslate"><span class="pre">connection</span></code> would be an array in the first case and a string
in the second, making it difficult to validate. You can ensure it is always
an array with <code class="docutils literal notranslate"><span class="pre">fixXmlConfig()</span></code>.</p>
<p>You can further control the normalization process if you need to. For example,
you may want to allow a string to be set and used as a particular key or
several keys to be set explicitly. So that, if everything apart from <code class="docutils literal notranslate"><span class="pre">name</span></code>
is optional in this config:</p>
<div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="l l-Scalar l-Scalar-Plain">connection</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">name</span><span class="p p-Indicator">:</span>     <span class="l l-Scalar l-Scalar-Plain">my_mysql_connection</span>
    <span class="l l-Scalar l-Scalar-Plain">host</span><span class="p p-Indicator">:</span>     <span class="l l-Scalar l-Scalar-Plain">localhost</span>
    <span class="l l-Scalar l-Scalar-Plain">driver</span><span class="p p-Indicator">:</span>   <span class="l l-Scalar l-Scalar-Plain">mysql</span>
    <span class="l l-Scalar l-Scalar-Plain">username</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">user</span>
    <span class="l l-Scalar l-Scalar-Plain">password</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">pass</span>
</pre></div>
</td></tr></table></div>
<p>you can allow the following as well:</p>
<div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="l l-Scalar l-Scalar-Plain">connection</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">my_mysql_connection</span>
</pre></div>
</td></tr></table></div>
<p>By changing a string value into an associative array with <code class="docutils literal notranslate"><span class="pre">name</span></code> as the key:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$rootNode</span>
    <span class="o">-&gt;</span><span class="na">children</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">arrayNode</span><span class="p">(</span><span class="s1">&#39;connection&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">beforeNormalization</span><span class="p">()</span>
                <span class="o">-&gt;</span><span class="na">ifString</span><span class="p">()</span>
                <span class="o">-&gt;</span><span class="na">then</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$v</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">[</span><span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="nv">$v</span><span class="p">];</span> <span class="p">})</span>
            <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
            <span class="o">-&gt;</span><span class="na">children</span><span class="p">()</span>
                <span class="o">-&gt;</span><span class="na">scalarNode</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">isRequired</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
                <span class="c1">// ...</span>
            <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
<span class="p">;</span>
</pre></div>
</div>
</div>
<div class="section" id="validation-rules">
<h2>Validation Rules</h2>
<p>More advanced validation rules can be provided using the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Definition/Builder/ExprBuilder.php" title="Symfony\Component\Config\Definition\Builder\ExprBuilder"><span class="pre">ExprBuilder</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Definition/Builder/ExprBuilder.php]</span></span></code>. This
builder implements a fluent interface for a well-known control structure.
The builder is used for adding advanced validation rules to node definitions, like:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$rootNode</span>
    <span class="o">-&gt;</span><span class="na">children</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">arrayNode</span><span class="p">(</span><span class="s1">&#39;connection&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">children</span><span class="p">()</span>
                <span class="o">-&gt;</span><span class="na">scalarNode</span><span class="p">(</span><span class="s1">&#39;driver&#39;</span><span class="p">)</span>
                    <span class="o">-&gt;</span><span class="na">isRequired</span><span class="p">()</span>
                    <span class="o">-&gt;</span><span class="na">validate</span><span class="p">()</span>
                        <span class="o">-&gt;</span><span class="na">ifNotInArray</span><span class="p">([</span><span class="s1">&#39;mysql&#39;</span><span class="p">,</span> <span class="s1">&#39;sqlite&#39;</span><span class="p">,</span> <span class="s1">&#39;mssql&#39;</span><span class="p">])</span>
                        <span class="o">-&gt;</span><span class="na">thenInvalid</span><span class="p">(</span><span class="s1">&#39;Invalid database driver %s&#39;</span><span class="p">)</span>
                    <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
                <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
            <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
<span class="p">;</span>
</pre></div>
</div>
<p>A validation rule always has an “if” part. You can specify this part in
the following ways:</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">ifTrue()</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">ifString()</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">ifNull()</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">ifEmpty()</span></code> (since Symfony 3.2)</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">ifArray()</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">ifInArray()</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">ifNotInArray()</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">always()</span></code></p></li>
</ul>
<p>A validation rule also requires a “then” part:</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">then()</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">thenEmptyArray()</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">thenInvalid()</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">thenUnset()</span></code></p></li>
</ul>
<p>Usually, “then” is a closure. Its return value will be used as a new value
for the node, instead of the node’s original value.</p>
</div>
<div class="section" id="configuring-the-node-path-separator">
<h2>Configuring the Node Path Separator</h2>
<p>Consider the following config builder example:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$treeBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TreeBuilder</span><span class="p">(</span><span class="s1">&#39;database&#39;</span><span class="p">);</span>

<span class="nv">$treeBuilder</span><span class="o">-&gt;</span><span class="na">getRootNode</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">children</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">arrayNode</span><span class="p">(</span><span class="s1">&#39;connection&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">children</span><span class="p">()</span>
                <span class="o">-&gt;</span><span class="na">scalarNode</span><span class="p">(</span><span class="s1">&#39;driver&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
            <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">end</span><span class="p">()</span>
<span class="p">;</span>
</pre></div>
</div>
<p>By default, the hierarchy of nodes in a config path is defined with a dot
character (<code class="docutils literal notranslate"><span class="pre">.</span></code>):</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>

<span class="nv">$node</span> <span class="o">=</span> <span class="nv">$treeBuilder</span><span class="o">-&gt;</span><span class="na">buildTree</span><span class="p">();</span>
<span class="nv">$children</span> <span class="o">=</span> <span class="nv">$node</span><span class="o">-&gt;</span><span class="na">getChildren</span><span class="p">();</span>
<span class="nv">$path</span> <span class="o">=</span> <span class="nv">$children</span><span class="p">[</span><span class="s1">&#39;driver&#39;</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">getPath</span><span class="p">();</span>
<span class="c1">// $path = &#39;database.connection.driver&#39;</span>
</pre></div>
</div>
<p>Use the <code class="docutils literal notranslate"><span class="pre">setPathSeparator()</span></code> method on the config builder to change the path
separator:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>

<span class="nv">$treeBuilder</span><span class="o">-&gt;</span><span class="na">setPathSeparator</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">);</span>
<span class="nv">$node</span> <span class="o">=</span> <span class="nv">$treeBuilder</span><span class="o">-&gt;</span><span class="na">buildTree</span><span class="p">();</span>
<span class="nv">$children</span> <span class="o">=</span> <span class="nv">$node</span><span class="o">-&gt;</span><span class="na">getChildren</span><span class="p">();</span>
<span class="nv">$path</span> <span class="o">=</span> <span class="nv">$children</span><span class="p">[</span><span class="s1">&#39;driver&#39;</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">getPath</span><span class="p">();</span>
<span class="c1">// $path = &#39;database/connection/driver&#39;</span>
</pre></div>
</div>
</div>
<div class="section" id="processing-configuration-values">
<h2>Processing Configuration Values</h2>
<p>The <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Definition/Processor.php" title="Symfony\Component\Config\Definition\Processor"><span class="pre">Processor</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Definition/Processor.php]</span></span></code> uses the
tree as it was built using the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Definition/Builder/TreeBuilder.php" title="Symfony\Component\Config\Definition\Builder\TreeBuilder"><span class="pre">TreeBuilder</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Definition/Builder/TreeBuilder.php]</span></span></code> to
process multiple arrays of configuration values that should be merged. If
any value is not of the expected type, is mandatory and yet undefined, or
could not be validated in some other way, an exception will be thrown.
Otherwise the result is a clean array of configuration values:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Acme\DatabaseConfiguration</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Config\Definition\Processor</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Yaml\Yaml</span><span class="p">;</span>

<span class="nv">$config</span> <span class="o">=</span> <span class="nx">Yaml</span><span class="o">::</span><span class="na">parse</span><span class="p">(</span>
    <span class="nb">file_get_contents</span><span class="p">(</span><span class="no">__DIR__</span><span class="o">.</span><span class="s1">&#39;/src/Matthias/config/config.yaml&#39;</span><span class="p">)</span>
<span class="p">);</span>
<span class="nv">$extraConfig</span> <span class="o">=</span> <span class="nx">Yaml</span><span class="o">::</span><span class="na">parse</span><span class="p">(</span>
    <span class="nb">file_get_contents</span><span class="p">(</span><span class="no">__DIR__</span><span class="o">.</span><span class="s1">&#39;/src/Matthias/config/config_extra.yaml&#39;</span><span class="p">)</span>
<span class="p">);</span>

<span class="nv">$configs</span> <span class="o">=</span> <span class="p">[</span><span class="nv">$config</span><span class="p">,</span> <span class="nv">$extraConfig</span><span class="p">];</span>

<span class="nv">$processor</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Processor</span><span class="p">();</span>
<span class="nv">$databaseConfiguration</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DatabaseConfiguration</span><span class="p">();</span>
<span class="nv">$processedConfiguration</span> <span class="o">=</span> <span class="nv">$processor</span><span class="o">-&gt;</span><span class="na">processConfiguration</span><span class="p">(</span>
    <span class="nv">$databaseConfiguration</span><span class="p">,</span>
    <span class="nv">$configs</span>
<span class="p">);</span>
</pre></div>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>