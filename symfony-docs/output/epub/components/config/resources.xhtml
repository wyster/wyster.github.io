<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Loading Resources</title>
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="loading-resources">
<span id="index-0"></span><h1>Loading Resources</h1>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>The <code class="docutils literal notranslate"><span class="pre">IniFileLoader</span></code> parses the file contents using the
<code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/function.parse-ini-file.php" title="parse_ini_file"><span class="pre">parse_ini_file</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/function.parse-ini-file.php]</span></span></code> function. Therefore, you can only set
parameters to string values. To set parameters to other data types
(e.g. boolean, integer, etc), the other loaders are recommended.</p>
</div>
<p>Loaders populate the applicationâ€™s configuration from different sources
like YAML files. The Config component defines the interface for such
loaders. The <a class="reference internal" href="../dependency_injection.xhtml"><span class="doc">Dependency Injection</span></a>
and <a class="reference external" href="https://github.com/symfony/routing">Routing</a><span class="link-target"> [https://github.com/symfony/routing]</span> components come with specialized loaders for different file
formats.</p>
<div class="section" id="locating-resources">
<h2>Locating Resources</h2>
<p>Loading the configuration normally starts with a search for resources, mostly
files. This can be done with the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/FileLocator.php" title="Symfony\Component\Config\FileLocator"><span class="pre">FileLocator</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/FileLocator.php]</span></span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Config\FileLocator</span><span class="p">;</span>

<span class="nv">$configDirectories</span> <span class="o">=</span> <span class="p">[</span><span class="no">__DIR__</span><span class="o">.</span><span class="s1">&#39;/config&#39;</span><span class="p">];</span>

<span class="nv">$fileLocator</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FileLocator</span><span class="p">(</span><span class="nv">$configDirectories</span><span class="p">);</span>
<span class="nv">$yamlUserFiles</span> <span class="o">=</span> <span class="nv">$fileLocator</span><span class="o">-&gt;</span><span class="na">locate</span><span class="p">(</span><span class="s1">&#39;users.yaml&#39;</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>
</pre></div>
</div>
<p>The locator receives a collection of locations where it should look for
files. The first argument of <code class="docutils literal notranslate"><span class="pre">locate()</span></code> is the name of the file to look
for. The second argument may be the current path and when supplied, the
locator will look in this directory first. The third argument indicates
whether or not the locator should return the first file it has found or
an array containing all matches.</p>
</div>
<div class="section" id="resource-loaders">
<h2>Resource Loaders</h2>
<p>For each type of resource (YAML, XML, annotation, etc.) a loader must be
defined. Each loader should implement
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/LoaderInterface.php" title="Symfony\Component\Config\Loader\LoaderInterface"><span class="pre">LoaderInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/LoaderInterface.php]</span></span></code> or extend the
abstract <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/FileLoader.php" title="Symfony\Component\Config\Loader\FileLoader"><span class="pre">FileLoader</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/FileLoader.php]</span></span></code> class,
which allows for recursively importing other resources:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">namespace</span> <span class="nx">Acme\Config\Loader</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Config\Loader\FileLoader</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Yaml\Yaml</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">YamlUserLoader</span> <span class="k">extends</span> <span class="nx">FileLoader</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">load</span><span class="p">(</span><span class="nv">$resource</span><span class="p">,</span> <span class="nv">$type</span> <span class="o">=</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$configValues</span> <span class="o">=</span> <span class="nx">Yaml</span><span class="o">::</span><span class="na">parse</span><span class="p">(</span><span class="nb">file_get_contents</span><span class="p">(</span><span class="nv">$resource</span><span class="p">));</span>

        <span class="c1">// ... handle the config values</span>

        <span class="c1">// maybe import some other resource:</span>

        <span class="c1">// $this-&gt;import(&#39;extra_users.yaml&#39;);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">supports</span><span class="p">(</span><span class="nv">$resource</span><span class="p">,</span> <span class="nv">$type</span> <span class="o">=</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nb">is_string</span><span class="p">(</span><span class="nv">$resource</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="s1">&#39;yaml&#39;</span> <span class="o">===</span> <span class="nb">pathinfo</span><span class="p">(</span>
            <span class="nv">$resource</span><span class="p">,</span>
            <span class="nx">PATHINFO_EXTENSION</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="finding-the-right-loader">
<h2>Finding the Right Loader</h2>
<p>The <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/LoaderResolver.php" title="Symfony\Component\Config\Loader\LoaderResolver"><span class="pre">LoaderResolver</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/LoaderResolver.php]</span></span></code> receives
as its first constructor argument a collection of loaders. When a resource
(for instance an XML file) should be loaded, it loops through this collection
of loaders and returns the loader which supports this particular resource
type.</p>
<p>The <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/DelegatingLoader.php" title="Symfony\Component\Config\Loader\DelegatingLoader"><span class="pre">DelegatingLoader</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/DelegatingLoader.php]</span></span></code> makes
use of the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/LoaderResolver.php" title="Symfony\Component\Config\Loader\LoaderResolver"><span class="pre">LoaderResolver</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/LoaderResolver.php]</span></span></code>.
When it is asked to load a resource, it delegates this question to the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/LoaderResolver.php" title="Symfony\Component\Config\Loader\LoaderResolver"><span class="pre">LoaderResolver</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/LoaderResolver.php]</span></span></code>. In case the
resolver has found a suitable loader, this loader will be asked to load
the resource:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Acme\Config\Loader\YamlUserLoader</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Config\Loader\DelegatingLoader</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Config\Loader\LoaderResolver</span><span class="p">;</span>

<span class="nv">$loaderResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LoaderResolver</span><span class="p">([</span><span class="k">new</span> <span class="nx">YamlUserLoader</span><span class="p">(</span><span class="nv">$fileLocator</span><span class="p">)]);</span>
<span class="nv">$delegatingLoader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DelegatingLoader</span><span class="p">(</span><span class="nv">$loaderResolver</span><span class="p">);</span>

<span class="c1">// YamlUserLoader is used to load this resource because it supports</span>
<span class="c1">// files with the &#39;.yaml&#39; extension</span>
<span class="nv">$delegatingLoader</span><span class="o">-&gt;</span><span class="na">load</span><span class="p">(</span><span class="no">__DIR__</span><span class="o">.</span><span class="s1">&#39;/users.yaml&#39;</span><span class="p">);</span>
</pre></div>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>