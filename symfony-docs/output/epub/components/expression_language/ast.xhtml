<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Dumping and Manipulating the AST of Expressions</title>
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="dumping-and-manipulating-the-ast-of-expressions">
<span id="index-0"></span><h1>Dumping and Manipulating the AST of Expressions</h1>
<p>Manipulating or inspecting the expressions created with the ExpressionLanguage
component is difficult because they are plain strings. A better approach is to
turn those expressions into an AST. In computer science, <a class="reference external" href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">AST</a><span class="link-target"> [https://en.wikipedia.org/wiki/Abstract_syntax_tree]</span> (<em>Abstract
Syntax Tree</em>) is <em>“a tree representation of the structure of source code written
in a programming language”</em>. In Symfony, a ExpressionLanguage AST is a set of
nodes that contain PHP classes representing the given expression.</p>
<div class="section" id="dumping-the-ast">
<h2>Dumping the AST</h2>
<p>Call the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/ExpressionLanguage/ExpressionLanguage.php" title="Symfony\Component\ExpressionLanguage\ExpressionLanguage::getNodes()"><span class="pre">getNodes()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/ExpressionLanguage/ExpressionLanguage.php]</span></span></code>
method after parsing any expression to get its AST:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\ExpressionLanguage\ExpressionLanguage</span><span class="p">;</span>

<span class="nv">$ast</span> <span class="o">=</span> <span class="p">(</span><span class="k">new</span> <span class="nx">ExpressionLanguage</span><span class="p">())</span>
    <span class="o">-&gt;</span><span class="na">parse</span><span class="p">(</span><span class="s1">&#39;1 + 2&#39;</span><span class="p">,</span> <span class="p">[])</span>
    <span class="o">-&gt;</span><span class="na">getNodes</span><span class="p">()</span>
<span class="p">;</span>

<span class="c1">// dump the AST nodes for inspection</span>
<span class="nb">var_dump</span><span class="p">(</span><span class="nv">$ast</span><span class="p">);</span>

<span class="c1">// dump the AST nodes as a string representation</span>
<span class="nv">$astAsString</span> <span class="o">=</span> <span class="nv">$ast</span><span class="o">-&gt;</span><span class="na">dump</span><span class="p">();</span>
</pre></div>
</div>
</div>
<div class="section" id="manipulating-the-ast">
<h2>Manipulating the AST</h2>
<p>The nodes of the AST can also be dumped into a PHP array of nodes to allow
manipulating them. Call the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/ExpressionLanguage/ExpressionLanguage.php" title="Symfony\Component\ExpressionLanguage\ExpressionLanguage::toArray()"><span class="pre">toArray()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/ExpressionLanguage/ExpressionLanguage.php]</span></span></code>
method to turn the AST into an array:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>

<span class="nv">$astAsArray</span> <span class="o">=</span> <span class="p">(</span><span class="k">new</span> <span class="nx">ExpressionLanguage</span><span class="p">())</span>
    <span class="o">-&gt;</span><span class="na">parse</span><span class="p">(</span><span class="s1">&#39;1 + 2&#39;</span><span class="p">,</span> <span class="p">[])</span>
    <span class="o">-&gt;</span><span class="na">getNodes</span><span class="p">()</span>
    <span class="o">-&gt;</span><span class="na">toArray</span><span class="p">()</span>
<span class="p">;</span>
</pre></div>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>