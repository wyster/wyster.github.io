<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>The Workflow Component</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="the-workflow-component">
<span id="index-0"></span><h1>The Workflow Component</h1>
<blockquote>
<div><p>The Workflow component provides tools for managing a workflow or finite
state machine.</p>
</div></blockquote>
<div class="section" id="installation">
<h2>Installation</h2>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require symfony/workflow
</pre></div>
</td></tr></table></div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If you install this component outside of a Symfony application, you must
require the <code class="docutils literal notranslate"><span class="pre">vendor/autoload.php</span></code> file in your code to enable the class
autoloading mechanism provided by Composer. Read
<a class="reference internal" href="using_components.xhtml"><span class="doc">this article</span></a> for more details.</p>
</div>
</div>
<div class="section" id="creating-a-workflow">
<h2>Creating a Workflow</h2>
<p>The workflow component gives you an object oriented way to define a process
or a life cycle that your object goes through. Each step or stage in the
process is called a <em>place</em>. You do also define <em>transitions</em> that describe
the action to get from one place to another.</p>
<img alt="../_images/states_transitions.png" src="../_images/states_transitions.png" />
<p>A set of places and transitions creates a <strong>definition</strong>. A workflow needs
a <code class="docutils literal notranslate"><span class="pre">Definition</span></code> and a way to write the states to the objects (i.e. an
instance of a <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Workflow/MarkingStore/MarkingStoreInterface.php" title="Symfony\Component\Workflow\MarkingStore\MarkingStoreInterface"><span class="pre">MarkingStoreInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Workflow/MarkingStore/MarkingStoreInterface.php]</span></span></code>).</p>
<p>Consider the following example for a blog post. A post can have one of a number
of predefined statuses (<cite>draft</cite>, <cite>reviewed</cite>, <cite>rejected</cite>, <cite>published</cite>). In a workflow,
these statuses are called <strong>places</strong>. You can define the workflow like this:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Workflow\DefinitionBuilder</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Workflow\MarkingStore\MethodMarkingStore</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Workflow\Transition</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Workflow\Workflow</span><span class="p">;</span>

<span class="nv">$definitionBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DefinitionBuilder</span><span class="p">();</span>
<span class="nv">$definition</span> <span class="o">=</span> <span class="nv">$definitionBuilder</span><span class="o">-&gt;</span><span class="na">addPlaces</span><span class="p">([</span><span class="s1">&#39;draft&#39;</span><span class="p">,</span> <span class="s1">&#39;reviewed&#39;</span><span class="p">,</span> <span class="s1">&#39;rejected&#39;</span><span class="p">,</span> <span class="s1">&#39;published&#39;</span><span class="p">])</span>
    <span class="c1">// Transitions are defined with a unique name, an origin place and a destination place</span>
    <span class="o">-&gt;</span><span class="na">addTransition</span><span class="p">(</span><span class="k">new</span> <span class="nx">Transition</span><span class="p">(</span><span class="s1">&#39;to_review&#39;</span><span class="p">,</span> <span class="s1">&#39;draft&#39;</span><span class="p">,</span> <span class="s1">&#39;reviewed&#39;</span><span class="p">))</span>
    <span class="o">-&gt;</span><span class="na">addTransition</span><span class="p">(</span><span class="k">new</span> <span class="nx">Transition</span><span class="p">(</span><span class="s1">&#39;publish&#39;</span><span class="p">,</span> <span class="s1">&#39;reviewed&#39;</span><span class="p">,</span> <span class="s1">&#39;published&#39;</span><span class="p">))</span>
    <span class="o">-&gt;</span><span class="na">addTransition</span><span class="p">(</span><span class="k">new</span> <span class="nx">Transition</span><span class="p">(</span><span class="s1">&#39;reject&#39;</span><span class="p">,</span> <span class="s1">&#39;reviewed&#39;</span><span class="p">,</span> <span class="s1">&#39;rejected&#39;</span><span class="p">))</span>
    <span class="o">-&gt;</span><span class="na">build</span><span class="p">()</span>
<span class="p">;</span>

<span class="nv">$singleState</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span> <span class="c1">// true if the subject can be in only one state at a given time</span>
<span class="nv">$property</span> <span class="o">=</span> <span class="s1">&#39;currentState&#39;</span><span class="p">;</span> <span class="c1">// subject property name where the state is stored</span>
<span class="nv">$marking</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MethodMarkingStore</span><span class="p">(</span><span class="nv">$singleState</span><span class="p">,</span> <span class="nv">$property</span><span class="p">);</span>
<span class="nv">$workflow</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Workflow</span><span class="p">(</span><span class="nv">$definition</span><span class="p">,</span> <span class="nv">$marking</span><span class="p">);</span>
</pre></div>
</div>
<p>The <code class="docutils literal notranslate"><span class="pre">Workflow</span></code> can now help you to decide what <em>transitions</em> (actions) are allowed
on a blog post depending on what <em>place</em> (state) it is in. This will keep your domain
logic in one place and not spread all over your application.</p>
<p>When you define multiple workflows you should consider using a <code class="docutils literal notranslate"><span class="pre">Registry</span></code>,
which is an object that stores and provides access to different workflows.
A registry will also help you to decide if a workflow supports the object you
are trying to use it with:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Acme\Entity\BlogPost</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Acme\Entity\Newsletter</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Workflow\Registry</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Workflow\SupportStrategy\InstanceOfSupportStrategy</span><span class="p">;</span>

<span class="nv">$blogPostWorkflow</span> <span class="o">=</span> <span class="o">...</span>
<span class="nv">$newsletterWorkflow</span> <span class="o">=</span> <span class="o">...</span>

<span class="nv">$registry</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Registry</span><span class="p">();</span>
<span class="nv">$registry</span><span class="o">-&gt;</span><span class="na">addWorkflow</span><span class="p">(</span><span class="nv">$blogPostWorkflow</span><span class="p">,</span> <span class="k">new</span> <span class="nx">InstanceOfSupportStrategy</span><span class="p">(</span><span class="nx">BlogPost</span><span class="o">::</span><span class="na">class</span><span class="p">));</span>
<span class="nv">$registry</span><span class="o">-&gt;</span><span class="na">addWorkflow</span><span class="p">(</span><span class="nv">$newsletterWorkflow</span><span class="p">,</span> <span class="k">new</span> <span class="nx">InstanceOfSupportStrategy</span><span class="p">(</span><span class="nx">Newsletter</span><span class="o">::</span><span class="na">class</span><span class="p">));</span>
</pre></div>
</div>
</div>
<div class="section" id="usage">
<h2>Usage</h2>
<p>When you have configured a <code class="docutils literal notranslate"><span class="pre">Registry</span></code> with your workflows,
you can retrieve a workflow from it and use it as follows:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="c1">// Consider that $blogPost is in place &quot;draft&quot; by default</span>
<span class="nv">$blogPost</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BlogPost</span><span class="p">();</span>
<span class="nv">$workflow</span> <span class="o">=</span> <span class="nv">$registry</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="nv">$blogPost</span><span class="p">);</span>

<span class="nv">$workflow</span><span class="o">-&gt;</span><span class="na">can</span><span class="p">(</span><span class="nv">$blogPost</span><span class="p">,</span> <span class="s1">&#39;publish&#39;</span><span class="p">);</span> <span class="c1">// False</span>
<span class="nv">$workflow</span><span class="o">-&gt;</span><span class="na">can</span><span class="p">(</span><span class="nv">$blogPost</span><span class="p">,</span> <span class="s1">&#39;to_review&#39;</span><span class="p">);</span> <span class="c1">// True</span>

<span class="nv">$workflow</span><span class="o">-&gt;</span><span class="na">apply</span><span class="p">(</span><span class="nv">$blogPost</span><span class="p">,</span> <span class="s1">&#39;to_review&#39;</span><span class="p">);</span> <span class="c1">// $blogPost is now in place &quot;reviewed&quot;</span>

<span class="nv">$workflow</span><span class="o">-&gt;</span><span class="na">can</span><span class="p">(</span><span class="nv">$blogPost</span><span class="p">,</span> <span class="s1">&#39;publish&#39;</span><span class="p">);</span> <span class="c1">// True</span>
<span class="nv">$workflow</span><span class="o">-&gt;</span><span class="na">getEnabledTransitions</span><span class="p">(</span><span class="nv">$blogPost</span><span class="p">);</span> <span class="c1">// $blogPost can perform transition &quot;publish&quot; or &quot;reject&quot;</span>
</pre></div>
</div>
</div>
<div class="section" id="learn-more">
<h2>Learn more</h2>
<p>Read more about the usage of the <a class="reference internal" href="../workflow.xhtml"><span class="doc">Workflow component</span></a> inside a Symfony application.</p>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="../workflow/dumping-workflows.xhtml">How to Dump Workflows</a></li>
<li class="toctree-l1"><a class="reference internal" href="../workflow/workflow-and-state-machine.xhtml">Workflows and State Machines</a></li>
</ul>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>