<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Using the Logger</title>
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="using-the-logger">
<span id="index-0"></span><h1>Using the Logger</h1>
<p>The Console component comes with a standalone logger complying with the
<a class="reference external" href="https://www.php-fig.org/psr/psr-3/">PSR-3</a><span class="link-target"> [https://www.php-fig.org/psr/psr-3/]</span> standard. Depending on the verbosity setting, log messages will
be sent to the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Output/OutputInterface.php" title="Symfony\Component\Console\Output\OutputInterface"><span class="pre">OutputInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Output/OutputInterface.php]</span></span></code>
instance passed as a parameter to the constructor.</p>
<p>The logger does not have any external dependency except <code class="docutils literal notranslate"><span class="pre">psr/log</span></code>.
This is useful for console applications and commands needing a lightweight
PSR-3 compliant logger:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">namespace</span> <span class="nx">Acme</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Psr\Log\LoggerInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">MyDependency</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$logger</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nx">LoggerInterface</span> <span class="nv">$logger</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">logger</span> <span class="o">=</span> <span class="nv">$logger</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">doStuff</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">logger</span><span class="o">-&gt;</span><span class="na">info</span><span class="p">(</span><span class="s1">&#39;I love Tony Vairelles\&#39; hairdresser.&#39;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>You can rely on the logger to use this dependency inside a command:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">namespace</span> <span class="nx">Acme\Console\Command</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Acme\MyDependency</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Command\Command</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Input\InputInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Logger\ConsoleLogger</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Output\OutputInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">MyCommand</span> <span class="k">extends</span> <span class="nx">Command</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="k">static</span> <span class="nv">$defaultName</span> <span class="o">=</span> <span class="s1">&#39;my:command&#39;</span><span class="p">;</span>

    <span class="k">protected</span> <span class="k">function</span> <span class="nf">configure</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$this</span>
            <span class="o">-&gt;</span><span class="na">setDescription</span><span class="p">(</span>
                <span class="s1">&#39;Use an external dependency requiring a PSR-3 logger&#39;</span>
            <span class="p">)</span>
        <span class="p">;</span>
    <span class="p">}</span>

    <span class="k">protected</span> <span class="k">function</span> <span class="nf">execute</span><span class="p">(</span><span class="nx">InputInterface</span> <span class="nv">$input</span><span class="p">,</span> <span class="nx">OutputInterface</span> <span class="nv">$output</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$logger</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ConsoleLogger</span><span class="p">(</span><span class="nv">$output</span><span class="p">);</span>

        <span class="nv">$myDependency</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyDependency</span><span class="p">(</span><span class="nv">$logger</span><span class="p">);</span>
        <span class="nv">$myDependency</span><span class="o">-&gt;</span><span class="na">doStuff</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The dependency will use the instance of
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Logger/ConsoleLogger.php" title="Symfony\Component\Console\Logger\ConsoleLogger"><span class="pre">ConsoleLogger</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Logger/ConsoleLogger.php]</span></span></code> as logger.
Log messages emitted will be displayed on the console output.</p>
<div class="section" id="verbosity">
<h2>Verbosity</h2>
<p>Depending on the verbosity level that the command is run, messages may or
may not be sent to the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Output/OutputInterface.php" title="Symfony\Component\Console\Output\OutputInterface"><span class="pre">OutputInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Output/OutputInterface.php]</span></span></code>
instance.</p>
<p>By default, the console logger behaves like the
<a class="reference internal" href="../../logging/monolog_console.xhtml"><span class="doc">Monologâ€™s Console Handler</span></a>.
The association between the log level and the verbosity can be configured
through the second parameter of the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Logger/ConsoleLogger.php" title="Symfony\Component\Console\Logger\ConsoleLogger"><span class="pre">ConsoleLogger</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Logger/ConsoleLogger.php]</span></span></code>
constructor:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Psr\Log\LogLevel</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="nv">$verbosityLevelMap</span> <span class="o">=</span> <span class="p">[</span>
    <span class="nx">LogLevel</span><span class="o">::</span><span class="na">NOTICE</span> <span class="o">=&gt;</span> <span class="nx">OutputInterface</span><span class="o">::</span><span class="na">VERBOSITY_NORMAL</span><span class="p">,</span>
    <span class="nx">LogLevel</span><span class="o">::</span><span class="na">INFO</span>   <span class="o">=&gt;</span> <span class="nx">OutputInterface</span><span class="o">::</span><span class="na">VERBOSITY_NORMAL</span><span class="p">,</span>
<span class="p">];</span>

<span class="nv">$logger</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ConsoleLogger</span><span class="p">(</span><span class="nv">$output</span><span class="p">,</span> <span class="nv">$verbosityLevelMap</span><span class="p">);</span>
</pre></div>
</div>
</div>
<div class="section" id="color">
<h2>Color</h2>
<p>The logger outputs the log messages formatted with a color reflecting their
level. This behavior is configurable through the third parameter of the
constructor:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="nv">$formatLevelMap</span> <span class="o">=</span> <span class="p">[</span>
    <span class="nx">LogLevel</span><span class="o">::</span><span class="na">CRITICAL</span> <span class="o">=&gt;</span> <span class="nx">ConsoleLogger</span><span class="o">::</span><span class="na">ERROR</span><span class="p">,</span>
    <span class="nx">LogLevel</span><span class="o">::</span><span class="na">DEBUG</span>    <span class="o">=&gt;</span> <span class="nx">ConsoleLogger</span><span class="o">::</span><span class="na">INFO</span><span class="p">,</span>
<span class="p">];</span>

<span class="nv">$logger</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ConsoleLogger</span><span class="p">(</span><span class="nv">$output</span><span class="p">,</span> <span class="p">[],</span> <span class="nv">$formatLevelMap</span><span class="p">);</span>
</pre></div>
</div>
</div>
<div class="section" id="errors">
<h2>Errors</h2>
<p>The Console logger includes a <code class="docutils literal notranslate"><span class="pre">hasErrored()</span></code> method which returns <code class="docutils literal notranslate"><span class="pre">true</span></code> as
soon as any error message has been logged during the execution of the command.
This is useful to decide which status code to return as the result of executing
the command.</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>