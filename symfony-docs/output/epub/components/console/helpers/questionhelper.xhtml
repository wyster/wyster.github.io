<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Question Helper</title>
    <link rel="stylesheet" href="../../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="question-helper">
<span id="index-0"></span><h1>Question Helper</h1>
<p>The <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/QuestionHelper.php" title="Symfony\Component\Console\Helper\QuestionHelper"><span class="pre">QuestionHelper</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/QuestionHelper.php]</span></span></code> provides
functions to ask the user for more information. It is included in the default
helper set, which you can get by calling
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Command/Command.php" title="Symfony\Component\Console\Command\Command::getHelperSet()"><span class="pre">getHelperSet()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Command/Command.php]</span></span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$helper</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getHelper</span><span class="p">(</span><span class="s1">&#39;question&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>The Question Helper has a single method
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/QuestionHelper.php" title="Symfony\Component\Console\Helper\QuestionHelper::ask()"><span class="pre">ask()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/QuestionHelper.php]</span></span></code> that needs an
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Input/InputInterface.php" title="Symfony\Component\Console\Input\InputInterface"><span class="pre">InputInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Input/InputInterface.php]</span></span></code> instance as the
first argument, an <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Output/OutputInterface.php" title="Symfony\Component\Console\Output\OutputInterface"><span class="pre">OutputInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Output/OutputInterface.php]</span></span></code>
instance as the second argument and a
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Question/Question.php" title="Symfony\Component\Console\Question\Question"><span class="pre">Question</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Question/Question.php]</span></span></code> as last argument.</p>
<div class="section" id="asking-the-user-for-confirmation">
<h2>Asking the User for Confirmation</h2>
<p>Suppose you want to confirm an action before actually executing it. Add
the following to your command:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Command\Command</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Input\InputInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Output\OutputInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Question\ConfirmationQuestion</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">YourCommand</span> <span class="k">extends</span> <span class="nx">Command</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">execute</span><span class="p">(</span><span class="nx">InputInterface</span> <span class="nv">$input</span><span class="p">,</span> <span class="nx">OutputInterface</span> <span class="nv">$output</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$helper</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getHelper</span><span class="p">(</span><span class="s1">&#39;question&#39;</span><span class="p">);</span>
        <span class="nv">$question</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ConfirmationQuestion</span><span class="p">(</span><span class="s1">&#39;Continue with this action?&#39;</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$helper</span><span class="o">-&gt;</span><span class="na">ask</span><span class="p">(</span><span class="nv">$input</span><span class="p">,</span> <span class="nv">$output</span><span class="p">,</span> <span class="nv">$question</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">Command</span><span class="o">::</span><span class="na">SUCCESS</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>In this case, the user will be asked “Continue with this action?”. If the user
answers with <code class="docutils literal notranslate"><span class="pre">y</span></code> it returns <code class="docutils literal notranslate"><span class="pre">true</span></code> or <code class="docutils literal notranslate"><span class="pre">false</span></code> if they answer with <code class="docutils literal notranslate"><span class="pre">n</span></code>.
The second argument to
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Question/ConfirmationQuestion.php" title="Symfony\Component\Console\Question\ConfirmationQuestion::__construct()"><span class="pre">__construct()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Question/ConfirmationQuestion.php]</span></span></code>
is the default value to return if the user doesn’t enter any valid input. If
the second argument is not provided, <code class="docutils literal notranslate"><span class="pre">true</span></code> is assumed.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>You can customize the regex used to check if the answer means “yes” in the
third argument of the constructor. For instance, to allow anything that
starts with either <code class="docutils literal notranslate"><span class="pre">y</span></code> or <code class="docutils literal notranslate"><span class="pre">j</span></code>, you would set it to:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$question</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ConfirmationQuestion</span><span class="p">(</span>
    <span class="s1">&#39;Continue with this action?&#39;</span><span class="p">,</span>
    <span class="k">false</span><span class="p">,</span>
    <span class="s1">&#39;/^(y|j)/i&#39;</span>
<span class="p">);</span>
</pre></div>
</div>
<p>The regex defaults to <code class="docutils literal notranslate"><span class="pre">/^y/i</span></code>.</p>
</div>
</div>
<div class="section" id="asking-the-user-for-information">
<h2>Asking the User for Information</h2>
<p>You can also ask a question with more than a simple yes/no answer. For instance,
if you want to know a bundle name, you can add this to your command:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Console\Question\Question</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">execute</span><span class="p">(</span><span class="nx">InputInterface</span> <span class="nv">$input</span><span class="p">,</span> <span class="nx">OutputInterface</span> <span class="nv">$output</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="nv">$question</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Question</span><span class="p">(</span><span class="s1">&#39;Please enter the name of the bundle&#39;</span><span class="p">,</span> <span class="s1">&#39;AcmeDemoBundle&#39;</span><span class="p">);</span>

    <span class="nv">$bundleName</span> <span class="o">=</span> <span class="nv">$helper</span><span class="o">-&gt;</span><span class="na">ask</span><span class="p">(</span><span class="nv">$input</span><span class="p">,</span> <span class="nv">$output</span><span class="p">,</span> <span class="nv">$question</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The user will be asked “Please enter the name of the bundle”. They can type
some name which will be returned by the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/QuestionHelper.php" title="Symfony\Component\Console\Helper\QuestionHelper::ask()"><span class="pre">ask()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/QuestionHelper.php]</span></span></code> method.
If they leave it empty, the default value (<code class="docutils literal notranslate"><span class="pre">AcmeDemoBundle</span></code> here) is returned.</p>
<div class="section" id="let-the-user-choose-from-a-list-of-answers">
<h3>Let the User Choose from a List of Answers</h3>
<p>If you have a predefined set of answers the user can choose from, you
could use a <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Question/ChoiceQuestion.php" title="Symfony\Component\Console\Question\ChoiceQuestion"><span class="pre">ChoiceQuestion</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Question/ChoiceQuestion.php]</span></span></code>
which makes sure that the user can only enter a valid string
from a predefined list:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Console\Question\ChoiceQuestion</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">execute</span><span class="p">(</span><span class="nx">InputInterface</span> <span class="nv">$input</span><span class="p">,</span> <span class="nx">OutputInterface</span> <span class="nv">$output</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="nv">$helper</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getHelper</span><span class="p">(</span><span class="s1">&#39;question&#39;</span><span class="p">);</span>
    <span class="nv">$question</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ChoiceQuestion</span><span class="p">(</span>
        <span class="s1">&#39;Please select your favorite color (defaults to red)&#39;</span><span class="p">,</span>
        <span class="c1">// choices can also be PHP objects that implement __toString() method</span>
        <span class="p">[</span><span class="s1">&#39;red&#39;</span><span class="p">,</span> <span class="s1">&#39;blue&#39;</span><span class="p">,</span> <span class="s1">&#39;yellow&#39;</span><span class="p">],</span>
        <span class="mi">0</span>
    <span class="p">);</span>
    <span class="nv">$question</span><span class="o">-&gt;</span><span class="na">setErrorMessage</span><span class="p">(</span><span class="s1">&#39;Color %s is invalid.&#39;</span><span class="p">);</span>

    <span class="nv">$color</span> <span class="o">=</span> <span class="nv">$helper</span><span class="o">-&gt;</span><span class="na">ask</span><span class="p">(</span><span class="nv">$input</span><span class="p">,</span> <span class="nv">$output</span><span class="p">,</span> <span class="nv">$question</span><span class="p">);</span>
    <span class="nv">$output</span><span class="o">-&gt;</span><span class="na">writeln</span><span class="p">(</span><span class="s1">&#39;You have just selected: &#39;</span><span class="o">.</span><span class="nv">$color</span><span class="p">);</span>

    <span class="c1">// ... do something with the color</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 5.2: </span>Support for using PHP objects as choice values was introduced in Symfony 5.2.</p>
</div>
<p>The option which should be selected by default is provided with the third
argument of the constructor. The default is <code class="docutils literal notranslate"><span class="pre">null</span></code>, which means that no
option is the default one.</p>
<p>If the user enters an invalid string, an error message is shown and the user
is asked to provide the answer another time, until they enter a valid string
or reach the maximum number of attempts. The default value for the maximum number
of attempts is <code class="docutils literal notranslate"><span class="pre">null</span></code>, which means infinite number of attempts. You can define
your own error message using
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Question/ChoiceQuestion.php" title="Symfony\Component\Console\Question\ChoiceQuestion::setErrorMessage()"><span class="pre">setErrorMessage()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Question/ChoiceQuestion.php]</span></span></code>.</p>
<div class="section" id="multiple-choices">
<h4>Multiple Choices</h4>
<p>Sometimes, multiple answers can be given. The <code class="docutils literal notranslate"><span class="pre">ChoiceQuestion</span></code> provides this
feature using comma separated values. This is disabled by default, to enable
this use <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Question/ChoiceQuestion.php" title="Symfony\Component\Console\Question\ChoiceQuestion::setMultiselect()"><span class="pre">setMultiselect()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Question/ChoiceQuestion.php]</span></span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Console\Question\ChoiceQuestion</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">execute</span><span class="p">(</span><span class="nx">InputInterface</span> <span class="nv">$input</span><span class="p">,</span> <span class="nx">OutputInterface</span> <span class="nv">$output</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="nv">$helper</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getHelper</span><span class="p">(</span><span class="s1">&#39;question&#39;</span><span class="p">);</span>
    <span class="nv">$question</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ChoiceQuestion</span><span class="p">(</span>
        <span class="s1">&#39;Please select your favorite colors (defaults to red and blue)&#39;</span><span class="p">,</span>
        <span class="p">[</span><span class="s1">&#39;red&#39;</span><span class="p">,</span> <span class="s1">&#39;blue&#39;</span><span class="p">,</span> <span class="s1">&#39;yellow&#39;</span><span class="p">],</span>
        <span class="s1">&#39;0,1&#39;</span>
    <span class="p">);</span>
    <span class="nv">$question</span><span class="o">-&gt;</span><span class="na">setMultiselect</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>

    <span class="nv">$colors</span> <span class="o">=</span> <span class="nv">$helper</span><span class="o">-&gt;</span><span class="na">ask</span><span class="p">(</span><span class="nv">$input</span><span class="p">,</span> <span class="nv">$output</span><span class="p">,</span> <span class="nv">$question</span><span class="p">);</span>
    <span class="nv">$output</span><span class="o">-&gt;</span><span class="na">writeln</span><span class="p">(</span><span class="s1">&#39;You have just selected: &#39;</span> <span class="o">.</span> <span class="nb">implode</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">,</span> <span class="nv">$colors</span><span class="p">));</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Now, when the user enters <code class="docutils literal notranslate"><span class="pre">1,2</span></code>, the result will be:
<code class="docutils literal notranslate"><span class="pre">You</span> <span class="pre">have</span> <span class="pre">just</span> <span class="pre">selected:</span> <span class="pre">blue,</span> <span class="pre">yellow</span></code>.</p>
<p>If the user does not enter anything, the result will be:
<code class="docutils literal notranslate"><span class="pre">You</span> <span class="pre">have</span> <span class="pre">just</span> <span class="pre">selected:</span> <span class="pre">red,</span> <span class="pre">blue</span></code>.</p>
</div>
</div>
<div class="section" id="autocompletion">
<h3>Autocompletion</h3>
<p>You can also specify an array of potential answers for a given question. These
will be autocompleted as the user types:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Console\Question\Question</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">execute</span><span class="p">(</span><span class="nx">InputInterface</span> <span class="nv">$input</span><span class="p">,</span> <span class="nx">OutputInterface</span> <span class="nv">$output</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="nv">$helper</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getHelper</span><span class="p">(</span><span class="s1">&#39;question&#39;</span><span class="p">);</span>

    <span class="nv">$bundles</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;AcmeDemoBundle&#39;</span><span class="p">,</span> <span class="s1">&#39;AcmeBlogBundle&#39;</span><span class="p">,</span> <span class="s1">&#39;AcmeStoreBundle&#39;</span><span class="p">];</span>
    <span class="nv">$question</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Question</span><span class="p">(</span><span class="s1">&#39;Please enter the name of a bundle&#39;</span><span class="p">,</span> <span class="s1">&#39;FooBundle&#39;</span><span class="p">);</span>
    <span class="nv">$question</span><span class="o">-&gt;</span><span class="na">setAutocompleterValues</span><span class="p">(</span><span class="nv">$bundles</span><span class="p">);</span>

    <span class="nv">$bundleName</span> <span class="o">=</span> <span class="nv">$helper</span><span class="o">-&gt;</span><span class="na">ask</span><span class="p">(</span><span class="nv">$input</span><span class="p">,</span> <span class="nv">$output</span><span class="p">,</span> <span class="nv">$question</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>In more complex use cases, it may be necessary to generate suggestions on the
fly, for instance if you wish to autocomplete a file path. In that case, you can
provide a callback function to dynamically generate suggestions:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Console\Question\Question</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">execute</span><span class="p">(</span><span class="nx">InputInterface</span> <span class="nv">$input</span><span class="p">,</span> <span class="nx">OutputInterface</span> <span class="nv">$output</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$helper</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getHelper</span><span class="p">(</span><span class="s1">&#39;question&#39;</span><span class="p">);</span>

    <span class="c1">// This function is called whenever the input changes and new</span>
    <span class="c1">// suggestions are needed.</span>
    <span class="nv">$callback</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="nx">string</span> <span class="nv">$userInput</span><span class="p">)</span><span class="o">:</span> <span class="k">array</span> <span class="p">{</span>
        <span class="c1">// Strip any characters from the last slash to the end of the string</span>
        <span class="c1">// to keep only the last directory and generate suggestions for it</span>
        <span class="nv">$inputPath</span> <span class="o">=</span> <span class="nb">preg_replace</span><span class="p">(</span><span class="s1">&#39;%(/|^)[^/]*$%&#39;</span><span class="p">,</span> <span class="s1">&#39;$1&#39;</span><span class="p">,</span> <span class="nv">$userInput</span><span class="p">);</span>
        <span class="nv">$inputPath</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span> <span class="o">===</span> <span class="nv">$inputPath</span> <span class="o">?</span> <span class="s1">&#39;.&#39;</span> <span class="o">:</span> <span class="nv">$inputPath</span><span class="p">;</span>

        <span class="c1">// CAUTION - this example code allows unrestricted access to the</span>
        <span class="c1">// entire filesystem. In real applications, restrict the directories</span>
        <span class="c1">// where files and dirs can be found</span>
        <span class="nv">$foundFilesAndDirs</span> <span class="o">=</span> <span class="o">@</span><span class="nb">scandir</span><span class="p">(</span><span class="nv">$inputPath</span><span class="p">)</span> <span class="o">?:</span> <span class="p">[];</span>

        <span class="k">return</span> <span class="nb">array_map</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$dirOrFile</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$inputPath</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nv">$inputPath</span><span class="o">.</span><span class="nv">$dirOrFile</span><span class="p">;</span>
        <span class="p">},</span> <span class="nv">$foundFilesAndDirs</span><span class="p">);</span>
    <span class="p">};</span>

    <span class="nv">$question</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Question</span><span class="p">(</span><span class="s1">&#39;Please provide the full path of a file to parse&#39;</span><span class="p">);</span>
    <span class="nv">$question</span><span class="o">-&gt;</span><span class="na">setAutocompleterCallback</span><span class="p">(</span><span class="nv">$callback</span><span class="p">);</span>

    <span class="nv">$filePath</span> <span class="o">=</span> <span class="nv">$helper</span><span class="o">-&gt;</span><span class="na">ask</span><span class="p">(</span><span class="nv">$input</span><span class="p">,</span> <span class="nv">$output</span><span class="p">,</span> <span class="nv">$question</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="do-not-trim-the-answer">
<h3>Do not Trim the Answer</h3>
<p>You can also specify if you want to not trim the answer by setting it directly with
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Question/Question.php" title="Symfony\Component\Console\Question\Question::setTrimmable()"><span class="pre">setTrimmable()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Question/Question.php]</span></span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Console\Question\Question</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">execute</span><span class="p">(</span><span class="nx">InputInterface</span> <span class="nv">$input</span><span class="p">,</span> <span class="nx">OutputInterface</span> <span class="nv">$output</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="nv">$helper</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getHelper</span><span class="p">(</span><span class="s1">&#39;question&#39;</span><span class="p">);</span>

    <span class="nv">$question</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Question</span><span class="p">(</span><span class="s1">&#39;What is the name of the child?&#39;</span><span class="p">);</span>
    <span class="nv">$question</span><span class="o">-&gt;</span><span class="na">setTrimmable</span><span class="p">(</span><span class="k">false</span><span class="p">);</span>
    <span class="c1">// if the users inputs &#39;elsa &#39; it will not be trimmed and you will get &#39;elsa &#39; as value</span>
    <span class="nv">$name</span> <span class="o">=</span> <span class="nv">$helper</span><span class="o">-&gt;</span><span class="na">ask</span><span class="p">(</span><span class="nv">$input</span><span class="p">,</span> <span class="nv">$output</span><span class="p">,</span> <span class="nv">$question</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="accept-multiline-answers">
<h3>Accept Multiline Answers</h3>
<div class="versionadded">
<p><span class="versionmodified">New in version 5.2: </span>The <code class="docutils literal notranslate"><span class="pre">setMultiline()</span></code> and <code class="docutils literal notranslate"><span class="pre">isMultiline()</span></code> methods were introduced in
Symfony 5.2.</p>
</div>
<p>By default, the question helper stops reading user input when it receives a newline
character (i.e., when the user hits <code class="docutils literal notranslate"><span class="pre">ENTER</span></code> once). However, you may specify that
the response to a question should allow multiline answers by passing <code class="docutils literal notranslate"><span class="pre">true</span></code> to
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Question/Question.php" title="Symfony\Component\Console\Question\Question::setMultiline()"><span class="pre">setMultiline()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Question/Question.php]</span></span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Console\Question\Question</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">execute</span><span class="p">(</span><span class="nx">InputInterface</span> <span class="nv">$input</span><span class="p">,</span> <span class="nx">OutputInterface</span> <span class="nv">$output</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="nv">$helper</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getHelper</span><span class="p">(</span><span class="s1">&#39;question&#39;</span><span class="p">);</span>

    <span class="nv">$question</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Question</span><span class="p">(</span><span class="s1">&#39;How do you solve world peace?&#39;</span><span class="p">);</span>
    <span class="nv">$question</span><span class="o">-&gt;</span><span class="na">setMultiline</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>

    <span class="nv">$answer</span> <span class="o">=</span> <span class="nv">$helper</span><span class="o">-&gt;</span><span class="na">ask</span><span class="p">(</span><span class="nv">$input</span><span class="p">,</span> <span class="nv">$output</span><span class="p">,</span> <span class="nv">$question</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Multiline questions stop reading user input after receiving an end-of-transmission
control character (<code class="docutils literal notranslate"><span class="pre">Ctrl-D</span></code> on Unix systems or <code class="docutils literal notranslate"><span class="pre">Ctrl-Z</span></code> on Windows).</p>
</div>
<div class="section" id="hiding-the-user-s-response">
<h3>Hiding the User’s Response</h3>
<p>You can also ask a question and hide the response. This is particularly
convenient for passwords:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Console\Question\Question</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">execute</span><span class="p">(</span><span class="nx">InputInterface</span> <span class="nv">$input</span><span class="p">,</span> <span class="nx">OutputInterface</span> <span class="nv">$output</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="nv">$helper</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getHelper</span><span class="p">(</span><span class="s1">&#39;question&#39;</span><span class="p">);</span>

    <span class="nv">$question</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Question</span><span class="p">(</span><span class="s1">&#39;What is the database password?&#39;</span><span class="p">);</span>
    <span class="nv">$question</span><span class="o">-&gt;</span><span class="na">setHidden</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
    <span class="nv">$question</span><span class="o">-&gt;</span><span class="na">setHiddenFallback</span><span class="p">(</span><span class="k">false</span><span class="p">);</span>

    <span class="nv">$password</span> <span class="o">=</span> <span class="nv">$helper</span><span class="o">-&gt;</span><span class="na">ask</span><span class="p">(</span><span class="nv">$input</span><span class="p">,</span> <span class="nv">$output</span><span class="p">,</span> <span class="nv">$question</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>When you ask for a hidden response, Symfony will use either a binary, change
<code class="docutils literal notranslate"><span class="pre">stty</span></code> mode or use another trick to hide the response. If none is available,
it will fallback and allow the response to be visible unless you set this
behavior to <code class="docutils literal notranslate"><span class="pre">false</span></code> using
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Question/Question.php" title="Symfony\Component\Console\Question\Question::setHiddenFallback()"><span class="pre">setHiddenFallback()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Question/Question.php]</span></span></code>
like in the example above. In this case, a <code class="docutils literal notranslate"><span class="pre">RuntimeException</span></code>
would be thrown.</p>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The <code class="docutils literal notranslate"><span class="pre">stty</span></code> command is used to get and set properties of the command line
(such as getting the number of rows and columns or hiding the input text).
On Windows systems, this <code class="docutils literal notranslate"><span class="pre">stty</span></code> command may generate gibberish output and
mangle the input text. If that’s your case, disable it with this command:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Console\Helper\QuestionHelper</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Question\ChoiceQuestion</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">execute</span><span class="p">(</span><span class="nx">InputInterface</span> <span class="nv">$input</span><span class="p">,</span> <span class="nx">OutputInterface</span> <span class="nv">$output</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="nv">$helper</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getHelper</span><span class="p">(</span><span class="s1">&#39;question&#39;</span><span class="p">);</span>
    <span class="nx">QuestionHelper</span><span class="o">::</span><span class="na">disableStty</span><span class="p">();</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
</div>
</div>
<div class="section" id="normalizing-the-answer">
<h2>Normalizing the Answer</h2>
<p>Before validating the answer, you can “normalize” it to fix minor errors or
tweak it as needed. For instance, in a previous example you asked for the bundle
name. In case the user adds white spaces around the name by mistake, you can
trim the name before validating it. To do so, configure a normalizer using the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Question/Question.php" title="Symfony\Component\Console\Question\Question::setNormalizer()"><span class="pre">setNormalizer()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Question/Question.php]</span></span></code>
method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Console\Question\Question</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">execute</span><span class="p">(</span><span class="nx">InputInterface</span> <span class="nv">$input</span><span class="p">,</span> <span class="nx">OutputInterface</span> <span class="nv">$output</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="nv">$helper</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getHelper</span><span class="p">(</span><span class="s1">&#39;question&#39;</span><span class="p">);</span>

    <span class="nv">$question</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Question</span><span class="p">(</span><span class="s1">&#39;Please enter the name of the bundle&#39;</span><span class="p">,</span> <span class="s1">&#39;AcmeDemoBundle&#39;</span><span class="p">);</span>
    <span class="nv">$question</span><span class="o">-&gt;</span><span class="na">setNormalizer</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// $value can be null here</span>
        <span class="k">return</span> <span class="nv">$value</span> <span class="o">?</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
    <span class="p">});</span>

    <span class="nv">$bundleName</span> <span class="o">=</span> <span class="nv">$helper</span><span class="o">-&gt;</span><span class="na">ask</span><span class="p">(</span><span class="nv">$input</span><span class="p">,</span> <span class="nv">$output</span><span class="p">,</span> <span class="nv">$question</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>The normalizer is called first and the returned value is used as the input
of the validator. If the answer is invalid, don’t throw exceptions in the
normalizer and let the validator handle those errors.</p>
</div>
</div>
<div class="section" id="validating-the-answer">
<h2>Validating the Answer</h2>
<p>You can even validate the answer. For instance, in a previous example you asked
for the bundle name. Following the Symfony naming conventions, it should
be suffixed with <code class="docutils literal notranslate"><span class="pre">Bundle</span></code>. You can validate that by using the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Question/Question.php" title="Symfony\Component\Console\Question\Question::setValidator()"><span class="pre">setValidator()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Question/Question.php]</span></span></code>
method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Console\Question\Question</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">execute</span><span class="p">(</span><span class="nx">InputInterface</span> <span class="nv">$input</span><span class="p">,</span> <span class="nx">OutputInterface</span> <span class="nv">$output</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="nv">$helper</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getHelper</span><span class="p">(</span><span class="s1">&#39;question&#39;</span><span class="p">);</span>

    <span class="nv">$question</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Question</span><span class="p">(</span><span class="s1">&#39;Please enter the name of the bundle&#39;</span><span class="p">,</span> <span class="s1">&#39;AcmeDemoBundle&#39;</span><span class="p">);</span>
    <span class="nv">$question</span><span class="o">-&gt;</span><span class="na">setValidator</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$answer</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">is_string</span><span class="p">(</span><span class="nv">$answer</span><span class="p">)</span> <span class="o">||</span> <span class="s1">&#39;Bundle&#39;</span> <span class="o">!==</span> <span class="nb">substr</span><span class="p">(</span><span class="nv">$answer</span><span class="p">,</span> <span class="o">-</span><span class="mi">6</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nx">\RuntimeException</span><span class="p">(</span>
                <span class="s1">&#39;The name of the bundle should be suffixed with \&#39;Bundle\&#39;&#39;</span>
            <span class="p">);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nv">$answer</span><span class="p">;</span>
    <span class="p">});</span>
    <span class="nv">$question</span><span class="o">-&gt;</span><span class="na">setMaxAttempts</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>

    <span class="nv">$bundleName</span> <span class="o">=</span> <span class="nv">$helper</span><span class="o">-&gt;</span><span class="na">ask</span><span class="p">(</span><span class="nv">$input</span><span class="p">,</span> <span class="nv">$output</span><span class="p">,</span> <span class="nv">$question</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The <code class="docutils literal notranslate"><span class="pre">$validator</span></code> is a callback which handles the validation. It should
throw an exception if there is something wrong. The exception message is displayed
in the console, so it is a good practice to put some useful information in it. The
callback function should also return the value of the user’s input if the validation
was successful.</p>
<p>You can set the max number of times to ask with the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Question/Question.php" title="Symfony\Component\Console\Question\Question::setMaxAttempts()"><span class="pre">setMaxAttempts()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Question/Question.php]</span></span></code> method.
If you reach this max number it will use the default value. Using <code class="docutils literal notranslate"><span class="pre">null</span></code> means
the amount of attempts is infinite. The user will be asked as long as they provide an
invalid answer and will only be able to proceed if their input is valid.</p>
<div class="section" id="validating-a-hidden-response">
<h3>Validating a Hidden Response</h3>
<p>You can also use a validator with a hidden question:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Console\Question\Question</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">execute</span><span class="p">(</span><span class="nx">InputInterface</span> <span class="nv">$input</span><span class="p">,</span> <span class="nx">OutputInterface</span> <span class="nv">$output</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="nv">$helper</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getHelper</span><span class="p">(</span><span class="s1">&#39;question&#39;</span><span class="p">);</span>

    <span class="nv">$question</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Question</span><span class="p">(</span><span class="s1">&#39;Please enter your password&#39;</span><span class="p">);</span>
    <span class="nv">$question</span><span class="o">-&gt;</span><span class="na">setValidator</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">trim</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nx">\Exception</span><span class="p">(</span><span class="s1">&#39;The password cannot be empty&#39;</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nv">$value</span><span class="p">;</span>
    <span class="p">});</span>
    <span class="nv">$question</span><span class="o">-&gt;</span><span class="na">setHidden</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
    <span class="nv">$question</span><span class="o">-&gt;</span><span class="na">setMaxAttempts</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span>

    <span class="nv">$password</span> <span class="o">=</span> <span class="nv">$helper</span><span class="o">-&gt;</span><span class="na">ask</span><span class="p">(</span><span class="nv">$input</span><span class="p">,</span> <span class="nv">$output</span><span class="p">,</span> <span class="nv">$question</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="testing-a-command-that-expects-input">
<h2>Testing a Command that Expects Input</h2>
<p>If you want to write a unit test for a command which expects some kind of input
from the command line, you need to set the inputs that the command expects:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Console\Helper\HelperSet</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Helper\QuestionHelper</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Tester\CommandTester</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">testExecute</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="nv">$commandTester</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CommandTester</span><span class="p">(</span><span class="nv">$command</span><span class="p">);</span>

    <span class="c1">// Equals to a user inputting &quot;Test&quot; and hitting ENTER</span>
    <span class="nv">$commandTester</span><span class="o">-&gt;</span><span class="na">setInputs</span><span class="p">([</span><span class="s1">&#39;Test&#39;</span><span class="p">]);</span>

    <span class="c1">// Equals to a user inputting &quot;This&quot;, &quot;That&quot; and hitting ENTER</span>
    <span class="c1">// This can be used for answering two separated questions for instance</span>
    <span class="nv">$commandTester</span><span class="o">-&gt;</span><span class="na">setInputs</span><span class="p">([</span><span class="s1">&#39;This&#39;</span><span class="p">,</span> <span class="s1">&#39;That&#39;</span><span class="p">]);</span>

    <span class="c1">// For simulating a positive answer to a confirmation question, adding an</span>
    <span class="c1">// additional input saying &quot;yes&quot; will work</span>
    <span class="nv">$commandTester</span><span class="o">-&gt;</span><span class="na">setInputs</span><span class="p">([</span><span class="s1">&#39;yes&#39;</span><span class="p">]);</span>

    <span class="nv">$commandTester</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">([</span><span class="s1">&#39;command&#39;</span> <span class="o">=&gt;</span> <span class="nv">$command</span><span class="o">-&gt;</span><span class="na">getName</span><span class="p">()]);</span>

    <span class="c1">// $this-&gt;assertRegExp(&#39;/.../&#39;, $commandTester-&gt;getDisplay());</span>
<span class="p">}</span>
</pre></div>
</div>
<p>By calling <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Tester/CommandTester.php" title="Symfony\Component\Console\Tester\CommandTester::setInputs()"><span class="pre">setInputs()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Tester/CommandTester.php]</span></span></code>,
you imitate what the console would do internally with all user input through the CLI.
This method takes an array as only argument with, for each input that the command expects,
a string representing what the user would have typed.
This way you can test any user interaction (even complex ones) by passing the appropriate inputs.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Tester/CommandTester.php" title="Symfony\Component\Console\Tester\CommandTester"><span class="pre">CommandTester</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Tester/CommandTester.php]</span></span></code> automatically
simulates a user hitting <code class="docutils literal notranslate"><span class="pre">ENTER</span></code> after each input, no need for passing
an additional input.</p>
</div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>On Windows systems Symfony uses a special binary to implement hidden
questions. This means that those questions don’t use the default <code class="docutils literal notranslate"><span class="pre">Input</span></code>
console object and therefore you can’t test them on Windows.</p>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>