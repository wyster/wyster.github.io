<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Progress Bar</title>
    <link rel="stylesheet" href="../../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="progress-bar">
<span id="index-0"></span><h1>Progress Bar</h1>
<p>When executing longer-running commands, it may be helpful to show progress
information, which updates as your command runs:</p>
<img alt="../../../_images/progressbar.gif" src="../../../_images/progressbar.gif" />
<p>To display progress details, use the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/ProgressBar.php" title="Symfony\Component\Console\Helper\ProgressBar"><span class="pre">ProgressBar</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/ProgressBar.php]</span></span></code>, pass it a total
number of units, and advance the progress as the command executes:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Console\Helper\ProgressBar</span><span class="p">;</span>

<span class="c1">// creates a new progress bar (50 units)</span>
<span class="nv">$progressBar</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ProgressBar</span><span class="p">(</span><span class="nv">$output</span><span class="p">,</span> <span class="mi">50</span><span class="p">);</span>

<span class="c1">// starts and displays the progress bar</span>
<span class="nv">$progressBar</span><span class="o">-&gt;</span><span class="na">start</span><span class="p">();</span>

<span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">while</span> <span class="p">(</span><span class="nv">$i</span><span class="o">++</span> <span class="o">&lt;</span> <span class="mi">50</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ... do some work</span>

    <span class="c1">// advances the progress bar 1 unit</span>
    <span class="nv">$progressBar</span><span class="o">-&gt;</span><span class="na">advance</span><span class="p">();</span>

    <span class="c1">// you can also advance the progress bar by more than 1 unit</span>
    <span class="c1">// $progressBar-&gt;advance(3);</span>
<span class="p">}</span>

<span class="c1">// ensures that the progress bar is at 100%</span>
<span class="nv">$progressBar</span><span class="o">-&gt;</span><span class="na">finish</span><span class="p">();</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>You can also regress the progress bar (i.e. step backwards) by calling
<code class="docutils literal notranslate"><span class="pre">$progress-&gt;advance()</span></code> with a negative value. For example, if you call
<code class="docutils literal notranslate"><span class="pre">$progress-&gt;advance(-2)</span></code> then it will regress the progress bar 2 steps.</p>
</div>
<p>Instead of advancing the bar by a number of steps (with the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/ProgressBar.php" title="Symfony\Component\Console\Helper\ProgressBar::advance()"><span class="pre">advance()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/ProgressBar.php]</span></span></code> method),
you can also set the current progress by calling the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/ProgressBar.php" title="Symfony\Component\Console\Helper\ProgressBar::setProgress()"><span class="pre">setProgress()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/ProgressBar.php]</span></span></code> method.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>If your platform doesn’t support ANSI codes, updates to the progress
bar are added as new lines. To prevent the output from being flooded,
use the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/ProgressBar.php" title="Symfony\Component\Console\Helper\ProgressBar::minSecondsBetweenRedraws()"><span class="pre">minSecondsBetweenRedraws()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/ProgressBar.php]</span></span></code>
method to limit the number of redraws and the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/ProgressBar.php" title="Symfony\Component\Console\Helper\ProgressBar::setRedrawFrequency()"><span class="pre">setRedrawFrequency()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/ProgressBar.php]</span></span></code> method
to redraw every N iterations. By default, redraw frequency is
<strong>100ms</strong> or <strong>10%</strong> of your <code class="docutils literal notranslate"><span class="pre">max</span></code>.</p>
</div>
<p>If you don’t know the exact number of steps in advance, set it to a reasonable
value and then call the <code class="docutils literal notranslate"><span class="pre">setMaxSteps()</span></code> method to update it as needed:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// start with a 50 units progressbar</span>
<span class="nv">$progressBar</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ProgressBar</span><span class="p">(</span><span class="nv">$output</span><span class="p">,</span> <span class="mi">50</span><span class="p">);</span>

<span class="c1">// a complex task has just been created: increase the progressbar to 200 units</span>
<span class="nv">$progressBar</span><span class="o">-&gt;</span><span class="na">setMaxSteps</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</pre></div>
</div>
<p>Another solution is to omit the steps argument when creating the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/ProgressBar.php" title="Symfony\Component\Console\Helper\ProgressBar"><span class="pre">ProgressBar</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/ProgressBar.php]</span></span></code> instance:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$progressBar</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ProgressBar</span><span class="p">(</span><span class="nv">$output</span><span class="p">);</span>
</pre></div>
</div>
<p>The progress will then be displayed as a throbber:</p>
<div class="highlight-text notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="highlight"><pre><span></span># no max steps (displays it like a throbber)
    0 [&gt;---------------------------]
    5 [-----&gt;----------------------]
    5 [============================]

# max steps defined
 0/3 [&gt;---------------------------]   0%
 1/3 [=========&gt;------------------]  33%
 3/3 [============================] 100%
</pre></div>
</td></tr></table></div>
<p>Whenever your task is finished, don’t forget to call
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/ProgressBar.php" title="Symfony\Component\Console\Helper\ProgressBar::finish()"><span class="pre">finish()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/ProgressBar.php]</span></span></code> to ensure
that the progress bar display is refreshed with a 100% completion.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If you want to output something while the progress bar is running,
call <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/ProgressBar.php" title="Symfony\Component\Console\Helper\ProgressBar::clear()"><span class="pre">clear()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/ProgressBar.php]</span></span></code> first.
After you’re done, call
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/ProgressBar.php" title="Symfony\Component\Console\Helper\ProgressBar::display()"><span class="pre">display()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/ProgressBar.php]</span></span></code>
to show the progress bar again.</p>
</div>
<p>If the progress information is stored in an iterable variable (such as an array
or a PHP generator) you can use the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/ProgressBar.php" title="Symfony\Component\Console\Helper\ProgressBar::iterate()"><span class="pre">iterate()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/ProgressBar.php]</span></span></code> method,
which starts, advances and finishes the progress bar automatically:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Console\Helper\ProgressBar</span><span class="p">;</span>

<span class="nv">$progressBar</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ProgressBar</span><span class="p">(</span><span class="nv">$output</span><span class="p">);</span>

<span class="c1">// $iterable can be array</span>
<span class="nv">$iterable</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">];</span>
<span class="k">foreach</span> <span class="p">(</span><span class="nv">$progressBar</span><span class="o">-&gt;</span><span class="na">iterate</span><span class="p">(</span><span class="nv">$iterable</span><span class="p">)</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ... do some work</span>
<span class="p">}</span>

<span class="c1">// or a generator</span>
<span class="k">function</span> <span class="nf">iterable</span><span class="p">()</span> <span class="p">{</span> <span class="k">yield</span> <span class="mi">1</span><span class="p">;</span> <span class="k">yield</span> <span class="mi">2</span><span class="p">;</span> <span class="o">...</span> <span class="p">};</span>
<span class="k">foreach</span> <span class="p">(</span><span class="nv">$progressBar</span><span class="o">-&gt;</span><span class="na">iterate</span><span class="p">(</span><span class="nx">iterable</span><span class="p">())</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ... do some work</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The previous code will output:</p>
<div class="highlight-text notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre><span></span>0/2 [&gt;---------------------------]   0%
1/2 [==============&gt;-------------]  50%
2/2 [============================] 100%
</pre></div>
</td></tr></table></div>
<div class="section" id="customizing-the-progress-bar">
<h2>Customizing the Progress Bar</h2>
<div class="section" id="built-in-formats">
<h3>Built-in Formats</h3>
<p>By default, the information rendered on a progress bar depends on the current
level of verbosity of the <code class="docutils literal notranslate"><span class="pre">OutputInterface</span></code> instance:</p>
<div class="highlight-text notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></div></td><td class="code"><div class="highlight"><pre><span></span># OutputInterface::VERBOSITY_NORMAL (CLI with no verbosity flag)
 0/3 [&gt;---------------------------]   0%
 1/3 [=========&gt;------------------]  33%
 3/3 [============================] 100%

# OutputInterface::VERBOSITY_VERBOSE (-v)
 0/3 [&gt;---------------------------]   0%  1 sec
 1/3 [=========&gt;------------------]  33%  1 sec
 3/3 [============================] 100%  1 sec

# OutputInterface::VERBOSITY_VERY_VERBOSE (-vv)
 0/3 [&gt;---------------------------]   0%  1 sec/1 sec
 1/3 [=========&gt;------------------]  33%  1 sec/1 sec
 3/3 [============================] 100%  1 sec/1 sec

# OutputInterface::VERBOSITY_DEBUG (-vvv)
 0/3 [&gt;---------------------------]   0%  1 sec/1 sec  1.0 MB
 1/3 [=========&gt;------------------]  33%  1 sec/1 sec  1.0 MB
 3/3 [============================] 100%  1 sec/1 sec  1.0 MB
</pre></div>
</td></tr></table></div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If you call a command with the quiet flag (<code class="docutils literal notranslate"><span class="pre">-q</span></code>), the progress bar won’t
be displayed.</p>
</div>
<p>Instead of relying on the verbosity mode of the current command, you can also
force a format via <code class="docutils literal notranslate"><span class="pre">setFormat()</span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$progressBar</span><span class="o">-&gt;</span><span class="na">setFormat</span><span class="p">(</span><span class="s1">&#39;verbose&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>The built-in formats are the following:</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">normal</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">verbose</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">very_verbose</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">debug</span></code></p></li>
</ul>
<p>If you don’t set the number of steps for your progress bar, use the <code class="docutils literal notranslate"><span class="pre">_nomax</span></code>
variants:</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">normal_nomax</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">verbose_nomax</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">very_verbose_nomax</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">debug_nomax</span></code></p></li>
</ul>
</div>
<div class="section" id="custom-formats">
<h3>Custom Formats</h3>
<p>Instead of using the built-in formats, you can also set your own:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$progressBar</span><span class="o">-&gt;</span><span class="na">setFormat</span><span class="p">(</span><span class="s1">&#39;%bar%&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>This sets the format to only display the progress bar itself:</p>
<div class="highlight-text notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre><span></span>&gt;---------------------------
=========&gt;------------------
============================
</pre></div>
</td></tr></table></div>
<p>A progress bar format is a string that contains specific placeholders (a name
enclosed with the <code class="docutils literal notranslate"><span class="pre">%</span></code> character); the placeholders are replaced based on the
current progress of the bar. Here is a list of the built-in placeholders:</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">current</span></code>: The current step;</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">max</span></code>: The maximum number of steps (or 0 if no max is defined);</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">bar</span></code>: The bar itself;</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">percent</span></code>: The percentage of completion (not available if no max is defined);</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">elapsed</span></code>: The time elapsed since the start of the progress bar;</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">remaining</span></code>: The remaining time to complete the task (not available if no max is defined);</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">estimated</span></code>: The estimated time to complete the task (not available if no max is defined);</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">memory</span></code>: The current memory usage;</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">message</span></code>: used to display arbitrary messages in the progress bar (as explained later).</p></li>
</ul>
<p>For instance, here is how you could set the format to be the same as the
<code class="docutils literal notranslate"><span class="pre">debug</span></code> one:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$progressBar</span><span class="o">-&gt;</span><span class="na">setFormat</span><span class="p">(</span><span class="s1">&#39; %current%/%max% [%bar%] %percent:3s%% %elapsed:6s%/%estimated:-6s% %memory:6s%&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>Notice the <code class="docutils literal notranslate"><span class="pre">:6s</span></code> part added to some placeholders? That’s how you can tweak
the appearance of the bar (formatting and alignment). The part after the colon
(<code class="docutils literal notranslate"><span class="pre">:</span></code>) is used to set the <code class="docutils literal notranslate"><span class="pre">sprintf</span></code> format of the string.</p>
<p>Instead of setting the format for a given instance of a progress bar, you can
also define global formats:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nx">ProgressBar</span><span class="o">::</span><span class="na">setFormatDefinition</span><span class="p">(</span><span class="s1">&#39;minimal&#39;</span><span class="p">,</span> <span class="s1">&#39;Progress: %percent%%&#39;</span><span class="p">);</span>

<span class="nv">$progressBar</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ProgressBar</span><span class="p">(</span><span class="nv">$output</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
<span class="nv">$progressBar</span><span class="o">-&gt;</span><span class="na">setFormat</span><span class="p">(</span><span class="s1">&#39;minimal&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>This code defines a new <code class="docutils literal notranslate"><span class="pre">minimal</span></code> format that you can then use for your
progress bars:</p>
<div class="highlight-text notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre><span></span>Progress: 0%
Progress: 33%
Progress: 100%
</pre></div>
</td></tr></table></div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>It is almost always better to redefine built-in formats instead of creating
new ones as that allows the display to automatically vary based on the
verbosity flag of the command.</p>
</div>
<p>When defining a new style that contains placeholders that are only available
when the maximum number of steps is known, you should create a <code class="docutils literal notranslate"><span class="pre">_nomax</span></code>
variant:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nx">ProgressBar</span><span class="o">::</span><span class="na">setFormatDefinition</span><span class="p">(</span><span class="s1">&#39;minimal&#39;</span><span class="p">,</span> <span class="s1">&#39;%percent%% %remaining%&#39;</span><span class="p">);</span>
<span class="nx">ProgressBar</span><span class="o">::</span><span class="na">setFormatDefinition</span><span class="p">(</span><span class="s1">&#39;minimal_nomax&#39;</span><span class="p">,</span> <span class="s1">&#39;%percent%%&#39;</span><span class="p">);</span>

<span class="nv">$progressBar</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ProgressBar</span><span class="p">(</span><span class="nv">$output</span><span class="p">);</span>
<span class="nv">$progressBar</span><span class="o">-&gt;</span><span class="na">setFormat</span><span class="p">(</span><span class="s1">&#39;minimal&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>When displaying the progress bar, the format will automatically be set to
<code class="docutils literal notranslate"><span class="pre">minimal_nomax</span></code> if the bar does not have a maximum number of steps like in
the example above.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>A format can contain any valid ANSI codes and can also use the
Symfony-specific way to set colors:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nx">ProgressBar</span><span class="o">::</span><span class="na">setFormatDefinition</span><span class="p">(</span>
    <span class="s1">&#39;minimal&#39;</span><span class="p">,</span>
    <span class="s1">&#39;&lt;info&gt;%percent%&lt;/info&gt;\033[32m%\033[0m &lt;fg=white;bg=blue&gt;%remaining%&lt;/&gt;&#39;</span>
<span class="p">);</span>
</pre></div>
</div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>A format can span more than one line; that’s very useful when you want to
display more contextual information alongside the progress bar (see the
example at the beginning of this article).</p>
</div>
</div>
<div class="section" id="bar-settings">
<h3>Bar Settings</h3>
<p>Among the placeholders, <code class="docutils literal notranslate"><span class="pre">bar</span></code> is a bit special as all the characters used
to display it can be customized:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// the finished part of the bar</span>
<span class="nv">$progressBar</span><span class="o">-&gt;</span><span class="na">setBarCharacter</span><span class="p">(</span><span class="s1">&#39;&lt;comment&gt;=&lt;/comment&gt;&#39;</span><span class="p">);</span>

<span class="c1">// the unfinished part of the bar</span>
<span class="nv">$progressBar</span><span class="o">-&gt;</span><span class="na">setEmptyBarCharacter</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">);</span>

<span class="c1">// the progress character</span>
<span class="nv">$progressBar</span><span class="o">-&gt;</span><span class="na">setProgressCharacter</span><span class="p">(</span><span class="s1">&#39;|&#39;</span><span class="p">);</span>

<span class="c1">// the bar width</span>
<span class="nv">$progressBar</span><span class="o">-&gt;</span><span class="na">setBarWidth</span><span class="p">(</span><span class="mi">50</span><span class="p">);</span>
</pre></div>
</div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>For performance reasons, Symfony redraws screen every 100ms. If this is too
fast or to slow for your application, use the methods
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/ProgressBar.php" title="Symfony\Component\Console\Helper\ProgressBar::minSecondsBetweenRedraws()"><span class="pre">minSecondsBetweenRedraws()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/ProgressBar.php]</span></span></code> and
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/ProgressBar.php" title="Symfony\Component\Console\Helper\ProgressBar::maxSecondsBetweenRedraws()"><span class="pre">maxSecondsBetweenRedraws()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/ProgressBar.php]</span></span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$progressBar</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ProgressBar</span><span class="p">(</span><span class="nv">$output</span><span class="p">,</span> <span class="mi">50000</span><span class="p">);</span>
<span class="nv">$progressBar</span><span class="o">-&gt;</span><span class="na">start</span><span class="p">();</span>

<span class="c1">// this redraws the screen every 100 iterations, but sets additional limits:</span>
<span class="c1">// don&#39;t redraw slower than 200ms (0.2) or faster than 100ms (0.1)</span>
<span class="nv">$progressBar</span><span class="o">-&gt;</span><span class="na">setRedrawFrequency</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
<span class="nv">$progressBar</span><span class="o">-&gt;</span><span class="na">maxSecondsBetweenRedraws</span><span class="p">(</span><span class="mf">0.2</span><span class="p">);</span>
<span class="nv">$progressBar</span><span class="o">-&gt;</span><span class="na">minSecondsBetweenRedraws</span><span class="p">(</span><span class="mf">0.1</span><span class="p">);</span>

<span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">while</span> <span class="p">(</span><span class="nv">$i</span><span class="o">++</span> <span class="o">&lt;</span> <span class="mi">50000</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ... do some work</span>

    <span class="nv">$progressBar</span><span class="o">-&gt;</span><span class="na">advance</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="custom-placeholders">
<h3>Custom Placeholders</h3>
<p>If you want to display some information that depends on the progress bar
display that are not available in the list of built-in placeholders, you can
create your own. Let’s see how you can create a <code class="docutils literal notranslate"><span class="pre">remaining_steps</span></code> placeholder
that displays the number of remaining steps:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nx">ProgressBar</span><span class="o">::</span><span class="na">setPlaceholderFormatterDefinition</span><span class="p">(</span>
    <span class="s1">&#39;remaining_steps&#39;</span><span class="p">,</span>
    <span class="k">function</span> <span class="p">(</span><span class="nx">ProgressBar</span> <span class="nv">$progressBar</span><span class="p">,</span> <span class="nx">OutputInterface</span> <span class="nv">$output</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$progressBar</span><span class="o">-&gt;</span><span class="na">getMaxSteps</span><span class="p">()</span> <span class="o">-</span> <span class="nv">$progressBar</span><span class="o">-&gt;</span><span class="na">getProgress</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">);</span>
</pre></div>
</div>
</div>
<div class="section" id="custom-messages">
<h3>Custom Messages</h3>
<p>Progress bars define a placeholder called <code class="docutils literal notranslate"><span class="pre">message</span></code> to display arbitrary
messages. However, none of the built-in formats include that placeholder, so
before displaying these messages, you must define your own custom format:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nx">ProgressBar</span><span class="o">::</span><span class="na">setFormatDefinition</span><span class="p">(</span><span class="s1">&#39;custom&#39;</span><span class="p">,</span> <span class="s1">&#39; %current%/%max% -- %message%&#39;</span><span class="p">);</span>

<span class="nv">$progressBar</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ProgressBar</span><span class="p">(</span><span class="nv">$output</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
<span class="nv">$progressBar</span><span class="o">-&gt;</span><span class="na">setFormat</span><span class="p">(</span><span class="s1">&#39;custom&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>Now, use the <code class="docutils literal notranslate"><span class="pre">setMessage()</span></code> method to set the value of the <code class="docutils literal notranslate"><span class="pre">%message%</span></code>
placeholder before displaying the progress bar:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="nv">$progressBar</span><span class="o">-&gt;</span><span class="na">setMessage</span><span class="p">(</span><span class="s1">&#39;Start&#39;</span><span class="p">);</span>
<span class="nv">$progressBar</span><span class="o">-&gt;</span><span class="na">start</span><span class="p">();</span>
<span class="c1">// 0/100 -- Start</span>

<span class="nv">$progressBar</span><span class="o">-&gt;</span><span class="na">setMessage</span><span class="p">(</span><span class="s1">&#39;Task is in progress...&#39;</span><span class="p">);</span>
<span class="nv">$progressBar</span><span class="o">-&gt;</span><span class="na">advance</span><span class="p">();</span>
<span class="c1">// 1/100 -- Task is in progress...</span>
</pre></div>
</div>
<p>Messages can be combined with custom placeholders too. In this example, the
progress bar uses the <code class="docutils literal notranslate"><span class="pre">%message%</span></code> and <code class="docutils literal notranslate"><span class="pre">%filename%</span></code> placeholders:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nx">ProgressBar</span><span class="o">::</span><span class="na">setFormatDefinition</span><span class="p">(</span><span class="s1">&#39;custom&#39;</span><span class="p">,</span> <span class="s1">&#39; %current%/%max% -- %message% (%filename%)&#39;</span><span class="p">);</span>

<span class="nv">$progressBar</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ProgressBar</span><span class="p">(</span><span class="nv">$output</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
<span class="nv">$progressBar</span><span class="o">-&gt;</span><span class="na">setFormat</span><span class="p">(</span><span class="s1">&#39;custom&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>The <code class="docutils literal notranslate"><span class="pre">setMessage()</span></code> method accepts a second optional argument to set the value
of the custom placeholders:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="c1">// $files = [&#39;client-001/invoices.xml&#39;, &#39;...&#39;];</span>
<span class="k">foreach</span> <span class="p">(</span><span class="nv">$files</span> <span class="k">as</span> <span class="nv">$filename</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$progressBar</span><span class="o">-&gt;</span><span class="na">setMessage</span><span class="p">(</span><span class="s1">&#39;Importing invoices...&#39;</span><span class="p">);</span>
    <span class="nv">$progressBar</span><span class="o">-&gt;</span><span class="na">setMessage</span><span class="p">(</span><span class="nv">$filename</span><span class="p">,</span> <span class="s1">&#39;filename&#39;</span><span class="p">);</span>
    <span class="nv">$progressBar</span><span class="o">-&gt;</span><span class="na">advance</span><span class="p">();</span>
    <span class="c1">// 2/100 -- Importing invoices... (client-001/invoices.xml)</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="displaying-multiple-progress-bars">
<span id="console-multiple-progress-bars"></span><h2>Displaying Multiple Progress Bars</h2>
<p>When using <a class="reference internal" href="../../../console.xhtml#console-output-sections"><span class="std std-ref">Console output sections</span></a> it’s
possible to display multiple progress bars at the same time and change their
progress independently:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$section1</span> <span class="o">=</span> <span class="nv">$output</span><span class="o">-&gt;</span><span class="na">section</span><span class="p">();</span>
<span class="nv">$section2</span> <span class="o">=</span> <span class="nv">$output</span><span class="o">-&gt;</span><span class="na">section</span><span class="p">();</span>

<span class="nv">$progress1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ProgressBar</span><span class="p">(</span><span class="nv">$section1</span><span class="p">);</span>
<span class="nv">$progress2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ProgressBar</span><span class="p">(</span><span class="nv">$section2</span><span class="p">);</span>

<span class="nv">$progress1</span><span class="o">-&gt;</span><span class="na">start</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
<span class="nv">$progress2</span><span class="o">-&gt;</span><span class="na">start</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>

<span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">while</span> <span class="p">(</span><span class="o">++</span><span class="nv">$i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$progress1</span><span class="o">-&gt;</span><span class="na">advance</span><span class="p">();</span>

    <span class="k">if</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$progress2</span><span class="o">-&gt;</span><span class="na">advance</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nb">usleep</span><span class="p">(</span><span class="mi">50000</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>After a couple of iterations, the output in the terminal will look like this:</p>
<div class="highlight-text notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span>34/100 [=========&gt;------------------]  34%
68/100 [===================&gt;--------]  68%
</pre></div>
</td></tr></table></div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>