<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Debug Formatter Helper</title>
    <link rel="stylesheet" href="../../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="debug-formatter-helper">
<span id="index-0"></span><h1>Debug Formatter Helper</h1>
<p>The <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/DebugFormatterHelper.php" title="Symfony\Component\Console\Helper\DebugFormatterHelper"><span class="pre">DebugFormatterHelper</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/DebugFormatterHelper.php]</span></span></code> provides
functions to output debug information when running an external program, for
instance a process or HTTP request. For example, if you used it to output
the results of running <code class="docutils literal notranslate"><span class="pre">ls</span> <span class="pre">-la</span></code> on a UNIX system, it might output something
like this:</p>
<img alt="../../../_images/debug_formatter.png" class="align-center" src="../../../_images/debug_formatter.png" />
<div class="section" id="using-the-debug-formatter">
<h2>Using the debug_formatter</h2>
<p>The formatter is included in the default helper set and you can get it by
calling <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Command/Command.php" title="Symfony\Component\Console\Command\Command::getHelper()"><span class="pre">getHelper()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Command/Command.php]</span></span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$debugFormatter</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getHelper</span><span class="p">(</span><span class="s1">&#39;debug_formatter&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>The formatter accepts strings and returns a formatted string, which you then
output to the console (or even log the information or do anything else).</p>
<p>All methods of this helper have an identifier as the first argument. This is a
unique value for each program. This way, the helper can debug information for
multiple programs at the same time. When using the
<a class="reference internal" href="../../process.xhtml"><span class="doc">Process component</span></a>, you probably want to use
<code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/function.spl-object-hash.php" title="spl_object_hash"><span class="pre">spl_object_hash</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/function.spl-object-hash.php]</span></span></code>.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>This information is often too verbose to be shown by default. You can use
<a class="reference internal" href="../../../console/verbosity.xhtml"><span class="doc">verbosity levels</span></a> to only show it when in
debugging mode (<code class="docutils literal notranslate"><span class="pre">-vvv</span></code>).</p>
</div>
</div>
<div class="section" id="starting-a-program">
<h2>Starting a Program</h2>
<p>As soon as you start a program, you can use
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/DebugFormatterHelper.php" title="Symfony\Component\Console\Helper\DebugFormatterHelper::start()"><span class="pre">start()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/DebugFormatterHelper.php]</span></span></code> to
display information that the program is started:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="nv">$process</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Process</span><span class="p">(</span><span class="o">...</span><span class="p">);</span>

<span class="nv">$output</span><span class="o">-&gt;</span><span class="na">writeln</span><span class="p">(</span><span class="nv">$debugFormatter</span><span class="o">-&gt;</span><span class="na">start</span><span class="p">(</span>
    <span class="nb">spl_object_hash</span><span class="p">(</span><span class="nv">$process</span><span class="p">),</span>
    <span class="s1">&#39;Some process description&#39;</span>
<span class="p">));</span>

<span class="nv">$process</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span>
</pre></div>
</div>
<p>This will output:</p>
<div class="highlight-text notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span>RUN Some process description
</pre></div>
</td></tr></table></div>
<p>You can tweak the prefix using the third argument:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$output</span><span class="o">-&gt;</span><span class="na">writeln</span><span class="p">(</span><span class="nv">$debugFormatter</span><span class="o">-&gt;</span><span class="na">start</span><span class="p">(</span>
    <span class="nb">spl_object_hash</span><span class="p">(</span><span class="nv">$process</span><span class="p">),</span>
    <span class="s1">&#39;Some process description&#39;</span><span class="p">,</span>
    <span class="s1">&#39;STARTED&#39;</span>
<span class="p">));</span>
<span class="c1">// will output:</span>
<span class="c1">//  STARTED Some process description</span>
</pre></div>
</div>
</div>
<div class="section" id="output-progress-information">
<h2>Output Progress Information</h2>
<p>Some programs give output while they are running. This information can be shown
using
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/DebugFormatterHelper.php" title="Symfony\Component\Console\Helper\DebugFormatterHelper::progress()"><span class="pre">progress()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/DebugFormatterHelper.php]</span></span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Process\Process</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="nv">$process</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Process</span><span class="p">(</span><span class="o">...</span><span class="p">);</span>

<span class="nv">$process</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$type</span><span class="p">,</span> <span class="nv">$buffer</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$output</span><span class="p">,</span> <span class="nv">$debugFormatter</span><span class="p">,</span> <span class="nv">$process</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$output</span><span class="o">-&gt;</span><span class="na">writeln</span><span class="p">(</span>
        <span class="nv">$debugFormatter</span><span class="o">-&gt;</span><span class="na">progress</span><span class="p">(</span>
            <span class="nb">spl_object_hash</span><span class="p">(</span><span class="nv">$process</span><span class="p">),</span>
            <span class="nv">$buffer</span><span class="p">,</span>
            <span class="nx">Process</span><span class="o">::</span><span class="na">ERR</span> <span class="o">===</span> <span class="nv">$type</span>
        <span class="p">)</span>
    <span class="p">);</span>
<span class="p">});</span>
<span class="c1">// ...</span>
</pre></div>
</div>
<p>In case of success, this will output:</p>
<div class="highlight-text notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span>OUT The output of the process
</pre></div>
</td></tr></table></div>
<p>And this in case of failure:</p>
<div class="highlight-text notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span>ERR The output of the process
</pre></div>
</td></tr></table></div>
<p>The third argument is a boolean which tells the function if the output is error
output or not. When <code class="docutils literal notranslate"><span class="pre">true</span></code>, the output is considered error output.</p>
<p>The fourth and fifth argument allow you to override the prefix for the normal
output and error output respectively.</p>
</div>
<div class="section" id="stopping-a-program">
<h2>Stopping a Program</h2>
<p>When a program is stopped, you can use
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/DebugFormatterHelper.php" title="Symfony\Component\Console\Helper\DebugFormatterHelper::stop()"><span class="pre">stop()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/DebugFormatterHelper.php]</span></span></code> to
notify this to the users:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="nv">$output</span><span class="o">-&gt;</span><span class="na">writeln</span><span class="p">(</span>
    <span class="nv">$debugFormatter</span><span class="o">-&gt;</span><span class="na">stop</span><span class="p">(</span>
        <span class="nb">spl_object_hash</span><span class="p">(</span><span class="nv">$process</span><span class="p">),</span>
        <span class="s1">&#39;Some command description&#39;</span><span class="p">,</span>
        <span class="nv">$process</span><span class="o">-&gt;</span><span class="na">isSuccessful</span><span class="p">()</span>
    <span class="p">)</span>
<span class="p">);</span>
</pre></div>
</div>
<p>This will output:</p>
<div class="highlight-text notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span>RES Some command description
</pre></div>
</td></tr></table></div>
<p>In case of failure, this will be in red and in case of success it will be green.</p>
</div>
<div class="section" id="using-multiple-programs">
<h2>Using multiple Programs</h2>
<p>As said before, you can also use the helper to display more programs at the
same time. Information about different programs will be shown in different
colors, to make it clear which output belongs to which command.</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>