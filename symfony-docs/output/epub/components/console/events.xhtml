<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Using Events</title>
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="using-events">
<span id="index-0"></span><h1>Using Events</h1>
<p>The Application class of the Console component allows you to optionally hook
into the lifecycle of a console application via events. Instead of reinventing
the wheel, it uses the Symfony EventDispatcher component to do the work:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Console\Application</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\EventDispatcher\EventDispatcher</span><span class="p">;</span>

<span class="nv">$dispatcher</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventDispatcher</span><span class="p">();</span>

<span class="nv">$application</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Application</span><span class="p">();</span>
<span class="nv">$application</span><span class="o">-&gt;</span><span class="na">setDispatcher</span><span class="p">(</span><span class="nv">$dispatcher</span><span class="p">);</span>
<span class="nv">$application</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span>
</pre></div>
</div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>Console events are only triggered by the main command being executed.
Commands called by the main command will not trigger any event.</p>
</div>
<div class="section" id="the-consoleevents-command-event">
<h2>The <code class="docutils literal notranslate"><span class="pre">ConsoleEvents::COMMAND</span></code> Event</h2>
<p><strong>Typical Purposes</strong>: Doing something before any command is run (like logging
which command is going to be executed), or displaying something about the event
to be executed.</p>
<p>Just before executing any command, the <code class="docutils literal notranslate"><span class="pre">ConsoleEvents::COMMAND</span></code> event is
dispatched. Listeners receive a
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Event/ConsoleCommandEvent.php" title="Symfony\Component\Console\Event\ConsoleCommandEvent"><span class="pre">ConsoleCommandEvent</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Event/ConsoleCommandEvent.php]</span></span></code> event:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Console\ConsoleEvents</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Event\ConsoleCommandEvent</span><span class="p">;</span>

<span class="nv">$dispatcher</span><span class="o">-&gt;</span><span class="na">addListener</span><span class="p">(</span><span class="nx">ConsoleEvents</span><span class="o">::</span><span class="na">COMMAND</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nx">ConsoleCommandEvent</span> <span class="nv">$event</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// gets the input instance</span>
    <span class="nv">$input</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getInput</span><span class="p">();</span>

    <span class="c1">// gets the output instance</span>
    <span class="nv">$output</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getOutput</span><span class="p">();</span>

    <span class="c1">// gets the command to be executed</span>
    <span class="nv">$command</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getCommand</span><span class="p">();</span>

    <span class="c1">// writes something about the command</span>
    <span class="nv">$output</span><span class="o">-&gt;</span><span class="na">writeln</span><span class="p">(</span><span class="nb">sprintf</span><span class="p">(</span><span class="s1">&#39;Before running command &lt;info&gt;%s&lt;/info&gt;&#39;</span><span class="p">,</span> <span class="nv">$command</span><span class="o">-&gt;</span><span class="na">getName</span><span class="p">()));</span>

    <span class="c1">// gets the application</span>
    <span class="nv">$application</span> <span class="o">=</span> <span class="nv">$command</span><span class="o">-&gt;</span><span class="na">getApplication</span><span class="p">();</span>
<span class="p">});</span>
</pre></div>
</div>
<div class="section" id="disable-commands-inside-listeners">
<h3>Disable Commands inside Listeners</h3>
<p>Using the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Event/ConsoleCommandEvent.php" title="Symfony\Component\Console\Event\ConsoleCommandEvent::disableCommand()"><span class="pre">disableCommand()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Event/ConsoleCommandEvent.php]</span></span></code>
method, you can disable a command inside a listener. The application
will then <em>not</em> execute the command, but instead will return the code <code class="docutils literal notranslate"><span class="pre">113</span></code>
(defined in <code class="docutils literal notranslate"><span class="pre">ConsoleCommandEvent::RETURN_CODE_DISABLED</span></code>). This code is one
of the <a class="reference external" href="https://www.tldp.org/LDP/abs/html/exitcodes.html">reserved exit codes</a><span class="link-target"> [https://www.tldp.org/LDP/abs/html/exitcodes.html]</span> for console commands that conform with the
C/C++ standard:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Console\ConsoleEvents</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Event\ConsoleCommandEvent</span><span class="p">;</span>

<span class="nv">$dispatcher</span><span class="o">-&gt;</span><span class="na">addListener</span><span class="p">(</span><span class="nx">ConsoleEvents</span><span class="o">::</span><span class="na">COMMAND</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nx">ConsoleCommandEvent</span> <span class="nv">$event</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// gets the command to be executed</span>
    <span class="nv">$command</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getCommand</span><span class="p">();</span>

    <span class="c1">// ... check if the command can be executed</span>

    <span class="c1">// disables the command, this will result in the command being skipped</span>
    <span class="c1">// and code 113 being returned from the Application</span>
    <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">disableCommand</span><span class="p">();</span>

    <span class="c1">// it is possible to enable the command in a later listener</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$event</span><span class="o">-&gt;</span><span class="na">commandShouldRun</span><span class="p">())</span> <span class="p">{</span>
        <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">enableCommand</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">});</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="the-consoleevents-error-event">
<h2>The <code class="docutils literal notranslate"><span class="pre">ConsoleEvents::ERROR</span></code> Event</h2>
<p><strong>Typical Purposes</strong>: Handle exceptions thrown during the execution of a
command.</p>
<p>Whenever an exception is thrown by a command, including those triggered from
event listeners, the <code class="docutils literal notranslate"><span class="pre">ConsoleEvents::ERROR</span></code> event is dispatched. A listener
can wrap or change the exception or do anything useful before the exception is
thrown by the application.</p>
<p>Listeners receive a
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Event/ConsoleErrorEvent.php" title="Symfony\Component\Console\Event\ConsoleErrorEvent"><span class="pre">ConsoleErrorEvent</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Event/ConsoleErrorEvent.php]</span></span></code> event:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Console\ConsoleEvents</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Event\ConsoleErrorEvent</span><span class="p">;</span>

<span class="nv">$dispatcher</span><span class="o">-&gt;</span><span class="na">addListener</span><span class="p">(</span><span class="nx">ConsoleEvents</span><span class="o">::</span><span class="na">ERROR</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nx">ConsoleErrorEvent</span> <span class="nv">$event</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$output</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getOutput</span><span class="p">();</span>

    <span class="nv">$command</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getCommand</span><span class="p">();</span>

    <span class="nv">$output</span><span class="o">-&gt;</span><span class="na">writeln</span><span class="p">(</span><span class="nb">sprintf</span><span class="p">(</span><span class="s1">&#39;Oops, exception thrown while running command &lt;info&gt;%s&lt;/info&gt;&#39;</span><span class="p">,</span> <span class="nv">$command</span><span class="o">-&gt;</span><span class="na">getName</span><span class="p">()));</span>

    <span class="c1">// gets the current exit code (the exception code)</span>
    <span class="nv">$exitCode</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getExitCode</span><span class="p">();</span>

    <span class="c1">// changes the exception to another one</span>
    <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">setError</span><span class="p">(</span><span class="k">new</span> <span class="nx">\LogicException</span><span class="p">(</span><span class="s1">&#39;Caught exception&#39;</span><span class="p">,</span> <span class="nv">$exitCode</span><span class="p">,</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getError</span><span class="p">()));</span>
<span class="p">});</span>
</pre></div>
</div>
</div>
<div class="section" id="the-consoleevents-terminate-event">
<span id="console-events-terminate"></span><h2>The <code class="docutils literal notranslate"><span class="pre">ConsoleEvents::TERMINATE</span></code> Event</h2>
<p><strong>Typical Purposes</strong>: To perform some cleanup actions after the command has
been executed.</p>
<p>After the command has been executed, the <code class="docutils literal notranslate"><span class="pre">ConsoleEvents::TERMINATE</span></code> event is
dispatched. It can be used to do any actions that need to be executed for all
commands or to cleanup what you initiated in a <code class="docutils literal notranslate"><span class="pre">ConsoleEvents::COMMAND</span></code>
listener (like sending logs, closing a database connection, sending emails,
…). A listener might also change the exit code.</p>
<p>Listeners receive a
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Event/ConsoleTerminateEvent.php" title="Symfony\Component\Console\Event\ConsoleTerminateEvent"><span class="pre">ConsoleTerminateEvent</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Event/ConsoleTerminateEvent.php]</span></span></code> event:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Console\ConsoleEvents</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Event\ConsoleTerminateEvent</span><span class="p">;</span>

<span class="nv">$dispatcher</span><span class="o">-&gt;</span><span class="na">addListener</span><span class="p">(</span><span class="nx">ConsoleEvents</span><span class="o">::</span><span class="na">TERMINATE</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nx">ConsoleTerminateEvent</span> <span class="nv">$event</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// gets the output</span>
    <span class="nv">$output</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getOutput</span><span class="p">();</span>

    <span class="c1">// gets the command that has been executed</span>
    <span class="nv">$command</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getCommand</span><span class="p">();</span>

    <span class="c1">// displays the given content</span>
    <span class="nv">$output</span><span class="o">-&gt;</span><span class="na">writeln</span><span class="p">(</span><span class="nb">sprintf</span><span class="p">(</span><span class="s1">&#39;After running command &lt;info&gt;%s&lt;/info&gt;&#39;</span><span class="p">,</span> <span class="nv">$command</span><span class="o">-&gt;</span><span class="na">getName</span><span class="p">()));</span>

    <span class="c1">// changes the exit code</span>
    <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">setExitCode</span><span class="p">(</span><span class="mi">128</span><span class="p">);</span>
<span class="p">});</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>This event is also dispatched when an exception is thrown by the command.
It is then dispatched just after the <code class="docutils literal notranslate"><span class="pre">ConsoleEvents::ERROR</span></code> event.
The exit code received in this case is the exception code.</p>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>