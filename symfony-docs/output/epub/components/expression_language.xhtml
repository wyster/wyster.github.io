<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>The ExpressionLanguage Component</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="the-expressionlanguage-component">
<span id="index-0"></span><h1>The ExpressionLanguage Component</h1>
<blockquote>
<div><p>The ExpressionLanguage component provides an engine that can compile and
evaluate expressions. An expression is a one-liner that returns a value
(mostly, but not limited to, Booleans).</p>
</div></blockquote>
<div class="section" id="installation">
<h2>Installation</h2>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require symfony/expression-language
</pre></div>
</td></tr></table></div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If you install this component outside of a Symfony application, you must
require the <code class="docutils literal notranslate"><span class="pre">vendor/autoload.php</span></code> file in your code to enable the class
autoloading mechanism provided by Composer. Read
<a class="reference internal" href="using_components.xhtml"><span class="doc">this article</span></a> for more details.</p>
</div>
</div>
<div class="section" id="how-can-the-expression-engine-help-me">
<h2>How can the Expression Engine Help Me?</h2>
<p>The purpose of the component is to allow users to use expressions inside
configuration for more complex logic. For some examples, the Symfony Framework
uses expressions in security, for validation rules and in route matching.</p>
<p>Besides using the component in the framework itself, the ExpressionLanguage
component is a perfect candidate for the foundation of a <em>business rule engine</em>.
The idea is to let the webmaster of a website configure things in a dynamic
way without using PHP and without introducing security problems:</p>
<div class="highlight-text notranslate" id="component-expression-language-examples"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="highlight"><pre><span></span># Get the special price if
user.getGroup() in [&#39;good_customers&#39;, &#39;collaborator&#39;]

# Promote article to the homepage when
article.commentCount &gt; 100 and article.category not in [&quot;misc&quot;]

# Send an alert when
product.stock &lt; 15
</pre></div>
</td></tr></table></div>
<p>Expressions can be seen as a very restricted PHP sandbox and are immune to
external injections as you must explicitly declare which variables are available
in an expression.</p>
</div>
<div class="section" id="usage">
<h2>Usage</h2>
<p>The ExpressionLanguage component can compile and evaluate expressions.
Expressions are one-liners that often return a Boolean, which can be used
by the code executing the expression in an <code class="docutils literal notranslate"><span class="pre">if</span></code> statement. A simple example
of an expression is <code class="docutils literal notranslate"><span class="pre">1</span> <span class="pre">+</span> <span class="pre">2</span></code>. You can also use more complicated expressions,
such as <code class="docutils literal notranslate"><span class="pre">someArray[3].someMethod('bar')</span></code>.</p>
<p>The component provides 2 ways to work with expressions:</p>
<ul class="simple">
<li><p><strong>evaluation</strong>: the expression is evaluated without being compiled to PHP;</p></li>
<li><p><strong>compile</strong>: the expression is compiled to PHP, so it can be cached and
evaluated.</p></li>
</ul>
<p>The main class of the component is
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/ExpressionLanguage/ExpressionLanguage.php" title="Symfony\Component\ExpressionLanguage\ExpressionLanguage"><span class="pre">ExpressionLanguage</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/ExpressionLanguage/ExpressionLanguage.php]</span></span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\ExpressionLanguage\ExpressionLanguage</span><span class="p">;</span>

<span class="nv">$expressionLanguage</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ExpressionLanguage</span><span class="p">();</span>

<span class="nb">var_dump</span><span class="p">(</span><span class="nv">$expressionLanguage</span><span class="o">-&gt;</span><span class="na">evaluate</span><span class="p">(</span><span class="s1">&#39;1 + 2&#39;</span><span class="p">));</span> <span class="c1">// displays 3</span>

<span class="nb">var_dump</span><span class="p">(</span><span class="nv">$expressionLanguage</span><span class="o">-&gt;</span><span class="na">compile</span><span class="p">(</span><span class="s1">&#39;1 + 2&#39;</span><span class="p">));</span> <span class="c1">// displays (1 + 2)</span>
</pre></div>
</div>
</div>
<div class="section" id="expression-syntax">
<h2>Expression Syntax</h2>
<p>See <a class="reference internal" href="expression_language/syntax.xhtml"><span class="doc">The Expression Syntax</span></a> to learn the syntax of the
ExpressionLanguage component.</p>
</div>
<div class="section" id="passing-in-variables">
<h2>Passing in Variables</h2>
<p>You can also pass variables into the expression, which can be of any valid
PHP type (including objects):</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\ExpressionLanguage\ExpressionLanguage</span><span class="p">;</span>

<span class="nv">$expressionLanguage</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ExpressionLanguage</span><span class="p">();</span>

<span class="k">class</span> <span class="nc">Apple</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nv">$variety</span><span class="p">;</span>
<span class="p">}</span>

<span class="nv">$apple</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Apple</span><span class="p">();</span>
<span class="nv">$apple</span><span class="o">-&gt;</span><span class="na">variety</span> <span class="o">=</span> <span class="s1">&#39;Honeycrisp&#39;</span><span class="p">;</span>

<span class="nb">var_dump</span><span class="p">(</span><span class="nv">$expressionLanguage</span><span class="o">-&gt;</span><span class="na">evaluate</span><span class="p">(</span>
    <span class="s1">&#39;fruit.variety&#39;</span><span class="p">,</span>
    <span class="p">[</span>
        <span class="s1">&#39;fruit&#39;</span> <span class="o">=&gt;</span> <span class="nv">$apple</span><span class="p">,</span>
    <span class="p">]</span>
<span class="p">));</span> <span class="c1">// displays &quot;Honeycrisp&quot;</span>
</pre></div>
</div>
<p>For more information, see the <a class="reference internal" href="expression_language/syntax.xhtml"><span class="doc">The Expression Syntax</span></a>
entry, especially <a class="reference internal" href="expression_language/syntax.xhtml#component-expression-objects"><span class="std std-ref">Working with Objects</span></a> and <a class="reference internal" href="expression_language/syntax.xhtml#component-expression-arrays"><span class="std std-ref">Working with Arrays</span></a>.</p>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>When using variables in expressions, avoid passing untrusted data into the
array of variables. If you canâ€™t avoid that, sanitize non-alphanumeric
characters in untrusted data to prevent malicious users from injecting
control characters and altering the expression.</p>
</div>
</div>
<div class="section" id="caching">
<h2>Caching</h2>
<p>The component provides some different caching strategies, read more about them
in <a class="reference internal" href="expression_language/caching.xhtml"><span class="doc">Caching Expressions Using Parser Caches</span></a>.</p>
</div>
<div class="section" id="ast-dumping-and-editing">
<h2>AST Dumping and Editing</h2>
<p>The AST (<em>Abstract Syntax Tree</em>) of expressions can be dumped and manipulated
as explained in <a class="reference internal" href="expression_language/ast.xhtml"><span class="doc">Dumping and Manipulating the AST of Expressions</span></a>.</p>
</div>
<div class="section" id="learn-more">
<h2>Learn More</h2>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="expression_language/ast.xhtml">Dumping and Manipulating the AST of Expressions</a></li>
<li class="toctree-l1"><a class="reference internal" href="expression_language/caching.xhtml">Caching Expressions Using Parser Caches</a></li>
<li class="toctree-l1"><a class="reference internal" href="expression_language/extending.xhtml">Extending the ExpressionLanguage</a></li>
<li class="toctree-l1"><a class="reference internal" href="expression_language/syntax.xhtml">The Expression Syntax</a></li>
<li class="toctree-l1"><a class="reference internal" href="../service_container/expression_language.xhtml">How to Inject Values Based on Complex Expressions</a></li>
<li class="toctree-l1"><a class="reference internal" href="../reference/constraints/Expression.xhtml">Expression</a></li>
</ul>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>