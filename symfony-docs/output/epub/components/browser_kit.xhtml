<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>The BrowserKit Component</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="the-browserkit-component">
<span id="index-0"></span><h1>The BrowserKit Component</h1>
<blockquote>
<div><p>The BrowserKit component simulates the behavior of a web browser, allowing
you to make requests, click on links and submit forms programmatically.</p>
</div></blockquote>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>In Symfony versions prior to 4.3, the BrowserKit component could only make
internal requests to your application. Starting from Symfony 4.3, this
component can also <a class="reference internal" href="#component-browserkit-external-requests"><span class="std std-ref">make HTTP requests to any public site</span></a>
when using it in combination with the <a class="reference internal" href="../http_client.xhtml"><span class="doc">HttpClient component</span></a>.</p>
</div>
<div class="section" id="installation">
<h2>Installation</h2>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require symfony/browser-kit
</pre></div>
</td></tr></table></div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If you install this component outside of a Symfony application, you must
require the <code class="docutils literal notranslate"><span class="pre">vendor/autoload.php</span></code> file in your code to enable the class
autoloading mechanism provided by Composer. Read
<a class="reference internal" href="using_components.xhtml"><span class="doc">this article</span></a> for more details.</p>
</div>
</div>
<div class="section" id="basic-usage">
<h2>Basic Usage</h2>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>This article explains how to use the BrowserKit features as an independent
component in any PHP application. Read the <a class="reference internal" href="../testing.xhtml#functional-tests"><span class="std std-ref">Symfony Functional Tests</span></a>
article to learn about how to use it in Symfony applications.</p>
</div>
<div class="section" id="creating-a-client">
<h3>Creating a Client</h3>
<p>The component only provides an abstract client and does not provide any backend
ready to use for the HTTP layer. To create your own client, you must extend the
<code class="docutils literal notranslate"><span class="pre">AbstractBrowser</span></code> class and implement the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/BrowserKit/AbstractBrowser.php" title="Symfony\Component\BrowserKit\AbstractBrowser::doRequest()"><span class="pre">doRequest()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/BrowserKit/AbstractBrowser.php]</span></span></code> method.</p>
<div class="deprecated">
<p><span class="versionmodified">Deprecated since version 4.3: </span>In Symfony 4.3 and earlier versions, the <code class="docutils literal notranslate"><span class="pre">AbstractBrowser</span></code> class was called
<code class="docutils literal notranslate"><span class="pre">Client</span></code> (which is now deprecated).</p>
</div>
<p>The <code class="docutils literal notranslate"><span class="pre">doRequest()</span></code> method accepts a request and should return a response:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">namespace</span> <span class="nx">Acme</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\BrowserKit\AbstractBrowser</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\BrowserKit\Response</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Client</span> <span class="k">extends</span> <span class="nx">AbstractBrowser</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="k">function</span> <span class="nf">doRequest</span><span class="p">(</span><span class="nv">$request</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// ... convert request into a response</span>

        <span class="k">return</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">(</span><span class="nv">$content</span><span class="p">,</span> <span class="nv">$status</span><span class="p">,</span> <span class="nv">$headers</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>For a simple implementation of a browser based on the HTTP layer, have a look
at the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/BrowserKit/HttpBrowser.php" title="Symfony\Component\BrowserKit\HttpBrowser"><span class="pre">HttpBrowser</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/BrowserKit/HttpBrowser.php]</span></span></code> provided by
<a class="reference internal" href="#component-browserkit-external-requests"><span class="std std-ref">this component</span></a>. For an implementation based
on <code class="docutils literal notranslate"><span class="pre">HttpKernelInterface</span></code>, have a look at the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Client.php" title="Symfony\Component\HttpKernel\Client"><span class="pre">Client</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Client.php]</span></span></code>
provided by the <a class="reference internal" href="http_kernel.xhtml"><span class="doc">HttpKernel component</span></a>.</p>
</div>
<div class="section" id="making-requests">
<h3>Making Requests</h3>
<p>Use the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/BrowserKit/AbstractBrowser.php" title="Symfony\Component\BrowserKit\AbstractBrowser::request()"><span class="pre">request()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/BrowserKit/AbstractBrowser.php]</span></span></code> method to
make HTTP requests. The first two arguments are the HTTP method and the requested
URL:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Acme\Client</span><span class="p">;</span>

<span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">();</span>
<span class="nv">$crawler</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;/&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>The value returned by the <code class="docutils literal notranslate"><span class="pre">request()</span></code> method is an instance of the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/DomCrawler/Crawler.php" title="Symfony\Component\DomCrawler\Crawler"><span class="pre">Crawler</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/DomCrawler/Crawler.php]</span></span></code> class, provided by the
<a class="reference internal" href="dom_crawler.xhtml"><span class="doc">DomCrawler component</span></a>, which allows accessing
and traversing HTML elements programmatically.</p>
<p>The <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/BrowserKit/AbstractBrowser.php" title="Symfony\Component\BrowserKit\AbstractBrowser::xmlHttpRequest()"><span class="pre">xmlHttpRequest()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/BrowserKit/AbstractBrowser.php]</span></span></code> method,
which defines the same arguments as the <code class="docutils literal notranslate"><span class="pre">request()</span></code> method, is a shortcut to
make AJAX requests:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Acme\Client</span><span class="p">;</span>

<span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">();</span>
<span class="c1">// the required HTTP_X_REQUESTED_WITH header is added automatically</span>
<span class="nv">$crawler</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">xmlHttpRequest</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;/&#39;</span><span class="p">);</span>
</pre></div>
</div>
</div>
<div class="section" id="clicking-links">
<h3>Clicking Links</h3>
<p>The <code class="docutils literal notranslate"><span class="pre">AbstractBrowser</span></code> is capable of simulating link clicks. Pass the text
content of the link and the client will perform the needed HTTP GET request to
simulate the link click:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Acme\Client</span><span class="p">;</span>

<span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">();</span>
<span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;/product/123&#39;</span><span class="p">);</span>

<span class="nv">$crawler</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">clickLink</span><span class="p">(</span><span class="s1">&#39;Go elsewhere...&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>If you need the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/DomCrawler/Link.php" title="Symfony\Component\DomCrawler\Link"><span class="pre">Link</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/DomCrawler/Link.php]</span></span></code> object that
provides access to the link properties (e.g. <code class="docutils literal notranslate"><span class="pre">$link-&gt;getMethod()</span></code>,
<code class="docutils literal notranslate"><span class="pre">$link-&gt;getUri()</span></code>), use this other method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="nv">$crawler</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;/product/123&#39;</span><span class="p">);</span>
<span class="nv">$link</span> <span class="o">=</span> <span class="nv">$crawler</span><span class="o">-&gt;</span><span class="na">selectLink</span><span class="p">(</span><span class="s1">&#39;Go elsewhere...&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">link</span><span class="p">();</span>
<span class="nv">$client</span><span class="o">-&gt;</span><span class="na">click</span><span class="p">(</span><span class="nv">$link</span><span class="p">);</span>
</pre></div>
</div>
</div>
<div class="section" id="submitting-forms">
<h3>Submitting Forms</h3>
<p>The <code class="docutils literal notranslate"><span class="pre">AbstractBrowser</span></code> is also capable of submitting forms. First, select the
form using any of its buttons and then override any of its properties (method,
field values, etc.) before submitting it:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Acme\Client</span><span class="p">;</span>

<span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">();</span>
<span class="nv">$crawler</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;https://github.com/login&#39;</span><span class="p">);</span>

<span class="c1">// find the form with the &#39;Log in&#39; button and submit it</span>
<span class="c1">// &#39;Log in&#39; can be the text content, id, value or name of a &lt;button&gt; or &lt;input type=&quot;submit&quot;&gt;</span>
<span class="nv">$client</span><span class="o">-&gt;</span><span class="na">submitForm</span><span class="p">(</span><span class="s1">&#39;Log in&#39;</span><span class="p">);</span>

<span class="c1">// the second optional argument lets you override the default form field values</span>
<span class="nv">$client</span><span class="o">-&gt;</span><span class="na">submitForm</span><span class="p">(</span><span class="s1">&#39;Log in&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;login&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;my_user&#39;</span><span class="p">,</span>
    <span class="s1">&#39;password&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;my_pass&#39;</span><span class="p">,</span>
    <span class="c1">// to upload a file, the value must be the absolute file path</span>
    <span class="s1">&#39;file&#39;</span> <span class="o">=&gt;</span> <span class="no">__FILE__</span><span class="p">,</span>
<span class="p">]);</span>

<span class="c1">// you can override other form options too</span>
<span class="nv">$client</span><span class="o">-&gt;</span><span class="na">submitForm</span><span class="p">(</span>
    <span class="s1">&#39;Log in&#39;</span><span class="p">,</span>
    <span class="p">[</span><span class="s1">&#39;login&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;my_user&#39;</span><span class="p">,</span> <span class="s1">&#39;password&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;my_pass&#39;</span><span class="p">],</span>
    <span class="c1">// override the default form HTTP method</span>
    <span class="s1">&#39;PUT&#39;</span><span class="p">,</span>
    <span class="c1">// override some $_SERVER parameters (e.g. HTTP headers)</span>
    <span class="p">[</span><span class="s1">&#39;HTTP_ACCEPT_LANGUAGE&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;es&#39;</span><span class="p">]</span>
<span class="p">);</span>
</pre></div>
</div>
<p>If you need the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/DomCrawler/Form.php" title="Symfony\Component\DomCrawler\Form"><span class="pre">Form</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/DomCrawler/Form.php]</span></span></code> object that
provides access to the form properties (e.g. <code class="docutils literal notranslate"><span class="pre">$form-&gt;getUri()</span></code>,
<code class="docutils literal notranslate"><span class="pre">$form-&gt;getValues()</span></code>, <code class="docutils literal notranslate"><span class="pre">$form-&gt;getFields()</span></code>), use this other method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>

<span class="c1">// select the form and fill in some values</span>
<span class="nv">$form</span> <span class="o">=</span> <span class="nv">$crawler</span><span class="o">-&gt;</span><span class="na">selectButton</span><span class="p">(</span><span class="s1">&#39;Log in&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">form</span><span class="p">();</span>
<span class="nv">$form</span><span class="p">[</span><span class="s1">&#39;login&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;symfonyfan&#39;</span><span class="p">;</span>
<span class="nv">$form</span><span class="p">[</span><span class="s1">&#39;password&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;anypass&#39;</span><span class="p">;</span>

<span class="c1">// submit that form</span>
<span class="nv">$crawler</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">submit</span><span class="p">(</span><span class="nv">$form</span><span class="p">);</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="cookies">
<h2>Cookies</h2>
<div class="section" id="retrieving-cookies">
<h3>Retrieving Cookies</h3>
<p>The <code class="docutils literal notranslate"><span class="pre">AbstractBrowser</span></code> implementation exposes cookies (if any) through a
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/BrowserKit/CookieJar.php" title="Symfony\Component\BrowserKit\CookieJar"><span class="pre">CookieJar</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/BrowserKit/CookieJar.php]</span></span></code>, which allows you to store and
retrieve any cookie while making requests with the client:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Acme\Client</span><span class="p">;</span>

<span class="c1">// Make a request</span>
<span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">();</span>
<span class="nv">$crawler</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;/&#39;</span><span class="p">);</span>

<span class="c1">// Get the cookie Jar</span>
<span class="nv">$cookieJar</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getCookieJar</span><span class="p">();</span>

<span class="c1">// Get a cookie by name</span>
<span class="nv">$cookie</span> <span class="o">=</span> <span class="nv">$cookieJar</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;name_of_the_cookie&#39;</span><span class="p">);</span>

<span class="c1">// Get cookie data</span>
<span class="nv">$name</span>       <span class="o">=</span> <span class="nv">$cookie</span><span class="o">-&gt;</span><span class="na">getName</span><span class="p">();</span>
<span class="nv">$value</span>      <span class="o">=</span> <span class="nv">$cookie</span><span class="o">-&gt;</span><span class="na">getValue</span><span class="p">();</span>
<span class="nv">$rawValue</span>   <span class="o">=</span> <span class="nv">$cookie</span><span class="o">-&gt;</span><span class="na">getRawValue</span><span class="p">();</span>
<span class="nv">$isSecure</span>   <span class="o">=</span> <span class="nv">$cookie</span><span class="o">-&gt;</span><span class="na">isSecure</span><span class="p">();</span>
<span class="nv">$isHttpOnly</span> <span class="o">=</span> <span class="nv">$cookie</span><span class="o">-&gt;</span><span class="na">isHttpOnly</span><span class="p">();</span>
<span class="nv">$isExpired</span>  <span class="o">=</span> <span class="nv">$cookie</span><span class="o">-&gt;</span><span class="na">isExpired</span><span class="p">();</span>
<span class="nv">$expires</span>    <span class="o">=</span> <span class="nv">$cookie</span><span class="o">-&gt;</span><span class="na">getExpiresTime</span><span class="p">();</span>
<span class="nv">$path</span>       <span class="o">=</span> <span class="nv">$cookie</span><span class="o">-&gt;</span><span class="na">getPath</span><span class="p">();</span>
<span class="nv">$domain</span>     <span class="o">=</span> <span class="nv">$cookie</span><span class="o">-&gt;</span><span class="na">getDomain</span><span class="p">();</span>
<span class="nv">$sameSite</span>   <span class="o">=</span> <span class="nv">$cookie</span><span class="o">-&gt;</span><span class="na">getSameSite</span><span class="p">();</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>These methods only return cookies that have not expired.</p>
</div>
</div>
<div class="section" id="looping-through-cookies">
<h3>Looping Through Cookies</h3>
<div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Acme\Client</span><span class="p">;</span>

<span class="c1">// Make a request</span>
<span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">();</span>
<span class="nv">$crawler</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;/&#39;</span><span class="p">);</span>

<span class="c1">// Get the cookie Jar</span>
<span class="nv">$cookieJar</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">getCookieJar</span><span class="p">();</span>

<span class="c1">// Get array with all cookies</span>
<span class="nv">$cookies</span> <span class="o">=</span> <span class="nv">$cookieJar</span><span class="o">-&gt;</span><span class="na">all</span><span class="p">();</span>
<span class="k">foreach</span> <span class="p">(</span><span class="nv">$cookies</span> <span class="k">as</span> <span class="nv">$cookie</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">}</span>

<span class="c1">// Get all values</span>
<span class="nv">$values</span> <span class="o">=</span> <span class="nv">$cookieJar</span><span class="o">-&gt;</span><span class="na">allValues</span><span class="p">(</span><span class="s1">&#39;http://symfony.com&#39;</span><span class="p">);</span>
<span class="k">foreach</span> <span class="p">(</span><span class="nv">$values</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">}</span>

<span class="c1">// Get all raw values</span>
<span class="nv">$rawValues</span> <span class="o">=</span> <span class="nv">$cookieJar</span><span class="o">-&gt;</span><span class="na">allRawValues</span><span class="p">(</span><span class="s1">&#39;http://symfony.com&#39;</span><span class="p">);</span>
<span class="k">foreach</span> <span class="p">(</span><span class="nv">$rawValues</span> <span class="k">as</span> <span class="nv">$rawValue</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="setting-cookies">
<h3>Setting Cookies</h3>
<p>You can also create cookies and add them to a cookie jar that can be injected
into the client constructor:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Acme\Client</span><span class="p">;</span>

<span class="c1">// create cookies and add to cookie jar</span>
<span class="nv">$cookie</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Cookie</span><span class="p">(</span><span class="s1">&#39;flavor&#39;</span><span class="p">,</span> <span class="s1">&#39;chocolate&#39;</span><span class="p">,</span> <span class="nb">strtotime</span><span class="p">(</span><span class="s1">&#39;+1 day&#39;</span><span class="p">));</span>
<span class="nv">$cookieJar</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CookieJar</span><span class="p">();</span>
<span class="nv">$cookieJar</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nv">$cookie</span><span class="p">);</span>

<span class="c1">// create a client and set the cookies</span>
<span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">([],</span> <span class="k">null</span><span class="p">,</span> <span class="nv">$cookieJar</span><span class="p">);</span>
<span class="c1">// ...</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="history">
<h2>History</h2>
<p>The client stores all your requests allowing you to go back and forward in your
history:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Acme\Client</span><span class="p">;</span>

<span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">();</span>
<span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;/&#39;</span><span class="p">);</span>

<span class="c1">// select and click on a link</span>
<span class="nv">$link</span> <span class="o">=</span> <span class="nv">$crawler</span><span class="o">-&gt;</span><span class="na">selectLink</span><span class="p">(</span><span class="s1">&#39;Documentation&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">link</span><span class="p">();</span>
<span class="nv">$client</span><span class="o">-&gt;</span><span class="na">click</span><span class="p">(</span><span class="nv">$link</span><span class="p">);</span>

<span class="c1">// go back to home page</span>
<span class="nv">$crawler</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">back</span><span class="p">();</span>

<span class="c1">// go forward to documentation page</span>
<span class="nv">$crawler</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">forward</span><span class="p">();</span>
</pre></div>
</div>
<p>You can delete the client’s history with the <code class="docutils literal notranslate"><span class="pre">restart()</span></code> method. This will
also delete all the cookies:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Acme\Client</span><span class="p">;</span>

<span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">();</span>
<span class="nv">$client</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;/&#39;</span><span class="p">);</span>

<span class="c1">// reset the client (history and cookies are cleared too)</span>
<span class="nv">$client</span><span class="o">-&gt;</span><span class="na">restart</span><span class="p">();</span>
</pre></div>
</div>
</div>
<div class="section" id="making-external-http-requests">
<span id="component-browserkit-external-requests"></span><h2>Making External HTTP Requests</h2>
<p>So far, all the examples in this article have assumed that you are making
internal requests to your own application. However, you can run the exact same
examples when making HTTP requests to external web sites and applications.</p>
<p>First, install and configure the <a class="reference internal" href="../http_client.xhtml"><span class="doc">HttpClient component</span></a>.
Then, use the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/BrowserKit/HttpBrowser.php" title="Symfony\Component\BrowserKit\HttpBrowser"><span class="pre">HttpBrowser</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/BrowserKit/HttpBrowser.php]</span></span></code> to create
the client that will make the external HTTP requests:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\BrowserKit\HttpBrowser</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpClient\HttpClient</span><span class="p">;</span>

<span class="nv">$browser</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">HttpBrowser</span><span class="p">(</span><span class="nx">HttpClient</span><span class="o">::</span><span class="na">create</span><span class="p">());</span>
</pre></div>
</div>
<p>You can now use any of the methods shown in this article to extract information,
click links, submit forms, etc. This means that you no longer need to use a
dedicated web crawler or scraper such as <a class="reference external" href="https://github.com/FriendsOfPHP/Goutte">Goutte</a><span class="link-target"> [https://github.com/FriendsOfPHP/Goutte]</span>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$browser</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">HttpBrowser</span><span class="p">(</span><span class="nx">HttpClient</span><span class="o">::</span><span class="na">create</span><span class="p">());</span>

<span class="nv">$browser</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;https://github.com&#39;</span><span class="p">);</span>
<span class="nv">$browser</span><span class="o">-&gt;</span><span class="na">clickLink</span><span class="p">(</span><span class="s1">&#39;Sign in&#39;</span><span class="p">);</span>
<span class="nv">$browser</span><span class="o">-&gt;</span><span class="na">submitForm</span><span class="p">(</span><span class="s1">&#39;Sign in&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;login&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;...&#39;</span><span class="p">,</span> <span class="s1">&#39;password&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;...&#39;</span><span class="p">]);</span>
<span class="nv">$openPullRequests</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$browser</span><span class="o">-&gt;</span><span class="na">clickLink</span><span class="p">(</span><span class="s1">&#39;Pull requests&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">filter</span><span class="p">(</span>
    <span class="s1">&#39;.table-list-header-toggle a:nth-child(1)&#39;</span>
<span class="p">)</span><span class="o">-&gt;</span><span class="na">text</span><span class="p">());</span>
</pre></div>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 4.3: </span>The feature to make external HTTP requests was introduced in Symfony 4.3.</p>
</div>
</div>
<div class="section" id="learn-more">
<h2>Learn more</h2>
<ul class="simple">
<li><p><a class="reference internal" href="../testing.xhtml"><span class="doc">Testing</span></a></p></li>
<li><p><a class="reference internal" href="css_selector.xhtml"><span class="doc">The CssSelector Component</span></a></p></li>
<li><p><a class="reference internal" href="dom_crawler.xhtml"><span class="doc">The DomCrawler Component</span></a></p></li>
</ul>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>