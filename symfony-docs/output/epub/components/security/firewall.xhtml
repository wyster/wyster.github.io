<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>The Firewall and Authorization</title>
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="the-firewall-and-authorization">
<span id="index-0"></span><h1>The Firewall and Authorization</h1>
<p>Central to the Security component is authorization. This is handled by an instance
of <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Authorization/AuthorizationCheckerInterface.php" title="Symfony\Component\Security\Core\Authorization\AuthorizationCheckerInterface"><span class="pre">AuthorizationCheckerInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Authorization/AuthorizationCheckerInterface.php]</span></span></code>.
When all steps in the process of authenticating the user have been taken successfully,
you can ask the authorization checker if the authenticated user has access to a
certain action or resource of the application:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Security\Core\Authorization\AuthorizationChecker</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Core\Exception\AccessDeniedException</span><span class="p">;</span>

<span class="c1">// instance of Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface</span>
<span class="nv">$tokenStorage</span> <span class="o">=</span> <span class="o">...</span><span class="p">;</span>

<span class="c1">// instance of Symfony\Component\Security\Core\Authentication\AuthenticationManagerInterface</span>
<span class="nv">$authenticationManager</span> <span class="o">=</span> <span class="o">...</span><span class="p">;</span>

<span class="c1">// instance of Symfony\Component\Security\Core\Authorization\AccessDecisionManagerInterface</span>
<span class="nv">$accessDecisionManager</span> <span class="o">=</span> <span class="o">...</span><span class="p">;</span>

<span class="nv">$authorizationChecker</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AuthorizationChecker</span><span class="p">(</span>
    <span class="nv">$tokenStorage</span><span class="p">,</span>
    <span class="nv">$authenticationManager</span><span class="p">,</span>
    <span class="nv">$accessDecisionManager</span>
<span class="p">);</span>

<span class="c1">// ... authenticate the user</span>

<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$authorizationChecker</span><span class="o">-&gt;</span><span class="na">isGranted</span><span class="p">(</span><span class="s1">&#39;ROLE_ADMIN&#39;</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nx">AccessDeniedException</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Read the dedicated articles to learn more about <a class="reference internal" href="authentication.xhtml"><span class="doc">Authentication</span></a>
and <a class="reference internal" href="authorization.xhtml"><span class="doc">Authorization</span></a>.</p>
</div>
<div class="section" id="a-firewall-for-http-requests">
<span id="firewall"></span><h2>A Firewall for HTTP Requests</h2>
<p>Authenticating a user is done by the firewall. An application may have
multiple secured areas, so the firewall is configured using a map of these
secured areas. For each of these areas, the map contains a request matcher
and a collection of listeners. The request matcher gives the firewall the
ability to find out if the current request points to a secured area.
The listeners are then asked if the current request can be used to authenticate
the user:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\RequestMatcher</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Http\Firewall\ExceptionListener</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Http\FirewallMap</span><span class="p">;</span>

<span class="nv">$firewallMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FirewallMap</span><span class="p">();</span>

<span class="nv">$requestMatcher</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">RequestMatcher</span><span class="p">(</span><span class="s1">&#39;^/secured-area/&#39;</span><span class="p">);</span>

<span class="c1">// array of callables</span>
<span class="nv">$listeners</span> <span class="o">=</span> <span class="p">[</span><span class="o">...</span><span class="p">];</span>

<span class="nv">$exceptionListener</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ExceptionListener</span><span class="p">(</span><span class="o">...</span><span class="p">);</span>

<span class="nv">$firewallMap</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="nv">$requestMatcher</span><span class="p">,</span> <span class="nv">$listeners</span><span class="p">,</span> <span class="nv">$exceptionListener</span><span class="p">);</span>
</pre></div>
</div>
<p>The firewall map will be given to the firewall as its first argument, together
with the event dispatcher that is used by the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/HttpKernel.php" title="Symfony\Component\HttpKernel\HttpKernel"><span class="pre">HttpKernel</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/HttpKernel.php]</span></span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\KernelEvents</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Http\Firewall</span><span class="p">;</span>

<span class="c1">// the EventDispatcher used by the HttpKernel</span>
<span class="nv">$dispatcher</span> <span class="o">=</span> <span class="o">...</span><span class="p">;</span>

<span class="nv">$firewall</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Firewall</span><span class="p">(</span><span class="nv">$firewallMap</span><span class="p">,</span> <span class="nv">$dispatcher</span><span class="p">);</span>

<span class="nv">$dispatcher</span><span class="o">-&gt;</span><span class="na">addListener</span><span class="p">(</span>
    <span class="nx">KernelEvents</span><span class="o">::</span><span class="na">REQUEST</span><span class="p">,</span>
    <span class="p">[</span><span class="nv">$firewall</span><span class="p">,</span> <span class="s1">&#39;onKernelRequest&#39;</span><span class="p">]</span>
<span class="p">);</span>
</pre></div>
</div>
<p>The firewall is registered to listen to the <code class="docutils literal notranslate"><span class="pre">kernel.request</span></code> event that
will be dispatched by the HttpKernel at the beginning of each request
it processes. This way, the firewall may prevent the user from going any
further than allowed.</p>
<div class="section" id="firewall-config">
<h3>Firewall Config</h3>
<p>The information about a given firewall, such as its name, provider, context,
entry point and access denied URL, is provided by instances of the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/SecurityBundle/Security/FirewallConfig.php" title="Symfony\Bundle\SecurityBundle\Security\FirewallConfig"><span class="pre">FirewallConfig</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/SecurityBundle/Security/FirewallConfig.php]</span></span></code> class.</p>
<p>This object can be accessed through the <code class="docutils literal notranslate"><span class="pre">getFirewallConfig(Request</span> <span class="pre">$request)</span></code>
method of the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/SecurityBundle/Security/FirewallMap.php" title="Symfony\Bundle\SecurityBundle\Security\FirewallMap"><span class="pre">FirewallMap</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/SecurityBundle/Security/FirewallMap.php]</span></span></code> class and
through the <code class="docutils literal notranslate"><span class="pre">getConfig()</span></code>  method of the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/SecurityBundle/Security/FirewallContext.php" title="Symfony\Bundle\SecurityBundle\Security\FirewallContext"><span class="pre">FirewallContext</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/SecurityBundle/Security/FirewallContext.php]</span></span></code> class.</p>
</div>
<div class="section" id="firewall-listeners">
<span id="id1"></span><h3>Firewall Listeners</h3>
<p>When the firewall gets notified of the <code class="docutils literal notranslate"><span class="pre">kernel.request</span></code> event, it asks
the firewall map if the request matches one of the secured areas. The first
secured area that matches the request will return a set of corresponding
firewall listeners (which each is a callable).
These listeners will all be asked to handle the current request. This basically
means: find out if the current request contains any information by which
the user might be authenticated (for instance the Basic HTTP authentication
listener checks if the request has a header called <code class="docutils literal notranslate"><span class="pre">PHP_AUTH_USER</span></code>).</p>
</div>
<div class="section" id="exception-listener">
<h3>Exception Listener</h3>
<p>If any of the listeners throws an <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Exception/AuthenticationException.php" title="Symfony\Component\Security\Core\Exception\AuthenticationException"><span class="pre">AuthenticationException</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Exception/AuthenticationException.php]</span></span></code>,
the exception listener that was provided when adding secured areas to the
firewall map will jump in.</p>
<p>The exception listener determines what happens next, based on the arguments
it received when it was created. It may start the authentication procedure,
perhaps ask the user to supply their credentials again (when they have only been
authenticated based on a “remember-me” cookie), or transform the exception
into an <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Exception/AccessDeniedHttpException.php" title="Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException"><span class="pre">AccessDeniedHttpException</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Exception/AccessDeniedHttpException.php]</span></span></code>,
which will eventually result in an “HTTP/1.1 403: Access Denied” response.</p>
</div>
<div class="section" id="entry-points">
<h3>Entry Points</h3>
<p>When the user is not authenticated at all (i.e. when the token storage
has no token yet), the firewall’s entry point will be called to “start”
the authentication process. An entry point should implement
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/EntryPoint/AuthenticationEntryPointInterface.php" title="Symfony\Component\Security\Http\EntryPoint\AuthenticationEntryPointInterface"><span class="pre">AuthenticationEntryPointInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/EntryPoint/AuthenticationEntryPointInterface.php]</span></span></code>,
which has only one method: <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/EntryPoint/AuthenticationEntryPointInterface.php" title="Symfony\Component\Security\Http\EntryPoint\AuthenticationEntryPointInterface::start()"><span class="pre">start()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/EntryPoint/AuthenticationEntryPointInterface.php]</span></span></code>.
This method receives the current <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Request.php" title="Symfony\Component\HttpFoundation\Request"><span class="pre">Request</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Request.php]</span></span></code>
object and the exception by which the exception listener was triggered.
The method should return a <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Response.php" title="Symfony\Component\HttpFoundation\Response"><span class="pre">Response</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Response.php]</span></span></code>
object. This could be, for instance, the page containing the login form or,
in the case of Basic HTTP authentication, a response with a <code class="docutils literal notranslate"><span class="pre">WWW-Authenticate</span></code>
header, which will prompt the user to supply their username and password.</p>
</div>
</div>
<div class="section" id="flow-firewall-authentication-authorization">
<h2>Flow: Firewall, Authentication, Authorization</h2>
<p>Hopefully you can now see a little bit about how the “flow” of the security
context works:</p>
<ol class="arabic simple">
<li><p>The Firewall is registered as a listener on the <code class="docutils literal notranslate"><span class="pre">kernel.request</span></code> event;</p></li>
<li><p>At the beginning of the request, the Firewall checks the firewall map
to see if any firewall should be active for this URL;</p></li>
<li><p>If a firewall is found in the map for this URL, its listeners are notified;</p></li>
<li><p>Each listener checks to see if the current request contains any authentication
information - a listener may (a) authenticate a user, (b) throw an
<code class="docutils literal notranslate"><span class="pre">AuthenticationException</span></code>, or (c) do nothing (because there is no
authentication information on the request);</p></li>
<li><p>Once a user is authenticated, you’ll use <a class="reference internal" href="authorization.xhtml"><span class="doc">Authorization</span></a>
to deny access to certain resources.</p></li>
</ol>
<p>Read the next articles to find out more about <a class="reference internal" href="authentication.xhtml"><span class="doc">Authentication</span></a>
and <a class="reference internal" href="authorization.xhtml"><span class="doc">Authorization</span></a>.</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>