<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Authentication</title>
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="authentication">
<span id="index-0"></span><h1>Authentication</h1>
<p>When a request points to a secured area, and one of the listeners from the
firewall map is able to extract the user’s credentials from the current
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Request.php" title="Symfony\Component\HttpFoundation\Request"><span class="pre">Request</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Request.php]</span></span></code> object, it should create
a token, containing these credentials. The next thing the listener should
do is ask the authentication manager to validate the given token, and return
an <em>authenticated</em> token if the supplied credentials were found to be valid.
The listener should then store the authenticated token using
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Authentication/Token/Storage/TokenStorageInterface.php" title="Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface"><span class="pre">the</span> <span class="pre">token</span> <span class="pre">storage</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Authentication/Token/Storage/TokenStorageInterface.php]</span></span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Event\RequestEvent</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Core\Authentication\AuthenticationManagerInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Core\Authentication\Token\UsernamePasswordToken</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">SomeAuthenticationListener</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @var TokenStorageInterface</span>
<span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$tokenStorage</span><span class="p">;</span>

    <span class="sd">/**</span>
<span class="sd">     * @var AuthenticationManagerInterface</span>
<span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$authenticationManager</span><span class="p">;</span>

    <span class="sd">/**</span>
<span class="sd">     * @var string Uniquely identifies the secured area</span>
<span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$providerKey</span><span class="p">;</span>

    <span class="c1">// ...</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__invoke</span><span class="p">(</span><span class="nx">RequestEvent</span> <span class="nv">$event</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$request</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getRequest</span><span class="p">();</span>

        <span class="nv">$username</span> <span class="o">=</span> <span class="o">...</span><span class="p">;</span>
        <span class="nv">$password</span> <span class="o">=</span> <span class="o">...</span><span class="p">;</span>

        <span class="nv">$unauthenticatedToken</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UsernamePasswordToken</span><span class="p">(</span>
            <span class="nv">$username</span><span class="p">,</span>
            <span class="nv">$password</span><span class="p">,</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">providerKey</span>
        <span class="p">);</span>

        <span class="nv">$authenticatedToken</span> <span class="o">=</span> <span class="nv">$this</span>
            <span class="o">-&gt;</span><span class="na">authenticationManager</span>
            <span class="o">-&gt;</span><span class="na">authenticate</span><span class="p">(</span><span class="nv">$unauthenticatedToken</span><span class="p">);</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">tokenStorage</span><span class="o">-&gt;</span><span class="na">setToken</span><span class="p">(</span><span class="nv">$authenticatedToken</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>A token can be of any class, as long as it implements
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Authentication/Token/TokenInterface.php" title="Symfony\Component\Security\Core\Authentication\Token\TokenInterface"><span class="pre">TokenInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Authentication/Token/TokenInterface.php]</span></span></code>.</p>
</div>
<div class="section" id="the-authentication-manager">
<h2>The Authentication Manager</h2>
<p>The default authentication manager is an instance of
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Authentication/AuthenticationProviderManager.php" title="Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager"><span class="pre">AuthenticationProviderManager</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Authentication/AuthenticationProviderManager.php]</span></span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Core\Exception\AuthenticationException</span><span class="p">;</span>

<span class="c1">// instances of Symfony\Component\Security\Core\Authentication\Provider\AuthenticationProviderInterface</span>
<span class="nv">$providers</span> <span class="o">=</span> <span class="p">[</span><span class="o">...</span><span class="p">];</span>

<span class="nv">$authenticationManager</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AuthenticationProviderManager</span><span class="p">(</span><span class="nv">$providers</span><span class="p">);</span>

<span class="k">try</span> <span class="p">{</span>
    <span class="nv">$authenticatedToken</span> <span class="o">=</span> <span class="nv">$authenticationManager</span>
        <span class="o">-&gt;</span><span class="na">authenticate</span><span class="p">(</span><span class="nv">$unauthenticatedToken</span><span class="p">);</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">AuthenticationException</span> <span class="nv">$exception</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// authentication failed</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The <code class="docutils literal notranslate"><span class="pre">AuthenticationProviderManager</span></code>, when instantiated, receives several
authentication providers, each supporting a different type of token.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>You may write your own authentication manager, the only requirement is that
it implements <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Authentication/AuthenticationManagerInterface.php" title="Symfony\Component\Security\Core\Authentication\AuthenticationManagerInterface"><span class="pre">AuthenticationManagerInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Authentication/AuthenticationManagerInterface.php]</span></span></code>.</p>
</div>
</div>
<div class="section" id="authentication-providers">
<span id="id1"></span><h2>Authentication Providers</h2>
<p>Each provider (since it implements
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Authentication/Provider/AuthenticationProviderInterface.php" title="Symfony\Component\Security\Core\Authentication\Provider\AuthenticationProviderInterface"><span class="pre">AuthenticationProviderInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Authentication/Provider/AuthenticationProviderInterface.php]</span></span></code>)
has a <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Authentication/Provider/AuthenticationProviderInterface.php" title="Symfony\Component\Security\Core\Authentication\Provider\AuthenticationProviderInterface::supports()"><span class="pre">supports()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Authentication/Provider/AuthenticationProviderInterface.php]</span></span></code> method
by which the <code class="docutils literal notranslate"><span class="pre">AuthenticationProviderManager</span></code>
can determine if it supports the given token. If this is the case, the
manager then calls the provider’s <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Authentication/Provider/AuthenticationProviderInterface.php" title="Symfony\Component\Security\Core\Authentication\Provider\AuthenticationProviderInterface::authenticate()"><span class="pre">authenticate()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Authentication/Provider/AuthenticationProviderInterface.php]</span></span></code> method.
This method should return an authenticated token or throw an
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Exception/AuthenticationException.php" title="Symfony\Component\Security\Core\Exception\AuthenticationException"><span class="pre">AuthenticationException</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Exception/AuthenticationException.php]</span></span></code>
(or any other exception extending it).</p>
<div class="section" id="authenticating-users-by-their-username-and-password">
<h3>Authenticating Users by their Username and Password</h3>
<p>An authentication provider will attempt to authenticate a user based on
the credentials they provided. Usually these are a username and a password.
Most web applications store their user’s username and a hash of the user’s
password combined with a randomly generated salt. This means that the average
authentication would consist of fetching the salt and the hashed password
from the user data storage, hash the password the user has just provided
(e.g. using a login form) with the salt and compare both to determine if
the given password is valid.</p>
<p>This functionality is offered by the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Authentication/Provider/DaoAuthenticationProvider.php" title="Symfony\Component\Security\Core\Authentication\Provider\DaoAuthenticationProvider"><span class="pre">DaoAuthenticationProvider</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Authentication/Provider/DaoAuthenticationProvider.php]</span></span></code>.
It fetches the user’s data from a <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/User/UserProviderInterface.php" title="Symfony\Component\Security\Core\User\UserProviderInterface"><span class="pre">UserProviderInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/User/UserProviderInterface.php]</span></span></code>,
uses a <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Encoder/PasswordEncoderInterface.php" title="Symfony\Component\Security\Core\Encoder\PasswordEncoderInterface"><span class="pre">PasswordEncoderInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Encoder/PasswordEncoderInterface.php]</span></span></code>
to create a hash of the password and returns an authenticated token if the
password was valid:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Security\Core\Authentication\Provider\DaoAuthenticationProvider</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Core\Encoder\EncoderFactory</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Core\User\InMemoryUserProvider</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Core\User\UserChecker</span><span class="p">;</span>

<span class="nv">$userProvider</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">InMemoryUserProvider</span><span class="p">(</span>
    <span class="p">[</span>
        <span class="s1">&#39;admin&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
            <span class="c1">// password is &quot;foo&quot;</span>
            <span class="s1">&#39;password&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;5FZ2Z8QIkA7UTZ4BYkoC+GsReLf569mSKDsfods6LYQ8t+a8EW9oaircfMpmaLbPBh4FOBiiFyLfuZmTSUwzZg==&#39;</span><span class="p">,</span>
            <span class="s1">&#39;roles&#39;</span>    <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;ROLE_ADMIN&#39;</span><span class="p">],</span>
        <span class="p">],</span>
    <span class="p">]</span>
<span class="p">);</span>

<span class="c1">// for some extra checks: is account enabled, locked, expired, etc.</span>
<span class="nv">$userChecker</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserChecker</span><span class="p">();</span>

<span class="c1">// an array of password encoders (see below)</span>
<span class="nv">$encoderFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EncoderFactory</span><span class="p">(</span><span class="o">...</span><span class="p">);</span>

<span class="nv">$daoProvider</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DaoAuthenticationProvider</span><span class="p">(</span>
    <span class="nv">$userProvider</span><span class="p">,</span>
    <span class="nv">$userChecker</span><span class="p">,</span>
    <span class="s1">&#39;secured_area&#39;</span><span class="p">,</span>
    <span class="nv">$encoderFactory</span>
<span class="p">);</span>

<span class="nv">$daoProvider</span><span class="o">-&gt;</span><span class="na">authenticate</span><span class="p">(</span><span class="nv">$unauthenticatedToken</span><span class="p">);</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The example above demonstrates the use of the “in-memory” user provider,
but you may use any user provider, as long as it implements
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/User/UserProviderInterface.php" title="Symfony\Component\Security\Core\User\UserProviderInterface"><span class="pre">UserProviderInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/User/UserProviderInterface.php]</span></span></code>.
It is also possible to let multiple user providers try to find the user’s
data, using the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/User/ChainUserProvider.php" title="Symfony\Component\Security\Core\User\ChainUserProvider"><span class="pre">ChainUserProvider</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/User/ChainUserProvider.php]</span></span></code>.</p>
</div>
</div>
<div class="section" id="the-password-encoder-factory">
<h3>The Password Encoder Factory</h3>
<p>The <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Authentication/Provider/DaoAuthenticationProvider.php" title="Symfony\Component\Security\Core\Authentication\Provider\DaoAuthenticationProvider"><span class="pre">DaoAuthenticationProvider</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Authentication/Provider/DaoAuthenticationProvider.php]</span></span></code>
uses an encoder factory to create a password encoder for a given type of
user. This allows you to use different encoding strategies for different
types of users. The default <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Encoder/EncoderFactory.php" title="Symfony\Component\Security\Core\Encoder\EncoderFactory"><span class="pre">EncoderFactory</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Encoder/EncoderFactory.php]</span></span></code>
receives an array of encoders:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Acme\Entity\LegacyUser</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Core\Encoder\EncoderFactory</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Core\Encoder\MessageDigestPasswordEncoder</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Core\User\User</span><span class="p">;</span>

<span class="nv">$defaultEncoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MessageDigestPasswordEncoder</span><span class="p">(</span><span class="s1">&#39;sha512&#39;</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="mi">5000</span><span class="p">);</span>
<span class="nv">$weakEncoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MessageDigestPasswordEncoder</span><span class="p">(</span><span class="s1">&#39;md5&#39;</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>

<span class="nv">$encoders</span> <span class="o">=</span> <span class="p">[</span>
    <span class="nx">User</span><span class="o">::</span><span class="na">class</span>       <span class="o">=&gt;</span> <span class="nv">$defaultEncoder</span><span class="p">,</span>
    <span class="nx">LegacyUser</span><span class="o">::</span><span class="na">class</span> <span class="o">=&gt;</span> <span class="nv">$weakEncoder</span><span class="p">,</span>
    <span class="c1">// ...</span>
<span class="p">];</span>
<span class="nv">$encoderFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EncoderFactory</span><span class="p">(</span><span class="nv">$encoders</span><span class="p">);</span>
</pre></div>
</div>
<p>Each encoder should implement <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Encoder/PasswordEncoderInterface.php" title="Symfony\Component\Security\Core\Encoder\PasswordEncoderInterface"><span class="pre">PasswordEncoderInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Encoder/PasswordEncoderInterface.php]</span></span></code>
or be an array with a <code class="docutils literal notranslate"><span class="pre">class</span></code> and an <code class="docutils literal notranslate"><span class="pre">arguments</span></code> key, which allows the
encoder factory to construct the encoder only when it is needed.</p>
</div>
<div class="section" id="creating-a-custom-password-encoder">
<h3>Creating a custom Password Encoder</h3>
<p>There are many built-in password encoders. But if you need to create your
own, it needs to follow these rules:</p>
<ol class="arabic">
<li><p>The class must implement <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Encoder/PasswordEncoderInterface.php" title="Symfony\Component\Security\Core\Encoder\PasswordEncoderInterface"><span class="pre">PasswordEncoderInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Encoder/PasswordEncoderInterface.php]</span></span></code>
(you can also extend <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Encoder/BasePasswordEncoder.php" title="Symfony\Component\Security\Core\Encoder\BasePasswordEncoder"><span class="pre">BasePasswordEncoder</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Encoder/BasePasswordEncoder.php]</span></span></code>);</p></li>
<li><p>The implementations of
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Encoder/PasswordEncoderInterface.php" title="Symfony\Component\Security\Core\Encoder\PasswordEncoderInterface::encodePassword()"><span class="pre">encodePassword()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Encoder/PasswordEncoderInterface.php]</span></span></code>
and
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Encoder/PasswordEncoderInterface.php" title="Symfony\Component\Security\Core\Encoder\PasswordEncoderInterface::isPasswordValid()"><span class="pre">isPasswordValid()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Encoder/PasswordEncoderInterface.php]</span></span></code>
must first of all make sure the password is not too long, i.e. the password length is no longer
than 4096 characters. This is for security reasons (see <a class="reference external" href="https://symfony.com/blog/cve-2013-5750-security-issue-in-fosuserbundle-login-form">CVE-2013-5750</a><span class="link-target"> [https://symfony.com/blog/cve-2013-5750-security-issue-in-fosuserbundle-login-form]</span>), and you can use the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Encoder/BasePasswordEncoder.php" title="Symfony\Component\Security\Core\Encoder\BasePasswordEncoder::isPasswordTooLong()"><span class="pre">isPasswordTooLong()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Encoder/BasePasswordEncoder.php]</span></span></code>
method for this check:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Security\Core\Encoder\BasePasswordEncoder</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Core\Exception\BadCredentialsException</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">FoobarEncoder</span> <span class="k">extends</span> <span class="nx">BasePasswordEncoder</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">encodePassword</span><span class="p">(</span><span class="nv">$raw</span><span class="p">,</span> <span class="nv">$salt</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">isPasswordTooLong</span><span class="p">(</span><span class="nv">$raw</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nx">BadCredentialsException</span><span class="p">(</span><span class="s1">&#39;Invalid password.&#39;</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// ...</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">isPasswordValid</span><span class="p">(</span><span class="nv">$encoded</span><span class="p">,</span> <span class="nv">$raw</span><span class="p">,</span> <span class="nv">$salt</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">isPasswordTooLong</span><span class="p">(</span><span class="nv">$raw</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</li>
</ol>
</div>
<div class="section" id="using-password-encoders">
<h3>Using Password Encoders</h3>
<p>When the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Encoder/EncoderFactory.php" title="Symfony\Component\Security\Core\Encoder\EncoderFactory::getEncoder()"><span class="pre">getEncoder()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Encoder/EncoderFactory.php]</span></span></code>
method of the password encoder factory is called with the user object as
its first argument, it will return an encoder of type <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Encoder/PasswordEncoderInterface.php" title="Symfony\Component\Security\Core\Encoder\PasswordEncoderInterface"><span class="pre">PasswordEncoderInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Encoder/PasswordEncoderInterface.php]</span></span></code>
which should be used to encode this user’s password:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// a Acme\Entity\LegacyUser instance</span>
<span class="nv">$user</span> <span class="o">=</span> <span class="o">...</span><span class="p">;</span>

<span class="c1">// the password that was submitted, e.g. when registering</span>
<span class="nv">$plainPassword</span> <span class="o">=</span> <span class="o">...</span><span class="p">;</span>

<span class="nv">$encoder</span> <span class="o">=</span> <span class="nv">$encoderFactory</span><span class="o">-&gt;</span><span class="na">getEncoder</span><span class="p">(</span><span class="nv">$user</span><span class="p">);</span>

<span class="c1">// returns $weakEncoder (see above)</span>
<span class="nv">$encodedPassword</span> <span class="o">=</span> <span class="nv">$encoder</span><span class="o">-&gt;</span><span class="na">encodePassword</span><span class="p">(</span><span class="nv">$plainPassword</span><span class="p">,</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="na">getSalt</span><span class="p">());</span>

<span class="nv">$user</span><span class="o">-&gt;</span><span class="na">setPassword</span><span class="p">(</span><span class="nv">$encodedPassword</span><span class="p">);</span>

<span class="c1">// ... save the user</span>
</pre></div>
</div>
<p>Now, when you want to check if the submitted password (e.g. when trying to log
in) is correct, you can use:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// fetch the Acme\Entity\LegacyUser</span>
<span class="nv">$user</span> <span class="o">=</span> <span class="o">...</span><span class="p">;</span>

<span class="c1">// the submitted password, e.g. from the login form</span>
<span class="nv">$plainPassword</span> <span class="o">=</span> <span class="o">...</span><span class="p">;</span>

<span class="nv">$validPassword</span> <span class="o">=</span> <span class="nv">$encoder</span><span class="o">-&gt;</span><span class="na">isPasswordValid</span><span class="p">(</span>
    <span class="nv">$user</span><span class="o">-&gt;</span><span class="na">getPassword</span><span class="p">(),</span> <span class="c1">// the encoded password</span>
    <span class="nv">$plainPassword</span><span class="p">,</span>       <span class="c1">// the submitted password</span>
    <span class="nv">$user</span><span class="o">-&gt;</span><span class="na">getSalt</span><span class="p">()</span>
<span class="p">);</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="authentication-events">
<h2>Authentication Events</h2>
<p>The security component provides the following authentication events:</p>
<table class="docutils">
<colgroup>
<col style="width: 18%" />
<col style="width: 37%" />
<col style="width: 45%" />
</colgroup>
<thead>
<tr class="row-odd"><th class="head"><p>Name</p></th>
<th class="head"><p>Event Constant</p></th>
<th class="head"><p>Argument Passed to the Listener</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p>security.authentication.success</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">AuthenticationEvents::AUTHENTICATION_SUCCESS</span></code></p></td>
<td><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Event/AuthenticationSuccessEvent.php" title="Symfony\Component\Security\Core\Event\AuthenticationSuccessEvent"><span class="pre">AuthenticationSuccessEvent</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Event/AuthenticationSuccessEvent.php]</span></span></code></p></td>
</tr>
<tr class="row-odd"><td><p>security.authentication.failure</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">AuthenticationEvents::AUTHENTICATION_FAILURE</span></code></p></td>
<td><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Event/AuthenticationFailureEvent.php" title="Symfony\Component\Security\Core\Event\AuthenticationFailureEvent"><span class="pre">AuthenticationFailureEvent</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Event/AuthenticationFailureEvent.php]</span></span></code></p></td>
</tr>
<tr class="row-even"><td><p>security.interactive_login</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">SecurityEvents::INTERACTIVE_LOGIN</span></code></p></td>
<td><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Event/InteractiveLoginEvent.php" title="Symfony\Component\Security\Http\Event\InteractiveLoginEvent"><span class="pre">InteractiveLoginEvent</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Event/InteractiveLoginEvent.php]</span></span></code></p></td>
</tr>
<tr class="row-odd"><td><p>security.switch_user</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">SecurityEvents::SWITCH_USER</span></code></p></td>
<td><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Event/SwitchUserEvent.php" title="Symfony\Component\Security\Http\Event\SwitchUserEvent"><span class="pre">SwitchUserEvent</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Event/SwitchUserEvent.php]</span></span></code></p></td>
</tr>
<tr class="row-even"><td><p>security.logout_on_change</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">Symfony\Component\Security\Http\Event\DeauthenticatedEvent</span></code></p></td>
<td><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Event/DeauthenticatedEvent.php" title="Symfony\Component\Security\Http\Event\DeauthenticatedEvent"><span class="pre">DeauthenticatedEvent</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Event/DeauthenticatedEvent.php]</span></span></code></p></td>
</tr>
</tbody>
</table>
<div class="section" id="authentication-success-and-failure-events">
<h3>Authentication Success and Failure Events</h3>
<p>When a provider authenticates the user, a <code class="docutils literal notranslate"><span class="pre">security.authentication.success</span></code>
event is dispatched. But beware - this event may fire, for example, on <em>every</em>
request if you have session-based authentication, if <code class="docutils literal notranslate"><span class="pre">always_authenticate_before_granting</span></code>
is enabled or if token is not authenticated before AccessListener is invoked.
See <code class="docutils literal notranslate"><span class="pre">security.interactive_login</span></code> below if you need to do something when a user <em>actually</em> logs in.</p>
<p>When a provider attempts authentication but fails (i.e. throws an <code class="docutils literal notranslate"><span class="pre">AuthenticationException</span></code>),
a <code class="docutils literal notranslate"><span class="pre">security.authentication.failure</span></code> event is dispatched. You could listen on
the <code class="docutils literal notranslate"><span class="pre">security.authentication.failure</span></code> event, for example, in order to log
failed login attempts.</p>
</div>
<div class="section" id="security-events">
<h3>Security Events</h3>
<p>The <code class="docutils literal notranslate"><span class="pre">security.interactive_login</span></code> event is triggered after a user has actively
logged into your website.  It is important to distinguish this action from
non-interactive authentication methods, such as:</p>
<ul class="simple">
<li><p>authentication based on your session.</p></li>
<li><p>authentication using a HTTP basic header.</p></li>
</ul>
<p>You could listen on the <code class="docutils literal notranslate"><span class="pre">security.interactive_login</span></code> event, for example, in
order to give your user a welcome flash message every time they log in.</p>
<p>The <code class="docutils literal notranslate"><span class="pre">security.switch_user</span></code> event is triggered every time you activate
the <code class="docutils literal notranslate"><span class="pre">switch_user</span></code> firewall listener.</p>
<p>The <code class="docutils literal notranslate"><span class="pre">Symfony\Component\Security\Http\Event\DeauthenticatedEvent</span></code> event is triggered when a token has been deauthenticated
because of a user change, it can help you doing some clean-up task when a logout has been triggered.</p>
<div class="versionadded">
<p><span class="versionmodified">New in version 4.3: </span>The <code class="docutils literal notranslate"><span class="pre">Symfony\Component\Security\Http\Event\DeauthenticatedEvent</span></code> event was introduced in Symfony 4.3.</p>
</div>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>For more information on switching users, see
<a class="reference internal" href="../../security/impersonating_user.xhtml"><span class="doc">How to Impersonate a User</span></a>.</p>
</div>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>