<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>The Validator Component</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="the-validator-component">
<span id="index-0"></span><h1>The Validator Component</h1>
<blockquote>
<div><p>The Validator component provides tools to validate values following the
<a class="reference external" href="https://jcp.org/en/jsr/detail?id=303">JSR-303 Bean Validation specification</a><span class="link-target"> [https://jcp.org/en/jsr/detail?id=303]</span>.</p>
</div></blockquote>
<div class="section" id="installation">
<h2>Installation</h2>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require symfony/validator
</pre></div>
</td></tr></table></div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If you install this component outside of a Symfony application, you must
require the <code class="docutils literal notranslate"><span class="pre">vendor/autoload.php</span></code> file in your code to enable the class
autoloading mechanism provided by Composer. Read
<a class="reference internal" href="using_components.xhtml"><span class="doc">this article</span></a> for more details.</p>
</div>
</div>
<div class="section" id="usage">
<h2>Usage</h2>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>This article explains how to use the Validator features as an independent
component in any PHP application. Read the <a class="reference internal" href="../validation.xhtml"><span class="doc">Validation</span></a> article to
learn about how to validate data and entities in Symfony applications.</p>
</div>
<p>The Validator component behavior is based on two concepts:</p>
<ul class="simple">
<li><p>Constraints, which define the rules to be validated;</p></li>
<li><p>Validators, which are the classes that contain the actual validation logic.</p></li>
</ul>
<p>The following example shows how to validate that a string is at least 10
characters long:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints\Length</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints\NotBlank</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Validation</span><span class="p">;</span>

<span class="nv">$validator</span> <span class="o">=</span> <span class="nx">Validation</span><span class="o">::</span><span class="na">createValidator</span><span class="p">();</span>
<span class="nv">$violations</span> <span class="o">=</span> <span class="nv">$validator</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;Bernhard&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="k">new</span> <span class="nx">Length</span><span class="p">([</span><span class="s1">&#39;min&#39;</span> <span class="o">=&gt;</span> <span class="mi">10</span><span class="p">]),</span>
    <span class="k">new</span> <span class="nx">NotBlank</span><span class="p">(),</span>
<span class="p">]);</span>

<span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">!==</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$violations</span><span class="p">))</span> <span class="p">{</span>
    <span class="c1">// there are errors, now you can show them</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$violations</span> <span class="k">as</span> <span class="nv">$violation</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="nv">$violation</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">()</span><span class="o">.</span><span class="s1">&#39;&lt;br&gt;&#39;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The  <code class="docutils literal notranslate"><span class="pre">validate()</span></code> method returns the list of violations as an object that
implements <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/ConstraintViolationListInterface.php" title="Symfony\Component\Validator\ConstraintViolationListInterface"><span class="pre">ConstraintViolationListInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/ConstraintViolationListInterface.php]</span></span></code>.
If you have lots of validation errors, you can filter them by error code:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity</span><span class="p">;</span>

<span class="nv">$violations</span> <span class="o">=</span> <span class="nv">$validator</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="o">...</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">!==</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$violations</span><span class="o">-&gt;</span><span class="na">findByCodes</span><span class="p">(</span><span class="nx">UniqueEntity</span><span class="o">::</span><span class="na">NOT_UNIQUE_ERROR</span><span class="p">)))</span> <span class="p">{</span>
    <span class="c1">// handle this specific error (display some message, send an email, etc.)</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="retrieving-a-validator-instance">
<h2>Retrieving a Validator Instance</h2>
<p>The Validator object (that implements <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Validator/ValidatorInterface.php" title="Symfony\Component\Validator\Validator\ValidatorInterface"><span class="pre">ValidatorInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Validator/ValidatorInterface.php]</span></span></code>) is the main access
point of the Validator component. To create a new instance of it, it’s
recommended to use the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Validation.php" title="Symfony\Component\Validator\Validation"><span class="pre">Validation</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Validation.php]</span></span></code> class:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Validator\Validation</span><span class="p">;</span>

<span class="nv">$validator</span> <span class="o">=</span> <span class="nx">Validation</span><span class="o">::</span><span class="na">createValidator</span><span class="p">();</span>
</pre></div>
</div>
<p>This <code class="docutils literal notranslate"><span class="pre">$validator</span></code> object can validate simple variables such as strings, numbers
and arrays, but it can’t validate objects. To do so, configure the
<code class="docutils literal notranslate"><span class="pre">Validator</span></code> as explained in the next sections.</p>
</div>
<div class="section" id="learn-more">
<h2>Learn More</h2>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="validator/metadata.xhtml">Metadata</a></li>
<li class="toctree-l1"><a class="reference internal" href="validator/resources.xhtml">Loading Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="../validation.xhtml">Validation</a></li>
<li class="toctree-l1"><a class="reference internal" href="../validation/custom_constraint.xhtml">How to Create a Custom Validation Constraint</a></li>
<li class="toctree-l1"><a class="reference internal" href="../validation/groups.xhtml">How to Apply only a Subset of all Your Validation Constraints (Validation Groups)</a></li>
<li class="toctree-l1"><a class="reference internal" href="../validation/raw_values.xhtml">How to Validate Raw Values (Scalar Values and Arrays)</a></li>
<li class="toctree-l1"><a class="reference internal" href="../validation/sequence_provider.xhtml">How to Sequentially Apply Validation Groups</a></li>
<li class="toctree-l1"><a class="reference internal" href="../validation/severity.xhtml">How to Handle Different Error Levels</a></li>
<li class="toctree-l1"><a class="reference internal" href="../validation/translations.xhtml">How to Translate Validation Constraint Messages</a></li>
</ul>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>