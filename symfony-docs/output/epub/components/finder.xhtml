<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>The Finder Component</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="the-finder-component">
<span id="index-0"></span><h1>The Finder Component</h1>
<blockquote>
<div><p>The Finder component finds files and directories based on different criteria
(name, file size, modification time, etc.) via an intuitive fluent interface.</p>
</div></blockquote>
<div class="section" id="installation">
<h2>Installation</h2>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require symfony/finder
</pre></div>
</td></tr></table></div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If you install this component outside of a Symfony application, you must
require the <code class="docutils literal notranslate"><span class="pre">vendor/autoload.php</span></code> file in your code to enable the class
autoloading mechanism provided by Composer. Read
<a class="reference internal" href="using_components.xhtml"><span class="doc">this article</span></a> for more details.</p>
</div>
</div>
<div class="section" id="usage">
<h2>Usage</h2>
<p>The <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/Finder.php" title="Symfony\Component\Finder\Finder"><span class="pre">Finder</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/Finder.php]</span></span></code> class finds files and/or
directories:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Finder\Finder</span><span class="p">;</span>

<span class="nv">$finder</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Finder</span><span class="p">();</span>
<span class="c1">// find all files in the current directory</span>
<span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">files</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">in</span><span class="p">(</span><span class="no">__DIR__</span><span class="p">);</span>

<span class="c1">// check if there are any search results</span>
<span class="k">if</span> <span class="p">(</span><span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">hasResults</span><span class="p">())</span> <span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">}</span>

<span class="k">foreach</span> <span class="p">(</span><span class="nv">$finder</span> <span class="k">as</span> <span class="nv">$file</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$absoluteFilePath</span> <span class="o">=</span> <span class="nv">$file</span><span class="o">-&gt;</span><span class="na">getRealPath</span><span class="p">();</span>
    <span class="nv">$fileNameWithExtension</span> <span class="o">=</span> <span class="nv">$file</span><span class="o">-&gt;</span><span class="na">getRelativePathname</span><span class="p">();</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The <code class="docutils literal notranslate"><span class="pre">$file</span></code> variable is an instance of
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/SplFileInfo.php" title="Symfony\Component\Finder\SplFileInfo"><span class="pre">SplFileInfo</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/SplFileInfo.php]</span></span></code> which extends PHP’s own
<code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/class.splfileinfo.php" title="SplFileInfo"><span class="pre">SplFileInfo</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/class.splfileinfo.php]</span></span></code> to provide methods to work with relative paths.</p>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>The <code class="docutils literal notranslate"><span class="pre">Finder</span></code> object doesn’t reset its internal state automatically.
This means that you need to create a new instance if you do not want
to get mixed results.</p>
</div>
</div>
<div class="section" id="searching-for-files-and-directories">
<h2>Searching for Files and Directories</h2>
<p>The component provides lots of methods to define the search criteria. They all
can be chained because they implement a <a class="reference external" href="https://en.wikipedia.org/wiki/Fluent_interface">fluent interface</a><span class="link-target"> [https://en.wikipedia.org/wiki/Fluent_interface]</span>.</p>
<div class="section" id="location">
<h3>Location</h3>
<p>The location is the only mandatory criteria. It tells the finder which
directory to use for the search:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">in</span><span class="p">(</span><span class="no">__DIR__</span><span class="p">);</span>
</pre></div>
</div>
<p>Search in several locations by chaining calls to
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/Finder.php" title="Symfony\Component\Finder\Finder::in()"><span class="pre">in()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/Finder.php]</span></span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// search inside *both* directories</span>
<span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">in</span><span class="p">([</span><span class="no">__DIR__</span><span class="p">,</span> <span class="s1">&#39;/elsewhere&#39;</span><span class="p">]);</span>

<span class="c1">// same as above</span>
<span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">in</span><span class="p">(</span><span class="no">__DIR__</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">in</span><span class="p">(</span><span class="s1">&#39;/elsewhere&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>Use <code class="docutils literal notranslate"><span class="pre">*</span></code> as a wildcard character to search in the directories matching a
pattern (each pattern has to resolve to at least one directory path):</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">in</span><span class="p">(</span><span class="s1">&#39;src/Symfony/*/*/Resources&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>Exclude directories from matching with the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/Finder.php" title="Symfony\Component\Finder\Finder::exclude()"><span class="pre">exclude()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/Finder.php]</span></span></code> method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// directories passed as argument must be relative to the ones defined with the in() method</span>
<span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">in</span><span class="p">(</span><span class="no">__DIR__</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">exclude</span><span class="p">(</span><span class="s1">&#39;ruby&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>It’s also possible to ignore directories that you don’t have permission to read:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">ignoreUnreadableDirs</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">in</span><span class="p">(</span><span class="no">__DIR__</span><span class="p">);</span>
</pre></div>
</div>
<p>As the Finder uses PHP iterators, you can pass any URL with a supported
<a class="reference external" href="https://www.php.net/manual/en/wrappers.php">PHP wrapper for URL-style protocols</a><span class="link-target"> [https://www.php.net/manual/en/wrappers.php]</span> (<code class="docutils literal notranslate"><span class="pre">ftp://</span></code>, <code class="docutils literal notranslate"><span class="pre">zlib://</span></code>, etc.):</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// always add a trailing slash when looking for in the FTP root dir</span>
<span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">in</span><span class="p">(</span><span class="s1">&#39;ftp://example.com/&#39;</span><span class="p">);</span>

<span class="c1">// you can also look for in a FTP directory</span>
<span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">in</span><span class="p">(</span><span class="s1">&#39;ftp://example.com/pub/&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>And it also works with user-defined streams:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Finder\Finder</span><span class="p">;</span>

<span class="c1">// register a &#39;s3://&#39; wrapper with the official AWS SDK</span>
<span class="nv">$s3Client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Aws\S3\S3Client</span><span class="p">([</span><span class="cm">/* config options */</span><span class="p">]);</span>
<span class="nv">$s3Client</span><span class="o">-&gt;</span><span class="na">registerStreamWrapper</span><span class="p">();</span>

<span class="nv">$finder</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Finder</span><span class="p">();</span>
<span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">(</span><span class="s1">&#39;photos*&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">size</span><span class="p">(</span><span class="s1">&#39;&lt; 100K&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">date</span><span class="p">(</span><span class="s1">&#39;since 1 hour ago&#39;</span><span class="p">);</span>
<span class="k">foreach</span> <span class="p">(</span><span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">in</span><span class="p">(</span><span class="s1">&#39;s3://bucket-name&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="nv">$file</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ... do something with the file</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>Read the <a class="reference external" href="https://www.php.net/streams">PHP streams</a><span class="link-target"> [https://www.php.net/streams]</span> documentation to learn how to create your own streams.</p>
</div>
</div>
<div class="section" id="files-or-directories">
<h3>Files or Directories</h3>
<p>By default, the Finder returns both files and directories. If you need to find either files or directories only, use the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/Finder.php" title="Symfony\Component\Finder\Finder::files()"><span class="pre">files()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/Finder.php]</span></span></code> and <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/Finder.php" title="Symfony\Component\Finder\Finder::directories()"><span class="pre">directories()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/Finder.php]</span></span></code> methods:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// look for files only; ignore directories</span>
<span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">files</span><span class="p">();</span>

<span class="c1">// look for directories only; ignore files</span>
<span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">directories</span><span class="p">();</span>
</pre></div>
</div>
<p>If you want to follow <a class="reference external" href="https://en.wikipedia.org/wiki/Symbolic_link">symbolic links</a><span class="link-target"> [https://en.wikipedia.org/wiki/Symbolic_link]</span>, use the <code class="docutils literal notranslate"><span class="pre">followLinks()</span></code> method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">files</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">followLinks</span><span class="p">();</span>
</pre></div>
</div>
</div>
<div class="section" id="version-control-files">
<h3>Version Control Files</h3>
<p><a class="reference external" href="https://en.wikipedia.org/wiki/Version_control">Version Control Systems</a><span class="link-target"> [https://en.wikipedia.org/wiki/Version_control]</span> (or “VCS” for short), such as Git and Mercurial,
create some special files to store their metadata. Those files are ignored by
default when looking for files and directories, but you can change this with the
<code class="docutils literal notranslate"><span class="pre">ignoreVCS()</span></code> method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">ignoreVCS</span><span class="p">(</span><span class="k">false</span><span class="p">);</span>
</pre></div>
</div>
<p>If the search directory contains a <code class="docutils literal notranslate"><span class="pre">.gitignore</span></code> file, you can reuse those
rules to exclude files and directories from the results with the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/Finder.php" title="Symfony\Component\Finder\Finder::ignoreVCSIgnored()"><span class="pre">ignoreVCSIgnored()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/Finder.php]</span></span></code> method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// excludes files/directories matching the .gitignore patterns</span>
<span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">ignoreVCSIgnored</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</pre></div>
</div>
</div>
<div class="section" id="file-name">
<h3>File Name</h3>
<p>Find files by name with the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/Finder.php" title="Symfony\Component\Finder\Finder::name()"><span class="pre">name()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/Finder.php]</span></span></code> method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">files</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">(</span><span class="s1">&#39;*.php&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>The <code class="docutils literal notranslate"><span class="pre">name()</span></code> method accepts globs, strings, regexes or an array of globs,
strings or regexes:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">files</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">(</span><span class="s1">&#39;/\.php$/&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>Multiple filenames can be defined by chaining calls or passing an array:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">files</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">(</span><span class="s1">&#39;*.php&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">(</span><span class="s1">&#39;*.twig&#39;</span><span class="p">);</span>

<span class="c1">// same as above</span>
<span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">files</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">([</span><span class="s1">&#39;*.php&#39;</span><span class="p">,</span> <span class="s1">&#39;*.twig&#39;</span><span class="p">]);</span>
</pre></div>
</div>
<p>The <code class="docutils literal notranslate"><span class="pre">notName()</span></code> method excludes files matching a pattern:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">files</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">notName</span><span class="p">(</span><span class="s1">&#39;*.rb&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>Multiple filenames can be excluded by chaining calls or passing an array:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">files</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">notName</span><span class="p">(</span><span class="s1">&#39;*.rb&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">notName</span><span class="p">(</span><span class="s1">&#39;*.py&#39;</span><span class="p">);</span>

<span class="c1">// same as above</span>
<span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">files</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">notName</span><span class="p">([</span><span class="s1">&#39;*.rb&#39;</span><span class="p">,</span> <span class="s1">&#39;*.py&#39;</span><span class="p">]);</span>
</pre></div>
</div>
</div>
<div class="section" id="file-contents">
<h3>File Contents</h3>
<p>Find files by content with the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/Finder.php" title="Symfony\Component\Finder\Finder::contains()"><span class="pre">contains()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/Finder.php]</span></span></code> method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">files</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">contains</span><span class="p">(</span><span class="s1">&#39;lorem ipsum&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>The <code class="docutils literal notranslate"><span class="pre">contains()</span></code> method accepts strings or regexes:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">files</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">contains</span><span class="p">(</span><span class="s1">&#39;/lorem\s+ipsum$/i&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>The <code class="docutils literal notranslate"><span class="pre">notContains()</span></code> method excludes files containing given pattern:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">files</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">notContains</span><span class="p">(</span><span class="s1">&#39;dolor sit amet&#39;</span><span class="p">);</span>
</pre></div>
</div>
</div>
<div class="section" id="path">
<h3>Path</h3>
<p>Find files and directories by path with the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/Finder.php" title="Symfony\Component\Finder\Finder::path()"><span class="pre">path()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/Finder.php]</span></span></code> method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// matches files that contain &quot;data&quot; anywhere in their paths (files or directories)</span>
<span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">path</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">);</span>
<span class="c1">// for example this will match data/*.xml and data.xml if they exist</span>
<span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">path</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">(</span><span class="s1">&#39;*.xml&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>Use the forward slash (i.e. <code class="docutils literal notranslate"><span class="pre">/</span></code>) as the directory separator on all platforms,
including Windows. The component makes the necessary conversion internally.</p>
<p>The <code class="docutils literal notranslate"><span class="pre">path()</span></code> method accepts a string, a regular expression or an array of
strings or regulars expressions:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">path</span><span class="p">(</span><span class="s1">&#39;foo/bar&#39;</span><span class="p">);</span>
<span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">path</span><span class="p">(</span><span class="s1">&#39;/^foo\/bar/&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>Multiple paths can be defined by chaining calls or passing an array:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">path</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">path</span><span class="p">(</span><span class="s1">&#39;foo/bar&#39;</span><span class="p">);</span>

<span class="c1">// same as above</span>
<span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">path</span><span class="p">([</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="s1">&#39;foo/bar&#39;</span><span class="p">]);</span>
</pre></div>
</div>
<p>Internally, strings are converted into regular expressions by escaping slashes
and adding delimiters:</p>
<table class="docutils">
<colgroup>
<col style="width: 48%" />
<col style="width: 52%" />
</colgroup>
<thead>
<tr class="row-odd"><th class="head"><p>Original Given String</p></th>
<th class="head"><p>Regular Expression Used</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">dirname</span></code></p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">/dirname/</span></code></p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">a/b/c</span></code></p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">/a\/b\/c/</span></code></p></td>
</tr>
</tbody>
</table>
<p>The <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/Finder.php" title="Symfony\Component\Finder\Finder::notPath()"><span class="pre">notPath()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/Finder.php]</span></span></code> method excludes files
by path:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">notPath</span><span class="p">(</span><span class="s1">&#39;other/dir&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>Multiple paths can be excluded by chaining calls or passing an array:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">notPath</span><span class="p">(</span><span class="s1">&#39;first/dir&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">notPath</span><span class="p">(</span><span class="s1">&#39;other/dir&#39;</span><span class="p">);</span>

<span class="c1">// same as above</span>
<span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">notPath</span><span class="p">([</span><span class="s1">&#39;first/dir&#39;</span><span class="p">,</span> <span class="s1">&#39;other/dir&#39;</span><span class="p">]);</span>
</pre></div>
</div>
</div>
<div class="section" id="file-size">
<h3>File Size</h3>
<p>Find files by size with the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/Finder.php" title="Symfony\Component\Finder\Finder::size()"><span class="pre">size()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/Finder.php]</span></span></code> method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">files</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">size</span><span class="p">(</span><span class="s1">&#39;&lt; 1.5K&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>Restrict by a size range by chaining calls or passing an array:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">files</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">size</span><span class="p">(</span><span class="s1">&#39;&gt;= 1K&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">size</span><span class="p">(</span><span class="s1">&#39;&lt;= 2K&#39;</span><span class="p">);</span>

<span class="c1">// same as above</span>
<span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">files</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">size</span><span class="p">([</span><span class="s1">&#39;&gt;= 1K&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;= 2K&#39;</span><span class="p">]);</span>
</pre></div>
</div>
<p>The comparison operator can be any of the following: <code class="docutils literal notranslate"><span class="pre">&gt;</span></code>, <code class="docutils literal notranslate"><span class="pre">&gt;=</span></code>, <code class="docutils literal notranslate"><span class="pre">&lt;</span></code>,
<code class="docutils literal notranslate"><span class="pre">&lt;=</span></code>, <code class="docutils literal notranslate"><span class="pre">==</span></code>, <code class="docutils literal notranslate"><span class="pre">!=</span></code>.</p>
<p>The target value may use magnitudes of kilobytes (<code class="docutils literal notranslate"><span class="pre">k</span></code>, <code class="docutils literal notranslate"><span class="pre">ki</span></code>), megabytes
(<code class="docutils literal notranslate"><span class="pre">m</span></code>, <code class="docutils literal notranslate"><span class="pre">mi</span></code>), or gigabytes (<code class="docutils literal notranslate"><span class="pre">g</span></code>, <code class="docutils literal notranslate"><span class="pre">gi</span></code>). Those suffixed with an <code class="docutils literal notranslate"><span class="pre">i</span></code> use
the appropriate <code class="docutils literal notranslate"><span class="pre">2**n</span></code> version in accordance with the <a class="reference external" href="https://physics.nist.gov/cuu/Units/binary.html">IEC standard</a><span class="link-target"> [https://physics.nist.gov/cuu/Units/binary.html]</span>.</p>
</div>
<div class="section" id="file-date">
<h3>File Date</h3>
<p>Find files by last modified dates with the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/Finder.php" title="Symfony\Component\Finder\Finder::date()"><span class="pre">date()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/Finder.php]</span></span></code> method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">date</span><span class="p">(</span><span class="s1">&#39;since yesterday&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>Restrict by a date range by chaining calls or passing an array:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">date</span><span class="p">(</span><span class="s1">&#39;&gt;= 2018-01-01&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">date</span><span class="p">(</span><span class="s1">&#39;&lt;= 2018-12-31&#39;</span><span class="p">);</span>

<span class="c1">// same as above</span>
<span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">date</span><span class="p">([</span><span class="s1">&#39;&gt;= 2018-01-01&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt;= 2018-12-31&#39;</span><span class="p">]);</span>
</pre></div>
</div>
<p>The comparison operator can be any of the following: <code class="docutils literal notranslate"><span class="pre">&gt;</span></code>, <code class="docutils literal notranslate"><span class="pre">&gt;=</span></code>, <code class="docutils literal notranslate"><span class="pre">&lt;</span></code>,
<code class="docutils literal notranslate"><span class="pre">&lt;=</span></code>, <code class="docutils literal notranslate"><span class="pre">==</span></code>. You can also use <code class="docutils literal notranslate"><span class="pre">since</span></code> or <code class="docutils literal notranslate"><span class="pre">after</span></code> as an alias for <code class="docutils literal notranslate"><span class="pre">&gt;</span></code>,
and <code class="docutils literal notranslate"><span class="pre">until</span></code> or <code class="docutils literal notranslate"><span class="pre">before</span></code> as an alias for <code class="docutils literal notranslate"><span class="pre">&lt;</span></code>.</p>
<p>The target value can be any date supported by <code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/function.strtotime.php" title="strtotime"><span class="pre">strtotime</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/function.strtotime.php]</span></span></code>.</p>
</div>
<div class="section" id="directory-depth">
<h3>Directory Depth</h3>
<p>By default, the Finder recursively traverses directories. Restrict the depth of
traversing with <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/Finder.php" title="Symfony\Component\Finder\Finder::depth()"><span class="pre">depth()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/Finder.php]</span></span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">depth</span><span class="p">(</span><span class="s1">&#39;== 0&#39;</span><span class="p">);</span>
<span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">depth</span><span class="p">(</span><span class="s1">&#39;&lt; 3&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>Restrict by a depth range by chaining calls or passing an array:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">depth</span><span class="p">(</span><span class="s1">&#39;&gt; 2&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">depth</span><span class="p">(</span><span class="s1">&#39;&lt; 5&#39;</span><span class="p">);</span>

<span class="c1">// same as above</span>
<span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">depth</span><span class="p">([</span><span class="s1">&#39;&gt; 2&#39;</span><span class="p">,</span> <span class="s1">&#39;&lt; 5&#39;</span><span class="p">]);</span>
</pre></div>
</div>
</div>
<div class="section" id="custom-filtering">
<h3>Custom Filtering</h3>
<p>To filter results with your own strategy, use
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/Finder.php" title="Symfony\Component\Finder\Finder::filter()"><span class="pre">filter()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/Finder.php]</span></span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$filter</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="nx">\SplFileInfo</span> <span class="nv">$file</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">strlen</span><span class="p">(</span><span class="nv">$file</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">files</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">filter</span><span class="p">(</span><span class="nv">$filter</span><span class="p">);</span>
</pre></div>
</div>
<p>The <code class="docutils literal notranslate"><span class="pre">filter()</span></code> method takes a Closure as an argument. For each matching file,
it is called with the file as a <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/SplFileInfo.php" title="Symfony\Component\Finder\SplFileInfo"><span class="pre">SplFileInfo</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/SplFileInfo.php]</span></span></code>
instance. The file is excluded from the result set if the Closure returns
<code class="docutils literal notranslate"><span class="pre">false</span></code>.</p>
</div>
</div>
<div class="section" id="sorting-results">
<h2>Sorting Results</h2>
<p>Sort the results by name or by type (directories first, then files):</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">sortByName</span><span class="p">();</span>

<span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">sortByType</span><span class="p">();</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>By default, the <code class="docutils literal notranslate"><span class="pre">sortByName()</span></code> method uses the <code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/function.strcmp.php" title="strcmp"><span class="pre">strcmp</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/function.strcmp.php]</span></span></code> PHP
function (e.g. <code class="docutils literal notranslate"><span class="pre">file1.txt</span></code>, <code class="docutils literal notranslate"><span class="pre">file10.txt</span></code>, <code class="docutils literal notranslate"><span class="pre">file2.txt</span></code>). Pass <code class="docutils literal notranslate"><span class="pre">true</span></code>
as its argument to use PHP’s <a class="reference external" href="https://en.wikipedia.org/wiki/Natural_sort_order">natural sort order</a><span class="link-target"> [https://en.wikipedia.org/wiki/Natural_sort_order]</span> algorithm instead (e.g.
<code class="docutils literal notranslate"><span class="pre">file1.txt</span></code>, <code class="docutils literal notranslate"><span class="pre">file2.txt</span></code>, <code class="docutils literal notranslate"><span class="pre">file10.txt</span></code>).</p>
</div>
<p>Sort the files and directories by the last accessed, changed or modified time:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">sortByAccessedTime</span><span class="p">();</span>

<span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">sortByChangedTime</span><span class="p">();</span>

<span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">sortByModifiedTime</span><span class="p">();</span>
</pre></div>
</div>
<p>You can also define your own sorting algorithm with the <code class="docutils literal notranslate"><span class="pre">sort()</span></code> method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">sort</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nx">\SplFileInfo</span> <span class="nv">$a</span><span class="p">,</span> <span class="nx">\SplFileInfo</span> <span class="nv">$b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">strcmp</span><span class="p">(</span><span class="nv">$a</span><span class="o">-&gt;</span><span class="na">getRealPath</span><span class="p">(),</span> <span class="nv">$b</span><span class="o">-&gt;</span><span class="na">getRealPath</span><span class="p">());</span>
<span class="p">});</span>
</pre></div>
</div>
<p>You can reverse any sorting by using the <code class="docutils literal notranslate"><span class="pre">reverseSorting()</span></code> method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// results will be sorted &quot;Z to A&quot; instead of the default &quot;A to Z&quot;</span>
<span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">sortByName</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">reverseSorting</span><span class="p">();</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Notice that the <code class="docutils literal notranslate"><span class="pre">sort*</span></code> methods need to get all matching elements to do
their jobs. For large iterators, it is slow.</p>
</div>
</div>
<div class="section" id="transforming-results-into-arrays">
<h2>Transforming Results into Arrays</h2>
<p>A Finder instance is an <code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/class.iteratoraggregate.php" title="IteratorAggregate"><span class="pre">IteratorAggregate</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/class.iteratoraggregate.php]</span></span></code> PHP class. So, in addition
to iterating over the Finder results with <code class="docutils literal notranslate"><span class="pre">foreach</span></code>, you can also convert it
to an array with the <code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/function.iterator-to-array.php" title="iterator_to_array"><span class="pre">iterator_to_array</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/function.iterator-to-array.php]</span></span></code> function, or get the
number of items with <code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/function.iterator-count.php" title="iterator_count"><span class="pre">iterator_count</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/function.iterator-count.php]</span></span></code>.</p>
<p>If you call to the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/Finder.php" title="Symfony\Component\Finder\Finder::in()"><span class="pre">in()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/Finder.php]</span></span></code> method more
than once to search through multiple locations, pass <code class="docutils literal notranslate"><span class="pre">false</span></code> as a second
parameter to <code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/function.iterator-to-array.php" title="iterator_to_array"><span class="pre">iterator_to_array</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/function.iterator-to-array.php]</span></span></code> to avoid issues (a separate
iterator is created for each location and, if you don’t pass <code class="docutils literal notranslate"><span class="pre">false</span></code> to
<code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/function.iterator-to-array.php" title="iterator_to_array"><span class="pre">iterator_to_array</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/function.iterator-to-array.php]</span></span></code>, keys of result sets are used and some of them
might be duplicated and their values overwritten).</p>
</div>
<div class="section" id="reading-contents-of-returned-files">
<h2>Reading Contents of Returned Files</h2>
<p>The contents of returned files can be read with
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/SplFileInfo.php" title="Symfony\Component\Finder\SplFileInfo::getContents()"><span class="pre">getContents()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/SplFileInfo.php]</span></span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Finder\Finder</span><span class="p">;</span>

<span class="nv">$finder</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Finder</span><span class="p">();</span>
<span class="nv">$finder</span><span class="o">-&gt;</span><span class="na">files</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">in</span><span class="p">(</span><span class="no">__DIR__</span><span class="p">);</span>

<span class="k">foreach</span> <span class="p">(</span><span class="nv">$finder</span> <span class="k">as</span> <span class="nv">$file</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$contents</span> <span class="o">=</span> <span class="nv">$file</span><span class="o">-&gt;</span><span class="na">getContents</span><span class="p">();</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>