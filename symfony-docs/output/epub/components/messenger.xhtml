<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>The Messenger Component</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="the-messenger-component">
<span id="index-0"></span><h1>The Messenger Component</h1>
<blockquote>
<div><p>The Messenger component helps applications send and receive messages to/from
other applications or via message queues.</p>
<p>The component is greatly inspired by Matthias Noback’s series of
<a class="reference external" href="https://matthiasnoback.nl/tags/command%20bus/">blog posts about command buses</a><span class="link-target"> [https://matthiasnoback.nl/tags/command%20bus/]</span> and the <a class="reference external" href="http://docs.simplebus.io/en/latest/">SimpleBus project</a><span class="link-target"> [http://docs.simplebus.io/en/latest/]</span>.</p>
</div></blockquote>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>This article explains how to use the Messenger features as an independent
component in any PHP application. Read the <a class="reference internal" href="../messenger.xhtml"><span class="doc">Messenger: Sync &amp; Queued Message Handling</span></a> article to
learn about how to use it in Symfony applications.</p>
</div>
<div class="section" id="installation">
<h2>Installation</h2>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require symfony/messenger
</pre></div>
</td></tr></table></div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If you install this component outside of a Symfony application, you must
require the <code class="docutils literal notranslate"><span class="pre">vendor/autoload.php</span></code> file in your code to enable the class
autoloading mechanism provided by Composer. Read
<a class="reference internal" href="using_components.xhtml"><span class="doc">this article</span></a> for more details.</p>
</div>
</div>
<div class="section" id="concepts">
<h2>Concepts</h2>
<object data="../_images/components/messenger/overview.svg" type="image/svg+xml"></object><dl class="simple">
<dt><strong>Sender</strong>:</dt>
<dd><p>Responsible for serializing and sending messages to <em>something</em>. This
something can be a message broker or a third party API for example.</p>
</dd>
<dt><strong>Receiver</strong>:</dt>
<dd><p>Responsible for retrieving, deserializing and forwarding messages to handler(s).
This can be a message queue puller or an API endpoint for example.</p>
</dd>
<dt><strong>Handler</strong>:</dt>
<dd><p>Responsible for handling messages using the business logic applicable to the messages.
Handlers are called by the <code class="docutils literal notranslate"><span class="pre">HandleMessageMiddleware</span></code> middleware.</p>
</dd>
<dt><strong>Middleware</strong>:</dt>
<dd><p>Middleware can access the message and its wrapper (the envelope) while it is
dispatched through the bus.
Literally <em>“the software in the middle”</em>, those are not about core concerns
(business logic) of an application. Instead, they are cross cutting concerns
applicable throughout the application and affecting the entire message bus.
For instance: logging, validating a message, starting a transaction, …
They are also responsible for calling the next middleware in the chain,
which means they can tweak the envelope, by adding stamps to it or even
replacing it, as well as interrupt the middleware chain. Middleware are called
both when a message is originally dispatched and again later when a message
is received from a transport,</p>
</dd>
<dt><strong>Envelope</strong>:</dt>
<dd><p>Messenger specific concept, it gives full flexibility inside the message bus,
by wrapping the messages into it, allowing to add useful information inside
through <em>envelope stamps</em>.</p>
</dd>
<dt><strong>Envelope Stamps</strong>:</dt>
<dd><p>Piece of information you need to attach to your message: serializer context
to use for transport, markers identifying a received message or any sort of
metadata your middleware or transport layer may use.</p>
</dd>
</dl>
</div>
<div class="section" id="bus">
<h2>Bus</h2>
<p>The bus is used to dispatch messages. The behavior of the bus is in its ordered
middleware stack. The component comes with a set of middleware that you can use.</p>
<p>When using the message bus with Symfony’s FrameworkBundle, the following middleware
are configured for you:</p>
<ol class="arabic simple">
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Messenger/Middleware/SendMessageMiddleware.php" title="Symfony\Component\Messenger\Middleware\SendMessageMiddleware"><span class="pre">SendMessageMiddleware</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Messenger/Middleware/SendMessageMiddleware.php]</span></span></code> (enables asynchronous processing, logs the processing of your messages if you pass a logger)</p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Messenger/Middleware/HandleMessageMiddleware.php" title="Symfony\Component\Messenger\Middleware\HandleMessageMiddleware"><span class="pre">HandleMessageMiddleware</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Messenger/Middleware/HandleMessageMiddleware.php]</span></span></code> (calls the registered handler(s))</p></li>
</ol>
<p>Example:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">App\Message\MyMessage</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">App\MessageHandler\MyMessageHandler</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Messenger\Handler\HandlersLocator</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Messenger\MessageBus</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Messenger\Middleware\HandleMessageMiddleware</span><span class="p">;</span>

<span class="nv">$handler</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyMessageHandler</span><span class="p">();</span>

<span class="nv">$bus</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MessageBus</span><span class="p">([</span>
    <span class="k">new</span> <span class="nx">HandleMessageMiddleware</span><span class="p">(</span><span class="k">new</span> <span class="nx">HandlersLocator</span><span class="p">([</span>
        <span class="nx">MyMessage</span><span class="o">::</span><span class="na">class</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="nv">$handler</span><span class="p">],</span>
    <span class="p">])),</span>
<span class="p">]);</span>

<span class="nv">$bus</span><span class="o">-&gt;</span><span class="na">dispatch</span><span class="p">(</span><span class="k">new</span> <span class="nx">MyMessage</span><span class="p">(</span><span class="cm">/* ... */</span><span class="p">));</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Every middleware needs to implement the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Messenger/Middleware/MiddlewareInterface.php" title="Symfony\Component\Messenger\Middleware\MiddlewareInterface"><span class="pre">MiddlewareInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Messenger/Middleware/MiddlewareInterface.php]</span></span></code>.</p>
</div>
</div>
<div class="section" id="handlers">
<h2>Handlers</h2>
<p>Once dispatched to the bus, messages will be handled by a “message handler”. A
message handler is a PHP callable (i.e. a function or an instance of a class)
that will do the required processing for your message:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">namespace</span> <span class="nx">App\MessageHandler</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Message\MyMessage</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">MyMessageHandler</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__invoke</span><span class="p">(</span><span class="nx">MyMessage</span> <span class="nv">$message</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// Message processing...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="adding-metadata-to-messages-envelopes">
<span id="messenger-envelopes"></span><h2>Adding Metadata to Messages (Envelopes)</h2>
<p>If you need to add metadata or some configuration to a message, wrap it with the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Messenger/Envelope.php" title="Symfony\Component\Messenger\Envelope"><span class="pre">Envelope</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Messenger/Envelope.php]</span></span></code> class and add stamps.
For example, to set the serialization groups used when the message goes
through the transport layer, use the <code class="docutils literal notranslate"><span class="pre">SerializerStamp</span></code> stamp:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Messenger\Envelope</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Messenger\Stamp\SerializerStamp</span><span class="p">;</span>

<span class="nv">$bus</span><span class="o">-&gt;</span><span class="na">dispatch</span><span class="p">(</span>
    <span class="p">(</span><span class="k">new</span> <span class="nx">Envelope</span><span class="p">(</span><span class="nv">$message</span><span class="p">))</span><span class="o">-&gt;</span><span class="na">with</span><span class="p">(</span><span class="k">new</span> <span class="nx">SerializerStamp</span><span class="p">([</span>
        <span class="c1">// groups are applied to the whole message, so make sure</span>
        <span class="c1">// to define the group for every embedded object</span>
        <span class="s1">&#39;groups&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;my_serialization_groups&#39;</span><span class="p">],</span>
    <span class="p">]))</span>
<span class="p">);</span>
</pre></div>
</div>
<p>Here are some important envelope stamps that are shipped with the Symfony Messenger:</p>
<ol class="arabic simple">
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Messenger/Stamp/DelayStamp.php" title="Symfony\Component\Messenger\Stamp\DelayStamp"><span class="pre">DelayStamp</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Messenger/Stamp/DelayStamp.php]</span></span></code>,
to delay handling of an asynchronous message.</p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Messenger/Stamp/DispatchAfterCurrentBusStamp.php" title="Symfony\Component\Messenger\Stamp\DispatchAfterCurrentBusStamp"><span class="pre">DispatchAfterCurrentBusStamp</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Messenger/Stamp/DispatchAfterCurrentBusStamp.php]</span></span></code>,
to make the message be handled after the current bus has executed. Read more
at <a class="reference internal" href="../messenger/dispatch_after_current_bus.xhtml"><span class="doc">Transactional Messages: Handle New Messages After Handling is Done</span></a>.</p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Messenger/Stamp/HandledStamp.php" title="Symfony\Component\Messenger\Stamp\HandledStamp"><span class="pre">HandledStamp</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Messenger/Stamp/HandledStamp.php]</span></span></code>,
a stamp that marks the message as handled by a specific handler.
Allows accessing the handler returned value and the handler name.</p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Messenger/Stamp/ReceivedStamp.php" title="Symfony\Component\Messenger\Stamp\ReceivedStamp"><span class="pre">ReceivedStamp</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Messenger/Stamp/ReceivedStamp.php]</span></span></code>,
an internal stamp that marks the message as received from a transport.</p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Messenger/Stamp/SentStamp.php" title="Symfony\Component\Messenger\Stamp\SentStamp"><span class="pre">SentStamp</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Messenger/Stamp/SentStamp.php]</span></span></code>,
a stamp that marks the message as sent by a specific sender.
Allows accessing the sender FQCN and the alias if available from the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Messenger/Transport/Sender/SendersLocator.php" title="Symfony\Component\Messenger\Transport\Sender\SendersLocator"><span class="pre">SendersLocator</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Messenger/Transport/Sender/SendersLocator.php]</span></span></code>.</p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Messenger/Stamp/SerializerStamp.php" title="Symfony\Component\Messenger\Stamp\SerializerStamp"><span class="pre">SerializerStamp</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Messenger/Stamp/SerializerStamp.php]</span></span></code>,
to configure the serialization groups used by the transport.</p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Messenger/Stamp/ValidationStamp.php" title="Symfony\Component\Messenger\Stamp\ValidationStamp"><span class="pre">ValidationStamp</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Messenger/Stamp/ValidationStamp.php]</span></span></code>,
to configure the validation groups used when the validation middleware is enabled.</p></li>
</ol>
<p>Instead of dealing directly with the messages in the middleware you receive the envelope.
Hence you can inspect the envelope content and its stamps, or add any:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">App\Message\Stamp\AnotherStamp</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Messenger\Envelope</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Messenger\Middleware\MiddlewareInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Messenger\Middleware\StackInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Messenger\Stamp\ReceivedStamp</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">MyOwnMiddleware</span> <span class="k">implements</span> <span class="nx">MiddlewareInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">handle</span><span class="p">(</span><span class="nx">Envelope</span> <span class="nv">$envelope</span><span class="p">,</span> <span class="nx">StackInterface</span> <span class="nv">$stack</span><span class="p">)</span><span class="o">:</span> <span class="nx">Envelope</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">null</span> <span class="o">!==</span> <span class="nv">$envelope</span><span class="o">-&gt;</span><span class="na">last</span><span class="p">(</span><span class="nx">ReceivedStamp</span><span class="o">::</span><span class="na">class</span><span class="p">))</span> <span class="p">{</span>
            <span class="c1">// Message just has been received...</span>

            <span class="c1">// You could for example add another stamp.</span>
            <span class="nv">$envelope</span> <span class="o">=</span> <span class="nv">$envelope</span><span class="o">-&gt;</span><span class="na">with</span><span class="p">(</span><span class="k">new</span> <span class="nx">AnotherStamp</span><span class="p">(</span><span class="cm">/* ... */</span><span class="p">));</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="c1">// Message was just originally dispatched</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nv">$stack</span><span class="o">-&gt;</span><span class="na">next</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">handle</span><span class="p">(</span><span class="nv">$envelope</span><span class="p">,</span> <span class="nv">$stack</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The above example will forward the message to the next middleware with an
additional stamp <em>if</em> the message has just been received (i.e. has at least one
<code class="docutils literal notranslate"><span class="pre">ReceivedStamp</span></code> stamp). You can create your own stamps by implementing
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Messenger/Stamp/StampInterface.php" title="Symfony\Component\Messenger\Stamp\StampInterface"><span class="pre">StampInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Messenger/Stamp/StampInterface.php]</span></span></code>.</p>
<p>If you want to examine all stamps on an envelope, use the <code class="docutils literal notranslate"><span class="pre">$envelope-&gt;all()</span></code>
method, which returns all stamps grouped by type (FQCN). Alternatively, you can
iterate through all stamps of a specific type by using the FQCN as first
parameter of this method (e.g. <code class="docutils literal notranslate"><span class="pre">$envelope-&gt;all(ReceivedStamp::class)</span></code>).</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Any stamp must be serializable using the Symfony Serializer component
if going through transport using the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Messenger/Transport/Serialization/Serializer.php" title="Symfony\Component\Messenger\Transport\Serialization\Serializer"><span class="pre">Serializer</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Messenger/Transport/Serialization/Serializer.php]</span></span></code>
base serializer.</p>
</div>
</div>
<div class="section" id="transports">
<h2>Transports</h2>
<p>In order to send and receive messages, you will have to configure a transport. A
transport will be responsible for communicating with your message broker or 3rd parties.</p>
<div class="section" id="your-own-sender">
<h3>Your own Sender</h3>
<p>Imagine that you already have an <code class="docutils literal notranslate"><span class="pre">ImportantAction</span></code> message going through the
message bus and being handled by a handler. Now, you also want to send this
message as an email (using the <a class="reference internal" href="mime.xhtml"><span class="doc">Mime</span></a> and
<a class="reference internal" href="../mailer.xhtml"><span class="doc">Mailer</span></a> components).</p>
<p>Using the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Messenger/Transport/Sender/SenderInterface.php" title="Symfony\Component\Messenger\Transport\Sender\SenderInterface"><span class="pre">SenderInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Messenger/Transport/Sender/SenderInterface.php]</span></span></code>,
you can create your own message sender:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">namespace</span> <span class="nx">App\MessageSender</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Message\ImportantAction</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Mailer\MailerInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Messenger\Envelope</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Messenger\Transport\Sender\SenderInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Mime\Email</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">ImportantActionToEmailSender</span> <span class="k">implements</span> <span class="nx">SenderInterface</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$mailer</span><span class="p">;</span>
    <span class="k">private</span> <span class="nv">$toEmail</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nx">MailerInterface</span> <span class="nv">$mailer</span><span class="p">,</span> <span class="nx">string</span> <span class="nv">$toEmail</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mailer</span> <span class="o">=</span> <span class="nv">$mailer</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">toEmail</span> <span class="o">=</span> <span class="nv">$toEmail</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">send</span><span class="p">(</span><span class="nx">Envelope</span> <span class="nv">$envelope</span><span class="p">)</span><span class="o">:</span> <span class="nx">Envelope</span>
    <span class="p">{</span>
        <span class="nv">$message</span> <span class="o">=</span> <span class="nv">$envelope</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">();</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$message</span> <span class="nx">instanceof</span> <span class="nx">ImportantAction</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nx">\InvalidArgumentException</span><span class="p">(</span><span class="nb">sprintf</span><span class="p">(</span><span class="s1">&#39;This transport only supports &quot;%s&quot; messages.&#39;</span><span class="p">,</span> <span class="nx">ImportantAction</span><span class="o">::</span><span class="na">class</span><span class="p">));</span>
        <span class="p">}</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mailer</span><span class="o">-&gt;</span><span class="na">send</span><span class="p">(</span>
            <span class="p">(</span><span class="k">new</span> <span class="nx">Email</span><span class="p">())</span>
                <span class="o">-&gt;</span><span class="na">to</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">toEmail</span><span class="p">)</span>
                <span class="o">-&gt;</span><span class="na">subject</span><span class="p">(</span><span class="s1">&#39;Important action made&#39;</span><span class="p">)</span>
                <span class="o">-&gt;</span><span class="na">html</span><span class="p">(</span><span class="s1">&#39;&lt;h1&gt;Important action&lt;/h1&gt;&lt;p&gt;Made by &#39;</span><span class="o">.</span><span class="nv">$message</span><span class="o">-&gt;</span><span class="na">getUsername</span><span class="p">()</span><span class="o">.</span><span class="s1">&#39;&lt;/p&gt;&#39;</span><span class="p">)</span>
        <span class="p">);</span>

        <span class="k">return</span> <span class="nv">$envelope</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="your-own-receiver">
<h3>Your own Receiver</h3>
<p>A receiver is responsible for getting messages from a source and dispatching
them to the application.</p>
<p>Imagine you already processed some “orders” in your application using a
<code class="docutils literal notranslate"><span class="pre">NewOrder</span></code> message. Now you want to integrate with a 3rd party or a legacy
application but you can’t use an API and need to use a shared CSV file with new
orders.</p>
<p>You will read this CSV file and dispatch a <code class="docutils literal notranslate"><span class="pre">NewOrder</span></code> message. All you need to
do is to write your own CSV receiver:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">namespace</span> <span class="nx">App\MessageReceiver</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Message\NewOrder</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Messenger\Envelope</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Messenger\Exception\MessageDecodingFailedException</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Messenger\Transport\Receiver\ReceiverInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Serializer\SerializerInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">NewOrdersFromCsvFileReceiver</span> <span class="k">implements</span> <span class="nx">ReceiverInterface</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$serializer</span><span class="p">;</span>
    <span class="k">private</span> <span class="nv">$filePath</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nx">SerializerInterface</span> <span class="nv">$serializer</span><span class="p">,</span> <span class="nx">string</span> <span class="nv">$filePath</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">serializer</span> <span class="o">=</span> <span class="nv">$serializer</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">filePath</span> <span class="o">=</span> <span class="nv">$filePath</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">get</span><span class="p">()</span><span class="o">:</span> <span class="nx">iterable</span>
    <span class="p">{</span>
        <span class="c1">// Receive the envelope according to your transport ($yourEnvelope here),</span>
        <span class="c1">// in most cases, using a connection is the easiest solution.</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">null</span> <span class="o">===</span> <span class="nv">$yourEnvelope</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="p">[];</span>
        <span class="p">}</span>

        <span class="k">try</span> <span class="p">{</span>
            <span class="nv">$envelope</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">serializer</span><span class="o">-&gt;</span><span class="na">decode</span><span class="p">([</span>
                <span class="s1">&#39;body&#39;</span> <span class="o">=&gt;</span> <span class="nv">$yourEnvelope</span><span class="p">[</span><span class="s1">&#39;body&#39;</span><span class="p">],</span>
                <span class="s1">&#39;headers&#39;</span> <span class="o">=&gt;</span> <span class="nv">$yourEnvelope</span><span class="p">[</span><span class="s1">&#39;headers&#39;</span><span class="p">],</span>
            <span class="p">]);</span>
        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">MessageDecodingFailedException</span> <span class="nv">$exception</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">connection</span><span class="o">-&gt;</span><span class="na">reject</span><span class="p">(</span><span class="nv">$yourEnvelope</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]);</span>
            <span class="k">throw</span> <span class="nv">$exception</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="p">[</span><span class="nv">$envelope</span><span class="o">-&gt;</span><span class="na">with</span><span class="p">(</span><span class="k">new</span> <span class="nx">CustomStamp</span><span class="p">(</span><span class="nv">$yourEnvelope</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]))];</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">ack</span><span class="p">(</span><span class="nx">Envelope</span> <span class="nv">$envelope</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="c1">// Add information about the handled message</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">reject</span><span class="p">(</span><span class="nx">Envelope</span> <span class="nv">$envelope</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="c1">// In the case of a custom connection</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">connection</span><span class="o">-&gt;</span><span class="na">reject</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">findCustomStamp</span><span class="p">(</span><span class="nv">$envelope</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">getId</span><span class="p">());</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="receiver-and-sender-on-the-same-bus">
<h3>Receiver and Sender on the same Bus</h3>
<p>To allow sending and receiving messages on the same bus and prevent an infinite
loop, the message bus will add a <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Messenger/Stamp/ReceivedStamp.php" title="Symfony\Component\Messenger\Stamp\ReceivedStamp"><span class="pre">ReceivedStamp</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Messenger/Stamp/ReceivedStamp.php]</span></span></code>
stamp to the message envelopes and the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Messenger/Middleware/SendMessageMiddleware.php" title="Symfony\Component\Messenger\Middleware\SendMessageMiddleware"><span class="pre">SendMessageMiddleware</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Messenger/Middleware/SendMessageMiddleware.php]</span></span></code>
middleware will know it should not route these messages again to a transport.</p>
</div>
</div>
<div class="section" id="learn-more">
<h2>Learn more</h2>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="../messenger.xhtml">Messenger: Sync &amp; Queued Message Handling</a></li>
<li class="toctree-l1"><a class="reference internal" href="../messenger/custom-transport.xhtml">How to Create Your own Messenger Transport</a></li>
<li class="toctree-l1"><a class="reference internal" href="../messenger/dispatch_after_current_bus.xhtml">Transactional Messages: Handle New Messages After Handling is Done</a></li>
<li class="toctree-l1"><a class="reference internal" href="../messenger/handler_results.xhtml">Getting Results from your Handler</a></li>
<li class="toctree-l1"><a class="reference internal" href="../messenger/multiple_buses.xhtml">Multiple Buses</a></li>
</ul>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>