<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>The VarExporter Component</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="the-varexporter-component">
<span id="index-0"></span><h1>The VarExporter Component</h1>
<blockquote>
<div><p>The VarExporter component exports any serializable PHP data structure to
plain PHP code and allows to instantiate and populate objects without
calling their constructors.</p>
</div></blockquote>
<div class="section" id="installation">
<h2>Installation</h2>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require --dev symfony/var-exporter
</pre></div>
</td></tr></table></div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If you install this component outside of a Symfony application, you must
require the <code class="docutils literal notranslate"><span class="pre">vendor/autoload.php</span></code> file in your code to enable the class
autoloading mechanism provided by Composer. Read
<a class="reference internal" href="using_components.xhtml"><span class="doc">this article</span></a> for more details.</p>
</div>
</div>
<div class="section" id="exporting-serializing-variables">
<h2>Exporting/Serializing Variables</h2>
<p>The main feature of this component is to serialize PHP data structures to plain
PHP code, similar to PHPâ€™s <code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/function.var-export.php" title="var_export"><span class="pre">var_export</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/function.var-export.php]</span></span></code> function:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\VarExporter\VarExporter</span><span class="p">;</span>

<span class="nv">$exported</span> <span class="o">=</span> <span class="nx">VarExporter</span><span class="o">::</span><span class="na">export</span><span class="p">(</span><span class="nv">$someVariable</span><span class="p">);</span>
<span class="c1">// store the $exported data in some file or cache system for later reuse</span>
<span class="nv">$data</span> <span class="o">=</span> <span class="nb">file_put_contents</span><span class="p">(</span><span class="s1">&#39;exported.php&#39;</span><span class="p">,</span> <span class="nv">$exported</span><span class="p">);</span>

<span class="c1">// later, regenerate the original variable when you need it</span>
<span class="nv">$regeneratedVariable</span> <span class="o">=</span> <span class="k">require</span> <span class="s1">&#39;exported.php&#39;</span><span class="p">;</span>
</pre></div>
</div>
<p>The reason to use this component instead of <code class="docutils literal notranslate"><span class="pre">serialize()</span></code> or <code class="docutils literal notranslate"><span class="pre">igbinary</span></code> is
performance: thanks to <a class="reference external" href="https://www.php.net/opcache">OPcache</a><span class="link-target"> [https://www.php.net/opcache]</span>, the resulting code is significantly faster
and more memory efficient than using <code class="docutils literal notranslate"><span class="pre">unserialize()</span></code> or <code class="docutils literal notranslate"><span class="pre">igbinary_unserialize()</span></code>.</p>
<p>In addition, there are some minor differences:</p>
<ul class="simple">
<li><p>If the original variable defines them, all the semantics associated with
<code class="docutils literal notranslate"><span class="pre">serialize()</span></code> (such as <code class="docutils literal notranslate"><span class="pre">__wakeup()</span></code>, <code class="docutils literal notranslate"><span class="pre">__sleep()</span></code>, and <code class="docutils literal notranslate"><span class="pre">Serializable</span></code>)
are preserved (<code class="docutils literal notranslate"><span class="pre">var_export()</span></code> ignores them);</p></li>
<li><p>References involving <code class="docutils literal notranslate"><span class="pre">SplObjectStorage</span></code>, <code class="docutils literal notranslate"><span class="pre">ArrayObject</span></code> or <code class="docutils literal notranslate"><span class="pre">ArrayIterator</span></code>
instances are preserved;</p></li>
<li><p>Missing classes throw a <code class="docutils literal notranslate"><span class="pre">ClassNotFoundException</span></code> instead of being
unserialized to <code class="docutils literal notranslate"><span class="pre">PHP_Incomplete_Class</span></code> objects;</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">Reflection*</span></code>, <code class="docutils literal notranslate"><span class="pre">IteratorIterator</span></code> and <code class="docutils literal notranslate"><span class="pre">RecursiveIteratorIterator</span></code>
classes throw an exception when being serialized.</p></li>
</ul>
<p>The exported data is a <a class="reference external" href="https://www.php-fig.org/psr/psr-2/">PSR-2</a><span class="link-target"> [https://www.php-fig.org/psr/psr-2/]</span> compatible PHP file. Consider for example the
following class hierarchy:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">abstract</span> <span class="k">class</span> <span class="nc">AbstractClass</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="nv">$foo</span><span class="p">;</span>
    <span class="k">private</span> <span class="nv">$bar</span><span class="p">;</span>

    <span class="k">protected</span> <span class="k">function</span> <span class="nf">setBar</span><span class="p">(</span><span class="nv">$bar</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">bar</span> <span class="o">=</span> <span class="nv">$bar</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">ConcreteClass</span> <span class="k">extends</span> <span class="nx">AbstractClass</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">foo</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">setBar</span><span class="p">(</span><span class="mi">234</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>When exporting the <code class="docutils literal notranslate"><span class="pre">ConcreteClass</span></code> data with VarExporter, the generated PHP
file looks like this:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">return</span> <span class="nx">\Symfony\Component\VarExporter\Internal\Hydrator</span><span class="o">::</span><span class="na">hydrate</span><span class="p">(</span>
    <span class="nv">$o</span> <span class="o">=</span> <span class="p">[</span>
        <span class="k">clone</span> <span class="p">(</span><span class="nx">\Symfony\Component\VarExporter\Internal\Registry</span><span class="o">::</span><span class="nv">$prototypes</span><span class="p">[</span><span class="s1">&#39;Symfony\\Component\\VarExporter\\Tests\\ConcreteClass&#39;</span><span class="p">]</span> <span class="o">??</span> <span class="nx">\Symfony\Component\VarExporter\Internal\Registry</span><span class="o">::</span><span class="na">p</span><span class="p">(</span><span class="s1">&#39;Symfony\\Component\\VarExporter\\Tests\\ConcreteClass&#39;</span><span class="p">)),</span>
    <span class="p">],</span>
    <span class="k">null</span><span class="p">,</span>
    <span class="p">[</span>
        <span class="s1">&#39;Symfony\\Component\\VarExporter\\Tests\\AbstractClass&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
            <span class="s1">&#39;foo&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
                <span class="mi">123</span><span class="p">,</span>
            <span class="p">],</span>
            <span class="s1">&#39;bar&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
                <span class="mi">234</span><span class="p">,</span>
            <span class="p">],</span>
        <span class="p">],</span>
    <span class="p">],</span>
    <span class="nv">$o</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
    <span class="p">[]</span>
<span class="p">);</span>
</pre></div>
</div>
</div>
<div class="section" id="instantiating-php-classes">
<h2>Instantiating PHP Classes</h2>
<p>The other main feature provided by this component is an instantiator which can
create objects and set their properties without calling their constructors or
any other methods:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\VarExporter\Instantiator</span><span class="p">;</span>

<span class="c1">// creates an empty instance of Foo</span>
<span class="nv">$fooObject</span> <span class="o">=</span> <span class="nx">Instantiator</span><span class="o">::</span><span class="na">instantiate</span><span class="p">(</span><span class="nx">Foo</span><span class="o">::</span><span class="na">class</span><span class="p">);</span>

<span class="c1">// creates a Foo instance and sets one of its properties</span>
<span class="nv">$fooObject</span> <span class="o">=</span> <span class="nx">Instantiator</span><span class="o">::</span><span class="na">instantiate</span><span class="p">(</span><span class="nx">Foo</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;propertyName&#39;</span> <span class="o">=&gt;</span> <span class="nv">$propertyValue</span><span class="p">]);</span>

<span class="c1">// creates a Foo instance and sets a private property defined on its parent Bar class</span>
<span class="nv">$fooObject</span> <span class="o">=</span> <span class="nx">Instantiator</span><span class="o">::</span><span class="na">instantiate</span><span class="p">(</span><span class="nx">Foo</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[</span>
    <span class="nx">Bar</span><span class="o">::</span><span class="na">class</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;privateBarProperty&#39;</span> <span class="o">=&gt;</span> <span class="nv">$propertyValue</span><span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</div>
<p>Instances of <code class="docutils literal notranslate"><span class="pre">ArrayObject</span></code>, <code class="docutils literal notranslate"><span class="pre">ArrayIterator</span></code> and <code class="docutils literal notranslate"><span class="pre">SplObjectHash</span></code> can be
created by using the special <code class="docutils literal notranslate"><span class="pre">&quot;\0&quot;</span></code> property name to define their internal value:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// Creates an SplObjectHash where $info1 is associated to $object1, etc.</span>
<span class="nv">$theObject</span> <span class="o">=</span> <span class="nx">Instantiator</span><span class="o">::</span><span class="na">instantiate</span><span class="p">(</span><span class="nx">SplObjectStorage</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span>
    <span class="s2">&quot;</span><span class="se">\0</span><span class="s2">&quot;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="nv">$object1</span><span class="p">,</span> <span class="nv">$info1</span><span class="p">,</span> <span class="nv">$object2</span><span class="p">,</span> <span class="nv">$info2</span><span class="o">...</span><span class="p">]</span>
<span class="p">]);</span>

<span class="c1">// creates an ArrayObject populated with $inputArray</span>
<span class="nv">$theObject</span> <span class="o">=</span> <span class="nx">Instantiator</span><span class="o">::</span><span class="na">instantiate</span><span class="p">(</span><span class="nx">ArrayObject</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span>
    <span class="s2">&quot;</span><span class="se">\0</span><span class="s2">&quot;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="nv">$inputArray</span><span class="p">]</span>
<span class="p">]);</span>
</pre></div>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>