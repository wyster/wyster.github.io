<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Service Container</title>
    <link rel="stylesheet" href="_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="service-container">
<span id="index-0"></span><h1>Service Container</h1>
<div class="screencast admonition">
<p class="admonition-title">Screencast</p>
<p>Do you prefer video tutorials? Check out the <a class="reference external" href="https://symfonycasts.com/screencast/symfony-fundamentals">Symfony Fundamentals screencast series</a><span class="link-target"> [https://symfonycasts.com/screencast/symfony-fundamentals]</span>.</p>
</div>
<p>Your application is <em>full</em> of useful objects: a “Mailer” object might help you
send emails while another object might help you save things to the database.
Almost <em>everything</em> that your app “does” is actually done by one of these objects.
And each time you install a new bundle, you get access to even more!</p>
<p>In Symfony, these useful objects are called <strong>services</strong> and each service lives
inside a very special object called the <strong>service container</strong>. The container
allows you to centralize the way objects are constructed. It makes your life
easier, promotes a strong architecture and is super fast!</p>
<div class="section" id="fetching-and-using-services">
<h2>Fetching and using Services</h2>
<p>The moment you start a Symfony app, your container <em>already</em> contains many services.
These are like <em>tools</em>: waiting for you to take advantage of them. In your controller,
you can “ask” for a service from the container by type-hinting an argument with the
service’s class or interface name. Want to <a class="reference internal" href="logging.xhtml"><span class="doc">log</span></a> something? No problem:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/ProductController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Psr\Log\LoggerInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">ProductController</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @Route(&quot;/products&quot;)</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">list</span><span class="p">(</span><span class="nx">LoggerInterface</span> <span class="nv">$logger</span><span class="p">)</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="nv">$logger</span><span class="o">-&gt;</span><span class="na">info</span><span class="p">(</span><span class="s1">&#39;Look, I just used a service!&#39;</span><span class="p">);</span>

        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>What other services are available? Find out by running:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console debug:autowiring

<span class="go">  # this is just a *small* sample of the output...</span>

<span class="go">  Describes a logger instance.</span>
<span class="go">  Psr\Log\LoggerInterface (monolog.logger)</span>

<span class="go">  Request stack that controls the lifecycle of requests.</span>
<span class="go">  Symfony\Component\HttpFoundation\RequestStack (request_stack)</span>

<span class="go">  Interface for the session.</span>
<span class="go">  Symfony\Component\HttpFoundation\Session\SessionInterface (session)</span>

<span class="go">  RouterInterface is the interface that all Router classes must implement.</span>
<span class="go">  Symfony\Component\Routing\RouterInterface (router.default)</span>

<span class="go">  [...]</span>
</pre></div>
</td></tr></table></div>
<p>When you use these type-hints in your controller methods or inside your
<a class="reference internal" href="#service-container-creating-service"><span class="std std-ref">own services</span></a>, Symfony will automatically
pass you the service object matching that type.</p>
<p>Throughout the docs, you’ll see how to use the many different services that live
in the container.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>There are actually <em>many</em> more services in the container, and each service has
a unique id in the container, like <code class="docutils literal notranslate"><span class="pre">session</span></code> or <code class="docutils literal notranslate"><span class="pre">router.default</span></code>. For a full
list, you can run <code class="docutils literal notranslate"><span class="pre">php</span> <span class="pre">bin/console</span> <span class="pre">debug:container</span></code>. But most of the time,
you won’t need to worry about this. See <a class="reference internal" href="#services-wire-specific-service"><span class="std std-ref">Choose a Specific Service</span></a>.
See <a class="reference internal" href="service_container/debug.xhtml"><span class="doc">How to Debug the Service Container &amp; List Services</span></a>.</p>
</div>
</div>
<div class="section" id="creating-configuring-services-in-the-container">
<span id="service-container-creating-service"></span><span id="index-1"></span><h2>Creating/Configuring Services in the Container</h2>
<p>You can also organize your <em>own</em> code into services. For example, suppose you need
to show your users a random, happy message. If you put this code in your controller,
it can’t be re-used. Instead, you decide to create a new class:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Service/MessageGenerator.php</span>
<span class="k">namespace</span> <span class="nx">App\Service</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">MessageGenerator</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">getHappyMessage</span><span class="p">()</span><span class="o">:</span> <span class="nx">string</span>
    <span class="p">{</span>
        <span class="nv">$messages</span> <span class="o">=</span> <span class="p">[</span>
            <span class="s1">&#39;You did it! You updated the system! Amazing!&#39;</span><span class="p">,</span>
            <span class="s1">&#39;That was one of the coolest updates I\&#39;ve seen all day!&#39;</span><span class="p">,</span>
            <span class="s1">&#39;Great work! Keep going!&#39;</span><span class="p">,</span>
        <span class="p">];</span>

        <span class="nv">$index</span> <span class="o">=</span> <span class="nb">array_rand</span><span class="p">(</span><span class="nv">$messages</span><span class="p">);</span>

        <span class="k">return</span> <span class="nv">$messages</span><span class="p">[</span><span class="nv">$index</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Congratulations! You’ve created your first service class! You can use it immediately
inside your controller:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/ProductController.php</span>
<span class="k">use</span> <span class="nx">App\Service\MessageGenerator</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>

<span class="sd">/**</span>
<span class="sd"> * @Route(&quot;/products/new&quot;)</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">new</span><span class="p">(</span><span class="nx">MessageGenerator</span> <span class="nv">$messageGenerator</span><span class="p">)</span><span class="o">:</span> <span class="nx">Response</span>
<span class="p">{</span>
    <span class="c1">// thanks to the type-hint, the container will instantiate a</span>
    <span class="c1">// new MessageGenerator and pass it to you!</span>
    <span class="c1">// ...</span>

    <span class="nv">$message</span> <span class="o">=</span> <span class="nv">$messageGenerator</span><span class="o">-&gt;</span><span class="na">getHappyMessage</span><span class="p">();</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">addFlash</span><span class="p">(</span><span class="s1">&#39;success&#39;</span><span class="p">,</span> <span class="nv">$message</span><span class="p">);</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>When you ask for the <code class="docutils literal notranslate"><span class="pre">MessageGenerator</span></code> service, the container constructs a new
<code class="docutils literal notranslate"><span class="pre">MessageGenerator</span></code> object and returns it (see sidebar below). But if you never ask
for the service, it’s <em>never</em> constructed: saving memory and speed. As a bonus, the
<code class="docutils literal notranslate"><span class="pre">MessageGenerator</span></code> service is only created <em>once</em>: the same instance is returned
each time you ask for it.</p>
<div class="sidebar" id="service-container-services-load-example">
<p class="sidebar-title">Automatic Service Loading in services.yaml</p>
<p>The documentation assumes you’re using the following service configuration,
which is the default config for a new project:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="c1"># default configuration for services in *this* file</span>
    <span class="l l-Scalar l-Scalar-Plain">_defaults</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">autowire</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">true</span>      <span class="c1"># Automatically injects dependencies in your services.</span>
        <span class="l l-Scalar l-Scalar-Plain">autoconfigure</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">true</span> <span class="c1"># Automatically registers your services as commands, event subscribers, etc.</span>

    <span class="c1"># makes classes in src/ available to be used as services</span>
    <span class="c1"># this creates a service per class whose id is the fully-qualified class name</span>
    <span class="l l-Scalar l-Scalar-Plain">App\</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">resource</span><span class="p p-Indicator">:</span> <span class="s">&#39;../src/*&#39;</span>
        <span class="l l-Scalar l-Scalar-Plain">exclude</span><span class="p p-Indicator">:</span> <span class="s">&#39;../src/{DependencyInjection,Entity,Tests,Kernel.php}&#39;</span>

    <span class="c1"># ...</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="c">&lt;!-- Default configuration for services in *this* file --&gt;</span>
        <span class="nt">&lt;defaults</span> <span class="na">autowire=</span><span class="s">&quot;true&quot;</span> <span class="na">autoconfigure=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>

        <span class="c">&lt;!-- makes classes in src/ available to be used as services --&gt;</span>
        <span class="c">&lt;!-- this creates a service per class whose id is the fully-qualified class name --&gt;</span>
        <span class="nt">&lt;prototype</span> <span class="na">namespace=</span><span class="s">&quot;App\&quot;</span> <span class="na">resource=</span><span class="s">&quot;../src/*&quot;</span> <span class="na">exclude=</span><span class="s">&quot;../src/{DependencyInjection,Entity,Tests,Kernel.php}&quot;</span><span class="nt">/&gt;</span>

        <span class="c">&lt;!-- ... --&gt;</span>

    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// default configuration for services in *this* file</span>
    <span class="nv">$services</span> <span class="o">=</span> <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">services</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">defaults</span><span class="p">()</span>
            <span class="o">-&gt;</span><span class="na">autowire</span><span class="p">()</span>      <span class="c1">// Automatically injects dependencies in your services.</span>
            <span class="o">-&gt;</span><span class="na">autoconfigure</span><span class="p">()</span> <span class="c1">// Automatically registers your services as commands, event subscribers, etc.</span>
    <span class="p">;</span>

    <span class="c1">// makes classes in src/ available to be used as services</span>
    <span class="c1">// this creates a service per class whose id is the fully-qualified class name</span>
    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">load</span><span class="p">(</span><span class="s1">&#39;App\\&#39;</span><span class="p">,</span> <span class="s1">&#39;../src/*&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">exclude</span><span class="p">(</span><span class="s1">&#39;../src/{DependencyInjection,Entity,Tests,Kernel.php}&#39;</span><span class="p">);</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The value of the <code class="docutils literal notranslate"><span class="pre">resource</span></code> and <code class="docutils literal notranslate"><span class="pre">exclude</span></code> options can be any valid
<a class="reference external" href="https://en.wikipedia.org/wiki/Glob_(programming)">glob pattern</a><span class="link-target"> [https://en.wikipedia.org/wiki/Glob_(programming)]</span>. The value of the <code class="docutils literal notranslate"><span class="pre">exclude</span></code> option can also be an
array of glob patterns.</p>
</div>
<p>Thanks to this configuration, you can automatically use any classes from the
<code class="docutils literal notranslate"><span class="pre">src/</span></code> directory as a service, without needing to manually configure
it. Later, you’ll learn more about this in <a class="reference internal" href="#service-psr4-loader"><span class="std std-ref">Importing Many Services at once with resource</span></a>.</p>
<p>If you’d prefer to manually wire your service, that’s totally possible: see
<a class="reference internal" href="#services-explicitly-configure-wire-services"><span class="std std-ref">Explicitly Configuring Services and Arguments</span></a>.</p>
</div>
</div>
<div class="section" id="injecting-services-config-into-a-service">
<span id="services-constructor-injection"></span><h2>Injecting Services/Config into a Service</h2>
<p>What if you need to access the <code class="docutils literal notranslate"><span class="pre">logger</span></code> service from within <code class="docutils literal notranslate"><span class="pre">MessageGenerator</span></code>?
No problem! Create a <code class="docutils literal notranslate"><span class="pre">__construct()</span></code> method with a <code class="docutils literal notranslate"><span class="pre">$logger</span></code> argument that has
the <code class="docutils literal notranslate"><span class="pre">LoggerInterface</span></code> type-hint. Set this on a new <code class="docutils literal notranslate"><span class="pre">$logger</span></code> property
and use it later:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Service/MessageGenerator.php</span>
<span class="k">namespace</span> <span class="nx">App\Service</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Psr\Log\LoggerInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">MessageGenerator</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$logger</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nx">LoggerInterface</span> <span class="nv">$logger</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">logger</span> <span class="o">=</span> <span class="nv">$logger</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">getHappyMessage</span><span class="p">()</span><span class="o">:</span> <span class="nx">string</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">logger</span><span class="o">-&gt;</span><span class="na">info</span><span class="p">(</span><span class="s1">&#39;About to find a happy message!&#39;</span><span class="p">);</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>That’s it! The container will <em>automatically</em> know to pass the <code class="docutils literal notranslate"><span class="pre">logger</span></code> service
when instantiating the <code class="docutils literal notranslate"><span class="pre">MessageGenerator</span></code>. How does it know to do this?
<a class="reference internal" href="#services-autowire"><span class="std std-ref">Autowiring</span></a>. The key is the <code class="docutils literal notranslate"><span class="pre">LoggerInterface</span></code>
type-hint in your <code class="docutils literal notranslate"><span class="pre">__construct()</span></code> method and the <code class="docutils literal notranslate"><span class="pre">autowire:</span> <span class="pre">true</span></code> config in
<code class="docutils literal notranslate"><span class="pre">services.yaml</span></code>. When you type-hint an argument, the container will automatically
find the matching service. If it can’t, you’ll see a clear exception with a helpful
suggestion.</p>
<p>By the way, this method of adding dependencies to your <code class="docutils literal notranslate"><span class="pre">__construct()</span></code> method is
called <em>dependency injection</em>.</p>
<p id="services-debug-container-types">How should you know to use <code class="docutils literal notranslate"><span class="pre">LoggerInterface</span></code> for the type-hint? You can either
read the docs for whatever feature you’re using, or get a list of autowireable
type-hints by running:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console debug:autowiring

<span class="go">  # this is just a *small* sample of the output...</span>

<span class="go">  Describes a logger instance.</span>
<span class="go">  Psr\Log\LoggerInterface (monolog.logger)</span>

<span class="go">  Request stack that controls the lifecycle of requests.</span>
<span class="go">  Symfony\Component\HttpFoundation\RequestStack (request_stack)</span>

<span class="go">  Interface for the session.</span>
<span class="go">  Symfony\Component\HttpFoundation\Session\SessionInterface (session)</span>

<span class="go">  RouterInterface is the interface that all Router classes must implement.</span>
<span class="go">  Symfony\Component\Routing\RouterInterface (router.default)</span>

<span class="go">  [...]</span>
</pre></div>
</td></tr></table></div>
<div class="section" id="handling-multiple-services">
<h3>Handling Multiple Services</h3>
<p>Suppose you also want to email a site administrator each time a site update is
made. To do that, you create a new class:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Service/SiteUpdateManager.php</span>
<span class="k">namespace</span> <span class="nx">App\Service</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Service\MessageGenerator</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Mailer\MailerInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Mime\Email</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">SiteUpdateManager</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$messageGenerator</span><span class="p">;</span>
    <span class="k">private</span> <span class="nv">$mailer</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nx">MessageGenerator</span> <span class="nv">$messageGenerator</span><span class="p">,</span> <span class="nx">MailerInterface</span> <span class="nv">$mailer</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">messageGenerator</span> <span class="o">=</span> <span class="nv">$messageGenerator</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mailer</span> <span class="o">=</span> <span class="nv">$mailer</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">notifyOfSiteUpdate</span><span class="p">()</span><span class="o">:</span> <span class="nx">bool</span>
    <span class="p">{</span>
        <span class="nv">$happyMessage</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">messageGenerator</span><span class="o">-&gt;</span><span class="na">getHappyMessage</span><span class="p">();</span>

        <span class="nv">$email</span> <span class="o">=</span> <span class="p">(</span><span class="k">new</span> <span class="nx">Email</span><span class="p">())</span>
            <span class="o">-&gt;</span><span class="na">from</span><span class="p">(</span><span class="s1">&#39;admin@example.com&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">to</span><span class="p">(</span><span class="s1">&#39;manager@example.com&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">subject</span><span class="p">(</span><span class="s1">&#39;Site update just happened!&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">text</span><span class="p">(</span><span class="s1">&#39;Someone just updated the site. We told them: &#39;</span><span class="o">.</span><span class="nv">$happyMessage</span><span class="p">);</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mailer</span><span class="o">-&gt;</span><span class="na">send</span><span class="p">(</span><span class="nv">$email</span><span class="p">);</span>

        <span class="c1">// ...</span>

        <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>This needs the <code class="docutils literal notranslate"><span class="pre">MessageGenerator</span></code> <em>and</em> the <code class="docutils literal notranslate"><span class="pre">Mailer</span></code> service. That’s no
problem, we ask them by type hinting their class and interface names!
Now, this new service is ready to be used. In a controller, for example,
you can type-hint the new <code class="docutils literal notranslate"><span class="pre">SiteUpdateManager</span></code> class and use it:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/SiteController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">use</span> <span class="nx">App\Service\SiteUpdateManager</span><span class="p">;</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">new</span><span class="p">(</span><span class="nx">SiteUpdateManager</span> <span class="nv">$siteUpdateManager</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="k">if</span> <span class="p">(</span><span class="nv">$siteUpdateManager</span><span class="o">-&gt;</span><span class="na">notifyOfSiteUpdate</span><span class="p">())</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">addFlash</span><span class="p">(</span><span class="s1">&#39;success&#39;</span><span class="p">,</span> <span class="s1">&#39;Notification mail was sent successfully.&#39;</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Thanks to autowiring and your type-hints in <code class="docutils literal notranslate"><span class="pre">__construct()</span></code>, the container creates
the <code class="docutils literal notranslate"><span class="pre">SiteUpdateManager</span></code> object and passes it the correct argument. In most cases,
this works perfectly.</p>
</div>
<div class="section" id="manually-wiring-arguments">
<span id="services-manually-wire-args"></span><h3>Manually Wiring Arguments</h3>
<p>But there are a few cases when an argument to a service cannot be autowired. For
example, suppose you want to make the admin email configurable:</p>
<div class="highlight-diff notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28</pre></div></td><td class="code"><div class="highlight"><pre><span></span>// src/Service/SiteUpdateManager.php
// ...

class SiteUpdateManager
{
    // ...
<span class="gi">+    private $adminEmail;</span>

<span class="gd">-    public function __construct(MessageGenerator $messageGenerator, MailerInterface $mailer)</span>
<span class="gi">+    public function __construct(MessageGenerator $messageGenerator, MailerInterface $mailer, string $adminEmail)</span>
    {
        // ...
<span class="gi">+        $this-&gt;adminEmail = $adminEmail;</span>
    }

    public function notifyOfSiteUpdate(): bool
    {
        // ...

        $email = (new Email())
            // ...
<span class="gd">-            -&gt;to(&#39;manager@example.com&#39;)</span>
<span class="gi">+            -&gt;to($this-&gt;adminEmail)</span>
            // ...
        ;
        // ...
    }
}
</pre></div>
</td></tr></table></div>
<p>If you make this change and refresh, you’ll see an error:</p>
<blockquote>
<div><p>Cannot autowire service “AppServiceSiteUpdateManager”: argument “$adminEmail”
of method “__construct()” must have a type-hint or be given a value explicitly.</p>
</div></blockquote>
<p>That makes sense! There is no way that the container knows what value you want to
pass here. No problem! In your configuration, you can explicitly set this argument:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="c1"># ... same as before</span>

    <span class="c1"># same as before</span>
    <span class="l l-Scalar l-Scalar-Plain">App\</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">resource</span><span class="p p-Indicator">:</span> <span class="s">&#39;../src/*&#39;</span>
        <span class="l l-Scalar l-Scalar-Plain">exclude</span><span class="p p-Indicator">:</span> <span class="s">&#39;../src/{DependencyInjection,Entity,Tests,Kernel.php}&#39;</span>

    <span class="c1"># explicitly configure the service</span>
    <span class="l l-Scalar l-Scalar-Plain">App\Service\SiteUpdateManager</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">arguments</span><span class="p p-Indicator">:</span>
            <span class="l l-Scalar l-Scalar-Plain">$adminEmail</span><span class="p p-Indicator">:</span> <span class="s">&#39;manager@example.com&#39;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="c">&lt;!-- ...  same as before --&gt;</span>

        <span class="c">&lt;!-- Same as before --&gt;</span>

        <span class="nt">&lt;prototype</span> <span class="na">namespace=</span><span class="s">&quot;App\&quot;</span>
            <span class="na">resource=</span><span class="s">&quot;../src/*&quot;</span>
            <span class="na">exclude=</span><span class="s">&quot;../src/{DependencyInjection,Entity,Tests,Kernel.php}&quot;</span>
        <span class="nt">/&gt;</span>

        <span class="c">&lt;!-- Explicitly configure the service --&gt;</span>
        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\Service\SiteUpdateManager&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;argument</span> <span class="na">key=</span><span class="s">&quot;$adminEmail&quot;</span><span class="nt">&gt;</span>manager@example.com<span class="nt">&lt;/argument&gt;</span>
        <span class="nt">&lt;/service&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Service\SiteUpdateManager</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="c1">// same as before</span>
    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">load</span><span class="p">(</span><span class="s1">&#39;App\\&#39;</span><span class="p">,</span> <span class="s1">&#39;../src/*&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">exclude</span><span class="p">(</span><span class="s1">&#39;../src/{DependencyInjection,Entity,Tests,Kernel.php}&#39;</span><span class="p">);</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">SiteUpdateManager</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">arg</span><span class="p">(</span><span class="s1">&#39;$adminEmail&#39;</span><span class="p">,</span> <span class="s1">&#39;manager@example.com&#39;</span><span class="p">)</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>Thanks to this, the container will pass <code class="docutils literal notranslate"><span class="pre">manager&#64;example.com</span></code> to the <code class="docutils literal notranslate"><span class="pre">$adminEmail</span></code>
argument of <code class="docutils literal notranslate"><span class="pre">__construct</span></code> when creating the <code class="docutils literal notranslate"><span class="pre">SiteUpdateManager</span></code> service. The
other arguments will still be autowired.</p>
<p>But, isn’t this fragile? Fortunately, no! If you rename the <code class="docutils literal notranslate"><span class="pre">$adminEmail</span></code> argument
to something else - e.g. <code class="docutils literal notranslate"><span class="pre">$mainEmail</span></code> - you will get a clear exception when you
reload the next page (even if that page doesn’t use this service).</p>
</div>
</div>
<div class="section" id="service-parameters">
<span id="service-container-parameters"></span><h2>Service Parameters</h2>
<p>In addition to holding service objects, the container also holds configuration,
called <strong>parameters</strong>. The main article about Symfony configuration explains the
<a class="reference internal" href="configuration.xhtml#configuration-parameters"><span class="std std-ref">configuration parameters</span></a> in detail and shows
all their types (string, boolean, array, binary and PHP constant parameters).</p>
<p>However, there is another type of parameter related to services. In YAML config,
any string which starts with <code class="docutils literal notranslate"><span class="pre">&#64;</span></code> is considered as the ID of a service, instead
of a regular string. In XML config, use the <code class="docutils literal notranslate"><span class="pre">type=&quot;service&quot;</span></code> type for the
parameter and in PHP config use the <code class="docutils literal notranslate"><span class="pre">service()</span></code> function:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">App\Service\MessageGenerator</span><span class="p p-Indicator">:</span>
        <span class="c1"># this is not a string, but a reference to a service called &#39;logger&#39;</span>
        <span class="l l-Scalar l-Scalar-Plain">arguments</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="s">&#39;@logger&#39;</span><span class="p p-Indicator">]</span>

        <span class="c1"># if the value of a string parameter starts with &#39;@&#39;, you need to escape</span>
        <span class="c1"># it by adding another &#39;@&#39; so Symfony doesn&#39;t consider it a service</span>
        <span class="c1"># (this will be parsed as the string &#39;@securepassword&#39;)</span>
        <span class="l l-Scalar l-Scalar-Plain">mailer_password</span><span class="p p-Indicator">:</span> <span class="s">&#39;@@securepassword&#39;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\Service\MessageGenerator&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;argument</span> <span class="na">type=</span><span class="s">&quot;service&quot;</span> <span class="na">id=</span><span class="s">&quot;logger&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/service&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Service\MessageGenerator</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$services</span> <span class="o">=</span> <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">services</span><span class="p">();</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">MessageGenerator</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="c1">// In versions earlier to Symfony 5.1 the service() function was called ref()</span>
        <span class="o">-&gt;</span><span class="na">args</span><span class="p">([</span><span class="nx">service</span><span class="p">(</span><span class="s1">&#39;logger&#39;</span><span class="p">)])</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>Working with container parameters is straightforward using the container’s
accessor methods for parameters:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// checks if a parameter is defined (parameter names are case-sensitive)</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">hasParameter</span><span class="p">(</span><span class="s1">&#39;mailer.transport&#39;</span><span class="p">);</span>

<span class="c1">// gets value of a parameter</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">getParameter</span><span class="p">(</span><span class="s1">&#39;mailer.transport&#39;</span><span class="p">);</span>

<span class="c1">// adds a new parameter</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">setParameter</span><span class="p">(</span><span class="s1">&#39;mailer.transport&#39;</span><span class="p">,</span> <span class="s1">&#39;sendmail&#39;</span><span class="p">);</span>
</pre></div>
</div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>The used <code class="docutils literal notranslate"><span class="pre">.</span></code> notation is a
<a class="reference internal" href="contributing/code/standards.xhtml#service-naming-conventions"><span class="std std-ref">Symfony convention</span></a> to make parameters
easier to read. Parameters are flat key-value elements, they can’t
be organized into a nested array</p>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>You can only set a parameter before the container is compiled, not at run-time.
To learn more about compiling the container see
<a class="reference internal" href="components/dependency_injection/compilation.xhtml"><span class="doc">Compiling the Container</span></a>.</p>
</div>
</div>
<div class="section" id="choose-a-specific-service">
<span id="services-wire-specific-service"></span><h2>Choose a Specific Service</h2>
<p>The <code class="docutils literal notranslate"><span class="pre">MessageGenerator</span></code> service created earlier requires a <code class="docutils literal notranslate"><span class="pre">LoggerInterface</span></code> argument:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Service/MessageGenerator.php</span>
<span class="k">namespace</span> <span class="nx">App\Service</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Psr\Log\LoggerInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">MessageGenerator</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$logger</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nx">LoggerInterface</span> <span class="nv">$logger</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">logger</span> <span class="o">=</span> <span class="nv">$logger</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>However, there are <em>multiple</em> services in the container that implement <code class="docutils literal notranslate"><span class="pre">LoggerInterface</span></code>,
such as <code class="docutils literal notranslate"><span class="pre">logger</span></code>, <code class="docutils literal notranslate"><span class="pre">monolog.logger.request</span></code>, <code class="docutils literal notranslate"><span class="pre">monolog.logger.php</span></code>, etc. How
does the container know which one to use?</p>
<p>In these situations, the container is usually configured to automatically choose
one of the services - <code class="docutils literal notranslate"><span class="pre">logger</span></code> in this case (read more about why in <a class="reference internal" href="service_container/autowiring.xhtml#service-autowiring-alias"><span class="std std-ref">Using Aliases to Enable Autowiring</span></a>).
But, you can control this and pass in a different logger:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="c1"># ... same code as before</span>

    <span class="c1"># explicitly configure the service</span>
    <span class="l l-Scalar l-Scalar-Plain">App\Service\MessageGenerator</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">arguments</span><span class="p p-Indicator">:</span>
            <span class="c1"># the &#39;@&#39; symbol is important: that&#39;s what tells the container</span>
            <span class="c1"># you want to pass the *service* whose id is &#39;monolog.logger.request&#39;,</span>
            <span class="c1"># and not just the *string* &#39;monolog.logger.request&#39;</span>
            <span class="l l-Scalar l-Scalar-Plain">$logger</span><span class="p p-Indicator">:</span> <span class="s">&#39;@monolog.logger.request&#39;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="c">&lt;!-- ... same code as before --&gt;</span>

        <span class="c">&lt;!-- Explicitly configure the service --&gt;</span>
        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\Service\MessageGenerator&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;argument</span> <span class="na">key=</span><span class="s">&quot;$logger&quot;</span> <span class="na">type=</span><span class="s">&quot;service&quot;</span> <span class="na">id=</span><span class="s">&quot;monolog.logger.request&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/service&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Service\MessageGenerator</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ... same code as before</span>

    <span class="c1">// explicitly configure the service</span>
    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">SiteUpdateManager</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">arg</span><span class="p">(</span><span class="s1">&#39;$logger&#39;</span><span class="p">,</span> <span class="nx">service</span><span class="p">(</span><span class="s1">&#39;monolog.logger.request&#39;</span><span class="p">))</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>This tells the container that the <code class="docutils literal notranslate"><span class="pre">$logger</span></code> argument to <code class="docutils literal notranslate"><span class="pre">__construct</span></code> should use
service whose id is <code class="docutils literal notranslate"><span class="pre">monolog.logger.request</span></code>.</p>
<p id="container-debug-container">For a full list of <em>all</em> possible services in the container, run:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console debug:container
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="binding-arguments-by-name-or-type">
<span id="services-binding"></span><h2>Binding Arguments by Name or Type</h2>
<p>You can also use the <code class="docutils literal notranslate"><span class="pre">bind</span></code> keyword to bind specific arguments by name or type:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">_defaults</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">bind</span><span class="p p-Indicator">:</span>
            <span class="c1"># pass this value to any $adminEmail argument for any service</span>
            <span class="c1"># that&#39;s defined in this file (including controller arguments)</span>
            <span class="l l-Scalar l-Scalar-Plain">$adminEmail</span><span class="p p-Indicator">:</span> <span class="s">&#39;manager@example.com&#39;</span>

            <span class="c1"># pass this service to any $requestLogger argument for any</span>
            <span class="c1"># service that&#39;s defined in this file</span>
            <span class="l l-Scalar l-Scalar-Plain">$requestLogger</span><span class="p p-Indicator">:</span> <span class="s">&#39;@monolog.logger.request&#39;</span>

            <span class="c1"># pass this service for any LoggerInterface type-hint for any</span>
            <span class="c1"># service that&#39;s defined in this file</span>
            <span class="l l-Scalar l-Scalar-Plain">Psr\Log\LoggerInterface</span><span class="p p-Indicator">:</span> <span class="s">&#39;@monolog.logger.request&#39;</span>

            <span class="c1"># optionally you can define both the name and type of the argument to match</span>
            <span class="l l-Scalar l-Scalar-Plain">string $adminEmail</span><span class="p p-Indicator">:</span> <span class="s">&#39;manager@example.com&#39;</span>
            <span class="l l-Scalar l-Scalar-Plain">Psr\Log\LoggerInterface $requestLogger</span><span class="p p-Indicator">:</span> <span class="s">&#39;@monolog.logger.request&#39;</span>
            <span class="l l-Scalar l-Scalar-Plain">iterable $rules</span><span class="p p-Indicator">:</span> <span class="kt">!tagged_iterator</span> <span class="l l-Scalar l-Scalar-Plain">app.foo.rule</span>

    <span class="c1"># ...</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="nt">&lt;defaults</span> <span class="na">autowire=</span><span class="s">&quot;true&quot;</span> <span class="na">autoconfigure=</span><span class="s">&quot;true&quot;</span> <span class="na">public=</span><span class="s">&quot;false&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;bind</span> <span class="na">key=</span><span class="s">&quot;$adminEmail&quot;</span><span class="nt">&gt;</span>manager@example.com<span class="nt">&lt;/bind&gt;</span>
            <span class="nt">&lt;bind</span> <span class="na">key=</span><span class="s">&quot;$requestLogger&quot;</span>
                <span class="na">type=</span><span class="s">&quot;service&quot;</span>
                <span class="na">id=</span><span class="s">&quot;monolog.logger.request&quot;</span>
            <span class="nt">/&gt;</span>
            <span class="nt">&lt;bind</span> <span class="na">key=</span><span class="s">&quot;Psr\Log\LoggerInterface&quot;</span>
                <span class="na">type=</span><span class="s">&quot;service&quot;</span>
                <span class="na">id=</span><span class="s">&quot;monolog.logger.request&quot;</span>
            <span class="nt">/&gt;</span>

            <span class="c">&lt;!-- optionally you can define both the name and type of the argument to match --&gt;</span>
            <span class="nt">&lt;bind</span> <span class="na">key=</span><span class="s">&quot;string $adminEmail&quot;</span><span class="nt">&gt;</span>manager@example.com<span class="nt">&lt;/bind&gt;</span>
            <span class="nt">&lt;bind</span> <span class="na">key=</span><span class="s">&quot;Psr\Log\LoggerInterface $requestLogger&quot;</span>
                <span class="na">type=</span><span class="s">&quot;service&quot;</span>
                <span class="na">id=</span><span class="s">&quot;monolog.logger.request&quot;</span>
            <span class="nt">/&gt;</span>
            <span class="nt">&lt;bind</span> <span class="na">key=</span><span class="s">&quot;iterable $rules&quot;</span>
                <span class="na">type=</span><span class="s">&quot;tagged_iterator&quot;</span>
                <span class="na">tag=</span><span class="s">&quot;app.foo.rule&quot;</span>
            <span class="nt">/&gt;</span>
        <span class="nt">&lt;/defaults&gt;</span>

        <span class="c">&lt;!-- ... --&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Controller\LuckyController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Psr\Log\LoggerInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\Definition</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\Reference</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$services</span> <span class="o">=</span> <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">services</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">defaults</span><span class="p">()</span>
            <span class="c1">// pass this value to any $adminEmail argument for any service</span>
            <span class="c1">// that&#39;s defined in this file (including controller arguments)</span>
            <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s1">&#39;$adminEmail&#39;</span><span class="p">,</span> <span class="s1">&#39;manager@example.com&#39;</span><span class="p">)</span>

            <span class="c1">// pass this service to any $requestLogger argument for any</span>
            <span class="c1">// service that&#39;s defined in this file</span>
            <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s1">&#39;$requestLogger&#39;</span><span class="p">,</span> <span class="nx">service</span><span class="p">(</span><span class="s1">&#39;monolog.logger.request&#39;</span><span class="p">))</span>

            <span class="c1">// pass this service for any LoggerInterface type-hint for any</span>
            <span class="c1">// service that&#39;s defined in this file</span>
            <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="nx">LoggerInterface</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="nx">service</span><span class="p">(</span><span class="s1">&#39;monolog.logger.request&#39;</span><span class="p">))</span>

            <span class="c1">// optionally you can define both the name and type of the argument to match</span>
            <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s1">&#39;string $adminEmail&#39;</span><span class="p">,</span> <span class="s1">&#39;manager@example.com&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="nx">LoggerInterface</span><span class="o">::</span><span class="na">class</span><span class="o">.</span><span class="s1">&#39; $requestLogger&#39;</span><span class="p">,</span> <span class="nx">service</span><span class="p">(</span><span class="s1">&#39;monolog.logger.request&#39;</span><span class="p">))</span>
            <span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s1">&#39;iterable $rules&#39;</span><span class="p">,</span> <span class="nx">tagged_iterator</span><span class="p">(</span><span class="s1">&#39;app.foo.rule&#39;</span><span class="p">))</span>
    <span class="p">;</span>

    <span class="c1">// ...</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>By putting the <code class="docutils literal notranslate"><span class="pre">bind</span></code> key under <code class="docutils literal notranslate"><span class="pre">_defaults</span></code>, you can specify the value of <em>any</em>
argument for <em>any</em> service defined in this file! You can bind arguments by name
(e.g. <code class="docutils literal notranslate"><span class="pre">$adminEmail</span></code>), by type (e.g. <code class="docutils literal notranslate"><span class="pre">Psr\Log\LoggerInterface</span></code>) or both
(e.g. <code class="docutils literal notranslate"><span class="pre">Psr\Log\LoggerInterface</span> <span class="pre">$requestLogger</span></code>).</p>
<p>The <code class="docutils literal notranslate"><span class="pre">bind</span></code> config can also be applied to specific services or when loading many
services at once (i.e. <a class="reference internal" href="#service-psr4-loader"><span class="std std-ref">Importing Many Services at once with resource</span></a>).</p>
</div>
<div class="section" id="the-autowire-option">
<span id="services-autowire"></span><h2>The autowire Option</h2>
<p>Above, the <code class="docutils literal notranslate"><span class="pre">services.yaml</span></code> file has <code class="docutils literal notranslate"><span class="pre">autowire:</span> <span class="pre">true</span></code> in the <code class="docutils literal notranslate"><span class="pre">_defaults</span></code> section
so that it applies to all services defined in that file. With this setting, you’re
able to type-hint arguments in the <code class="docutils literal notranslate"><span class="pre">__construct()</span></code> method of your services and
the container will automatically pass you the correct arguments. This entire entry
has been written around autowiring.</p>
<p>For more details about autowiring, check out <a class="reference internal" href="service_container/autowiring.xhtml"><span class="doc">Defining Services Dependencies Automatically (Autowiring)</span></a>.</p>
</div>
<div class="section" id="the-autoconfigure-option">
<span id="services-autoconfigure"></span><h2>The autoconfigure Option</h2>
<p>Above, the <code class="docutils literal notranslate"><span class="pre">services.yaml</span></code> file has <code class="docutils literal notranslate"><span class="pre">autoconfigure:</span> <span class="pre">true</span></code> in the <code class="docutils literal notranslate"><span class="pre">_defaults</span></code>
section so that it applies to all services defined in that file. With this setting,
the container will automatically apply certain configuration to your services, based
on your service’s <em>class</em>. This is mostly used to <em>auto-tag</em> your services.</p>
<p>For example, to create a Twig extension, you need to create a class, register it
as a service, and <a class="reference internal" href="service_container/tags.xhtml"><span class="doc">tag</span></a> it with <code class="docutils literal notranslate"><span class="pre">twig.extension</span></code>.</p>
<p>But, with <code class="docutils literal notranslate"><span class="pre">autoconfigure:</span> <span class="pre">true</span></code>, you don’t need the tag. In fact, if you’re using
the <a class="reference internal" href="#service-container-services-load-example"><span class="std std-ref">default services.yaml config</span></a>,
you don’t need to do <em>anything</em>: the service will be automatically loaded. Then,
<code class="docutils literal notranslate"><span class="pre">autoconfigure</span></code> will add the <code class="docutils literal notranslate"><span class="pre">twig.extension</span></code> tag <em>for</em> you, because your class
implements <code class="docutils literal notranslate"><span class="pre">Twig\Extension\ExtensionInterface</span></code>. And thanks to <code class="docutils literal notranslate"><span class="pre">autowire</span></code>, you can even add
constructor arguments without any configuration.</p>
</div>
<div class="section" id="linting-service-definitions">
<h2>Linting Service Definitions</h2>
<p>The <code class="docutils literal notranslate"><span class="pre">lint:container</span></code> command checks that the arguments injected into services
match their type declarations. It’s useful to run it before deploying your
application to production (e.g. in your continuous integration server):</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console lint:container
</pre></div>
</td></tr></table></div>
<p>Checking the types of all service arguments whenever the container is compiled
can hurt performance. That’s why this type checking is implemented in a
<a class="reference internal" href="service_container/compiler_passes.xhtml"><span class="doc">compiler pass</span></a> called
<code class="docutils literal notranslate"><span class="pre">CheckTypeDeclarationsPass</span></code> which is disabled by default and enabled only when
executing the <code class="docutils literal notranslate"><span class="pre">lint:container</span></code> command. If you don’t mind the performance
loss, enable the compiler pass in your application.</p>
</div>
<div class="section" id="public-versus-private-services">
<span id="container-public"></span><h2>Public Versus Private Services</h2>
<p>Every service defined is private by default. When a service is private, you
cannot access it directly from the container using <code class="docutils literal notranslate"><span class="pre">$container-&gt;get()</span></code>. As a
best practice, you should only create <em>private</em> services and you should fetch
services using dependency injection instead of using <code class="docutils literal notranslate"><span class="pre">$container-&gt;get()</span></code>.</p>
<p>If you need to fetch services lazily, instead of using public services you
should consider using a <a class="reference internal" href="service_container/service_subscribers_locators.xhtml#service-locators"><span class="std std-ref">service locator</span></a>.</p>
<p>But, if you <em>do</em> need to make a service public, override the <code class="docutils literal notranslate"><span class="pre">public</span></code>
setting:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="c1"># ... same code as before</span>

    <span class="c1"># explicitly configure the service</span>
    <span class="l l-Scalar l-Scalar-Plain">App\Service\PublicService</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">public</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">true</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="c">&lt;!-- ... same code as before --&gt;</span>

        <span class="c">&lt;!-- Explicitly configure the service --&gt;</span>
        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\Service\PublicService&quot;</span> <span class="na">public=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;&lt;/service&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Service\PublicService</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ... same as code before</span>

    <span class="c1">// explicitly configure the service</span>
    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">Service\PublicService</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">public</span><span class="p">()</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<div class="deprecated">
<p><span class="versionmodified">Deprecated since version 5.1: </span>As of Symfony 5.1, it is no longer possible to autowire the service
container by type-hinting <code class="docutils literal notranslate"><span class="pre">Psr\Container\ContainerInterface</span></code>.</p>
</div>
</div>
<div class="section" id="importing-many-services-at-once-with-resource">
<span id="service-psr4-loader"></span><h2>Importing Many Services at once with resource</h2>
<p>You’ve already seen that you can import many services at once by using the <code class="docutils literal notranslate"><span class="pre">resource</span></code>
key. For example, the default Symfony configuration contains this:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="c1"># ... same as before</span>

    <span class="c1"># makes classes in src/ available to be used as services</span>
    <span class="c1"># this creates a service per class whose id is the fully-qualified class name</span>
    <span class="l l-Scalar l-Scalar-Plain">App\</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">resource</span><span class="p p-Indicator">:</span> <span class="s">&#39;../src/*&#39;</span>
        <span class="l l-Scalar l-Scalar-Plain">exclude</span><span class="p p-Indicator">:</span> <span class="s">&#39;../src/{DependencyInjection,Entity,Tests,Kernel.php}&#39;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="c">&lt;!-- ... same as before --&gt;</span>

        <span class="nt">&lt;prototype</span> <span class="na">namespace=</span><span class="s">&quot;App\&quot;</span> <span class="na">resource=</span><span class="s">&quot;../src/*&quot;</span> <span class="na">exclude=</span><span class="s">&quot;../src/{DependencyInjection,Entity,Tests,Kernel.php}&quot;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="c1">// makes classes in src/ available to be used as services</span>
    <span class="c1">// this creates a service per class whose id is the fully-qualified class name</span>
    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">load</span><span class="p">(</span><span class="s1">&#39;App\\&#39;</span><span class="p">,</span> <span class="s1">&#39;../src/*&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">exclude</span><span class="p">(</span><span class="s1">&#39;../src/{DependencyInjection,Entity,Tests,Kernel.php}&#39;</span><span class="p">);</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The value of the <code class="docutils literal notranslate"><span class="pre">resource</span></code> and <code class="docutils literal notranslate"><span class="pre">exclude</span></code> options can be any valid
<a class="reference external" href="https://en.wikipedia.org/wiki/Glob_(programming)">glob pattern</a><span class="link-target"> [https://en.wikipedia.org/wiki/Glob_(programming)]</span>.</p>
</div>
<p>This can be used to quickly make many classes available as services and apply some
default configuration. The <code class="docutils literal notranslate"><span class="pre">id</span></code> of each service is its fully-qualified class name.
You can override any service that’s imported by using its id (class name) below
(e.g. see <a class="reference internal" href="#services-manually-wire-args"><span class="std std-ref">Manually Wiring Arguments</span></a>). If you override a service, none of
the options (e.g. <code class="docutils literal notranslate"><span class="pre">public</span></code>) are inherited from the import (but the overridden
service <em>does</em> still inherit from <code class="docutils literal notranslate"><span class="pre">_defaults</span></code>).</p>
<p>You can also <code class="docutils literal notranslate"><span class="pre">exclude</span></code> certain paths. This is optional, but will slightly increase
performance in the <code class="docutils literal notranslate"><span class="pre">dev</span></code> environment: excluded paths are not tracked and so modifying
them will not cause the container to be rebuilt.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Wait, does this mean that <em>every</em> class in <code class="docutils literal notranslate"><span class="pre">src/</span></code> is registered as
a service? Even model classes? Actually, no. As long as you keep your imported services as <a class="reference internal" href="#container-public"><span class="std std-ref">private</span></a>, all
classes in <code class="docutils literal notranslate"><span class="pre">src/</span></code> that are <em>not</em> explicitly used as services are
automatically removed from the final container. In reality, the import
means that all classes are “available to be <em>used</em> as services” without needing
to be manually configured.</p>
</div>
<div class="section" id="multiple-service-definitions-using-the-same-namespace">
<h3>Multiple Service Definitions Using the Same Namespace</h3>
<p>If you define services using the YAML config format, the PHP namespace is used
as the key of each configuration, so you can’t define different service configs
for classes under the same namespace:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">App\Domain\</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">resource</span><span class="p p-Indicator">:</span> <span class="s">&#39;../src/Domain/*&#39;</span>
        <span class="c1"># ...</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="nt">&lt;prototype</span> <span class="na">namespace=</span><span class="s">&quot;App\Domain&quot;</span>
            <span class="na">resource=</span><span class="s">&quot;../src/App/Domain/*&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/prototype&gt;</span>

        <span class="c">&lt;!-- ... --&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\Definition</span><span class="p">;</span>

<span class="nv">$defaults</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Definition</span><span class="p">();</span>

<span class="c1">// $this is a reference to the current loader</span>
<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">registerClasses</span><span class="p">(</span>
    <span class="nv">$defaults</span><span class="p">,</span>
    <span class="s1">&#39;App\\Domain\\&#39;</span><span class="p">,</span>
    <span class="s1">&#39;../src/App/Domain/*&#39;</span>
<span class="p">);</span>

<span class="c1">// ...</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>In order to have multiple definitions, add the <code class="docutils literal notranslate"><span class="pre">namespace</span></code> option and use any
unique string as the key of each service config:</p>
<div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">command_handlers</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">namespace</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">App\Domain\</span>
        <span class="l l-Scalar l-Scalar-Plain">resource</span><span class="p p-Indicator">:</span> <span class="s">&#39;../src/Domain/*/CommandHandler&#39;</span>
        <span class="l l-Scalar l-Scalar-Plain">tags</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="nv">command_handler</span><span class="p p-Indicator">]</span>

    <span class="l l-Scalar l-Scalar-Plain">event_subscribers</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">namespace</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">App\Domain\</span>
        <span class="l l-Scalar l-Scalar-Plain">resource</span><span class="p p-Indicator">:</span> <span class="s">&#39;../src/Domain/*/EventSubscriber&#39;</span>
        <span class="l l-Scalar l-Scalar-Plain">tags</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="nv">event_subscriber</span><span class="p p-Indicator">]</span>
</pre></div>
</td></tr></table></div>
</div>
</div>
<div class="section" id="explicitly-configuring-services-and-arguments">
<span id="services-explicitly-configure-wire-services"></span><h2>Explicitly Configuring Services and Arguments</h2>
<p>Prior to Symfony 3.3, all services and (typically) arguments were explicitly configured:
it was not possible to <a class="reference internal" href="#service-container-services-load-example"><span class="std std-ref">load services automatically</span></a>
and <a class="reference internal" href="#services-autowire"><span class="std std-ref">autowiring</span></a> was much less common.</p>
<p>Both of these features are optional. And even if you use them, there may be some
cases where you want to manually wire a service. For example, suppose that you want
to register <em>2</em> services for the <code class="docutils literal notranslate"><span class="pre">SiteUpdateManager</span></code> class - each with a different
admin email. In this case, each needs to have a unique service id:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="c1"># ...</span>

    <span class="c1"># this is the service&#39;s id</span>
    <span class="l l-Scalar l-Scalar-Plain">site_update_manager.superadmin</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">class</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">App\Service\SiteUpdateManager</span>
        <span class="c1"># you CAN still use autowiring: we just want to show what it looks like without</span>
        <span class="l l-Scalar l-Scalar-Plain">autowire</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">false</span>
        <span class="c1"># manually wire all arguments</span>
        <span class="l l-Scalar l-Scalar-Plain">arguments</span><span class="p p-Indicator">:</span>
            <span class="p p-Indicator">-</span> <span class="s">&#39;@App\Service\MessageGenerator&#39;</span>
            <span class="p p-Indicator">-</span> <span class="s">&#39;@mailer&#39;</span>
            <span class="p p-Indicator">-</span> <span class="s">&#39;superadmin@example.com&#39;</span>

    <span class="l l-Scalar l-Scalar-Plain">site_update_manager.normal_users</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">class</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">App\Service\SiteUpdateManager</span>
        <span class="l l-Scalar l-Scalar-Plain">autowire</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">false</span>
        <span class="l l-Scalar l-Scalar-Plain">arguments</span><span class="p p-Indicator">:</span>
            <span class="p p-Indicator">-</span> <span class="s">&#39;@App\Service\MessageGenerator&#39;</span>
            <span class="p p-Indicator">-</span> <span class="s">&#39;@mailer&#39;</span>
            <span class="p p-Indicator">-</span> <span class="s">&#39;contact@example.com&#39;</span>

    <span class="c1"># Create an alias, so that - by default - if you type-hint SiteUpdateManager,</span>
    <span class="c1"># the site_update_manager.superadmin will be used</span>
    <span class="l l-Scalar l-Scalar-Plain">App\Service\SiteUpdateManager</span><span class="p p-Indicator">:</span> <span class="s">&#39;@site_update_manager.superadmin&#39;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="c">&lt;!-- ... --&gt;</span>

        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;site_update_manager.superadmin&quot;</span> <span class="na">class=</span><span class="s">&quot;App\Service\SiteUpdateManager&quot;</span> <span class="na">autowire=</span><span class="s">&quot;false&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;argument</span> <span class="na">type=</span><span class="s">&quot;service&quot;</span> <span class="na">id=</span><span class="s">&quot;App\Service\MessageGenerator&quot;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;argument</span> <span class="na">type=</span><span class="s">&quot;service&quot;</span> <span class="na">id=</span><span class="s">&quot;mailer&quot;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;argument&gt;</span>superadmin@example.com<span class="nt">&lt;/argument&gt;</span>
        <span class="nt">&lt;/service&gt;</span>

        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;site_update_manager.normal_users&quot;</span> <span class="na">class=</span><span class="s">&quot;App\Service\SiteUpdateManager&quot;</span> <span class="na">autowire=</span><span class="s">&quot;false&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;argument</span> <span class="na">type=</span><span class="s">&quot;service&quot;</span> <span class="na">id=</span><span class="s">&quot;App\Service\MessageGenerator&quot;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;argument</span> <span class="na">type=</span><span class="s">&quot;service&quot;</span> <span class="na">id=</span><span class="s">&quot;mailer&quot;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;argument&gt;</span>contact@example.com<span class="nt">&lt;/argument&gt;</span>
        <span class="nt">&lt;/service&gt;</span>

        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\Service\SiteUpdateManager&quot;</span> <span class="na">alias=</span><span class="s">&quot;site_update_manager.superadmin&quot;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Service\MessageGenerator</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">App\Service\SiteUpdateManager</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="c1">// site_update_manager.superadmin is the service&#39;s id</span>
    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="s1">&#39;site_update_manager.superadmin&#39;</span><span class="p">,</span> <span class="nx">SiteUpdateManager</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="c1">// you CAN still use autowiring: we just want to show what it looks like without</span>
        <span class="o">-&gt;</span><span class="na">autowire</span><span class="p">(</span><span class="k">false</span><span class="p">)</span>
        <span class="c1">// manually wire all arguments</span>
        <span class="o">-&gt;</span><span class="na">args</span><span class="p">([</span>
           <span class="nx">service</span><span class="p">(</span><span class="nx">MessageGenerator</span><span class="o">::</span><span class="na">class</span><span class="p">),</span>
           <span class="nx">service</span><span class="p">(</span><span class="s1">&#39;mailer&#39;</span><span class="p">),</span>
           <span class="s1">&#39;superadmin@example.com&#39;</span><span class="p">,</span>
        <span class="p">]);</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="s1">&#39;site_update_manager.normal_users&#39;</span><span class="p">,</span> <span class="nx">SiteUpdateManager</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">autowire</span><span class="p">(</span><span class="k">false</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">args</span><span class="p">([</span>
            <span class="nx">service</span><span class="p">(</span><span class="nx">MessageGenerator</span><span class="o">::</span><span class="na">class</span><span class="p">),</span>
            <span class="nx">service</span><span class="p">(</span><span class="s1">&#39;mailer&#39;</span><span class="p">),</span>
            <span class="s1">&#39;contact@example.com&#39;</span><span class="p">,</span>
        <span class="p">]);</span>

    <span class="c1">// Create an alias, so that - by default - if you type-hint SiteUpdateManager,</span>
    <span class="c1">// the site_update_manager.superadmin will be used</span>
    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">alias</span><span class="p">(</span><span class="nx">SiteUpdateManager</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="s1">&#39;site_update_manager.superadmin&#39;</span><span class="p">);</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>In this case, <em>two</em> services are registered: <code class="docutils literal notranslate"><span class="pre">site_update_manager.superadmin</span></code>
and <code class="docutils literal notranslate"><span class="pre">site_update_manager.normal_users</span></code>. Thanks to the alias, if you type-hint
<code class="docutils literal notranslate"><span class="pre">SiteUpdateManager</span></code> the first (<code class="docutils literal notranslate"><span class="pre">site_update_manager.superadmin</span></code>) will be passed.
If you want to pass the second, you’ll need to <a class="reference internal" href="#services-wire-specific-service"><span class="std std-ref">manually wire the service</span></a>.</p>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>If you do <em>not</em> create the alias and are <a class="reference internal" href="#service-container-services-load-example"><span class="std std-ref">loading all services from src/</span></a>,
then <em>three</em> services have been created (the automatic service + your two services)
and the automatically loaded service will be passed - by default - when you type-hint
<code class="docutils literal notranslate"><span class="pre">SiteUpdateManager</span></code>. That’s why creating the alias is a good idea.</p>
</div>
</div>
<div class="section" id="learn-more">
<h2>Learn more</h2>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="service_container/alias_private.xhtml">How to Create Service Aliases and Mark Services as Private</a></li>
<li class="toctree-l1"><a class="reference internal" href="service_container/autowiring.xhtml">Defining Services Dependencies Automatically (Autowiring)</a></li>
<li class="toctree-l1"><a class="reference internal" href="service_container/calls.xhtml">Service Method Calls and Setter Injection</a></li>
<li class="toctree-l1"><a class="reference internal" href="service_container/compiler_passes.xhtml">How to Work with Compiler Passes</a></li>
<li class="toctree-l1"><a class="reference internal" href="service_container/configurators.xhtml">How to Configure a Service with a Configurator</a></li>
<li class="toctree-l1"><a class="reference internal" href="service_container/debug.xhtml">How to Debug the Service Container &amp; List Services</a></li>
<li class="toctree-l1"><a class="reference internal" href="service_container/definitions.xhtml">How to work with Service Definition Objects</a></li>
<li class="toctree-l1"><a class="reference internal" href="service_container/expression_language.xhtml">How to Inject Values Based on Complex Expressions</a></li>
<li class="toctree-l1"><a class="reference internal" href="service_container/factories.xhtml">Using a Factory to Create Services</a></li>
<li class="toctree-l1"><a class="reference internal" href="service_container/import.xhtml">How to Import Configuration Files/Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="service_container/injection_types.xhtml">Types of Injection</a></li>
<li class="toctree-l1"><a class="reference internal" href="service_container/lazy_services.xhtml">Lazy Services</a></li>
<li class="toctree-l1"><a class="reference internal" href="service_container/optional_dependencies.xhtml">How to Make Service Arguments/References Optional</a></li>
<li class="toctree-l1"><a class="reference internal" href="service_container/parent_services.xhtml">How to Manage Common Dependencies with Parent Services</a></li>
<li class="toctree-l1"><a class="reference internal" href="service_container/request.xhtml">How to Retrieve the Request from the Service Container</a></li>
<li class="toctree-l1"><a class="reference internal" href="service_container/service_decoration.xhtml">How to Decorate Services</a></li>
<li class="toctree-l1"><a class="reference internal" href="service_container/service_subscribers_locators.xhtml">Service Subscribers &amp; Locators</a></li>
<li class="toctree-l1"><a class="reference internal" href="service_container/shared.xhtml">How to Define Non Shared Services</a></li>
<li class="toctree-l1"><a class="reference internal" href="service_container/synthetic_services.xhtml">How to Inject Instances into the Container</a></li>
<li class="toctree-l1"><a class="reference internal" href="service_container/tags.xhtml">How to Work with Service Tags</a></li>
</ul>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>