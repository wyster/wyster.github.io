<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Transactional Messages: Handle New Messages After Handling is Done</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="transactional-messages-handle-new-messages-after-handling-is-done">
<span id="index-0"></span><h1>Transactional Messages: Handle New Messages After Handling is Done</h1>
<p>A message handler can <code class="docutils literal notranslate"><span class="pre">dispatch</span></code> new messages while handling others, to either the
same or a different bus (if the application has
<a class="reference internal" href="multiple_buses.xhtml"><span class="doc">multiple buses</span></a>). Any errors or exceptions that
occur during this process can have unintended consequences, such as:</p>
<ul class="simple">
<li><p>If using the <code class="docutils literal notranslate"><span class="pre">DoctrineTransactionMiddleware</span></code> and a dispatched message throws
an exception, then any database transactions in the original handler will be
rolled back.</p></li>
<li><p>If the message is dispatched to a different bus, then the dispatched message
will be handled even if some code later in the current handler throws an
exception.</p></li>
</ul>
<div class="section" id="an-example-registeruser-process">
<h2>An Example <code class="docutils literal notranslate"><span class="pre">RegisterUser</span></code> Process</h2>
<p>Letâ€™s take the example of an application with both a <em>command</em> and an <em>event</em>
bus. The application dispatches a command named <code class="docutils literal notranslate"><span class="pre">RegisterUser</span></code> to the command
bus. The command is handled by the <code class="docutils literal notranslate"><span class="pre">RegisterUserHandler</span></code> which creates a
<code class="docutils literal notranslate"><span class="pre">User</span></code> object, stores that object to a database and dispatches a
<code class="docutils literal notranslate"><span class="pre">UserRegistered</span></code> message to the event bus.</p>
<p>There are many handlers to the <code class="docutils literal notranslate"><span class="pre">UserRegistered</span></code> message, one handler may send
a welcome email to the new user. We are using the <code class="docutils literal notranslate"><span class="pre">DoctrineTransactionMiddleware</span></code>
to wrap all database queries in one database transaction.</p>
<p><strong>Problem 1:</strong> If an exception is thrown when sending the welcome email, then
the user will not be created because the <code class="docutils literal notranslate"><span class="pre">DoctrineTransactionMiddleware</span></code> will
rollback the Doctrine transaction, in which the user has been created.</p>
<p><strong>Problem 2:</strong> If an exception is thrown when saving the user to the database,
the welcome email is still sent because it is handled asynchronously.</p>
</div>
<div class="section" id="dispatchaftercurrentbusmiddleware-middleware">
<h2>DispatchAfterCurrentBusMiddleware Middleware</h2>
<p>For many applications, the desired behavior is to <em>only</em> handle messages that
are dispatched by a handler once that handler has fully finished. This can be by
using the <code class="docutils literal notranslate"><span class="pre">DispatchAfterCurrentBusMiddleware</span></code> and adding a
<code class="docutils literal notranslate"><span class="pre">DispatchAfterCurrentBusStamp</span></code> stamp to <a class="reference internal" href="../components/messenger.xhtml#messenger-envelopes"><span class="std std-ref">the message Envelope</span></a>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Messenger/CommandHandler/RegisterUserHandler.php</span>
<span class="k">namespace</span> <span class="nx">App\Messenger\CommandHandler</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Entity\User</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">App\Messenger\Command\RegisterUser</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">App\Messenger\Event\UserRegistered</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Doctrine\ORM\EntityManagerInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Messenger\Envelope</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Messenger\MessageBusInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Messenger\Stamp\DispatchAfterCurrentBusStamp</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">RegisterUserHandler</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$eventBus</span><span class="p">;</span>
    <span class="k">private</span> <span class="nv">$em</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nx">MessageBusInterface</span> <span class="nv">$eventBus</span><span class="p">,</span> <span class="nx">EntityManagerInterface</span> <span class="nv">$em</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">eventBus</span> <span class="o">=</span> <span class="nv">$eventBus</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">em</span> <span class="o">=</span> <span class="nv">$em</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__invoke</span><span class="p">(</span><span class="nx">RegisterUser</span> <span class="nv">$command</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$user</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">User</span><span class="p">(</span><span class="nv">$command</span><span class="o">-&gt;</span><span class="na">getUuid</span><span class="p">(),</span> <span class="nv">$command</span><span class="o">-&gt;</span><span class="na">getName</span><span class="p">(),</span> <span class="nv">$command</span><span class="o">-&gt;</span><span class="na">getEmail</span><span class="p">());</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">em</span><span class="o">-&gt;</span><span class="na">persist</span><span class="p">(</span><span class="nv">$user</span><span class="p">);</span>

        <span class="c1">// The DispatchAfterCurrentBusStamp marks the event message to be handled</span>
        <span class="c1">// only if this handler does not throw an exception.</span>

        <span class="nv">$event</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserRegistered</span><span class="p">(</span><span class="nv">$command</span><span class="o">-&gt;</span><span class="na">getUuid</span><span class="p">());</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">eventBus</span><span class="o">-&gt;</span><span class="na">dispatch</span><span class="p">(</span>
            <span class="p">(</span><span class="k">new</span> <span class="nx">Envelope</span><span class="p">(</span><span class="nv">$event</span><span class="p">))</span>
                <span class="o">-&gt;</span><span class="na">with</span><span class="p">(</span><span class="k">new</span> <span class="nx">DispatchAfterCurrentBusStamp</span><span class="p">())</span>
        <span class="p">);</span>

        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Messenger/EventSubscriber/WhenUserRegisteredThenSendWelcomeEmail.php</span>
<span class="k">namespace</span> <span class="nx">App\Messenger\EventSubscriber</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Entity\User</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">App\Messenger\Event\UserRegistered</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Doctrine\ORM\EntityManagerInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Mailer\MailerInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Mime\RawMessage</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">WhenUserRegisteredThenSendWelcomeEmail</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$mailer</span><span class="p">;</span>
    <span class="k">private</span> <span class="nv">$em</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nx">MailerInterface</span> <span class="nv">$mailer</span><span class="p">,</span> <span class="nx">EntityManagerInterface</span> <span class="nv">$em</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mailer</span> <span class="o">=</span> <span class="nv">$mailer</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">em</span> <span class="o">=</span> <span class="nv">$em</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__invoke</span><span class="p">(</span><span class="nx">UserRegistered</span> <span class="nv">$event</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">em</span><span class="o">-&gt;</span><span class="na">getRepository</span><span class="p">(</span><span class="nx">User</span><span class="o">::</span><span class="na">class</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">find</span><span class="p">(</span><span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getUuid</span><span class="p">());</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mailer</span><span class="o">-&gt;</span><span class="na">send</span><span class="p">(</span><span class="k">new</span> <span class="nx">RawMessage</span><span class="p">(</span><span class="s1">&#39;Welcome &#39;</span><span class="o">.</span><span class="nv">$user</span><span class="o">-&gt;</span><span class="na">getFirstName</span><span class="p">()));</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
<p>This means that the <code class="docutils literal notranslate"><span class="pre">UserRegistered</span></code> message would not be handled until
<em>after</em> the <code class="docutils literal notranslate"><span class="pre">RegisterUserHandler</span></code> had completed and the new <code class="docutils literal notranslate"><span class="pre">User</span></code> was
persisted to the database. If the <code class="docutils literal notranslate"><span class="pre">RegisterUserHandler</span></code> encounters an
exception, the <code class="docutils literal notranslate"><span class="pre">UserRegistered</span></code> event will never be handled. And if an
exception is thrown while sending the welcome email, the Doctrine transaction
will not be rolled back.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If <code class="docutils literal notranslate"><span class="pre">WhenUserRegisteredThenSendWelcomeEmail</span></code> throws an exception, that
exception will be wrapped into a <code class="docutils literal notranslate"><span class="pre">DelayedMessageHandlingException</span></code>. Using
<code class="docutils literal notranslate"><span class="pre">DelayedMessageHandlingException::getExceptions</span></code> will give you all
exceptions that are thrown while handing a message with the
<code class="docutils literal notranslate"><span class="pre">DispatchAfterCurrentBusStamp</span></code>.</p>
</div>
<p>The <code class="docutils literal notranslate"><span class="pre">dispatch_after_current_bus</span></code> middleware is enabled by default. If youâ€™re
configuring your middleware manually, be sure to register
<code class="docutils literal notranslate"><span class="pre">dispatch_after_current_bus</span></code> before <code class="docutils literal notranslate"><span class="pre">doctrine_transaction</span></code> in the middleware
chain. Also, the <code class="docutils literal notranslate"><span class="pre">dispatch_after_current_bus</span></code> middleware must be loaded for
<em>all</em> of the buses being used.</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>