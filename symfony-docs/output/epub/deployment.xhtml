<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Deploy a Symfony Application</title>
    <link rel="stylesheet" href="_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-deploy-a-symfony-application">
<span id="how-to-deploy-a-symfony2-application"></span><span id="index-0"></span><h1>How to Deploy a Symfony Application</h1>
<p>Deploying a Symfony application can be a complex and varied task depending on
the setup and the requirements of your application. This article is not a step-
by-step guide, but is a general list of the most common requirements and ideas
for deployment.</p>
<div class="section" id="symfony-deployment-basics">
<span id="symfony2-deployment-basics"></span><h2>Symfony Deployment Basics</h2>
<p>The typical steps taken while deploying a Symfony application include:</p>
<ol class="arabic simple">
<li><p>Upload your code to the production server;</p></li>
<li><p>Install your vendor dependencies (typically done via Composer and may be done
before uploading);</p></li>
<li><p>Running database migrations or similar tasks to update any changed data structures;</p></li>
<li><p>Clearing (and optionally, warming up) your cache.</p></li>
</ol>
<p>A deployment may also include other tasks, such as:</p>
<ul class="simple">
<li><p>Tagging a particular version of your code as a release in your source control
repository;</p></li>
<li><p>Creating a temporary staging area to build your updated setup “offline”;</p></li>
<li><p>Running any tests available to ensure code and/or server stability;</p></li>
<li><p>Removal of any unnecessary files from the <code class="docutils literal notranslate"><span class="pre">public/</span></code> directory to keep your
production environment clean;</p></li>
<li><p>Clearing of external cache systems (like <a class="reference external" href="http://memcached.org/">Memcached</a><span class="link-target"> [http://memcached.org/]</span> or <a class="reference external" href="https://redis.io/">Redis</a><span class="link-target"> [https://redis.io/]</span>).</p></li>
</ul>
</div>
<div class="section" id="id1">
<h2>How to Deploy a Symfony Application</h2>
<p>There are several ways you can deploy a Symfony application. Start with a few
basic deployment strategies and build up from there.</p>
<div class="section" id="basic-file-transfer">
<h3>Basic File Transfer</h3>
<p>The most basic way of deploying an application is copying the files manually
via FTP/SCP (or similar method). This has its disadvantages as you lack control
over the system as the upgrade progresses. This method also requires you
to take some manual steps after transferring the files (see <a class="reference internal" href="#common-post-deployment-tasks">Common Post-Deployment Tasks</a>)</p>
</div>
<div class="section" id="using-source-control">
<h3>Using Source Control</h3>
<p>If you’re using source control (e.g. Git or SVN), you can simplify by having
your live installation also be a copy of your repository. When you’re ready to
upgrade, fetch the latest updates from your source control
system. When using Git, a common approach is to create a tag for each release
and check out the appropriate tag on deployment (see <a class="reference external" href="https://git-scm.com/book/en/v2/Git-Basics-Tagging">Git Tagging</a><span class="link-target"> [https://git-scm.com/book/en/v2/Git-Basics-Tagging]</span>).</p>
<p>This makes updating your files <em>easier</em>, but you still need to worry about
manually taking other steps (see <a class="reference internal" href="#common-post-deployment-tasks">Common Post-Deployment Tasks</a>).</p>
</div>
<div class="section" id="using-platforms-as-a-service">
<h3>Using Platforms as a Service</h3>
<p>Using a Platform as a Service (PaaS) can be a great way to deploy your Symfony
app quickly. There are many PaaS - below are a few that work well with Symfony:</p>
<ul class="simple">
<li><p><a class="reference external" href="https://symfony.com/doc/master/cloud/intro.html">Symfony Cloud</a><span class="link-target"> [https://symfony.com/doc/master/cloud/intro.html]</span></p></li>
<li><p><a class="reference external" href="https://devcenter.heroku.com/articles/deploying-symfony4">Heroku</a><span class="link-target"> [https://devcenter.heroku.com/articles/deploying-symfony4]</span></p></li>
<li><p><a class="reference external" href="https://docs.platform.sh/frameworks/symfony.html">Platform.sh</a><span class="link-target"> [https://docs.platform.sh/frameworks/symfony.html]</span></p></li>
<li><p><a class="reference external" href="https://azure.microsoft.com/en-us/develop/php/">Azure</a><span class="link-target"> [https://azure.microsoft.com/en-us/develop/php/]</span></p></li>
<li><p><a class="reference external" href="https://help.fortrabbit.com/install-symfony-4-uni">fortrabbit</a><span class="link-target"> [https://help.fortrabbit.com/install-symfony-4-uni]</span></p></li>
<li><p><a class="reference external" href="https://www.clever-cloud.com/doc/php/tutorial-symfony/">Clever Cloud</a><span class="link-target"> [https://www.clever-cloud.com/doc/php/tutorial-symfony/]</span></p></li>
<li><p><a class="reference external" href="https://doc.scalingo.com/languages/php/symfony">Scalingo</a><span class="link-target"> [https://doc.scalingo.com/languages/php/symfony]</span></p></li>
</ul>
</div>
<div class="section" id="using-build-scripts-and-other-tools">
<h3>Using Build Scripts and other Tools</h3>
<p>There are also tools to help ease the pain of deployment. Some of them have been
specifically tailored to the requirements of Symfony.</p>
<dl class="simple">
<dt><a class="reference external" href="https://github.com/EasyCorp/easy-deploy-bundle">EasyDeployBundle</a><span class="link-target"> [https://github.com/EasyCorp/easy-deploy-bundle]</span></dt>
<dd><p>A Symfony bundle that adds deploy tools to your application.</p>
</dd>
<dt><a class="reference external" href="https://deployer.org/">Deployer</a><span class="link-target"> [https://deployer.org/]</span></dt>
<dd><p>This is another native PHP rewrite of Capistrano, with some ready recipes for
Symfony.</p>
</dd>
<dt><a class="reference external" href="https://ansistrano.com/">Ansistrano</a><span class="link-target"> [https://ansistrano.com/]</span></dt>
<dd><p>An Ansible role that allows you to configure a powerful deploy via YAML files.</p>
</dd>
<dt><a class="reference external" href="https://github.com/andres-montanez/Magallanes">Magallanes</a><span class="link-target"> [https://github.com/andres-montanez/Magallanes]</span></dt>
<dd><p>This Capistrano-like deployment tool is built in PHP, and may be easier
for PHP developers to extend for their needs.</p>
</dd>
<dt><a class="reference external" href="http://www.fabfile.org/">Fabric</a><span class="link-target"> [http://www.fabfile.org/]</span></dt>
<dd><p>This Python-based library provides a basic suite of operations for executing
local or remote shell commands and uploading/downloading files.</p>
</dd>
<dt><a class="reference external" href="https://capistranorb.com/">Capistrano</a><span class="link-target"> [https://capistranorb.com/]</span> with <a class="reference external" href="https://github.com/capistrano/symfony/">Symfony plugin</a><span class="link-target"> [https://github.com/capistrano/symfony/]</span></dt>
<dd><p><a class="reference external" href="https://capistranorb.com/">Capistrano</a><span class="link-target"> [https://capistranorb.com/]</span> is a remote server automation and deployment tool written in Ruby.
<a class="reference external" href="https://github.com/capistrano/symfony/">Symfony plugin</a><span class="link-target"> [https://github.com/capistrano/symfony/]</span> is a plugin to ease Symfony related tasks, inspired by <a class="reference external" href="https://github.com/everzet/capifony">Capifony</a><span class="link-target"> [https://github.com/everzet/capifony]</span>
(which works only with Capistrano 2).</p>
</dd>
</dl>
</div>
</div>
<div class="section" id="common-post-deployment-tasks">
<h2>Common Post-Deployment Tasks</h2>
<p>After deploying your actual source code, there are a number of common things
you’ll need to do:</p>
<div class="section" id="a-check-requirements">
<h3>A) Check Requirements</h3>
<p>Use the <code class="docutils literal notranslate"><span class="pre">check:requirements</span></code> command to check if your server meets the
<a class="reference internal" href="setup.xhtml#symfony-tech-requirements"><span class="std std-ref">technical requirements for running Symfony applications</span></a>.</p>
</div>
<div class="section" id="b-configure-your-environment-variables">
<span id="b-configure-your-app-config-parameters-yml-file"></span><h3>B) Configure your Environment Variables</h3>
<p>Most Symfony applications read their configuration from environment variables.
While developing locally, you’ll usually store these in <code class="docutils literal notranslate"><span class="pre">.env</span></code> and <code class="docutils literal notranslate"><span class="pre">.env.local</span></code>
(for local overrides). On production, you have two options:</p>
<ol class="arabic simple">
<li><p>Create “real” environment variables. How you set environment variables, depends
on your setup: they can be set at the command line, in your Nginx configuration,
or via other methods provided by your hosting service;</p></li>
<li><p>Or, create a <code class="docutils literal notranslate"><span class="pre">.env.local</span></code> file like your local development.</p></li>
</ol>
<p>There is no significant advantage to either of the two options: use whatever is
most natural in your hosting environment.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>You might not want your application to process the <code class="docutils literal notranslate"><span class="pre">.env.*</span></code> files on
every request. You can generate an optimized <code class="docutils literal notranslate"><span class="pre">.env.local.php</span></code> which
overrides all other configuration files:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer dump-env prod
</pre></div>
</td></tr></table></div>
<p>The generated file will contain all the configuration stored in <code class="docutils literal notranslate"><span class="pre">.env</span></code>. If you
want to rely only on environment variables, generate one without any values using:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer dump-env prod --empty
</pre></div>
</td></tr></table></div>
</div>
</div>
<div class="section" id="c-install-update-your-vendors">
<h3>C) Install/Update your Vendors</h3>
<p>Your vendors can be updated before transferring your source code (i.e.
update the <code class="docutils literal notranslate"><span class="pre">vendor/</span></code> directory, then transfer that with your source
code) or afterwards on the server. Either way, update your vendors
as you normally do:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer install --no-dev --optimize-autoloader
</pre></div>
</td></tr></table></div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The <code class="docutils literal notranslate"><span class="pre">--optimize-autoloader</span></code> flag improves Composer’s autoloader performance
significantly by building a “class map”. The <code class="docutils literal notranslate"><span class="pre">--no-dev</span></code> flag ensures that
development packages are not installed in the production environment.</p>
</div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>If you get a “class not found” error during this step, you may need to
run <code class="docutils literal notranslate"><span class="pre">export</span> <span class="pre">APP_ENV=prod</span></code> (or <code class="docutils literal notranslate"><span class="pre">export</span> <span class="pre">SYMFONY_ENV=prod</span></code> if you’re not
using <a class="reference internal" href="setup.xhtml#symfony-flex"><span class="std std-ref">Symfony Flex</span></a>) before running this command so
that the <code class="docutils literal notranslate"><span class="pre">post-install-cmd</span></code> scripts run in the <code class="docutils literal notranslate"><span class="pre">prod</span></code> environment.</p>
</div>
</div>
<div class="section" id="d-clear-your-symfony-cache">
<h3>D) Clear your Symfony Cache</h3>
<p>Make sure you clear and warm-up your Symfony cache:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> <span class="nv">APP_ENV</span><span class="o">=</span>prod <span class="nv">APP_DEBUG</span><span class="o">=</span><span class="m">0</span> php bin/console cache:clear
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="e-other-things">
<h3>E) Other Things!</h3>
<p>There may be lots of other things that you need to do, depending on your
setup:</p>
<ul class="simple">
<li><p>Running any database migrations</p></li>
<li><p>Clearing your APCu cache</p></li>
<li><p>Add/edit CRON jobs</p></li>
<li><p><a class="reference internal" href="frontend/encore/faq.xhtml#how-do-i-deploy-my-encore-assets"><span class="std std-ref">Building and minifying your assets</span></a> with Webpack Encore</p></li>
<li><p>Pushing assets to a CDN</p></li>
<li><p>On a shared hosting platform using the Apache web server, you may need to
install the <a class="reference internal" href="setup/web_server_configuration.xhtml#web-server-apache-mod-php"><span class="std std-ref">symfony/apache-pack package</span></a></p></li>
<li><p>…</p></li>
</ul>
</div>
</div>
<div class="section" id="application-lifecycle-continuous-integration-qa-etc">
<h2>Application Lifecycle: Continuous Integration, QA, etc.</h2>
<p>While this article covers the technical details of deploying, the full lifecycle
of taking code from development up to production may have more steps:
deploying to staging, QA (Quality Assurance), running tests, etc.</p>
<p>The use of staging, testing, QA, continuous integration, database migrations
and the capability to roll back in case of failure are all strongly advised. There
are simple and more complex tools and one can make the deployment as easy
(or sophisticated) as your environment requires.</p>
<p>Don’t forget that deploying your application also involves updating any dependency
(typically via Composer), migrating your database, clearing your cache and
other potential things like pushing assets to a CDN (see <a class="reference internal" href="#common-post-deployment-tasks">Common Post-Deployment Tasks</a>).</p>
</div>
<div class="section" id="troubleshooting">
<h2>Troubleshooting</h2>
<div class="section" id="deployments-not-using-the-composer-json-file">
<h3>Deployments not Using the <code class="docutils literal notranslate"><span class="pre">composer.json</span></code> File</h3>
<p>The <a class="reference internal" href="reference/configuration/kernel.xhtml#configuration-kernel-project-directory"><span class="std std-ref">project root directory</span></a>
(whose value is used via the <code class="docutils literal notranslate"><span class="pre">kernel.project_dir</span></code> parameter and the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Kernel.php" title="Symfony\Component\HttpKernel\Kernel::getProjectDir()"><span class="pre">getProjectDir()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Kernel.php]</span></span></code> method) is
calculated automatically by Symfony as the directory where the main
<code class="docutils literal notranslate"><span class="pre">composer.json</span></code> file is stored.</p>
<p>In deployments not using the <code class="docutils literal notranslate"><span class="pre">composer.json</span></code> file, you’ll need to override the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Kernel.php" title="Symfony\Component\HttpKernel\Kernel::getProjectDir()"><span class="pre">getProjectDir()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Kernel.php]</span></span></code> method
<a class="reference internal" href="reference/configuration/kernel.xhtml#configuration-kernel-project-directory"><span class="std std-ref">as explained in this section</span></a>.</p>
</div>
</div>
<div class="section" id="learn-more">
<h2>Learn More</h2>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="deployment/proxies.xhtml">How to Configure Symfony to Work behind a Load Balancer or a Reverse Proxy</a></li>
</ul>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>