<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Conventions</title>
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="conventions">
<h1>Conventions</h1>
<p>The <a class="reference internal" href="standards.xhtml"><span class="doc">Coding Standards</span></a> document describes the coding standards for the Symfony
projects and the internal and third-party bundles. This document describes
coding standards and conventions used in the core framework to make it more
consistent and predictable. You are encouraged to follow them in your own
code, but you don’t need to.</p>
<div class="section" id="method-names">
<h2>Method Names</h2>
<p>When an object has a “main” many relation with related “things”
(objects, parameters, …), the method names are normalized:</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">get()</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">set()</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">has()</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">all()</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">replace()</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">remove()</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">clear()</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">isEmpty()</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">add()</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">register()</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">count()</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">keys()</span></code></p></li>
</ul>
<p>The usage of these methods is only allowed when it is clear that there
is a main relation:</p>
<ul class="simple">
<li><p>a <code class="docutils literal notranslate"><span class="pre">CookieJar</span></code> has many <code class="docutils literal notranslate"><span class="pre">Cookie</span></code> objects;</p></li>
<li><p>a Service <code class="docutils literal notranslate"><span class="pre">Container</span></code> has many services and many parameters (as services
is the main relation, the naming convention is used for this relation);</p></li>
<li><p>a Console <code class="docutils literal notranslate"><span class="pre">Input</span></code> has many arguments and many options. There is no “main”
relation, and so the naming convention does not apply.</p></li>
</ul>
<p>For many relations where the convention does not apply, the following methods
must be used instead (where <code class="docutils literal notranslate"><span class="pre">XXX</span></code> is the name of the related thing):</p>
<table class="docutils">
<colgroup>
<col style="width: 46%" />
<col style="width: 54%" />
</colgroup>
<thead>
<tr class="row-odd"><th class="head"><p>Main Relation</p></th>
<th class="head"><p>Other Relations</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">get()</span></code></p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">getXXX()</span></code></p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">set()</span></code></p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">setXXX()</span></code></p></td>
</tr>
<tr class="row-even"><td><p>n/a</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">replaceXXX()</span></code></p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">has()</span></code></p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">hasXXX()</span></code></p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">all()</span></code></p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">getXXXs()</span></code></p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">replace()</span></code></p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">setXXXs()</span></code></p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">remove()</span></code></p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">removeXXX()</span></code></p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">clear()</span></code></p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">clearXXX()</span></code></p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">isEmpty()</span></code></p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">isEmptyXXX()</span></code></p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">add()</span></code></p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">addXXX()</span></code></p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">register()</span></code></p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">registerXXX()</span></code></p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">count()</span></code></p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">countXXX()</span></code></p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">keys()</span></code></p></td>
<td><p>n/a</p></td>
</tr>
</tbody>
</table>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>While <code class="docutils literal notranslate"><span class="pre">setXXX()</span></code> and <code class="docutils literal notranslate"><span class="pre">replaceXXX()</span></code> are very similar, there is one notable
difference: <code class="docutils literal notranslate"><span class="pre">setXXX()</span></code> may replace, or add new elements to the relation.
<code class="docutils literal notranslate"><span class="pre">replaceXXX()</span></code>, on the other hand, cannot add new elements. If an unrecognized
key is passed to <code class="docutils literal notranslate"><span class="pre">replaceXXX()</span></code> it must throw an exception.</p>
</div>
</div>
<div class="section" id="deprecating-code">
<span id="contributing-code-conventions-deprecations"></span><h2>Deprecating Code</h2>
<p>From time to time, some classes and/or methods are deprecated in the
framework; that happens when a feature implementation cannot be changed
because of backward compatibility issues, but we still want to propose a
“better” alternative. In that case, the old implementation can be <strong>deprecated</strong>.</p>
<p>Deprecations must only be introduced on the next minor version of the impacted
component (or bundle, or bridge, or contract).
They can exceptionally be introduced on previous supported versions if they are critical.</p>
<p>A new class (or interface, or trait) cannot be introduced as deprecated, or
contain deprecated methods.</p>
<p>A new method cannot be introduced as deprecated.</p>
<p>A feature is marked as deprecated by adding a <code class="docutils literal notranslate"><span class="pre">&#64;deprecated</span></code> PHPDoc to
relevant classes, methods, properties, …:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="sd">/**</span>
<span class="sd"> * @deprecated since Symfony 2.8.</span>
<span class="sd"> */</span>
</pre></div>
</div>
<p>The deprecation message must indicate the version in which the feature was deprecated,
and whenever possible, how it was replaced:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="sd">/**</span>
<span class="sd"> * @deprecated since Symfony 2.8, use Replacement instead.</span>
<span class="sd"> */</span>
</pre></div>
</div>
<p>When the replacement is in another namespace than the deprecated class, its FQCN must be used:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="sd">/**</span>
<span class="sd"> * @deprecated since Symfony 2.8, use A\B\Replacement instead.</span>
<span class="sd"> */</span>
</pre></div>
</div>
<p>A PHP <code class="docutils literal notranslate"><span class="pre">E_USER_DEPRECATED</span></code> error must also be triggered to help people with the migration:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="o">@</span><span class="nb">trigger_error</span><span class="p">(</span><span class="nb">sprintf</span><span class="p">(</span><span class="s1">&#39;The &quot;%s&quot; class is deprecated since Symfony 2.8, use &quot;%s&quot; instead.&#39;</span><span class="p">,</span> <span class="nx">Deprecated</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="nx">Replacement</span><span class="o">::</span><span class="na">class</span><span class="p">),</span> <span class="nx">E_USER_DEPRECATED</span><span class="p">);</span>
</pre></div>
</div>
<p>Without the <a class="reference external" href="https://www.php.net/manual/en/language.operators.errorcontrol.php">&#64;-silencing operator</a><span class="link-target"> [https://www.php.net/manual/en/language.operators.errorcontrol.php]</span>, users would need to opt-out from deprecation
notices. Silencing swaps this behavior and allows users to opt-in when they are
ready to cope with them (by adding a custom error handler like the one used by
the Web Debug Toolbar or by the PHPUnit bridge).</p>
<p>When deprecating a whole class the <code class="docutils literal notranslate"><span class="pre">trigger_error()</span></code> call should be placed
after the use declarations, like in this example from
<a class="reference external" href="https://github.com/symfony/symfony/blob/4.4/src/Symfony/Component/Routing/Loader/DependencyInjection/ServiceRouterLoader.php">ServiceRouterLoader</a><span class="link-target"> [https://github.com/symfony/symfony/blob/4.4/src/Symfony/Component/Routing/Loader/DependencyInjection/ServiceRouterLoader.php]</span>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">namespace</span> <span class="nx">Symfony\Component\Routing\Loader\DependencyInjection</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Loader\ContainerLoader</span><span class="p">;</span>

<span class="o">@</span><span class="nb">trigger_error</span><span class="p">(</span><span class="nb">sprintf</span><span class="p">(</span><span class="s1">&#39;The &quot;%s&quot; class is deprecated since Symfony 4.4, use &quot;%s&quot; instead.&#39;</span><span class="p">,</span> <span class="nx">ServiceRouterLoader</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="nx">ContainerLoader</span><span class="o">::</span><span class="na">class</span><span class="p">),</span> <span class="nx">E_USER_DEPRECATED</span><span class="p">);</span>

<span class="sd">/**</span>
<span class="sd"> * @deprecated since Symfony 4.4, use Symfony\Component\Routing\Loader\ContainerLoader instead.</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">ServiceRouterLoader</span> <span class="k">extends</span> <span class="nx">ObjectRouteLoader</span>
</pre></div>
</div>
<p>The deprecation must be added to the <code class="docutils literal notranslate"><span class="pre">CHANGELOG.md</span></code> file of the impacted component:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="mf">4.4</span><span class="o">.</span><span class="mi">0</span>
<span class="o">-----</span>

<span class="o">*</span> <span class="nx">Deprecated</span> <span class="nx">the</span> <span class="sb">`Deprecated`</span> <span class="nx">class</span><span class="p">,</span> <span class="k">use</span> <span class="sb">`Replacement`</span> <span class="nx">instead</span><span class="o">.</span>
</pre></div>
</div>
<p>It must also be added to the <code class="docutils literal notranslate"><span class="pre">UPGRADE.md</span></code> file of the targeted minor version
(<code class="docutils literal notranslate"><span class="pre">UPGRADE-4.4.md</span></code> in our example):</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nx">DependencyInjection</span>
<span class="o">-------------------</span>

<span class="o">*</span> <span class="nx">Deprecated</span> <span class="nx">the</span> <span class="sb">`Deprecated`</span> <span class="nx">class</span><span class="p">,</span> <span class="k">use</span> <span class="sb">`Replacement`</span> <span class="nx">instead</span><span class="o">.</span>
</pre></div>
</div>
<p>Finally, its consequences must be added to the <code class="docutils literal notranslate"><span class="pre">UPGRADE.md</span></code> file of the next major version
(<code class="docutils literal notranslate"><span class="pre">UPGRADE-5.0.md</span></code> in our example):</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nx">DependencyInjection</span>
<span class="o">-------------------</span>

<span class="o">*</span> <span class="nx">Removed</span> <span class="nx">the</span> <span class="sb">`Deprecated`</span> <span class="nx">class</span><span class="p">,</span> <span class="k">use</span> <span class="sb">`Replacement`</span> <span class="nx">instead</span><span class="o">.</span>
</pre></div>
</div>
<p>All these tasks are mandatory and must be done in the same pull request.</p>
</div>
<div class="section" id="removing-deprecated-code">
<h2>Removing Deprecated Code</h2>
<p>Removing deprecated code can only be done once every 2 years, on the next major version of the
impacted component (<code class="docutils literal notranslate"><span class="pre">master</span></code> branch).</p>
<p>When removing deprecated code, the consequences of the deprecation must be added to the <code class="docutils literal notranslate"><span class="pre">CHANGELOG.md</span></code> file
of the impacted component:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="mf">5.0</span><span class="o">.</span><span class="mi">0</span>
<span class="o">-----</span>

<span class="o">*</span> <span class="nx">Removed</span> <span class="nx">the</span> <span class="sb">`Deprecated`</span> <span class="nx">class</span><span class="p">,</span> <span class="k">use</span> <span class="sb">`Replacement`</span> <span class="nx">instead</span><span class="o">.</span>
</pre></div>
</div>
<p>This task is mandatory and must be done in the same pull request.</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>