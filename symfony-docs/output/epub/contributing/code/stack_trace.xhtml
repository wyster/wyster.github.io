<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Getting a Stack Trace</title>
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="getting-a-stack-trace">
<h1>Getting a Stack Trace</h1>
<p>When <a class="reference internal" href="bugs.xhtml"><span class="doc">reporting a bug</span></a> for an
exception or a wrong behavior in code, it is crucial that you provide
one or several stack traces. To understand why, you first have to
understand what a stack trace is, and how it can be useful to you as a
developer, and also to library maintainers.</p>
<div class="section" id="anatomy-of-a-stack-trace">
<h2>Anatomy of a Stack Trace</h2>
<p>A stack trace is called that way because it allows one to see a trail of
function calls leading to a point in code since the beginning of the
program. That point is not necessarily an exception. For instance, you
can use the native PHP function <code class="docutils literal notranslate"><span class="pre">debug_print_backtrace()</span></code> to get such
a trace. For each line in the trace, you get a file and a function or
method call, and the line number for that call. This is often of great
help for understanding the flow of your program and how it can end up in
unexpected places, such as lines of code where exceptions are thrown.</p>
</div>
<div class="section" id="stack-traces-and-exceptions">
<h2>Stack Traces and Exceptions</h2>
<p>In PHP, every exception comes with its own stack trace, which is
displayed by default if the exception is not caught. When using Symfony,
such exceptions go through a custom exception handler, which enhances
them in various ways before displaying them according to the current
Server API (CLI or not).
This means a better way to get a stack trace when you do not need the
program to continue is to throw an exception, as follows:
<code class="docutils literal notranslate"><span class="pre">throw</span> <span class="pre">new</span> <span class="pre">\Exception();</span></code></p>
</div>
<div class="section" id="nested-exceptions">
<h2>Nested Exceptions</h2>
<p>When applications get bigger, complexity is often tackled with layers of
architecture that need to be kept separate. For instance, if you have a
web application that makes a call to a remote API, it might be good to
wrap exceptions thrown when making that call with exceptions that have
special meaning in your domain, and to build appropriate HTTP exceptions
from those. Exceptions can be nested by using the <code class="docutils literal notranslate"><span class="pre">$previous</span></code>
argument that appears in the signature of the <code class="docutils literal notranslate"><span class="pre">Exception</span></code> class:
<code class="docutils literal notranslate"><span class="pre">public</span> <span class="pre">__construct</span> <span class="pre">([</span> <span class="pre">string</span> <span class="pre">$message</span> <span class="pre">=</span> <span class="pre">&quot;&quot;</span> <span class="pre">[,</span> <span class="pre">int</span> <span class="pre">$code</span> <span class="pre">=</span> <span class="pre">0</span> <span class="pre">[,</span> <span class="pre">Throwable</span> <span class="pre">$previous</span> <span class="pre">=</span> <span class="pre">NULL</span> <span class="pre">]]]</span> <span class="pre">)</span></code>
This means that sometimes, when you get an exception from an
application, you might actually get several of them.</p>
</div>
<div class="section" id="what-to-look-for-in-a-stack-trace">
<h2>What to look for in a Stack Trace</h2>
<p>When using a library, you will call code that you did not write. When
using a framework, it is the opposite: because you follow the
conventions of the framework, <a class="reference external" href="https://en.wikipedia.org/wiki/Inversion_of_control">the framework finds your code and calls
it</a><span class="link-target"> [https://en.wikipedia.org/wiki/Inversion_of_control]</span>, and does
things for you beforehand, like routing or access control.
Symfony being both a framework and library of components, it calls your
code and then your code might call it. This means you will always have
at least 2 parts, very often 3 in your stack traces when using Symfony:
a part that starts in one of the entrypoints of the framework
(<code class="docutils literal notranslate"><span class="pre">bin/console</span></code> or <code class="docutils literal notranslate"><span class="pre">public/index.php</span></code> in most cases), and ends when
reaching your code, most times in a command or in a controller found under
<code class="docutils literal notranslate"><span class="pre">src</span></code>. Then, either the exception is thrown in your code or in
libraries you call. If it is the latter, there should be a third part in
the stack trace with calls made in files under <code class="docutils literal notranslate"><span class="pre">vendor</span></code>. Before
landing in that directory, code goes through numerous review processes
and CI pipelines, which means it should be less likely to be the source
of the issue than code from your application, so it is important that
you focus first on lines starting with <code class="docutils literal notranslate"><span class="pre">src</span></code>, and look for anything
suspicious or unexpected, like method calls that are not supposed to
happen.</p>
<p>Next, you can have a look at what packages are involved. Files under
<code class="docutils literal notranslate"><span class="pre">vendor</span></code> are organized by Composer in the following way:
<code class="docutils literal notranslate"><span class="pre">vendor/acme/router</span></code> where <code class="docutils literal notranslate"><span class="pre">acme</span></code> is the vendor, <code class="docutils literal notranslate"><span class="pre">router</span></code> the
library and <code class="docutils literal notranslate"><span class="pre">acme/router</span></code> the Composer package. If you plan on
reporting the bug, make sure to report it to the library throwing the
exception. <code class="docutils literal notranslate"><span class="pre">composer</span> <span class="pre">home</span> <span class="pre">acme/router</span></code> should lead you to the right
place for that. As Symfony is a monorepository, use <code class="docutils literal notranslate"><span class="pre">composer</span> <span class="pre">home</span>
<span class="pre">symfony/symfony</span></code> when reporting a bug for any component.</p>
</div>
<div class="section" id="getting-stack-traces-with-symfony">
<h2>Getting Stack Traces with Symfony</h2>
<p>Now that we have all this in mind, let us see how to get a stack trace
with Symfony.</p>
<div class="section" id="stack-traces-in-your-web-browser">
<h3>Stack Traces in your Web Browser</h3>
<p>Several things need to be paid attention to when picking a stack trace
from your development environment through a web browser:</p>
<ol class="arabic simple">
<li><p>Are there several exceptions? If yes, the most interesting one is
often exception 1/n which, is shown <em>last</em> in the example below (it
is the one marked as exception [1/2]).</p></li>
<li><p>Under the “Stack Traces” tab, you will find exceptions in plain
text, so that you can easily share them in e.g. bug reports. Make
sure to <strong>remove any sensitive information</strong> before doing so.</p></li>
<li><p>You may notice there is a logs tab too; this tab does not have to do
with stack traces, it only contains logs produced in arbitrary places
in your application. They may or may not relate to the exception you
are getting, but are not what the term “stack trace” refers to.</p></li>
</ol>
<img alt="../../_images/stack-trace.gif" class="with-browser align-center" src="../../_images/stack-trace.gif" />
<p>Since stack traces may contain sensitive data, they should not be
exposed in production. Getting a stack trace from your production
environment, although more involving, is still possible with solutions
that include but are not limited to sending them to an email address
with monolog.</p>
</div>
<div class="section" id="stack-traces-in-the-cli">
<h3>Stack Traces in the CLI</h3>
<p>Exceptions might occur when running a Symfony command. By default, only
the message is shown because it is often enough to understand what is
going on:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console debug:exception


<span class="go">   Command &quot;debug:exception&quot; is not defined.</span>

<span class="go">   Did you mean one of these?</span>
<span class="go">       debug:autowiring</span>
<span class="go">       debug:config</span>
<span class="go">       debug:container</span>
<span class="go">       debug:event-dispatcher</span>
<span class="go">       debug:form</span>
<span class="go">       debug:router</span>
<span class="go">       debug:translation</span>
<span class="go">       debug:twig</span>
</pre></div>
</td></tr></table></div>
<p>If that is not the case, you can obtain a stack trace by increasing the
<a class="reference internal" href="../../console/verbosity.xhtml"><span class="doc">verbosity level</span></a> with <code class="docutils literal notranslate"><span class="pre">--verbose</span></code>:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console --verbose debug:exception

<span class="go"> In Application.php line 644:</span>

<span class="go">   [Symfony\Component\Console\Exception\CommandNotFoundException]</span>
<span class="go">   Command &quot;debug:exception&quot; is not defined.</span>

<span class="go">   Did you mean one of these?</span>
<span class="go">       debug:autowiring</span>
<span class="go">       debug:config</span>
<span class="go">       debug:container</span>
<span class="go">       debug:event-dispatcher</span>
<span class="go">       debug:form</span>
<span class="go">       debug:router</span>
<span class="go">       debug:translation</span>
<span class="go">       debug:twig</span>


<span class="go"> Exception trace:</span>
<span class="go">   at /app/vendor/symfony/console/Application.php:644</span>
<span class="go">  Symfony\Component\Console\Application-&gt;find() at /app/vendor/symfony/framework-bundle/Console/Application.php:116</span>
<span class="go">  Symfony\Bundle\FrameworkBundle\Console\Application-&gt;find() at /app/vendor/symfony/console/Application.php:228</span>
<span class="go">  Symfony\Component\Console\Application-&gt;doRun() at /app/vendor/symfony/framework-bundle/Console/Application.php:82</span>
<span class="go">  Symfony\Bundle\FrameworkBundle\Console\Application-&gt;doRun() at /app/vendor/symfony/console/Application.php:140</span>
<span class="go">  Symfony\Component\Console\Application-&gt;run() at /app/bin/console:42</span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="stack-traces-and-api-calls">
<h3>Stack Traces and API Calls</h3>
<p>When getting an exception from an API, you might not get a stack trace,
or it might be displayed in a way that is not suitable for sharing.
Luckily, when in the dev environment, you can obtain a plain text stack
trace by using the profiler. To find the profile, you can have a look
at the <code class="docutils literal notranslate"><span class="pre">X-Debug-Token-Link</span></code> response headers:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> curl --head http://localhost:8000/api/posts/1
<span class="go">… more headers</span>
<span class="go">X-Debug-Token: 110e1e</span>
<span class="go">X-Debug-Token-Link: http://localhost:8000/_profiler/110e1e</span>
<span class="go">X-Robots-Tag: noindex</span>
<span class="go">X-Previous-Debug-Token: 209101</span>
</pre></div>
</td></tr></table></div>
<p>Following that link will lead you to a page very similar to the one
described above in <a class="reference internal" href="#stack-traces-in-your-web-browser">Stack Traces in your Web Browser</a>.</p>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>