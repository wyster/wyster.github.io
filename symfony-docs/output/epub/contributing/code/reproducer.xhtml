<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Creating a Bug Reproducer</title>
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="creating-a-bug-reproducer">
<h1>Creating a Bug Reproducer</h1>
<p>The main Symfony code repository receives thousands of issues reports per year.
Some of those issues are easy to understand and the Symfony Core developers can
fix them without any other information. However, other issues are much harder to
understand because developers can’t reproduce them in their computers. That’s
when we’ll ask you to create a “bug reproducer”, which is the minimum amount of
code needed to make the bug appear when executed.</p>
<div class="section" id="reproducing-simple-bugs">
<h2>Reproducing Simple Bugs</h2>
<p>If you are reporting a bug related to some Symfony component used outside the
Symfony framework, it’s enough to share a small PHP script that when executed
shows the bug:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// First, run &quot;composer require symfony/validator&quot;</span>
<span class="c1">// Then, execute this file:</span>
<span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">require_once</span> <span class="no">__DIR__</span><span class="o">.</span><span class="s1">&#39;/vendor/autoload.php&#39;</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints</span><span class="p">;</span>

<span class="nv">$wrongUrl</span> <span class="o">=</span> <span class="s1">&#39;http://example.com/exploit.html?&lt;script&gt;alert(1);&lt;/script&gt;&#39;</span><span class="p">;</span>
<span class="nv">$urlValidator</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Constraints\UrlValidator</span><span class="p">();</span>
<span class="nv">$urlConstraint</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Constraints\Url</span><span class="p">();</span>

<span class="c1">// The URL is wrong, so var_dump() should display an error, but it displays</span>
<span class="c1">// &quot;null&quot; instead because there is no context to build a validator violation</span>
<span class="nb">var_dump</span><span class="p">(</span><span class="nv">$urlValidator</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="nv">$wrongUrl</span><span class="p">,</span> <span class="nv">$urlConstraint</span><span class="p">));</span>
</pre></div>
</div>
</div>
<div class="section" id="reproducing-complex-bugs">
<h2>Reproducing Complex Bugs</h2>
<p>If the bug is related to the Symfony Framework or if it’s too complex to create
a PHP script, it’s better to reproduce the bug by creating a new project. To do so:</p>
<ol class="arabic simple">
<li><p>Create a new project:</p></li>
</ol>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer create-project symfony/skeleton bug_app
</pre></div>
</td></tr></table></div>
<ol class="arabic simple">
<li><p>Add and commit the changes generated by Symfony.</p></li>
<li><p>Now you must add the minimum amount of code to reproduce the bug. This is the
trickiest part and it’s explained a bit more later.</p></li>
<li><p>Add and commit your changes.</p></li>
<li><p>Create a <a class="reference external" href="https://github.com/new">new repository</a><span class="link-target"> [https://github.com/new]</span> on GitHub (give it any name).</p></li>
<li><p>Follow the instructions on GitHub to add the <code class="docutils literal notranslate"><span class="pre">origin</span></code> remote to your local project
and push it.</p></li>
<li><p>Add a comment in your original issue report to share the URL of your forked
project (e.g. <code class="docutils literal notranslate"><span class="pre">https://github.com/YOUR-GITHUB-USERNAME/symfony_issue_23567</span></code>)
and, if necessary, explain the steps to reproduce (e.g. “browse this URL”,
“fill in this data in the form and submit it”, etc.)</p></li>
</ol>
<div class="section" id="adding-the-minimum-amount-of-code-possible">
<h3>Adding the Minimum Amount of Code Possible</h3>
<p>The key to create a bug reproducer is to solely focus on the feature that you
suspect is failing. For example, imagine that you suspect that the bug is related
to a route definition. Then, after creating your project:</p>
<ol class="arabic simple">
<li><p>Don’t edit any of the default Symfony configuration options.</p></li>
<li><p>Don’t copy your original application code and don’t use the same structure
of controllers, actions, etc. as in your original application.</p></li>
<li><p>Create a small controller and add your routing definition that shows the bug.</p></li>
<li><p>Don’t create or modify any other file.</p></li>
<li><p>Install the <a class="reference internal" href="../../setup/symfony_server.xhtml"><span class="doc">local web server</span></a> provided by Symfony
and use the <code class="docutils literal notranslate"><span class="pre">symfony</span> <span class="pre">server:start</span></code> command to browse to the new route and
see if the bug appears or not.</p></li>
<li><p>If you can see the bug, you’re done and you can already share the code with us.</p></li>
<li><p>If you can’t see the bug, you must keep making small changes. For example, if
your original route was defined using XML, forget about the previous route
and define the route using XML instead. Or maybe your application
registers some event listeners and that’s where the real bug is. In that case,
add an event listener that’s similar to your real app to see if you can find
the bug.</p></li>
</ol>
<p>In short, the idea is to keep adding small and incremental changes to a new project
until you can reproduce the bug.</p>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>