<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Create a custom Route Loader</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-create-a-custom-route-loader">
<span id="index-0"></span><h1>How to Create a custom Route Loader</h1>
<p>Basic applications can define all their routes in a single configuration file -
usually <code class="docutils literal notranslate"><span class="pre">config/routes.yaml</span></code> (see <a class="reference internal" href="../routing.xhtml#routing-creating-routes"><span class="std std-ref">Creating Routes</span></a>).
However, in most applications it’s common to import routes definitions from
different resources: PHP annotations in controller files, YAML, XML or PHP
files stored in some directory, etc.</p>
<div class="section" id="built-in-route-loaders">
<h2>Built-in Route Loaders</h2>
<p>Symfony provides several route loaders for the most common needs:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/routes.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">app_file</span><span class="p p-Indicator">:</span>
    <span class="c1"># loads routes from the given routing file stored in some bundle</span>
    <span class="l l-Scalar l-Scalar-Plain">resource</span><span class="p p-Indicator">:</span> <span class="s">&#39;@AcmeBundle/Resources/config/routing.yaml&#39;</span>

<span class="l l-Scalar l-Scalar-Plain">app_annotations</span><span class="p p-Indicator">:</span>
    <span class="c1"># loads routes from the PHP annotations of the controllers found in that directory</span>
    <span class="l l-Scalar l-Scalar-Plain">resource</span><span class="p p-Indicator">:</span> <span class="s">&#39;../src/Controller/&#39;</span>
    <span class="l l-Scalar l-Scalar-Plain">type</span><span class="p p-Indicator">:</span>     <span class="l l-Scalar l-Scalar-Plain">annotation</span>

<span class="l l-Scalar l-Scalar-Plain">app_directory</span><span class="p p-Indicator">:</span>
    <span class="c1"># loads routes from the YAML, XML or PHP files found in that directory</span>
    <span class="l l-Scalar l-Scalar-Plain">resource</span><span class="p p-Indicator">:</span> <span class="s">&#39;../legacy/routing/&#39;</span>
    <span class="l l-Scalar l-Scalar-Plain">type</span><span class="p p-Indicator">:</span>     <span class="l l-Scalar l-Scalar-Plain">directory</span>

<span class="l l-Scalar l-Scalar-Plain">app_bundle</span><span class="p p-Indicator">:</span>
    <span class="c1"># loads routes from the YAML, XML or PHP files found in some bundle directory</span>
    <span class="l l-Scalar l-Scalar-Plain">resource</span><span class="p p-Indicator">:</span> <span class="s">&#39;@AcmeOtherBundle/Resources/config/routing/&#39;</span>
    <span class="l l-Scalar l-Scalar-Plain">type</span><span class="p p-Indicator">:</span>     <span class="l l-Scalar l-Scalar-Plain">directory</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/routes.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;routes</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/routing&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/routing</span>
<span class="s">        https://symfony.com/schema/routing/routing-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="c">&lt;!-- loads routes from the given routing file stored in some bundle --&gt;</span>
    <span class="nt">&lt;import</span> <span class="na">resource=</span><span class="s">&quot;@AcmeBundle/Resources/config/routing.yaml&quot;</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!-- loads routes from the PHP annotations of the controllers found in that directory --&gt;</span>
    <span class="nt">&lt;import</span> <span class="na">resource=</span><span class="s">&quot;../src/Controller/&quot;</span> <span class="na">type=</span><span class="s">&quot;annotation&quot;</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!-- loads routes from the YAML or XML files found in that directory --&gt;</span>
    <span class="nt">&lt;import</span> <span class="na">resource=</span><span class="s">&quot;../legacy/routing/&quot;</span> <span class="na">type=</span><span class="s">&quot;directory&quot;</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!-- loads routes from the YAML or XML files found in some bundle directory --&gt;</span>
    <span class="nt">&lt;import</span> <span class="na">resource=</span><span class="s">&quot;@AcmeOtherBundle/Resources/config/routing/&quot;</span> <span class="na">type=</span><span class="s">&quot;directory&quot;</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/routes&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/routes.php</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nx">RoutingConfigurator</span> <span class="nv">$routes</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// loads routes from the given routing file stored in some bundle</span>
    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">import</span><span class="p">(</span><span class="s1">&#39;@AcmeBundle/Resources/config/routing.yaml&#39;</span><span class="p">);</span>

    <span class="c1">// loads routes from the PHP annotations of the controllers found in that directory</span>
    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">import</span><span class="p">(</span><span class="s1">&#39;../src/Controller/&#39;</span><span class="p">,</span> <span class="s1">&#39;annotation&#39;</span><span class="p">);</span>

    <span class="c1">// loads routes from the YAML or XML files found in that directory</span>
    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">import</span><span class="p">(</span><span class="s1">&#39;../legacy/routing/&#39;</span><span class="p">,</span> <span class="s1">&#39;directory&#39;</span><span class="p">);</span>

    <span class="c1">// loads routes from the YAML or XML files found in some bundle directory</span>
    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">import</span><span class="p">(</span><span class="s1">&#39;@AcmeOtherBundle/Resources/config/routing/&#39;</span><span class="p">,</span> <span class="s1">&#39;directory&#39;</span><span class="p">);</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>When importing resources, the key (e.g. <code class="docutils literal notranslate"><span class="pre">app_file</span></code>) is the name of collection.
Just be sure that it’s unique per file so no other lines override it.</p>
</div>
<p>If your application needs are different, you can create your own custom route
loader as explained in the next section.</p>
</div>
<div class="section" id="what-is-a-custom-route-loader">
<h2>What is a Custom Route Loader</h2>
<p>A custom route loader enables you to generate routes based on some
conventions, patterns or integrations. An example for this use-case is the
<a class="reference external" href="https://github.com/Tobion/OpenAPI-Symfony-Routing">OpenAPI-Symfony-Routing</a><span class="link-target"> [https://github.com/Tobion/OpenAPI-Symfony-Routing]</span> library where routes are generated based on
OpenAPI/Swagger annotations. Another example is the <a class="reference external" href="https://github.com/sonata-project/SonataAdminBundle">SonataAdminBundle</a><span class="link-target"> [https://github.com/sonata-project/SonataAdminBundle]</span> that
creates routes based on CRUD conventions.</p>
</div>
<div class="section" id="loading-routes">
<h2>Loading Routes</h2>
<p>The routes in a Symfony application are loaded by the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Routing/DelegatingLoader.php" title="Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader"><span class="pre">DelegatingLoader</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Routing/DelegatingLoader.php]</span></span></code>.
This loader uses several other loaders (delegates) to load resources of
different types, for instance YAML files or <code class="docutils literal notranslate"><span class="pre">&#64;Route</span></code> annotations in controller
files. The specialized loaders implement
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/LoaderInterface.php" title="Symfony\Component\Config\Loader\LoaderInterface"><span class="pre">LoaderInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/LoaderInterface.php]</span></span></code>
and therefore have two important methods:
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/LoaderInterface.php" title="Symfony\Component\Config\Loader\LoaderInterface::supports()"><span class="pre">supports()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/LoaderInterface.php]</span></span></code>
and <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/LoaderInterface.php" title="Symfony\Component\Config\Loader\LoaderInterface::load()"><span class="pre">load()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/LoaderInterface.php]</span></span></code>.</p>
<p>Take these lines from the <code class="docutils literal notranslate"><span class="pre">routes.yaml</span></code>:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/routes.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">controllers</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">resource</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">../src/Controller/</span>
    <span class="l l-Scalar l-Scalar-Plain">type</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">annotation</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/routes.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;routes</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/routing&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/routing</span>
<span class="s">        https://symfony.com/schema/routing/routing-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;import</span> <span class="na">resource=</span><span class="s">&quot;../src/Controller&quot;</span> <span class="na">type=</span><span class="s">&quot;annotation&quot;</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/routes&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/routes.php</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nx">RoutingConfigurator</span> <span class="nv">$routes</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">import</span><span class="p">(</span><span class="s1">&#39;../src/Controller&#39;</span><span class="p">,</span> <span class="s1">&#39;annotation&#39;</span><span class="p">);</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>When the main loader parses this, it tries all registered delegate loaders and calls
their <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/LoaderInterface.php" title="Symfony\Component\Config\Loader\LoaderInterface::supports()"><span class="pre">supports()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/LoaderInterface.php]</span></span></code>
method with the given resource (<code class="docutils literal notranslate"><span class="pre">../src/Controller/</span></code>)
and type (<code class="docutils literal notranslate"><span class="pre">annotation</span></code>) as arguments. When one of the loader returns <code class="docutils literal notranslate"><span class="pre">true</span></code>,
its <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/LoaderInterface.php" title="Symfony\Component\Config\Loader\LoaderInterface::load()"><span class="pre">load()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/LoaderInterface.php]</span></span></code> method
will be called, which should return a <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Routing/RouteCollection.php" title="Symfony\Component\Routing\RouteCollection"><span class="pre">RouteCollection</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Routing/RouteCollection.php]</span></span></code>
containing <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Routing/Route.php" title="Symfony\Component\Routing\Route"><span class="pre">Route</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Routing/Route.php]</span></span></code> objects.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Routes loaded this way will be cached by the Router the same way as
when they are defined in one of the default formats (e.g. XML, YAML,
PHP file).</p>
</div>
</div>
<div class="section" id="loading-routes-with-a-custom-service">
<h2>Loading Routes with a Custom Service</h2>
<p>Using a regular Symfony service is the simplest way to load routes in a
customized way. It’s much easier than creating a full custom route loader, so
you should always consider this option first.</p>
<p>To do so, define <code class="docutils literal notranslate"><span class="pre">type:</span> <span class="pre">service</span></code> as the type of the loaded routing resource
and configure the service and method to call:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/routes.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">admin_routes</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">resource</span><span class="p p-Indicator">:</span> <span class="s">&#39;admin_route_loader::loadRoutes&#39;</span>
    <span class="l l-Scalar l-Scalar-Plain">type</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">service</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/routes.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;routes</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/routing&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/routing</span>
<span class="s">        https://symfony.com/schema/routing/routing-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;import</span> <span class="na">resource=</span><span class="s">&quot;admin_route_loader::loadRoutes&quot;</span> <span class="na">type=</span><span class="s">&quot;service&quot;</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/routes&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/routes.php</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nx">RoutingConfigurator</span> <span class="nv">$routes</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">import</span><span class="p">(</span><span class="s1">&#39;admin_route_loader::loadRoutes&#39;</span><span class="p">,</span> <span class="s1">&#39;service&#39;</span><span class="p">);</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>In this example, the routes are loaded by calling the <code class="docutils literal notranslate"><span class="pre">loadRoutes()</span></code> method
of the service whose ID is <code class="docutils literal notranslate"><span class="pre">admin_route_loader</span></code>. Your service doesn’t have to
extend or implement any special class, but the called method must return a
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Routing/RouteCollection.php" title="Symfony\Component\Routing\RouteCollection"><span class="pre">RouteCollection</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Routing/RouteCollection.php]</span></span></code> object.</p>
<p>If you’re using <a class="reference internal" href="../service_container.xhtml#services-autoconfigure"><span class="std std-ref">autoconfigure</span></a>, your class should
implement the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Routing/RouteLoaderInterface.php" title="Symfony\Bundle\FrameworkBundle\Routing\RouteLoaderInterface"><span class="pre">RouteLoaderInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Routing/RouteLoaderInterface.php]</span></span></code>
interface to be tagged automatically. If you’re <strong>not using autoconfigure</strong>,
tag it manually with <code class="docutils literal notranslate"><span class="pre">routing.route_loader</span></code>.</p>
<div class="deprecated">
<p><span class="versionmodified">Deprecated since version 4.4: </span>Not tagging or implementing your route loader was deprecated in Symfony 4.4.</p>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The routes defined using service route loaders will be automatically
cached by the framework. So whenever your service should load new routes,
don’t forget to clear the cache.</p>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>If your service is invokable, you don’t need to precise the method to use.</p>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 4.3: </span>The support of the <code class="docutils literal notranslate"><span class="pre">__invoke()</span></code> method to create invokable service route
loaders was introduced in Symfony 4.3.</p>
</div>
</div>
<div class="section" id="creating-a-custom-loader">
<h2>Creating a custom Loader</h2>
<p>To load routes from some custom source (i.e. from something other than annotations,
YAML or XML files), you need to create a custom route loader. This loader
has to implement <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/LoaderInterface.php" title="Symfony\Component\Config\Loader\LoaderInterface"><span class="pre">LoaderInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/LoaderInterface.php]</span></span></code>.</p>
<p>In most cases it is easier to extend from
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/Loader.php" title="Symfony\Component\Config\Loader\Loader"><span class="pre">Loader</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/Loader.php]</span></span></code> instead of implementing
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/LoaderInterface.php" title="Symfony\Component\Config\Loader\LoaderInterface"><span class="pre">LoaderInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/LoaderInterface.php]</span></span></code> yourself.</p>
<p>The sample loader below supports loading routing resources with a type of
<code class="docutils literal notranslate"><span class="pre">extra</span></code>. The type name should not clash with other loaders that might
support the same type of resource. Make up any name specific to what
you do. The resource name itself is not actually used in the example:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Routing/ExtraLoader.php</span>
<span class="k">namespace</span> <span class="nx">App\Routing</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Config\Loader\Loader</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Route</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\RouteCollection</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">ExtraLoader</span> <span class="k">extends</span> <span class="nx">Loader</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$isLoaded</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">load</span><span class="p">(</span><span class="nv">$resource</span><span class="p">,</span> <span class="nv">$type</span> <span class="o">=</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">true</span> <span class="o">===</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">isLoaded</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nx">\RuntimeException</span><span class="p">(</span><span class="s1">&#39;Do not add the &quot;extra&quot; loader twice&#39;</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="nv">$routes</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">RouteCollection</span><span class="p">();</span>

        <span class="c1">// prepare a new route</span>
        <span class="nv">$path</span> <span class="o">=</span> <span class="s1">&#39;/extra/{parameter}&#39;</span><span class="p">;</span>
        <span class="nv">$defaults</span> <span class="o">=</span> <span class="p">[</span>
            <span class="s1">&#39;_controller&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;App\Controller\ExtraController::extra&#39;</span><span class="p">,</span>
        <span class="p">];</span>
        <span class="nv">$requirements</span> <span class="o">=</span> <span class="p">[</span>
            <span class="s1">&#39;parameter&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;\d+&#39;</span><span class="p">,</span>
        <span class="p">];</span>
        <span class="nv">$route</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Route</span><span class="p">(</span><span class="nv">$path</span><span class="p">,</span> <span class="nv">$defaults</span><span class="p">,</span> <span class="nv">$requirements</span><span class="p">);</span>

        <span class="c1">// add the new route to the route collection</span>
        <span class="nv">$routeName</span> <span class="o">=</span> <span class="s1">&#39;extraRoute&#39;</span><span class="p">;</span>
        <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="nv">$routeName</span><span class="p">,</span> <span class="nv">$route</span><span class="p">);</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">isLoaded</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>

        <span class="k">return</span> <span class="nv">$routes</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">supports</span><span class="p">(</span><span class="nv">$resource</span><span class="p">,</span> <span class="nv">$type</span> <span class="o">=</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="s1">&#39;extra&#39;</span> <span class="o">===</span> <span class="nv">$type</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Make sure the controller you specify really exists. In this case you
have to create an <code class="docutils literal notranslate"><span class="pre">extra()</span></code> method in the <code class="docutils literal notranslate"><span class="pre">ExtraController</span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/ExtraController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">ExtraController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">extra</span><span class="p">(</span><span class="nv">$parameter</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">(</span><span class="nv">$parameter</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Now define a service for the <code class="docutils literal notranslate"><span class="pre">ExtraLoader</span></code>:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="c1"># ...</span>

    <span class="l l-Scalar l-Scalar-Plain">App\Routing\ExtraLoader</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">tags</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="nv">routing.loader</span><span class="p p-Indicator">]</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="c">&lt;!-- ... --&gt;</span>

        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\Routing\ExtraLoader&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;tag</span> <span class="na">name=</span><span class="s">&quot;routing.loader&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/service&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">use</span> <span class="nx">App\Routing\ExtraLoader</span><span class="p">;</span>

<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">autowire</span><span class="p">(</span><span class="nx">ExtraLoader</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="na">addTag</span><span class="p">(</span><span class="s1">&#39;routing.loader&#39;</span><span class="p">)</span>
<span class="p">;</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>Notice the tag <code class="docutils literal notranslate"><span class="pre">routing.loader</span></code>. All services with this <em>tag</em> will be marked
as potential route loaders and added as specialized route loaders to the
<code class="docutils literal notranslate"><span class="pre">routing.loader</span></code> <em>service</em>, which is an instance of
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Routing/DelegatingLoader.php" title="Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader"><span class="pre">DelegatingLoader</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Routing/DelegatingLoader.php]</span></span></code>.</p>
<div class="section" id="using-the-custom-loader">
<h3>Using the Custom Loader</h3>
<p>If you did nothing else, your custom routing loader would <em>not</em> be called.
What remains to do is adding a few lines to the routing configuration:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/routes.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">app_extra</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">resource</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">.</span>
    <span class="l l-Scalar l-Scalar-Plain">type</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">extra</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/routes.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;routes</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/routing&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/routing</span>
<span class="s">        https://symfony.com/schema/routing/routing-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;import</span> <span class="na">resource=</span><span class="s">&quot;.&quot;</span> <span class="na">type=</span><span class="s">&quot;extra&quot;</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/routes&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/routes.php</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nx">RoutingConfigurator</span> <span class="nv">$routes</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">import</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="s1">&#39;extra&#39;</span><span class="p">);</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>The important part here is the <code class="docutils literal notranslate"><span class="pre">type</span></code> key. Its value should be <code class="docutils literal notranslate"><span class="pre">extra</span></code> as
this is the type which the <code class="docutils literal notranslate"><span class="pre">ExtraLoader</span></code> supports and this will make sure
its <code class="docutils literal notranslate"><span class="pre">load()</span></code> method gets called. The <code class="docutils literal notranslate"><span class="pre">resource</span></code> key is insignificant
for the <code class="docutils literal notranslate"><span class="pre">ExtraLoader</span></code>, so it is set to <code class="docutils literal notranslate"><span class="pre">.</span></code> (a single dot).</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The routes defined using custom route loaders will be automatically
cached by the framework. So whenever you change something in the loader
class itself, don’t forget to clear the cache.</p>
</div>
</div>
</div>
<div class="section" id="more-advanced-loaders">
<h2>More Advanced Loaders</h2>
<p>If your custom route loader extends from
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/Loader.php" title="Symfony\Component\Config\Loader\Loader"><span class="pre">Loader</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/Loader.php]</span></span></code> as shown above, you
can also make use of the provided resolver, an instance of
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/LoaderResolver.php" title="Symfony\Component\Config\Loader\LoaderResolver"><span class="pre">LoaderResolver</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/LoaderResolver.php]</span></span></code>, to load secondary
routing resources.</p>
<p>You still need to implement
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/LoaderInterface.php" title="Symfony\Component\Config\Loader\LoaderInterface::supports()"><span class="pre">supports()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/LoaderInterface.php]</span></span></code>
and <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/LoaderInterface.php" title="Symfony\Component\Config\Loader\LoaderInterface::load()"><span class="pre">load()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/LoaderInterface.php]</span></span></code>.
Whenever you want to load another resource - for instance a YAML routing
configuration file - you can call the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/Loader.php" title="Symfony\Component\Config\Loader\Loader::import()"><span class="pre">import()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Loader/Loader.php]</span></span></code> method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Routing/AdvancedLoader.php</span>
<span class="k">namespace</span> <span class="nx">App\Routing</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Config\Loader\Loader</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\RouteCollection</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">AdvancedLoader</span> <span class="k">extends</span> <span class="nx">Loader</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">load</span><span class="p">(</span><span class="nv">$resource</span><span class="p">,</span> <span class="nv">$type</span> <span class="o">=</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$routes</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">RouteCollection</span><span class="p">();</span>

        <span class="nv">$resource</span> <span class="o">=</span> <span class="s1">&#39;@ThirdPartyBundle/Resources/config/routes.yaml&#39;</span><span class="p">;</span>
        <span class="nv">$type</span> <span class="o">=</span> <span class="s1">&#39;yaml&#39;</span><span class="p">;</span>

        <span class="nv">$importedRoutes</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">import</span><span class="p">(</span><span class="nv">$resource</span><span class="p">,</span> <span class="nv">$type</span><span class="p">);</span>

        <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">addCollection</span><span class="p">(</span><span class="nv">$importedRoutes</span><span class="p">);</span>

        <span class="k">return</span> <span class="nv">$routes</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">supports</span><span class="p">(</span><span class="nv">$resource</span><span class="p">,</span> <span class="nv">$type</span> <span class="o">=</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="s1">&#39;advanced_extra&#39;</span> <span class="o">===</span> <span class="nv">$type</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The resource name and type of the imported routing configuration can
be anything that would normally be supported by the routing configuration
loader (YAML, XML, PHP, annotation, etc.).</p>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>For more advanced uses, check out the <a class="reference external" href="https://symfony.com/doc/current/cmf/components/routing/chain.html">ChainRouter</a><span class="link-target"> [https://symfony.com/doc/current/cmf/components/routing/chain.html]</span> provided by the Symfony
CMF project. This router allows applications to use two or more routers
combined, for example to keep using the default Symfony routing system when
writing a custom router.</p>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>