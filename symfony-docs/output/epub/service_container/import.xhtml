<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Import Configuration Files/Resources</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-import-configuration-files-resources">
<span id="index-0"></span><h1>How to Import Configuration Files/Resources</h1>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>In this section, service configuration files are referred to as <em>resources</em>.
While most configuration resources are files (e.g. YAML, XML, PHP), Symfony is
able to load configuration from anywhere (e.g. a database or even via an external
web service).</p>
</div>
<p>The service container is built using a single configuration resource
(<code class="docutils literal notranslate"><span class="pre">config/services.yaml</span></code> by default). This gives you absolute flexibility over
the services in your application.</p>
<p>External service configuration can be imported in two different ways. The first
method, commonly used to import other resources, is via the <code class="docutils literal notranslate"><span class="pre">imports</span></code>
directive. The second method, using dependency injection extensions, is used by
third-party bundles to load the configuration. Read on to learn more about both
methods.</p>
<div class="section" id="importing-configuration-with-imports">
<span id="service-container-imports-directive"></span><span id="index-1"></span><h2>Importing Configuration with <code class="docutils literal notranslate"><span class="pre">imports</span></code></h2>
<p>By default, service configuration lives in <code class="docutils literal notranslate"><span class="pre">config/services.yaml</span></code>. But if that
file becomes large, youâ€™re free to organize into multiple files. Suppose you
decided to move some configuration to a new file:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services/mailer.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">parameters</span><span class="p p-Indicator">:</span>
    <span class="c1"># ... some parameters</span>

<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="c1"># ... some services</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services/mailer.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;parameters&gt;</span>
        <span class="c">&lt;!-- ... some parameters --&gt;</span>
    <span class="nt">&lt;/parameters&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="c">&lt;!-- ... some services --&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services/mailer.php</span>

<span class="c1">// ... some parameters</span>
<span class="c1">// ... some services</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>To import this file, use the <code class="docutils literal notranslate"><span class="pre">imports</span></code> key from any other file and pass either
a relative or absolute path to the imported file:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">imports</span><span class="p p-Indicator">:</span>
    <span class="p p-Indicator">-</span> <span class="p p-Indicator">{</span> <span class="nv">resource</span><span class="p p-Indicator">:</span> <span class="nv">services/mailer.yaml</span> <span class="p p-Indicator">}</span>
    <span class="c1"># If you want to import a whole directory:</span>
    <span class="p p-Indicator">-</span> <span class="p p-Indicator">{</span> <span class="nv">resource</span><span class="p p-Indicator">:</span> <span class="nv">services/</span> <span class="p p-Indicator">}</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">_defaults</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">autowire</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">true</span>
        <span class="l l-Scalar l-Scalar-Plain">autoconfigure</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">true</span>

    <span class="l l-Scalar l-Scalar-Plain">App\</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">resource</span><span class="p p-Indicator">:</span> <span class="s">&#39;../src/*&#39;</span>
        <span class="l l-Scalar l-Scalar-Plain">exclude</span><span class="p p-Indicator">:</span> <span class="s">&#39;../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}&#39;</span>

    <span class="c1"># ...</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;imports&gt;</span>
        <span class="nt">&lt;import</span> <span class="na">resource=</span><span class="s">&quot;services/mailer.xml&quot;</span><span class="nt">/&gt;</span>
        <span class="c">&lt;!-- If you want to import a whole directory: --&gt;</span>
        <span class="nt">&lt;import</span> <span class="na">resource=</span><span class="s">&quot;services/&quot;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/imports&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="nt">&lt;defaults</span> <span class="na">autowire=</span><span class="s">&quot;true&quot;</span> <span class="na">autoconfigure=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>

        <span class="nt">&lt;prototype</span> <span class="na">namespace=</span><span class="s">&quot;App\&quot;</span> <span class="na">resource=</span><span class="s">&quot;../src/*&quot;</span>
            <span class="na">exclude=</span><span class="s">&quot;../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}&quot;</span><span class="nt">/&gt;</span>

        <span class="c">&lt;!-- ... --&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">import</span><span class="p">(</span><span class="s1">&#39;services/mailer.php&#39;</span><span class="p">);</span>
    <span class="c1">// If you want to import a whole directory:</span>
    <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">import</span><span class="p">(</span><span class="s1">&#39;services/&#39;</span><span class="p">);</span>

    <span class="nv">$services</span> <span class="o">=</span> <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">services</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">defaults</span><span class="p">()</span>
            <span class="o">-&gt;</span><span class="na">autowire</span><span class="p">()</span>
            <span class="o">-&gt;</span><span class="na">autoconfigure</span><span class="p">()</span>
    <span class="p">;</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">load</span><span class="p">(</span><span class="s1">&#39;App\\&#39;</span><span class="p">,</span> <span class="s1">&#39;../src/*&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">exclude</span><span class="p">(</span><span class="s1">&#39;../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}&#39;</span><span class="p">);</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>When loading a configuration file, Symfony loads first the imported files and
then it processes the parameters and services defined in the file. If you use the
<a class="reference internal" href="../service_container.xhtml#service-container-services-load-example"><span class="std std-ref">default services.yaml configuration</span></a>
as in the above example, the <code class="docutils literal notranslate"><span class="pre">App\</span></code> definition creates services for classes
found in <code class="docutils literal notranslate"><span class="pre">../src/*</span></code>. If your imported file defines services for those classes
too, they will be overridden.</p>
<p>A possible solution for this is to add the classes and/or directories of the
imported files in the <code class="docutils literal notranslate"><span class="pre">exclude</span></code> option of the <code class="docutils literal notranslate"><span class="pre">App\</span></code> definition. Another
solution is to not use imports and add the service definitions in the same file,
but after the <code class="docutils literal notranslate"><span class="pre">App\</span></code> definition to override it.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Due to the way in which parameters are resolved, you cannot use them
to build paths in imports dynamically. This means that something like
the following doesnâ€™t work:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">imports</span><span class="p p-Indicator">:</span>
    <span class="p p-Indicator">-</span> <span class="p p-Indicator">{</span> <span class="nv">resource</span><span class="p p-Indicator">:</span> <span class="s">&#39;%kernel.project_dir%/somefile.yaml&#39;</span> <span class="p p-Indicator">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;imports&gt;</span>
        <span class="nt">&lt;import</span> <span class="na">resource=</span><span class="s">&quot;%kernel.project_dir%/somefile.yaml&quot;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/imports&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="nv">$loader</span><span class="o">-&gt;</span><span class="na">import</span><span class="p">(</span><span class="s1">&#39;%kernel.project_dir%/somefile.yaml&#39;</span><span class="p">);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
</div>
<div class="section" id="importing-configuration-via-container-extensions">
<span id="service-container-extension-configuration"></span><span id="index-2"></span><h2>Importing Configuration via Container Extensions</h2>
<p>Third-party bundle container configuration, including Symfony core services,
are usually loaded using another method: a <a class="reference internal" href="../bundles/extension.xhtml"><span class="doc">container extension</span></a>.</p>
<p>Internally, each bundle defines its services in files like youâ€™ve seen so far.
However, these files arenâ€™t imported using the <code class="docutils literal notranslate"><span class="pre">import</span></code> directive. Instead, bundles
use a <em>dependency injection extension</em> to load the files automatically. As soon
as you enable a bundle, its extension is called, which is able to load service
configuration files.</p>
<p>In fact, each configuration file in <code class="docutils literal notranslate"><span class="pre">config/packages/</span></code> is passed to the
extension of its related  bundle - e.g. <code class="docutils literal notranslate"><span class="pre">FrameworkBundle</span></code> or <code class="docutils literal notranslate"><span class="pre">TwigBundle</span></code> -
and used to configure those services further.</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>