<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Create Service Aliases and Mark Services as Private</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-create-service-aliases-and-mark-services-as-private">
<span id="index-0"></span><h1>How to Create Service Aliases and Mark Services as Private</h1>
<div class="section" id="marking-services-as-public-private">
<span id="container-private-services"></span><h2>Marking Services as Public / Private</h2>
<p>When defining a service, it can be made to be <em>public</em> or <em>private</em>. If a service
is <em>public</em>, it means that you can access it directly from the container at runtime.
For example, the <code class="docutils literal notranslate"><span class="pre">doctrine</span></code> service is a public service:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// only public services can be accessed in this way</span>
<span class="nv">$doctrine</span> <span class="o">=</span> <span class="nv">$container</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;doctrine&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>But typically, services are accessed using <a class="reference internal" href="../service_container.xhtml#services-constructor-injection"><span class="std std-ref">dependency injection</span></a>.
And in this case, those services do <em>not</em> need to be public.</p>
<p id="inlined-private-services">So unless you <em>specifically</em> need to access a service directly from the container
via <code class="docutils literal notranslate"><span class="pre">$container-&gt;get()</span></code>, the best-practice is to make your services <em>private</em>.
In fact, All services  are <a class="reference internal" href="../service_container.xhtml#container-public"><span class="std std-ref">private</span></a> by default.</p>
<p>You can also control the <code class="docutils literal notranslate"><span class="pre">public</span></code> option on a service-by-service basis:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="c1"># ...</span>

    <span class="l l-Scalar l-Scalar-Plain">App\Service\Foo</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">public</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">true</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\Service\Foo&quot;</span> <span class="na">public=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Service\Foo</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$services</span> <span class="o">=</span> <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">services</span><span class="p">();</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">Foo</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">public</span><span class="p">();</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p id="services-why-private">Private services are special because they allow the container to optimize whether
and how they are instantiated. This increases the containerâ€™s performance. It also
gives you better errors: if you try to reference a non-existent service, you will
get a clear error when you refresh <em>any</em> page, even if the problematic code would
not have run on that page.</p>
<p>Now that the service is private, you <em>must not</em> fetch the service directly
from the container:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">App\Service\Foo</span><span class="p">;</span>

<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="nx">Foo</span><span class="o">::</span><span class="na">class</span><span class="p">);</span>
</pre></div>
</div>
<p>Thus, a service can be marked as private if you do not want to access it
directly from your code. However, if a service has been marked as private,
you can still alias it (see below) to access this service (via the alias).</p>
</div>
<div class="section" id="aliasing">
<span id="services-alias"></span><h2>Aliasing</h2>
<p>You may sometimes want to use shortcuts to access some services. You can
do so by aliasing them and, furthermore, you can even alias non-public
services.</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="c1"># ...</span>
    <span class="l l-Scalar l-Scalar-Plain">App\Mail\PhpMailer</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">public</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">false</span>

    <span class="l l-Scalar l-Scalar-Plain">app.mailer</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">alias</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">App\Mail\PhpMailer</span>
        <span class="l l-Scalar l-Scalar-Plain">public</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">true</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\Mail\PhpMailer&quot;</span> <span class="na">public=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>

        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;app.mailer&quot;</span> <span class="na">alias=</span><span class="s">&quot;App\Mail\PhpMailer&quot;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Mail\PhpMailer</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$services</span> <span class="o">=</span> <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">services</span><span class="p">();</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">PhpMailer</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">private</span><span class="p">();</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">alias</span><span class="p">(</span><span class="s1">&#39;app.mailer&#39;</span><span class="p">,</span> <span class="nx">PhpMailer</span><span class="o">::</span><span class="na">class</span><span class="p">);</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>This means that when using the container directly, you can access the
<code class="docutils literal notranslate"><span class="pre">PhpMailer</span></code> service by asking for the <code class="docutils literal notranslate"><span class="pre">app.mailer</span></code> service like this:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$container</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;app.mailer&#39;</span><span class="p">);</span> <span class="c1">// Would return a PhpMailer instance</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>In YAML, you can also use a shortcut to alias a service:</p>
<div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="c1"># ...</span>
    <span class="l l-Scalar l-Scalar-Plain">app.mailer</span><span class="p p-Indicator">:</span> <span class="s">&#39;@App\Mail\PhpMailer&#39;</span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="deprecating-service-aliases">
<h3>Deprecating Service Aliases</h3>
<p>If you decide to deprecate the use of a service alias (because it is outdated
or you decided not to maintain it anymore), you can deprecate its definition:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="l l-Scalar l-Scalar-Plain">app.mailer</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">alias</span><span class="p p-Indicator">:</span> <span class="s">&#39;@App\Mail\PhpMailer&#39;</span>

    <span class="c1"># this will display a generic deprecation message...</span>
    <span class="l l-Scalar l-Scalar-Plain">deprecated</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">true</span>

    <span class="c1"># ...but you can also define a custom deprecation message</span>
    <span class="l l-Scalar l-Scalar-Plain">deprecated</span><span class="p p-Indicator">:</span> <span class="s">&#39;The</span><span class="nv"> </span><span class="s">&quot;%alias_id%&quot;</span><span class="nv"> </span><span class="s">alias</span><span class="nv"> </span><span class="s">is</span><span class="nv"> </span><span class="s">deprecated.</span><span class="nv"> </span><span class="s">Do</span><span class="nv"> </span><span class="s">not</span><span class="nv"> </span><span class="s">use</span><span class="nv"> </span><span class="s">it</span><span class="nv"> </span><span class="s">anymore.&#39;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-Instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;app.mailer&quot;</span> <span class="na">alias=</span><span class="s">&quot;App\Mail\PhpMailer&quot;</span><span class="nt">&gt;</span>
            <span class="c">&lt;!-- this will display a generic deprecation message... --&gt;</span>
            <span class="nt">&lt;deprecated/&gt;</span>

            <span class="c">&lt;!-- ...but you can also define a custom deprecation message --&gt;</span>
            <span class="nt">&lt;deprecated&gt;</span>The &quot;%alias_id%&quot; service alias is deprecated. Don&#39;t use it anymore.<span class="nt">&lt;/deprecated&gt;</span>
        <span class="nt">&lt;/service&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="nv">$container</span>
    <span class="o">-&gt;</span><span class="na">setAlias</span><span class="p">(</span><span class="s1">&#39;app.mailer&#39;</span><span class="p">,</span> <span class="s1">&#39;App\Mail\PhpMailer&#39;</span><span class="p">)</span>

    <span class="c1">// this will display a generic deprecation message...</span>
    <span class="o">-&gt;</span><span class="na">setDeprecated</span><span class="p">(</span><span class="k">true</span><span class="p">)</span>

    <span class="c1">// ...but you can also define a custom deprecation message</span>
    <span class="o">-&gt;</span><span class="na">setDeprecated</span><span class="p">(</span>
        <span class="k">true</span><span class="p">,</span>
        <span class="s1">&#39;The &quot;%alias_id%&quot; service alias is deprecated. Don\&#39;t use it anymore.&#39;</span>
    <span class="p">)</span>
<span class="p">;</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>Now, every time this service alias is used, a deprecation warning is triggered,
advising you to stop or to change your uses of that alias.</p>
<p>The message is actually a message template, which replaces occurrences of the
<code class="docutils literal notranslate"><span class="pre">%alias_id%</span></code> placeholder by the service alias id. You <strong>must</strong> have at least
one occurrence of the <code class="docutils literal notranslate"><span class="pre">%alias_id%</span></code> placeholder in your template.</p>
<div class="versionadded">
<p><span class="versionmodified">New in version 4.3: </span>The <code class="docutils literal notranslate"><span class="pre">deprecated</span></code> option for service aliases was introduced in Symfony 4.3.</p>
</div>
</div>
</div>
<div class="section" id="anonymous-services">
<h2>Anonymous Services</h2>
<p>In some cases, you may want to prevent a service being used as a dependency of
other services. This can be achieved by creating an anonymous service. These
services are like regular services but they donâ€™t define an ID and they are
created where they are used.</p>
<p>The following example shows how to inject an anonymous service into another service:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">App\Foo</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">arguments</span><span class="p p-Indicator">:</span>
            <span class="p p-Indicator">-</span> <span class="kt">!service</span>
                <span class="l l-Scalar l-Scalar-Plain">class</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">App\AnonymousBar</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;foo&quot;</span> <span class="na">class=</span><span class="s">&quot;App\Foo&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;argument</span> <span class="na">type=</span><span class="s">&quot;service&quot;</span><span class="nt">&gt;</span>
                <span class="nt">&lt;service</span> <span class="na">class=</span><span class="s">&quot;App\AnonymousBar&quot;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;/argument&gt;</span>
        <span class="nt">&lt;/service&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\AnonymousBar</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">App\Foo</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$services</span> <span class="o">=</span> <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">services</span><span class="p">();</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">Foo</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">args</span><span class="p">([</span><span class="nx">inline</span><span class="p">(</span><span class="nx">AnonymousBar</span><span class="o">::</span><span class="na">class</span><span class="p">)])</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Anonymous services do <em>NOT</em> inherit the definitions provided from the
defaults defined in the configuration. So youâ€™ll need to explicitly mark
service as autowired or autoconfigured when doing an anonymous service
e.g.: <code class="docutils literal notranslate"><span class="pre">inline(Foo::class)-&gt;autowire()-&gt;autoconfigure()</span></code>.</p>
</div>
<p>Using an anonymous service as a factory looks like this:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">App\Foo</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">factory</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span> <span class="kt">!service</span> <span class="p p-Indicator">{</span> <span class="nv">class</span><span class="p p-Indicator">:</span> <span class="nv">App\FooFactory</span> <span class="p p-Indicator">},</span> <span class="s">&#39;constructFoo&#39;</span> <span class="p p-Indicator">]</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;foo&quot;</span> <span class="na">class=</span><span class="s">&quot;App\Foo&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;factory</span> <span class="na">method=</span><span class="s">&quot;constructFoo&quot;</span><span class="nt">&gt;</span>
                <span class="nt">&lt;service</span> <span class="na">class=</span><span class="s">&quot;App\FooFactory&quot;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;/factory&gt;</span>
        <span class="nt">&lt;/service&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\AnonymousBar</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">App\Foo</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$services</span> <span class="o">=</span> <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">services</span><span class="p">();</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">Foo</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">factory</span><span class="p">([</span><span class="nx">inline</span><span class="p">(</span><span class="nx">AnonymousBar</span><span class="o">::</span><span class="na">class</span><span class="p">),</span> <span class="s1">&#39;constructFoo&#39;</span><span class="p">])</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
<div class="section" id="deprecating-services">
<h2>Deprecating Services</h2>
<p>Once you have decided to deprecate the use of a service (because it is outdated
or you decided not to maintain it anymore), you can deprecate its definition:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">App\Service\OldService</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">deprecated</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">The &quot;%service_id%&quot; service is deprecated since vendor-name/package-name 2.8 and will be removed in 3.0.</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-Instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\Service\OldService&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;deprecated&gt;</span>The &quot;%service_id%&quot; service is deprecated since vendor-name/package-name 2.8 and will be removed in 3.0.<span class="nt">&lt;/deprecated&gt;</span>
        <span class="nt">&lt;/service&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Service\OldService</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$services</span> <span class="o">=</span> <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">services</span><span class="p">();</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">OldService</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">deprecate</span><span class="p">(</span><span class="s1">&#39;The &quot;%service_id%&quot; service is deprecated since vendor-name/package-name 2.8 and will be removed in 3.0.&#39;</span><span class="p">);</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>Now, every time this service is used, a deprecation warning is triggered,
advising you to stop or to change your uses of that service.</p>
<p>The message is actually a message template, which replaces occurrences of the
<code class="docutils literal notranslate"><span class="pre">%service_id%</span></code> placeholder by the serviceâ€™s id. You <strong>must</strong> have at least one
occurrence of the <code class="docutils literal notranslate"><span class="pre">%service_id%</span></code> placeholder in your template.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The deprecation message is optional. If not set, Symfony will show this default
message: <code class="docutils literal notranslate"><span class="pre">The</span> <span class="pre">&quot;%service_id%&quot;</span> <span class="pre">service</span> <span class="pre">is</span> <span class="pre">deprecated.</span> <span class="pre">You</span> <span class="pre">should</span> <span class="pre">stop</span> <span class="pre">using</span> <span class="pre">it,</span>
<span class="pre">as</span> <span class="pre">it</span> <span class="pre">will</span> <span class="pre">soon</span> <span class="pre">be</span> <span class="pre">removed.</span></code>.</p>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>It is strongly recommended that you define a custom message because the
default one is too generic. A good message informs when this service was
deprecated, until when it will be maintained and the alternative services
to use (if any).</p>
</div>
<p>For service decorators (see <a class="reference internal" href="service_decoration.xhtml"><span class="doc">How to Decorate Services</span></a>), if the
definition does not modify the deprecated status, it will inherit the status from
the definition that is decorated.</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>