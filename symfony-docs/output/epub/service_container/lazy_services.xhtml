<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Lazy Services</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="lazy-services">
<span id="index-0"></span><h1>Lazy Services</h1>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>Another way to inject services lazily is via a <a class="reference internal" href="service_subscribers_locators.xhtml"><span class="doc">service subscriber</span></a>.</p>
</div>
<div class="section" id="why-lazy-services">
<h2>Why Lazy Services?</h2>
<p>In some cases, you may want to inject a service that is a bit heavy to instantiate,
but is not always used inside your object. For example, imagine you have
a <code class="docutils literal notranslate"><span class="pre">NewsletterManager</span></code> and you inject a <code class="docutils literal notranslate"><span class="pre">mailer</span></code> service into it. Only
a few methods on your <code class="docutils literal notranslate"><span class="pre">NewsletterManager</span></code> actually use the <code class="docutils literal notranslate"><span class="pre">mailer</span></code>,
but even when you don’t need it, a <code class="docutils literal notranslate"><span class="pre">mailer</span></code> service is always instantiated
in order to construct your <code class="docutils literal notranslate"><span class="pre">NewsletterManager</span></code>.</p>
<p>Configuring lazy services is one answer to this. With a lazy service, a
“proxy” of the <code class="docutils literal notranslate"><span class="pre">mailer</span></code> service is actually injected. It looks and acts
like the <code class="docutils literal notranslate"><span class="pre">mailer</span></code>, except that the <code class="docutils literal notranslate"><span class="pre">mailer</span></code> isn’t actually instantiated
until you interact with the proxy in some way.</p>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>Lazy services do not support <a class="reference external" href="https://www.php.net/manual/en/language.oop5.final.php">final</a><span class="link-target"> [https://www.php.net/manual/en/language.oop5.final.php]</span> classes.</p>
</div>
</div>
<div class="section" id="installation">
<h2>Installation</h2>
<p>In order to use the lazy service instantiation, you will need to install the
<code class="docutils literal notranslate"><span class="pre">symfony/proxy-manager-bridge</span></code> package:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require symfony/proxy-manager-bridge
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="configuration">
<h2>Configuration</h2>
<p>You can mark the service as <code class="docutils literal notranslate"><span class="pre">lazy</span></code> by manipulating its definition:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">App\Twig\AppExtension</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">lazy</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">true</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\Twig\AppExtension&quot;</span> <span class="na">lazy=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Twig\AppExtension</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$services</span> <span class="o">=</span> <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">services</span><span class="p">();</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">AppExtension</span><span class="o">::</span><span class="na">class</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">lazy</span><span class="p">();</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>Once you inject the service into another service, a virtual <a class="reference external" href="https://en.wikipedia.org/wiki/Proxy_pattern">proxy</a><span class="link-target"> [https://en.wikipedia.org/wiki/Proxy_pattern]</span> with the
same signature of the class representing the service should be injected. The
same happens when calling <code class="docutils literal notranslate"><span class="pre">Container::get()</span></code> directly.</p>
<p>The actual class will be instantiated as soon as you try to interact with the
service (e.g. call one of its methods).</p>
<p>To check if your proxy works you can check the interface of the received object:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nx">dump</span><span class="p">(</span><span class="nb">class_implements</span><span class="p">(</span><span class="nv">$service</span><span class="p">));</span>
<span class="c1">// the output should include &quot;ProxyManager\Proxy\LazyLoadingInterface&quot;</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If you don’t install the <a class="reference external" href="https://github.com/symfony/symfony/tree/master/src/Symfony/Bridge/ProxyManager">ProxyManager bridge</a><span class="link-target"> [https://github.com/symfony/symfony/tree/master/src/Symfony/Bridge/ProxyManager]</span> and the
<a class="reference external" href="https://github.com/Ocramius/ProxyManager">ocramius/proxy-manager</a><span class="link-target"> [https://github.com/Ocramius/ProxyManager]</span>, the container will skip over the <code class="docutils literal notranslate"><span class="pre">lazy</span></code>
flag and directly instantiate the service as it would normally do.</p>
</div>
</div>
<div class="section" id="additional-resources">
<h2>Additional Resources</h2>
<p>You can read more about how proxies are instantiated, generated and initialized
in the <a class="reference external" href="https://github.com/Ocramius/ProxyManager/blob/master/docs/lazy-loading-value-holder.md">documentation of ProxyManager</a><span class="link-target"> [https://github.com/Ocramius/ProxyManager/blob/master/docs/lazy-loading-value-holder.md]</span>.</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>