<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Work with Compiler Passes</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-work-with-compiler-passes">
<span id="index-0"></span><h1>How to Work with Compiler Passes</h1>
<p>Compiler passes give you an opportunity to manipulate other
<a class="reference internal" href="definitions.xhtml"><span class="doc">service definitions</span></a> that have been
registered with the service container. You can read about how to create them in
the components section “<a class="reference internal" href="../components/dependency_injection/compilation.xhtml#components-di-separate-compiler-passes"><span class="std std-ref">Creating Separate Compiler Passes</span></a>”.</p>
<p>Compiler passes are registered in the <code class="docutils literal notranslate"><span class="pre">build()</span></code> method of the application kernel:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Kernel.php</span>
<span class="k">namespace</span> <span class="nx">App</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\DependencyInjection\Compiler\CustomPass</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Kernel\MicroKernelTrait</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\ContainerBuilder</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Kernel</span> <span class="k">as</span> <span class="nx">BaseKernel</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Kernel</span> <span class="k">extends</span> <span class="nx">BaseKernel</span>
<span class="p">{</span>
    <span class="k">use</span> <span class="nx">MicroKernelTrait</span><span class="p">;</span>

    <span class="c1">// ...</span>

    <span class="k">protected</span> <span class="k">function</span> <span class="nf">build</span><span class="p">(</span><span class="nx">ContainerBuilder</span> <span class="nv">$container</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="nv">$container</span><span class="o">-&gt;</span><span class="na">addCompilerPass</span><span class="p">(</span><span class="k">new</span> <span class="nx">CustomPass</span><span class="p">());</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>One of the most common use-cases of compiler passes is to work with <a class="reference internal" href="tags.xhtml"><span class="doc">tagged
services</span></a>. In those cases, instead of creating a
compiler pass, you can make the kernel implement
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/DependencyInjection/Compiler/CompilerPassInterface.php" title="Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface"><span class="pre">CompilerPassInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/DependencyInjection/Compiler/CompilerPassInterface.php]</span></span></code>
and process the services inside the <code class="docutils literal notranslate"><span class="pre">process()</span></code> method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Kernel.php</span>
<span class="k">namespace</span> <span class="nx">App</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Kernel\MicroKernelTrait</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\ContainerBuilder</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Kernel</span> <span class="k">as</span> <span class="nx">BaseKernel</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Kernel</span> <span class="k">extends</span> <span class="nx">BaseKernel</span> <span class="k">implements</span> <span class="nx">CompilerPassInterface</span>
<span class="p">{</span>
    <span class="k">use</span> <span class="nx">MicroKernelTrait</span><span class="p">;</span>

    <span class="c1">// ...</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">process</span><span class="p">(</span><span class="nx">ContainerBuilder</span> <span class="nv">$container</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="c1">// in this method you can manipulate the service container:</span>
        <span class="c1">// for example, changing some container service:</span>
        <span class="nv">$container</span><span class="o">-&gt;</span><span class="na">getDefinition</span><span class="p">(</span><span class="s1">&#39;app.some_private_service&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">setPublic</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>

        <span class="c1">// or processing tagged services:</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$container</span><span class="o">-&gt;</span><span class="na">findTaggedServiceIds</span><span class="p">(</span><span class="s1">&#39;some_tag&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="nv">$id</span> <span class="o">=&gt;</span> <span class="nv">$tags</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// ...</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="section" id="working-with-compiler-passes-in-bundles">
<h2>Working with Compiler Passes in Bundles</h2>
<p><a class="reference internal" href="../bundles.xhtml"><span class="doc">Bundles</span></a> can define compiler passes in the <code class="docutils literal notranslate"><span class="pre">build()</span></code> method of
the main bundle class (this is not needed when implementing the <code class="docutils literal notranslate"><span class="pre">process()</span></code>
method in the extension):</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/MyBundle/MyBundle.php</span>
<span class="k">namespace</span> <span class="nx">App\MyBundle</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\DependencyInjection\Compiler\CustomPass</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\ContainerBuilder</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Bundle\Bundle</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">MyBundle</span> <span class="k">extends</span> <span class="nx">Bundle</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">build</span><span class="p">(</span><span class="nx">ContainerBuilder</span> <span class="nv">$container</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="k">parent</span><span class="o">::</span><span class="na">build</span><span class="p">(</span><span class="nv">$container</span><span class="p">);</span>

        <span class="nv">$container</span><span class="o">-&gt;</span><span class="na">addCompilerPass</span><span class="p">(</span><span class="k">new</span> <span class="nx">CustomPass</span><span class="p">());</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>If you are using custom <a class="reference internal" href="tags.xhtml"><span class="doc">service tags</span></a> in a
bundle then by convention, tag names consist of the name of the bundle
(lowercase, underscores as separators), followed by a dot, and finally the
“real” name. For example, if you want to introduce some sort of “transport” tag
in your AcmeMailerBundle, you should call it <code class="docutils literal notranslate"><span class="pre">acme_mailer.transport</span></code>.</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>