<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Using a Factory to Create Services</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="using-a-factory-to-create-services">
<span id="index-0"></span><h1>Using a Factory to Create Services</h1>
<p>Symfony’s Service Container provides multiple features to control the creation
of objects, allowing you to specify arguments passed to the constructor as well
as calling methods and setting parameters.</p>
<p>However, sometimes you need to apply the <a class="reference external" href="https://en.wikipedia.org/wiki/Factory_(object-oriented_programming)">factory design pattern</a><span class="link-target"> [https://en.wikipedia.org/wiki/Factory_(object-oriented_programming)]</span> to delegate
the object creation to some special object called “the factory”. In those cases,
the service container can call a method on your factory to create the object
rather than directly instantiating the class.</p>
<div class="section" id="static-factories">
<h2>Static Factories</h2>
<p>Suppose you have a factory that configures and returns a new <code class="docutils literal notranslate"><span class="pre">NewsletterManager</span></code>
object by calling the static <code class="docutils literal notranslate"><span class="pre">createNewsletterManager()</span></code> method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Email\NewsletterManagerStaticFactory.php</span>
<span class="k">namespace</span> <span class="nx">App\Email</span><span class="p">;</span>

<span class="c1">// ...</span>

<span class="k">class</span> <span class="nc">NewsletterManagerStaticFactory</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">createNewsletterManager</span><span class="p">()</span><span class="o">:</span> <span class="nx">NewsletterManager</span>
    <span class="p">{</span>
        <span class="nv">$newsletterManager</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">NewsletterManager</span><span class="p">();</span>

        <span class="c1">// ...</span>

        <span class="k">return</span> <span class="nv">$newsletterManager</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>To make the <code class="docutils literal notranslate"><span class="pre">NewsletterManager</span></code> object available as a service, use the
<code class="docutils literal notranslate"><span class="pre">factory</span></code> option to define which method of which class must be called to
create its object:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="c1"># ...</span>

    <span class="l l-Scalar l-Scalar-Plain">App\Email\NewsletterManager</span><span class="p p-Indicator">:</span>
        <span class="c1"># the first argument is the class and the second argument is the static method</span>
        <span class="l l-Scalar l-Scalar-Plain">factory</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="s">&#39;App\Email\NewsletterManagerStaticFactory&#39;</span><span class="p p-Indicator">,</span> <span class="s">&#39;createNewsletterManager&#39;</span><span class="p p-Indicator">]</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\Email\NewsletterManager&quot;</span><span class="nt">&gt;</span>
            <span class="c">&lt;!-- the first argument is the class and the second argument is the static method --&gt;</span>
            <span class="nt">&lt;factory</span> <span class="na">class=</span><span class="s">&quot;App\Email\NewsletterManagerStaticFactory&quot;</span> <span class="na">method=</span><span class="s">&quot;createNewsletterManager&quot;</span><span class="nt">/&gt;</span>

            <span class="c">&lt;!-- if the factory class is the same as the service class, you can omit</span>
<span class="c">                 the &#39;class&#39; attribute and define just the &#39;method&#39; attribute:</span>

<span class="c">                 &lt;factory method=&quot;createNewsletterManager&quot;/&gt;</span>
<span class="c">            --&gt;</span>
        <span class="nt">&lt;/service&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Email\NewsletterManager</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">App\Email\NewsletterManagerStaticFactory</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$services</span> <span class="o">=</span> <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">services</span><span class="p">();</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">NewsletterManager</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="c1">// the first argument is the class and the second argument is the static method</span>
        <span class="o">-&gt;</span><span class="na">factory</span><span class="p">([</span><span class="nx">NewsletterManagerStaticFactory</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="s1">&#39;createNewsletterManager&#39;</span><span class="p">]);</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>When using a factory to create services, the value chosen for class
has no effect on the resulting service. The actual class name
only depends on the object that is returned by the factory. However,
the configured class name may be used by compiler passes and therefore
should be set to a sensible value.</p>
</div>
</div>
<div class="section" id="non-static-factories">
<h2>Non-Static Factories</h2>
<p>If your factory is using a regular method instead of a static one to configure
and create the service, instantiate the factory itself as a service too.
Configuration of the service container then looks like this:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="c1"># ...</span>

    <span class="c1"># first, create a service for the factory</span>
    <span class="l l-Scalar l-Scalar-Plain">App\Email\NewsletterManagerFactory</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">~</span>

    <span class="c1"># second, use the factory service as the first argument of the &#39;factory&#39;</span>
    <span class="c1"># option and the factory method as the second argument</span>
    <span class="l l-Scalar l-Scalar-Plain">App\Email\NewsletterManager</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">factory</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="s">&#39;@App\Email\NewsletterManagerFactory&#39;</span><span class="p p-Indicator">,</span> <span class="s">&#39;createNewsletterManager&#39;</span><span class="p p-Indicator">]</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="c">&lt;!-- first, create a service for the factory --&gt;</span>
        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\Email\NewsletterManagerFactory&quot;</span><span class="nt">/&gt;</span>

        <span class="c">&lt;!-- second, use the factory service as the first argument of the &#39;factory&#39;</span>
<span class="c">             option and the factory method as the second argument --&gt;</span>
        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\Email\NewsletterManager&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;factory</span> <span class="na">service=</span><span class="s">&quot;App\Email\NewsletterManagerFactory&quot;</span>
                <span class="na">method=</span><span class="s">&quot;createNewsletterManager&quot;</span>
            <span class="nt">/&gt;</span>
        <span class="nt">&lt;/service&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Email\NewsletterManager</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">App\Email\NewsletterManagerFactory</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$services</span> <span class="o">=</span> <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">services</span><span class="p">();</span>

    <span class="c1">// first, create a service for the factory</span>
    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">NewsletterManagerFactory</span><span class="o">::</span><span class="na">class</span><span class="p">);</span>

    <span class="c1">// second, use the factory service as the first argument of the &#39;factory&#39;</span>
    <span class="c1">// method and the factory method as the second argument</span>
    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">NewsletterManager</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="c1">// In versions earlier to Symfony 5.1 the service() function was called ref()</span>
        <span class="o">-&gt;</span><span class="na">factory</span><span class="p">([</span><span class="nx">service</span><span class="p">(</span><span class="nx">NewsletterManagerFactory</span><span class="o">::</span><span class="na">class</span><span class="p">),</span> <span class="s1">&#39;createNewsletterManager&#39;</span><span class="p">]);</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
<div class="section" id="invokable-factories">
<span id="factories-invokable"></span><h2>Invokable Factories</h2>
<p>Suppose you now change your factory method to <code class="docutils literal notranslate"><span class="pre">__invoke()</span></code> so that your
factory service can be used as a callback:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Email/InvokableNewsletterManagerFactory.php</span>
<span class="k">namespace</span> <span class="nx">App\Email</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">class</span> <span class="nc">InvokableNewsletterManagerFactory</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__invoke</span><span class="p">()</span><span class="o">:</span> <span class="nx">NewsletterManager</span>
    <span class="p">{</span>
        <span class="nv">$newsletterManager</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">NewsletterManager</span><span class="p">();</span>

        <span class="c1">// ...</span>

        <span class="k">return</span> <span class="nv">$newsletterManager</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Services can be created and configured via invokable factories by omitting the
method name:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="c1"># ...</span>

    <span class="l l-Scalar l-Scalar-Plain">App\Email\NewsletterManager</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">class</span><span class="p p-Indicator">:</span>   <span class="l l-Scalar l-Scalar-Plain">App\Email\NewsletterManager</span>
        <span class="l l-Scalar l-Scalar-Plain">factory</span><span class="p p-Indicator">:</span> <span class="s">&#39;@App\Email\NewsletterManagerFactory&#39;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="c">&lt;!-- ... --&gt;</span>

        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\Email\NewsletterManager&quot;</span>
                 <span class="na">class=</span><span class="s">&quot;App\Email\NewsletterManager&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;factory</span> <span class="na">service=</span><span class="s">&quot;App\Email\NewsletterManagerFactory&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/service&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Email\NewsletterManager</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">App\Email\NewsletterManagerFactory</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$services</span> <span class="o">=</span> <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">services</span><span class="p">();</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">NewsletterManager</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">factory</span><span class="p">(</span><span class="nx">service</span><span class="p">(</span><span class="nx">NewsletterManagerFactory</span><span class="o">::</span><span class="na">class</span><span class="p">));</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
<div class="section" id="passing-arguments-to-the-factory-method">
<span id="factories-passing-arguments-factory-method"></span><h2>Passing Arguments to the Factory Method</h2>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Arguments to your factory method are <a class="reference internal" href="../service_container.xhtml#services-autowire"><span class="std std-ref">autowired</span></a> if
that’s enabled for your service.</p>
</div>
<p>If you need to pass arguments to the factory method you can use the <code class="docutils literal notranslate"><span class="pre">arguments</span></code>
option. For example, suppose the <code class="docutils literal notranslate"><span class="pre">createNewsletterManager()</span></code> method in the
previous examples takes the <code class="docutils literal notranslate"><span class="pre">templating</span></code> service as an argument:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="c1"># ...</span>

    <span class="l l-Scalar l-Scalar-Plain">App\Email\NewsletterManager</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">factory</span><span class="p p-Indicator">:</span>   <span class="p p-Indicator">[</span><span class="s">&#39;@App\Email\NewsletterManagerFactory&#39;</span><span class="p p-Indicator">,</span> <span class="nv">createNewsletterManager</span><span class="p p-Indicator">]</span>
        <span class="l l-Scalar l-Scalar-Plain">arguments</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="s">&#39;@templating&#39;</span><span class="p p-Indicator">]</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="c">&lt;!-- ... --&gt;</span>

        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\Email\NewsletterManager&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;factory</span> <span class="na">service=</span><span class="s">&quot;App\Email\NewsletterManagerFactory&quot;</span> <span class="na">method=</span><span class="s">&quot;createNewsletterManager&quot;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;argument</span> <span class="na">type=</span><span class="s">&quot;service&quot;</span> <span class="na">id=</span><span class="s">&quot;templating&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/service&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Email\NewsletterManager</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">App\Email\NewsletterManagerFactory</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$services</span> <span class="o">=</span> <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">services</span><span class="p">();</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">NewsletterManager</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">factory</span><span class="p">([</span><span class="nx">service</span><span class="p">(</span><span class="nx">NewsletterManagerFactory</span><span class="o">::</span><span class="na">class</span><span class="p">),</span> <span class="s1">&#39;createNewsletterManager&#39;</span><span class="p">])</span>
        <span class="o">-&gt;</span><span class="na">args</span><span class="p">([</span><span class="nx">service</span><span class="p">(</span><span class="s1">&#39;templating&#39;</span><span class="p">)])</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>