<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Inject Values Based on Complex Expressions</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-inject-values-based-on-complex-expressions">
<span id="index-0"></span><h1>How to Inject Values Based on Complex Expressions</h1>
<p>The service container also supports an “expression” that allows you to inject
very specific values into a service.</p>
<p>For example, suppose you have a service (not shown here), called <code class="docutils literal notranslate"><span class="pre">App\Mail\MailerConfiguration</span></code>,
which has a <code class="docutils literal notranslate"><span class="pre">getMailerMethod()</span></code> method on it. This returns a string - like <code class="docutils literal notranslate"><span class="pre">sendmail</span></code>
based on some configuration.</p>
<p>Suppose that you want to pass the result of this method as a constructor argument
to another service: <code class="docutils literal notranslate"><span class="pre">App\Mailer</span></code>. One way to do this is with an expression:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="c1"># ...</span>

    <span class="l l-Scalar l-Scalar-Plain">App\Mail\MailerConfiguration</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">~</span>

    <span class="l l-Scalar l-Scalar-Plain">App\Mailer</span><span class="p p-Indicator">:</span>
        <span class="c1"># the &#39;@=&#39; prefix is required when using expressions for arguments in YAML files</span>
        <span class="l l-Scalar l-Scalar-Plain">arguments</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="s">&#39;@=service(&quot;App\\Mail\\MailerConfiguration&quot;).getMailerMethod()&#39;</span><span class="p p-Indicator">]</span>
        <span class="c1"># when using double-quoted strings, the backslash needs to be escaped twice (see https://yaml.org/spec/1.2/spec.html#id2787109)</span>
        <span class="c1"># arguments: [&quot;@=service(&#39;App\\\\Mail\\\\MailerConfiguration&#39;).getMailerMethod()&quot;]</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="c">&lt;!-- ... --&gt;</span>

        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\Mail\MailerConfiguration&quot;</span><span class="nt">&gt;&lt;/service&gt;</span>

        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\Mailer&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;argument</span> <span class="na">type=</span><span class="s">&quot;expression&quot;</span><span class="nt">&gt;</span>service(&#39;App\\Mail\\MailerConfiguration&#39;).getMailerMethod()<span class="nt">&lt;/argument&gt;</span>
        <span class="nt">&lt;/service&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Mail\MailerConfiguration</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">App\Mailer</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">MailerConfiguration</span><span class="o">::</span><span class="na">class</span><span class="p">);</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">Mailer</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">args</span><span class="p">([</span><span class="nx">expr</span><span class="p">(</span><span class="s2">&quot;service(&#39;App</span><span class="se">\\</span><span class="s2">Mail</span><span class="se">\\</span><span class="s2">MailerConfiguration&#39;).getMailerMethod()&quot;</span><span class="p">)]);</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>To learn more about the expression language syntax, see <a class="reference internal" href="../components/expression_language/syntax.xhtml"><span class="doc">The Expression Syntax</span></a>.</p>
<p>In this context, you have access to 2 functions:</p>
<dl class="simple">
<dt><code class="docutils literal notranslate"><span class="pre">service</span></code></dt>
<dd><p>Returns a given service (see the example above).</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">parameter</span></code></dt>
<dd><p>Returns a specific parameter value (syntax is like <code class="docutils literal notranslate"><span class="pre">service</span></code>).</p>
</dd>
</dl>
<p>You also have access to the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/DependencyInjection/Container.php" title="Symfony\Component\DependencyInjection\Container"><span class="pre">Container</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/DependencyInjection/Container.php]</span></span></code>
via a <code class="docutils literal notranslate"><span class="pre">container</span></code> variable. Here’s another example:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">App\Mailer</span><span class="p p-Indicator">:</span>
        <span class="c1"># the &#39;@=&#39; prefix is required when using expressions for arguments in YAML files</span>
        <span class="l l-Scalar l-Scalar-Plain">arguments</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="s">&quot;@=container.hasParameter(&#39;some_param&#39;)</span><span class="nv"> </span><span class="s">?</span><span class="nv"> </span><span class="s">parameter(&#39;some_param&#39;)</span><span class="nv"> </span><span class="s">:</span><span class="nv"> </span><span class="s">&#39;default_value&#39;&quot;</span><span class="p p-Indicator">]</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\Mailer&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;argument</span> <span class="na">type=</span><span class="s">&quot;expression&quot;</span><span class="nt">&gt;</span>container.hasParameter(&#39;some_param&#39;) ? parameter(&#39;some_param&#39;) : &#39;default_value&#39;<span class="nt">&lt;/argument&gt;</span>
        <span class="nt">&lt;/service&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Mailer</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$services</span> <span class="o">=</span> <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">services</span><span class="p">();</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">Mailer</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">args</span><span class="p">([</span><span class="nx">expr</span><span class="p">(</span><span class="s2">&quot;container.hasParameter(&#39;some_param&#39;) ? parameter(&#39;some_param&#39;) : &#39;default_value&#39;&quot;</span><span class="p">)]);</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>Expressions can be used in <code class="docutils literal notranslate"><span class="pre">arguments</span></code>, <code class="docutils literal notranslate"><span class="pre">properties</span></code>, as arguments with
<code class="docutils literal notranslate"><span class="pre">configurator</span></code> and as arguments to <code class="docutils literal notranslate"><span class="pre">calls</span></code> (method calls).</p>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>