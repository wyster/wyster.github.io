<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Configure a Service with a Configurator</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-configure-a-service-with-a-configurator">
<span id="index-0"></span><h1>How to Configure a Service with a Configurator</h1>
<p>The <em>service configurator</em> is a feature of the service container that allows
you to use a callable to configure a service after its instantiation.</p>
<p>A service configurator can be used, for example, when you have a service
that requires complex setup based on configuration settings coming from
different sources/services. Using an external configurator, you can maintain
the service implementation cleanly and keep it decoupled from the other
objects that provide the configuration needed.</p>
<p>Another use case is when you have multiple objects that share a common
configuration or that should be configured in a similar way at runtime.</p>
<p>For example, suppose you have an application where you send different types
of emails to users. Emails are passed through different formatters that
could be enabled or not depending on some dynamic application settings.
You start defining a <code class="docutils literal notranslate"><span class="pre">NewsletterManager</span></code> class like this:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Mail/NewsletterManager.php</span>
<span class="k">namespace</span> <span class="nx">App\Mail</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">NewsletterManager</span> <span class="k">implements</span> <span class="nx">EmailFormatterAwareInterface</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$enabledFormatters</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">setEnabledFormatters</span><span class="p">(</span><span class="k">array</span> <span class="nv">$enabledFormatters</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">enabledFormatters</span> <span class="o">=</span> <span class="nv">$enabledFormatters</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>and also a <code class="docutils literal notranslate"><span class="pre">GreetingCardManager</span></code> class:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Mail/GreetingCardManager.php</span>
<span class="k">namespace</span> <span class="nx">App\Mail</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">GreetingCardManager</span> <span class="k">implements</span> <span class="nx">EmailFormatterAwareInterface</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$enabledFormatters</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">setEnabledFormatters</span><span class="p">(</span><span class="k">array</span> <span class="nv">$enabledFormatters</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">enabledFormatters</span> <span class="o">=</span> <span class="nv">$enabledFormatters</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>As mentioned before, the goal is to set the formatters at runtime depending
on application settings. To do this, you also have an <code class="docutils literal notranslate"><span class="pre">EmailFormatterManager</span></code>
class which is responsible for loading and validating formatters enabled
in the application:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Mail/EmailFormatterManager.php</span>
<span class="k">namespace</span> <span class="nx">App\Mail</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">EmailFormatterManager</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">getEnabledFormatters</span><span class="p">()</span><span class="o">:</span> <span class="k">array</span>
    <span class="p">{</span>
        <span class="c1">// code to configure which formatters to use</span>
        <span class="nv">$enabledFormatters</span> <span class="o">=</span> <span class="p">[</span><span class="o">...</span><span class="p">];</span>

        <span class="c1">// ...</span>

        <span class="k">return</span> <span class="nv">$enabledFormatters</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>If your goal is to avoid having to couple <code class="docutils literal notranslate"><span class="pre">NewsletterManager</span></code> and
<code class="docutils literal notranslate"><span class="pre">GreetingCardManager</span></code> with <code class="docutils literal notranslate"><span class="pre">EmailFormatterManager</span></code>, then you might want
to create a configurator class to configure these instances:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Mail/EmailConfigurator.php</span>
<span class="k">namespace</span> <span class="nx">App\Mail</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">EmailConfigurator</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$formatterManager</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nx">EmailFormatterManager</span> <span class="nv">$formatterManager</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">formatterManager</span> <span class="o">=</span> <span class="nv">$formatterManager</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">configure</span><span class="p">(</span><span class="nx">EmailFormatterAwareInterface</span> <span class="nv">$emailManager</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="nv">$emailManager</span><span class="o">-&gt;</span><span class="na">setEnabledFormatters</span><span class="p">(</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">formatterManager</span><span class="o">-&gt;</span><span class="na">getEnabledFormatters</span><span class="p">()</span>
        <span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The <code class="docutils literal notranslate"><span class="pre">EmailConfigurator</span></code>’s job is to inject the enabled formatters into
<code class="docutils literal notranslate"><span class="pre">NewsletterManager</span></code> and <code class="docutils literal notranslate"><span class="pre">GreetingCardManager</span></code> because they are not aware of
where the enabled formatters come from. On the other hand, the
<code class="docutils literal notranslate"><span class="pre">EmailFormatterManager</span></code> holds the knowledge about the enabled formatters and
how to load them, keeping the single responsibility principle.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>While this example uses a PHP class method, configurators can be any valid
PHP callable, including functions, static methods and methods of services.</p>
</div>
<div class="section" id="using-the-configurator">
<h2>Using the Configurator</h2>
<p>You can configure the service configurator using the <code class="docutils literal notranslate"><span class="pre">configurator</span></code> option. If
you’re using the <a class="reference internal" href="../service_container.xhtml#service-container-services-load-example"><span class="std std-ref">default services.yaml configuration</span></a>,
all the classes are already loaded as services. All you need to do is specify the
<code class="docutils literal notranslate"><span class="pre">configurator</span></code>:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="c1"># ...</span>

    <span class="c1"># Registers all 4 classes as services, including App\Mail\EmailConfigurator</span>
    <span class="l l-Scalar l-Scalar-Plain">App\</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">resource</span><span class="p p-Indicator">:</span> <span class="s">&#39;../src/*&#39;</span>
        <span class="c1"># ...</span>

    <span class="c1"># override the services to set the configurator</span>
    <span class="l l-Scalar l-Scalar-Plain">App\Mail\NewsletterManager</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">configurator</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="s">&#39;@App\Mail\EmailConfigurator&#39;</span><span class="p p-Indicator">,</span> <span class="s">&#39;configure&#39;</span><span class="p p-Indicator">]</span>

    <span class="l l-Scalar l-Scalar-Plain">App\Mail\GreetingCardManager</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">configurator</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="s">&#39;@App\Mail\EmailConfigurator&#39;</span><span class="p p-Indicator">,</span> <span class="s">&#39;configure&#39;</span><span class="p p-Indicator">]</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="nt">&lt;prototype</span> <span class="na">namespace=</span><span class="s">&quot;App\&quot;</span> <span class="na">resource=</span><span class="s">&quot;../src/*&quot;</span><span class="nt">/&gt;</span>

        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\Mail\NewsletterManager&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;configurator</span> <span class="na">service=</span><span class="s">&quot;App\Mail\EmailConfigurator&quot;</span> <span class="na">method=</span><span class="s">&quot;configure&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/service&gt;</span>

        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\Mail\GreetingCardManager&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;configurator</span> <span class="na">service=</span><span class="s">&quot;App\Mail\EmailConfigurator&quot;</span> <span class="na">method=</span><span class="s">&quot;configure&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/service&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Mail\EmailConfigurator</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">App\Mail\GreetingCardManager</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">App\Mail\NewsletterManager</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$services</span> <span class="o">=</span> <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">services</span><span class="p">();</span>

    <span class="c1">// Registers all 4 classes as services, including App\Mail\EmailConfigurator</span>
    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">load</span><span class="p">(</span><span class="s1">&#39;App\\&#39;</span><span class="p">,</span> <span class="s1">&#39;../src/*&#39;</span><span class="p">);</span>

    <span class="c1">// override the services to set the configurator</span>
    <span class="c1">// In versions earlier to Symfony 5.1 the service() function was called ref()</span>
    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">NewsletterManager</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">configurator</span><span class="p">(</span><span class="nx">service</span><span class="p">(</span><span class="nx">EmailConfigurator</span><span class="o">::</span><span class="na">class</span><span class="p">),</span> <span class="s1">&#39;configure&#39;</span><span class="p">);</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">GreetingCardManager</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">configurator</span><span class="p">(</span><span class="nx">service</span><span class="p">(</span><span class="nx">EmailConfigurator</span><span class="o">::</span><span class="na">class</span><span class="p">),</span> <span class="s1">&#39;configure&#39;</span><span class="p">);</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p id="configurators-invokable">Services can be configured via invokable configurators (replacing the
<code class="docutils literal notranslate"><span class="pre">configure()</span></code> method with <code class="docutils literal notranslate"><span class="pre">__invoke()</span></code>) by omitting the method name:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="c1"># ...</span>

    <span class="c1"># registers all classes as services, including App\Mail\EmailConfigurator</span>
    <span class="l l-Scalar l-Scalar-Plain">App\</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">resource</span><span class="p p-Indicator">:</span> <span class="s">&#39;../src/*&#39;</span>
        <span class="c1"># ...</span>

    <span class="c1"># override the services to set the configurator</span>
    <span class="l l-Scalar l-Scalar-Plain">App\Mail\NewsletterManager</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">configurator</span><span class="p p-Indicator">:</span> <span class="s">&#39;@App\Mail\EmailConfigurator&#39;</span>

    <span class="l l-Scalar l-Scalar-Plain">App\Mail\GreetingCardManager</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">configurator</span><span class="p p-Indicator">:</span> <span class="s">&#39;@App\Mail\EmailConfigurator&#39;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="nt">&lt;prototype</span> <span class="na">namespace=</span><span class="s">&quot;App\&quot;</span> <span class="na">resource=</span><span class="s">&quot;../src/*&quot;</span><span class="nt">/&gt;</span>

        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\Mail\NewsletterManager&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;configurator</span> <span class="na">service=</span><span class="s">&quot;App\Mail\EmailConfigurator&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/service&gt;</span>

        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\Mail\GreetingCardManager&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;configurator</span> <span class="na">service=</span><span class="s">&quot;App\Mail\EmailConfigurator&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/service&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Mail\GreetingCardManager</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">App\Mail\NewsletterManager</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$services</span> <span class="o">=</span> <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">services</span><span class="p">();</span>

    <span class="c1">// Registers all 4 classes as services, including App\Mail\EmailConfigurator</span>
    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">load</span><span class="p">(</span><span class="s1">&#39;App\\&#39;</span><span class="p">,</span> <span class="s1">&#39;../src/*&#39;</span><span class="p">);</span>

    <span class="c1">// override the services to set the configurator</span>
    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">NewsletterManager</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">configurator</span><span class="p">(</span><span class="nx">service</span><span class="p">(</span><span class="nx">EmailConfigurator</span><span class="o">::</span><span class="na">class</span><span class="p">));</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">GreetingCardManager</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">configurator</span><span class="p">(</span><span class="nx">service</span><span class="p">(</span><span class="nx">EmailConfigurator</span><span class="o">::</span><span class="na">class</span><span class="p">));</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>That’s it! When requesting the <code class="docutils literal notranslate"><span class="pre">App\Mail\NewsletterManager</span></code> or
<code class="docutils literal notranslate"><span class="pre">App\Mail\GreetingCardManager</span></code> service, the created instance will first be
passed to the <code class="docutils literal notranslate"><span class="pre">EmailConfigurator::configure()</span></code> method.</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>