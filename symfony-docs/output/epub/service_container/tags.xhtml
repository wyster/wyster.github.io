<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Work with Service Tags</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-work-with-service-tags">
<span id="index-0"></span><h1>How to Work with Service Tags</h1>
<p><strong>Service tags</strong> are a way to tell Symfony or other third-party bundles that
your service should be registered in some special way. Take the following
example:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">App\Twig\AppExtension</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">tags</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="s">&#39;twig.extension&#39;</span><span class="p p-Indicator">]</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\Twig\AppExtension&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;tag</span> <span class="na">name=</span><span class="s">&quot;twig.extension&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/service&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Twig\AppExtension</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$services</span> <span class="o">=</span> <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">services</span><span class="p">();</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">AppExtension</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">tag</span><span class="p">(</span><span class="s1">&#39;twig.extension&#39;</span><span class="p">);</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>Services tagged with the <code class="docutils literal notranslate"><span class="pre">twig.extension</span></code> tag are collected during the
initialization of TwigBundle and added to Twig as extensions.</p>
<p>Other tags are used to integrate your services into other systems. For a list of
all the tags available in the core Symfony Framework, check out
<a class="reference internal" href="../reference/dic_tags.xhtml"><span class="doc">Built-in Symfony Service Tags</span></a>. Each of these has a different effect on your service
and many tags require additional arguments (beyond the <code class="docutils literal notranslate"><span class="pre">name</span></code> parameter).</p>
<p><strong>For most users, this is all you need to know</strong>. If you want to go further and
learn how to create your own custom tags, keep reading.</p>
<div class="section" id="autoconfiguring-tags">
<span id="di-instanceof"></span><h2>Autoconfiguring Tags</h2>
<p>If you enable <a class="reference internal" href="../service_container.xhtml#services-autoconfigure"><span class="std std-ref">autoconfigure</span></a>, then some tags are
automatically applied for you. That’s true for the <code class="docutils literal notranslate"><span class="pre">twig.extension</span></code> tag: the
container sees that your class extends <code class="docutils literal notranslate"><span class="pre">AbstractExtension</span></code> (or more accurately,
that it implements <code class="docutils literal notranslate"><span class="pre">ExtensionInterface</span></code>) and adds the tag for you.</p>
<p>If you want to apply tags automatically for your own services, use the
<code class="docutils literal notranslate"><span class="pre">_instanceof</span></code> option:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="c1"># this config only applies to the services created by this file</span>
    <span class="l l-Scalar l-Scalar-Plain">_instanceof</span><span class="p p-Indicator">:</span>
        <span class="c1"># services whose classes are instances of CustomInterface will be tagged automatically</span>
        <span class="l l-Scalar l-Scalar-Plain">App\Security\CustomInterface</span><span class="p p-Indicator">:</span>
            <span class="l l-Scalar l-Scalar-Plain">tags</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="s">&#39;app.custom_tag&#39;</span><span class="p p-Indicator">]</span>
    <span class="c1"># ...</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;services&gt;</span>
        <span class="c">&lt;!-- this config only applies to the services created by this file --&gt;</span>
        <span class="nt">&lt;instanceof</span> <span class="na">id=</span><span class="s">&quot;App\Security\CustomInterface&quot;</span> <span class="na">autowire=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
            <span class="c">&lt;!-- services whose classes are instances of CustomInterface will be tagged automatically --&gt;</span>
            <span class="nt">&lt;tag</span> <span class="na">name=</span><span class="s">&quot;app.custom_tag&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/instanceof&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Security\CustomInterface</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$services</span> <span class="o">=</span> <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">services</span><span class="p">();</span>

    <span class="c1">// this config only applies to the services created by this file</span>
    <span class="nv">$services</span>
        <span class="o">-&gt;</span><span class="na">instanceof</span><span class="p">(</span><span class="nx">CustomInterface</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
            <span class="c1">// services whose classes are instances of CustomInterface will be tagged automatically</span>
            <span class="o">-&gt;</span><span class="na">tag</span><span class="p">(</span><span class="s1">&#39;app.custom_tag&#39;</span><span class="p">);</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>For more advanced needs, you can define the automatic tags using the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/DependencyInjection/ContainerBuilder.php" title="Symfony\Component\DependencyInjection\ContainerBuilder::registerForAutoconfiguration()"><span class="pre">registerForAutoconfiguration()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/DependencyInjection/ContainerBuilder.php]</span></span></code> method.</p>
<p>In a Symfony application, call this method in your kernel class:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Kernel.php</span>
<span class="k">class</span> <span class="nc">Kernel</span> <span class="k">extends</span> <span class="nx">BaseKernel</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="k">protected</span> <span class="k">function</span> <span class="nf">build</span><span class="p">(</span><span class="nx">ContainerBuilder</span> <span class="nv">$container</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="nv">$container</span><span class="o">-&gt;</span><span class="na">registerForAutoconfiguration</span><span class="p">(</span><span class="nx">CustomInterface</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">addTag</span><span class="p">(</span><span class="s1">&#39;app.custom_tag&#39;</span><span class="p">)</span>
        <span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>In a Symfony bundle, call this method in the <code class="docutils literal notranslate"><span class="pre">load()</span></code> method of the
<a class="reference internal" href="../bundles/extension.xhtml"><span class="doc">bundle extension class</span></a>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/DependencyInjection/MyBundleExtension.php</span>
<span class="k">class</span> <span class="nc">MyBundleExtension</span> <span class="k">extends</span> <span class="nx">Extension</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">load</span><span class="p">(</span><span class="k">array</span> <span class="nv">$configs</span><span class="p">,</span> <span class="nx">ContainerBuilder</span> <span class="nv">$container</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="nv">$container</span><span class="o">-&gt;</span><span class="na">registerForAutoconfiguration</span><span class="p">(</span><span class="nx">CustomInterface</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">addTag</span><span class="p">(</span><span class="s1">&#39;app.custom_tag&#39;</span><span class="p">)</span>
        <span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="creating-custom-tags">
<h2>Creating custom Tags</h2>
<p>Tags on their own don’t actually alter the functionality of your services in
any way. But if you choose to, you can ask a container builder for a list of
all services that were tagged with some specific tag. This is useful in
compiler passes where you can find these services and use or modify them in
some specific way.</p>
<p>For example, if you are using Swift Mailer you might imagine that you want
to implement a “transport chain”, which is a collection of classes implementing
<code class="docutils literal notranslate"><span class="pre">\Swift_Transport</span></code>. Using the chain, you’ll want Swift Mailer to try several
ways of transporting the message until one succeeds.</p>
<p>To begin with, define the <code class="docutils literal notranslate"><span class="pre">TransportChain</span></code> class:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Mail/TransportChain.php</span>
<span class="k">namespace</span> <span class="nx">App\Mail</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">TransportChain</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$transports</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">transports</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">addTransport</span><span class="p">(</span><span class="nx">\Swift_Transport</span> <span class="nv">$transport</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">transports</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$transport</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Then, define the chain as a service:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">App\Mail\TransportChain</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">~</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\Mail\TransportChain&quot;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Mail\TransportChain</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$services</span> <span class="o">=</span> <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">services</span><span class="p">();</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">TransportChain</span><span class="o">::</span><span class="na">class</span><span class="p">);</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<div class="section" id="define-services-with-a-custom-tag">
<h3>Define Services with a Custom Tag</h3>
<p>Now you might want several of the <code class="docutils literal notranslate"><span class="pre">\Swift_Transport</span></code> classes to be instantiated
and added to the chain automatically using the <code class="docutils literal notranslate"><span class="pre">addTransport()</span></code> method.
For example, you may add the following transports as services:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">Swift_SmtpTransport</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">arguments</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="s">&#39;%mailer_host%&#39;</span><span class="p p-Indicator">]</span>
        <span class="l l-Scalar l-Scalar-Plain">tags</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="s">&#39;app.mail_transport&#39;</span><span class="p p-Indicator">]</span>

    <span class="l l-Scalar l-Scalar-Plain">Swift_SendmailTransport</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">tags</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="s">&#39;app.mail_transport&#39;</span><span class="p p-Indicator">]</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;Swift_SmtpTransport&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;argument&gt;</span>%mailer_host%<span class="nt">&lt;/argument&gt;</span>

            <span class="nt">&lt;tag</span> <span class="na">name=</span><span class="s">&quot;app.mail_transport&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/service&gt;</span>

        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;Swift_SendmailTransport&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;tag</span> <span class="na">name=</span><span class="s">&quot;app.mail_transport&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/service&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$services</span> <span class="o">=</span> <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">services</span><span class="p">();</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">\Swift_SmtpTransport</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">args</span><span class="p">([</span><span class="s1">&#39;%mailer_host%&#39;</span><span class="p">])</span>
        <span class="o">-&gt;</span><span class="na">tag</span><span class="p">(</span><span class="s1">&#39;app.mail_transport&#39;</span><span class="p">)</span>
    <span class="p">;</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">\Swift_SendmailTransport</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">tag</span><span class="p">(</span><span class="s1">&#39;app.mail_transport&#39;</span><span class="p">)</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>Notice that each service was given a tag named <code class="docutils literal notranslate"><span class="pre">app.mail_transport</span></code>. This is
the custom tag that you’ll use in your compiler pass. The compiler pass is what
makes this tag “mean” something.</p>
</div>
<div class="section" id="create-a-compiler-pass">
<span id="service-container-compiler-pass-tags"></span><h3>Create a Compiler Pass</h3>
<p>You can now use a <a class="reference internal" href="../components/dependency_injection/compilation.xhtml#components-di-separate-compiler-passes"><span class="std std-ref">compiler pass</span></a> to ask the
container for any services with the <code class="docutils literal notranslate"><span class="pre">app.mail_transport</span></code> tag:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/DependencyInjection/Compiler/MailTransportPass.php</span>
<span class="k">namespace</span> <span class="nx">App\DependencyInjection\Compiler</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Mail\TransportChain</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\ContainerBuilder</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\Reference</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">MailTransportPass</span> <span class="k">implements</span> <span class="nx">CompilerPassInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">process</span><span class="p">(</span><span class="nx">ContainerBuilder</span> <span class="nv">$container</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="c1">// always first check if the primary service is defined</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$container</span><span class="o">-&gt;</span><span class="na">has</span><span class="p">(</span><span class="nx">TransportChain</span><span class="o">::</span><span class="na">class</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$definition</span> <span class="o">=</span> <span class="nv">$container</span><span class="o">-&gt;</span><span class="na">findDefinition</span><span class="p">(</span><span class="nx">TransportChain</span><span class="o">::</span><span class="na">class</span><span class="p">);</span>

        <span class="c1">// find all service IDs with the app.mail_transport tag</span>
        <span class="nv">$taggedServices</span> <span class="o">=</span> <span class="nv">$container</span><span class="o">-&gt;</span><span class="na">findTaggedServiceIds</span><span class="p">(</span><span class="s1">&#39;app.mail_transport&#39;</span><span class="p">);</span>

        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$taggedServices</span> <span class="k">as</span> <span class="nv">$id</span> <span class="o">=&gt;</span> <span class="nv">$tags</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// add the transport service to the TransportChain service</span>
            <span class="nv">$definition</span><span class="o">-&gt;</span><span class="na">addMethodCall</span><span class="p">(</span><span class="s1">&#39;addTransport&#39;</span><span class="p">,</span> <span class="p">[</span><span class="k">new</span> <span class="nx">Reference</span><span class="p">(</span><span class="nv">$id</span><span class="p">)]);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="register-the-pass-with-the-container">
<h3>Register the Pass with the Container</h3>
<p>In order to run the compiler pass when the container is compiled, you have to
add the compiler pass to the container in a <a class="reference internal" href="../bundles/extension.xhtml"><span class="doc">bundle extension</span></a>
or from your kernel:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Kernel.php</span>
<span class="k">namespace</span> <span class="nx">App</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\DependencyInjection\Compiler\MailTransportPass</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Kernel</span> <span class="k">as</span> <span class="nx">BaseKernel</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="k">class</span> <span class="nc">Kernel</span> <span class="k">extends</span> <span class="nx">BaseKernel</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="k">protected</span> <span class="k">function</span> <span class="nf">build</span><span class="p">(</span><span class="nx">ContainerBuilder</span> <span class="nv">$container</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="nv">$container</span><span class="o">-&gt;</span><span class="na">addCompilerPass</span><span class="p">(</span><span class="k">new</span> <span class="nx">MailTransportPass</span><span class="p">());</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>When implementing the <code class="docutils literal notranslate"><span class="pre">CompilerPassInterface</span></code> in a service extension, you
do not need to register it. See the
<a class="reference internal" href="../components/dependency_injection/compilation.xhtml#components-di-compiler-pass"><span class="std std-ref">components documentation</span></a> for more
information.</p>
</div>
</div>
<div class="section" id="adding-additional-attributes-on-tags">
<h3>Adding Additional Attributes on Tags</h3>
<p>Sometimes you need additional information about each service that’s tagged
with your tag. For example, you might want to add an alias to each member
of the transport chain.</p>
<p>To begin with, change the <code class="docutils literal notranslate"><span class="pre">TransportChain</span></code> class:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">TransportChain</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$transports</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">transports</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">addTransport</span><span class="p">(</span><span class="nx">\Swift_Transport</span> <span class="nv">$transport</span><span class="p">,</span> <span class="nv">$alias</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">transports</span><span class="p">[</span><span class="nv">$alias</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$transport</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">getTransport</span><span class="p">(</span><span class="nv">$alias</span><span class="p">)</span><span class="o">:</span> <span class="o">?</span><span class="nx">\Swift_Transport</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="nv">$alias</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">transports</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">transports</span><span class="p">[</span><span class="nv">$alias</span><span class="p">];</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>As you can see, when <code class="docutils literal notranslate"><span class="pre">addTransport()</span></code> is called, it takes not only a <code class="docutils literal notranslate"><span class="pre">Swift_Transport</span></code>
object, but also a string alias for that transport. So, how can you allow
each tagged transport service to also supply an alias?</p>
<p>To answer this, change the service declaration:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">Swift_SmtpTransport</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">arguments</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="s">&#39;%mailer_host%&#39;</span><span class="p p-Indicator">]</span>
        <span class="l l-Scalar l-Scalar-Plain">tags</span><span class="p p-Indicator">:</span>
            <span class="p p-Indicator">-</span> <span class="p p-Indicator">{</span> <span class="nv">name</span><span class="p p-Indicator">:</span> <span class="s">&#39;app.mail_transport&#39;</span><span class="p p-Indicator">,</span> <span class="nv">alias</span><span class="p p-Indicator">:</span> <span class="s">&#39;smtp&#39;</span> <span class="p p-Indicator">}</span>

    <span class="l l-Scalar l-Scalar-Plain">Swift_SendmailTransport</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">tags</span><span class="p p-Indicator">:</span>
            <span class="p p-Indicator">-</span> <span class="p p-Indicator">{</span> <span class="nv">name</span><span class="p p-Indicator">:</span> <span class="s">&#39;app.mail_transport&#39;</span><span class="p p-Indicator">,</span> <span class="nv">alias</span><span class="p p-Indicator">:</span> <span class="s">&#39;sendmail&#39;</span> <span class="p p-Indicator">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;Swift_SmtpTransport&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;argument&gt;</span>%mailer_host%<span class="nt">&lt;/argument&gt;</span>

            <span class="nt">&lt;tag</span> <span class="na">name=</span><span class="s">&quot;app.mail_transport&quot;</span> <span class="na">alias=</span><span class="s">&quot;smtp&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/service&gt;</span>

        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;Swift_SendmailTransport&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;tag</span> <span class="na">name=</span><span class="s">&quot;app.mail_transport&quot;</span> <span class="na">alias=</span><span class="s">&quot;sendmail&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/service&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$services</span> <span class="o">=</span> <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">services</span><span class="p">();</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">\Swift_SmtpTransport</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">args</span><span class="p">([</span><span class="s1">&#39;%mailer_host%&#39;</span><span class="p">])</span>
        <span class="o">-&gt;</span><span class="na">tag</span><span class="p">(</span><span class="s1">&#39;app.mail_transport&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;alias&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;smtp&#39;</span><span class="p">])</span>
    <span class="p">;</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">\Swift_SendmailTransport</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">tag</span><span class="p">(</span><span class="s1">&#39;app.mail_transport&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;alias&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;sendmail&#39;</span><span class="p">])</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>In YAML format, you may provide the tag as a simple string as long as
you don’t need to specify additional attributes. The following definitions
are equivalent.</p>
<div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="c1"># Compact syntax</span>
    <span class="l l-Scalar l-Scalar-Plain">Swift_SendmailTransport</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">class</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">\Swift_SendmailTransport</span>
        <span class="l l-Scalar l-Scalar-Plain">tags</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="s">&#39;app.mail_transport&#39;</span><span class="p p-Indicator">]</span>

    <span class="c1"># Verbose syntax</span>
    <span class="l l-Scalar l-Scalar-Plain">Swift_SendmailTransport</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">class</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">\Swift_SendmailTransport</span>
        <span class="l l-Scalar l-Scalar-Plain">tags</span><span class="p p-Indicator">:</span>
            <span class="p p-Indicator">-</span> <span class="p p-Indicator">{</span> <span class="nv">name</span><span class="p p-Indicator">:</span> <span class="s">&#39;app.mail_transport&#39;</span> <span class="p p-Indicator">}</span>
</pre></div>
</td></tr></table></div>
</div>
<p>Notice that you’ve added a generic <code class="docutils literal notranslate"><span class="pre">alias</span></code> key to the tag. To actually
use this, update the compiler:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\ContainerBuilder</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\Reference</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">TransportCompilerPass</span> <span class="k">implements</span> <span class="nx">CompilerPassInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">process</span><span class="p">(</span><span class="nx">ContainerBuilder</span> <span class="nv">$container</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>

        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$taggedServices</span> <span class="k">as</span> <span class="nv">$id</span> <span class="o">=&gt;</span> <span class="nv">$tags</span><span class="p">)</span> <span class="p">{</span>

            <span class="c1">// a service could have the same tag twice</span>
            <span class="k">foreach</span> <span class="p">(</span><span class="nv">$tags</span> <span class="k">as</span> <span class="nv">$attributes</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$definition</span><span class="o">-&gt;</span><span class="na">addMethodCall</span><span class="p">(</span><span class="s1">&#39;addTransport&#39;</span><span class="p">,</span> <span class="p">[</span>
                    <span class="k">new</span> <span class="nx">Reference</span><span class="p">(</span><span class="nv">$id</span><span class="p">),</span>
                    <span class="nv">$attributes</span><span class="p">[</span><span class="s1">&#39;alias&#39;</span><span class="p">]</span>
                <span class="p">]);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The double loop may be confusing. This is because a service can have more
than one tag. You tag a service twice or more with the <code class="docutils literal notranslate"><span class="pre">app.mail_transport</span></code>
tag. The second <code class="docutils literal notranslate"><span class="pre">foreach</span></code> loop iterates over the <code class="docutils literal notranslate"><span class="pre">app.mail_transport</span></code>
tags set for the current service and gives you the attributes.</p>
</div>
<div class="section" id="reference-tagged-services">
<h3>Reference Tagged Services</h3>
<p>Symfony provides a shortcut to inject all services tagged with a specific tag,
which is a common need in some applications, so you don’t have to write a
compiler pass just for that.</p>
<p>In the following example, all services tagged with <code class="docutils literal notranslate"><span class="pre">app.handler</span></code> are passed as
first  constructor argument to the <code class="docutils literal notranslate"><span class="pre">App\HandlerCollection</span></code> service:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">App\Handler\One</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">tags</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="s">&#39;app.handler&#39;</span><span class="p p-Indicator">]</span>

    <span class="l l-Scalar l-Scalar-Plain">App\Handler\Two</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">tags</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="s">&#39;app.handler&#39;</span><span class="p p-Indicator">]</span>

    <span class="l l-Scalar l-Scalar-Plain">App\HandlerCollection</span><span class="p p-Indicator">:</span>
        <span class="c1"># inject all services tagged with app.handler as first argument</span>
        <span class="l l-Scalar l-Scalar-Plain">arguments</span><span class="p p-Indicator">:</span>
            <span class="p p-Indicator">-</span> <span class="kt">!tagged_iterator</span> <span class="l l-Scalar l-Scalar-Plain">app.handler</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\Handler\One&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;tag</span> <span class="na">name=</span><span class="s">&quot;app.handler&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/service&gt;</span>

        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\Handler\Two&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;tag</span> <span class="na">name=</span><span class="s">&quot;app.handler&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/service&gt;</span>

        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\HandlerCollection&quot;</span><span class="nt">&gt;</span>
            <span class="c">&lt;!-- inject all services tagged with app.handler as first argument --&gt;</span>
            <span class="nt">&lt;argument</span> <span class="na">type=</span><span class="s">&quot;tagged_iterator&quot;</span> <span class="na">tag=</span><span class="s">&quot;app.handler&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/service&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$services</span> <span class="o">=</span> <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">services</span><span class="p">();</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">App\Handler\One</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">tag</span><span class="p">(</span><span class="s1">&#39;app.handler&#39;</span><span class="p">)</span>
    <span class="p">;</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">App\Handler\Two</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">tag</span><span class="p">(</span><span class="s1">&#39;app.handler&#39;</span><span class="p">)</span>
    <span class="p">;</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">App\HandlerCollection</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="c1">// inject all services tagged with app.handler as first argument</span>
        <span class="o">-&gt;</span><span class="na">args</span><span class="p">([</span><span class="nx">tagged_iterator</span><span class="p">(</span><span class="s1">&#39;app.handler&#39;</span><span class="p">)])</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>After compilation the <code class="docutils literal notranslate"><span class="pre">HandlerCollection</span></code> service is able to iterate over your
application handlers:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/HandlerCollection.php</span>
<span class="k">namespace</span> <span class="nx">App</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">HandlerCollection</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nx">iterable</span> <span class="nv">$handlers</span><span class="p">)</span>
    <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>See also <a class="reference internal" href="service_subscribers_locators.xhtml"><span class="doc">tagged locator services</span></a></p>
</div>
</div>
<div class="section" id="tagged-services-with-priority">
<h3>Tagged Services with Priority</h3>
<div class="versionadded">
<p><span class="versionmodified">New in version 4.4: </span>The ability to prioritize tagged services was introduced in Symfony 4.4.</p>
</div>
<p>The tagged services can be prioritized using the <code class="docutils literal notranslate"><span class="pre">priority</span></code> attribute.
The priority is a positive or negative integer. The higher the number,
the earlier the tagged service will be located in the collection:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">App\Handler\One</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">tags</span><span class="p p-Indicator">:</span>
            <span class="p p-Indicator">-</span> <span class="p p-Indicator">{</span> <span class="nv">name</span><span class="p p-Indicator">:</span> <span class="s">&#39;app.handler&#39;</span><span class="p p-Indicator">,</span> <span class="nv">priority</span><span class="p p-Indicator">:</span> <span class="nv">20</span> <span class="p p-Indicator">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\Handler\One&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;tag</span> <span class="na">name=</span><span class="s">&quot;app.handler&quot;</span> <span class="na">priority=</span><span class="s">&quot;20&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/service&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Handler\One</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$services</span> <span class="o">=</span> <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">services</span><span class="p">();</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">One</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">tag</span><span class="p">(</span><span class="s1">&#39;app.handler&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;priority&#39;</span> <span class="o">=&gt;</span> <span class="mi">20</span><span class="p">])</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>Another option, which is particularly useful when using autoconfiguring
tags, is to implement the static <code class="docutils literal notranslate"><span class="pre">getDefaultPriority()</span></code> method on the
service itself:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Handler/One.php</span>
<span class="k">namespace</span> <span class="nx">App\Handler</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">One</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">getDefaultPriority</span><span class="p">()</span><span class="o">:</span> <span class="nx">int</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="mi">3</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>If you want to have another method defining the priority
(e.g. <code class="docutils literal notranslate"><span class="pre">getPriority()</span></code> rather than <code class="docutils literal notranslate"><span class="pre">getDefaultPriority()</span></code>),
you can define it in the configuration of the collecting service:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">App\HandlerCollection</span><span class="p p-Indicator">:</span>
        <span class="c1"># inject all services tagged with app.handler as first argument</span>
        <span class="l l-Scalar l-Scalar-Plain">arguments</span><span class="p p-Indicator">:</span>
            <span class="p p-Indicator">-</span> <span class="kt">!tagged_iterator</span> <span class="p p-Indicator">{</span> <span class="nv">tag</span><span class="p p-Indicator">:</span> <span class="nv">app.handler</span><span class="p p-Indicator">,</span> <span class="nv">default_priority_method</span><span class="p p-Indicator">:</span> <span class="nv">getPriority</span> <span class="p p-Indicator">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;services&gt;</span>
        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\HandlerCollection&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;argument</span> <span class="na">type=</span><span class="s">&quot;tagged_iterator&quot;</span> <span class="na">tag=</span><span class="s">&quot;app.handler&quot;</span> <span class="na">default-priority-method=</span><span class="s">&quot;getPriority&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/service&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\Argument\TaggedIteratorArgument</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$services</span> <span class="o">=</span> <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">services</span><span class="p">();</span>

    <span class="c1">// ...</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">App\HandlerCollection</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">args</span><span class="p">([</span>
            <span class="nx">tagged_iterator</span><span class="p">(</span><span class="s1">&#39;app.handler&#39;</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="s1">&#39;getPriority&#39;</span><span class="p">),</span>
        <span class="p">])</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
<div class="section" id="tagged-services-with-index">
<h3>Tagged Services with Index</h3>
<p>If you want to retrieve a specific service within the injected collection
you can use the <code class="docutils literal notranslate"><span class="pre">index_by</span></code> and <code class="docutils literal notranslate"><span class="pre">default_index_method</span></code> options of the
argument in combination with <code class="docutils literal notranslate"><span class="pre">!tagged_iterator</span></code>.</p>
<p>Using the previous example, this service configuration creates a collection
indexed by the <code class="docutils literal notranslate"><span class="pre">key</span></code> attribute:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">App\Handler\One</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">tags</span><span class="p p-Indicator">:</span>
            <span class="p p-Indicator">-</span> <span class="p p-Indicator">{</span> <span class="nv">name</span><span class="p p-Indicator">:</span> <span class="s">&#39;app.handler&#39;</span><span class="p p-Indicator">,</span> <span class="nv">key</span><span class="p p-Indicator">:</span> <span class="s">&#39;handler_one&#39;</span> <span class="p p-Indicator">}</span>

    <span class="l l-Scalar l-Scalar-Plain">App\Handler\Two</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">tags</span><span class="p p-Indicator">:</span>
            <span class="p p-Indicator">-</span> <span class="p p-Indicator">{</span> <span class="nv">name</span><span class="p p-Indicator">:</span> <span class="s">&#39;app.handler&#39;</span><span class="p p-Indicator">,</span> <span class="nv">key</span><span class="p p-Indicator">:</span> <span class="s">&#39;handler_two&#39;</span> <span class="p p-Indicator">}</span>

    <span class="l l-Scalar l-Scalar-Plain">App\HandlerCollection</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">arguments</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="kt">!tagged_iterator</span> <span class="p p-Indicator">{</span> <span class="nv">tag</span><span class="p p-Indicator">:</span> <span class="s">&#39;app.handler&#39;</span><span class="p p-Indicator">,</span> <span class="nv">index_by</span><span class="p p-Indicator">:</span> <span class="s">&#39;key&#39;</span> <span class="p p-Indicator">}]</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\Handler\One&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;tag</span> <span class="na">name=</span><span class="s">&quot;app.handler&quot;</span> <span class="na">key=</span><span class="s">&quot;handler_one&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/service&gt;</span>

        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\Handler\Two&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;tag</span> <span class="na">name=</span><span class="s">&quot;app.handler&quot;</span> <span class="na">key=</span><span class="s">&quot;handler_two&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/service&gt;</span>

        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\HandlerCollection&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;argument</span> <span class="na">type=</span><span class="s">&quot;tagged_iterator&quot;</span> <span class="na">tag=</span><span class="s">&quot;app.handler&quot;</span> <span class="na">index-by=</span><span class="s">&quot;key&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/service&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Handler\One</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">App\Handler\Two</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\Argument\TaggedIteratorArgument</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$services</span> <span class="o">=</span> <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">services</span><span class="p">();</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">One</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">tag</span><span class="p">(</span><span class="s1">&#39;app.handler&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;key&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;handler_one&#39;</span><span class="p">]);</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">Two</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">tag</span><span class="p">(</span><span class="s1">&#39;app.handler&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;key&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;handler_two&#39;</span><span class="p">]);</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">App\HandlerCollection</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">args</span><span class="p">([</span>
            <span class="c1">// 2nd argument is the index attribute name</span>
            <span class="nx">tagged_iterator</span><span class="p">(</span><span class="s1">&#39;app.handler&#39;</span><span class="p">,</span> <span class="s1">&#39;key&#39;</span><span class="p">),</span>
        <span class="p">])</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>After compilation the <code class="docutils literal notranslate"><span class="pre">HandlerCollection</span></code> is able to iterate over your
application handlers. To retrieve a specific service from the iterator, call the
<code class="docutils literal notranslate"><span class="pre">iterator_to_array()</span></code> function and then use the <code class="docutils literal notranslate"><span class="pre">key</span></code> attribute to get the
array element. For example, to retrieve the <code class="docutils literal notranslate"><span class="pre">handler_two</span></code> handler:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Handler/HandlerCollection.php</span>
<span class="k">namespace</span> <span class="nx">App\Handler</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">HandlerCollection</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nx">iterable</span> <span class="nv">$handlers</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$handlers</span> <span class="o">=</span> <span class="nb">iterator_to_array</span><span class="p">(</span><span class="nv">$handlers</span><span class="p">);</span>

        <span class="nv">$handlerTwo</span> <span class="o">=</span> <span class="nv">$handlers</span><span class="p">[</span><span class="s1">&#39;handler_two&#39;</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Just like the priority, you can also implement a static
<code class="docutils literal notranslate"><span class="pre">getDefaultIndexAttributeName()</span></code> method in the handlers and omit the
index attribute (<code class="docutils literal notranslate"><span class="pre">key</span></code>):</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Handler/One.php</span>
<span class="k">namespace</span> <span class="nx">App\Handler</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">One</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">getDefaultIndexName</span><span class="p">()</span><span class="o">:</span> <span class="nx">string</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="s1">&#39;handler_one&#39;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>You also can define the name of the static method to implement on each service
with the <code class="docutils literal notranslate"><span class="pre">default_index_method</span></code> attribute on the tagged argument:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="c1"># ...</span>

    <span class="l l-Scalar l-Scalar-Plain">App\HandlerCollection</span><span class="p p-Indicator">:</span>
        <span class="c1"># use getIndex() instead of getDefaultIndexName()</span>
        <span class="l l-Scalar l-Scalar-Plain">arguments</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="kt">!tagged_iterator</span> <span class="p p-Indicator">{</span> <span class="nv">tag</span><span class="p p-Indicator">:</span> <span class="s">&#39;app.handler&#39;</span><span class="p p-Indicator">,</span> <span class="nv">default_index_method</span><span class="p p-Indicator">:</span> <span class="s">&#39;getIndex&#39;</span> <span class="p p-Indicator">}]</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="c">&lt;!-- ... --!&gt;</span>

<span class="c">        &lt;service id=&quot;App\HandlerCollection&quot;&gt;</span>
<span class="c">            &lt;!-- use getIndex() instead of getDefaultIndexName() --&gt;</span>
            <span class="nt">&lt;argument</span> <span class="na">type=</span><span class="s">&quot;tagged_iterator&quot;</span>
                <span class="na">tag=</span><span class="s">&quot;app.handler&quot;</span>
                <span class="na">default-index-method=</span><span class="s">&quot;someFunctionName&quot;</span>
            <span class="nt">/&gt;</span>
        <span class="nt">&lt;/service&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\HandlerCollection</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\Argument\TaggedIteratorArgument</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$services</span> <span class="o">=</span> <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">services</span><span class="p">();</span>

    <span class="c1">// ...</span>

    <span class="c1">// use getIndex() instead of getDefaultIndexName()</span>
    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">HandlerCollection</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">args</span><span class="p">([</span>
            <span class="nx">tagged_iterator</span><span class="p">(</span><span class="s1">&#39;app.handler&#39;</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="s1">&#39;getIndex&#39;</span><span class="p">),</span>
        <span class="p">])</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>