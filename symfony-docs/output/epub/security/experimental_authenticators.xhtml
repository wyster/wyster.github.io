<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Using the new Authenticator-based Security</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="using-the-new-authenticator-based-security">
<h1>Using the new Authenticator-based Security</h1>
<div class="versionadded">
<p><span class="versionmodified">New in version 5.1: </span>Authenticator-based security was introduced as an
<a class="reference internal" href="../contributing/code/experimental.xhtml"><span class="doc">experimental feature</span></a> in
Symfony 5.1.</p>
</div>
<p>In Symfony 5.1, a new authentication system was introduced. This system
changes the internals of Symfony Security, to make it more extensible
and more understandable.</p>
<div class="section" id="enabling-the-system">
<span id="security-enable-authenticator-manager"></span><h2>Enabling the System</h2>
<p>The authenticator-based system can be enabled using the
<code class="docutils literal notranslate"><span class="pre">enable_authenticator_manager</span></code> setting:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/packages/security.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">security</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">enable_authenticator_manager</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">true</span>
    <span class="c1"># ...</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/packages/security.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="nt">&lt;srv:container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/security&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xmlns:srv=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd</span>
<span class="s">        http://symfony.com/schema/dic/security</span>
<span class="s">        https://symfony.com/schema/dic/security/security-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;config</span> <span class="na">enable-authenticator-manager=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
        <span class="c">&lt;!-- ... --&gt;</span>
    <span class="nt">&lt;/config&gt;</span>
<span class="nt">&lt;/srv:container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/packages/security.php</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;security&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;enable_authenticator_manager&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span>
    <span class="c1">// ...</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>The new system is backwards compatible with the current authentication
system, with some exceptions that will be explained in this article:</p>
<ul class="simple">
<li><p><a class="reference internal" href="#authenticators-removed-anonymous"><span class="std std-ref">Anonymous users no longer exist</span></a></p></li>
<li><p><a class="reference internal" href="#authenticators-required-entry-point"><span class="std std-ref">Configuring the authentication entry point is required when more than one authenticator is used</span></a></p></li>
<li><p><a class="reference internal" href="#authenticators-removed-authentication-providers"><span class="std std-ref">The authentication providers are refactored into Authenticators</span></a></p></li>
</ul>
</div>
<div class="section" id="adding-support-for-unsecured-access-i-e-anonymous-users">
<span id="authenticators-removed-anonymous"></span><h2>Adding Support for Unsecured Access (i.e. Anonymous Users)</h2>
<p>In Symfony, visitors that haven’t yet logged in to your website were called
<a class="reference internal" href="../security.xhtml#firewalls-authentication"><span class="std std-ref">anonymous users</span></a>. The new system no longer
has anonymous authentication. Instead, these sessions are now treated as
unauthenticated (i.e. there is no security token). When using
<code class="docutils literal notranslate"><span class="pre">isGranted()</span></code>, the result will always be <code class="docutils literal notranslate"><span class="pre">false</span></code> (i.e. denied) as this
session is handled as a user without any privileges.</p>
<p>In the <code class="docutils literal notranslate"><span class="pre">access_control</span></code> configuration, you can use the new
<code class="docutils literal notranslate"><span class="pre">PUBLIC_ACCESS</span></code> security attribute to whitelist some routes for
unauthenticated access (e.g. the login page):</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/packages/security.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">security</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">enable_authenticator_manager</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">true</span>

    <span class="c1"># ...</span>
    <span class="l l-Scalar l-Scalar-Plain">access_control</span><span class="p p-Indicator">:</span>
        <span class="c1"># allow unauthenticated users to access the login form</span>
        <span class="p p-Indicator">-</span> <span class="p p-Indicator">{</span> <span class="nv">path</span><span class="p p-Indicator">:</span> <span class="nv">^/admin/login</span><span class="p p-Indicator">,</span> <span class="nv">roles</span><span class="p p-Indicator">:</span> <span class="nv">PUBLIC_ACCESS</span> <span class="p p-Indicator">}</span>

        <span class="c1"># but require authentication for all other admin routes</span>
        <span class="p p-Indicator">-</span> <span class="p p-Indicator">{</span> <span class="nv">path</span><span class="p p-Indicator">:</span> <span class="nv">^/admin</span><span class="p p-Indicator">,</span> <span class="nv">roles</span><span class="p p-Indicator">:</span> <span class="nv">ROLE_ADMIN</span> <span class="p p-Indicator">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/packages/security.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="nt">&lt;srv:container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/security&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xmlns:srv=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd</span>
<span class="s">        http://symfony.com/schema/dic/security</span>
<span class="s">        https://symfony.com/schema/dic/security/security-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;config</span> <span class="na">enable-authenticator-manager=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
        <span class="c">&lt;!-- ... --&gt;</span>

        <span class="nt">&lt;access-control&gt;</span>
            <span class="c">&lt;!-- allow unauthenticated users to access the login form --&gt;</span>
            <span class="nt">&lt;rule</span> <span class="na">path=</span><span class="s">&quot;^/admin/login&quot;</span> <span class="na">role=</span><span class="s">&quot;PUBLIC_ACCESS&quot;</span><span class="nt">/&gt;</span>

            <span class="c">&lt;!-- but require authentication for all other admin routes --&gt;</span>
            <span class="nt">&lt;rule</span> <span class="na">path=</span><span class="s">&quot;^/admin&quot;</span> <span class="na">role=</span><span class="s">&quot;ROLE_ADMIN&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/access-control&gt;</span>
    <span class="nt">&lt;/config&gt;</span>
<span class="nt">&lt;/srv:container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/packages/security.php</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Http\Firewall\AccessListener</span><span class="p">;</span>

<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;security&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;enable_authenticator_manager&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span>

    <span class="c1">// ...</span>
    <span class="s1">&#39;access_control&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="c1">// allow unauthenticated users to access the login form</span>
        <span class="p">[</span><span class="s1">&#39;path&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;^/admin/login&#39;</span><span class="p">,</span> <span class="s1">&#39;roles&#39;</span> <span class="o">=&gt;</span> <span class="nx">AccessListener</span><span class="o">::</span><span class="na">PUBLIC_ACCESS</span><span class="p">],</span>

        <span class="c1">// but require authentication for all other admin routes</span>
        <span class="p">[</span><span class="s1">&#39;path&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;^/admin&#39;</span><span class="p">,</span> <span class="s1">&#39;roles&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;ROLE_ADMIN&#39;</span><span class="p">],</span>
    <span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<div class="section" id="granting-anonymous-users-access-in-a-custom-voter">
<h3>Granting Anonymous Users Access in a Custom Voter</h3>
<div class="versionadded">
<p><span class="versionmodified">New in version 5.2: </span>The <code class="docutils literal notranslate"><span class="pre">NullToken</span></code> class was introduced in Symfony 5.2.</p>
</div>
<p>If you’re using a <a class="reference internal" href="voters.xhtml"><span class="doc">custom voter</span></a>, you can allow
anonymous users access by checking for a special
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Authentication/Token/NullToken.php" title="Symfony\Component\Security\Core\Authentication\Token\NullToken"><span class="pre">NullToken</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Authentication/Token/NullToken.php]</span></span></code>. This token is used
in the voters to represent the unauthenticated access:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Security/PostVoter.php</span>
<span class="k">namespace</span> <span class="nx">App\Security</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Core\Authentication\Token\NullToken</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Core\Authentication\Token\TokenInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Core\Authorization\Voter\Voter</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">PostVoter</span> <span class="k">extends</span> <span class="nx">Voter</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="k">protected</span> <span class="k">function</span> <span class="nf">voteOnAttribute</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$attribute</span><span class="p">,</span> <span class="nv">$subject</span><span class="p">,</span> <span class="nx">TokenInterface</span> <span class="nv">$token</span><span class="p">)</span><span class="o">:</span> <span class="nx">bool</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$token</span> <span class="nx">instanceof</span> <span class="nx">NullToken</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// the user is not authenticated, e.g. only allow them to</span>
            <span class="c1">// see public posts</span>
            <span class="k">return</span> <span class="nv">$subject</span><span class="o">-&gt;</span><span class="na">isPublic</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="configuring-the-authentication-entry-point">
<span id="authenticators-required-entry-point"></span><h2>Configuring the Authentication Entry Point</h2>
<p>Sometimes, one firewall has multiple ways to authenticate (e.g. both a form
login and an API token authentication). In these cases, it is now required
to configure the <em>authentication entry point</em>. The entry point is used to
generate a response when the user is not yet authenticated but tries to access
a page that requires authentication. This can be used for instance to redirect
the user to the login page.</p>
<p>You can configure this using the <code class="docutils literal notranslate"><span class="pre">entry_point</span></code> setting:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/packages/security.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">security</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">enable_authenticator_manager</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">true</span>

    <span class="c1"># ...</span>
    <span class="l l-Scalar l-Scalar-Plain">firewalls</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">main</span><span class="p p-Indicator">:</span>
            <span class="c1"># allow authentication using a form or HTTP basic</span>
            <span class="l l-Scalar l-Scalar-Plain">form_login</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">~</span>
            <span class="l l-Scalar l-Scalar-Plain">http_basic</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">~</span>

            <span class="c1"># configure the form authentication as the entry point for unauthenticated users</span>
            <span class="l l-Scalar l-Scalar-Plain">entry_point</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">form_login</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/packages/security.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="nt">&lt;srv:container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/security&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xmlns:srv=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd</span>
<span class="s">        http://symfony.com/schema/dic/security</span>
<span class="s">        https://symfony.com/schema/dic/security/security-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;config</span> <span class="na">enable-authenticator-manager=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
        <span class="c">&lt;!-- ... --&gt;</span>

        <span class="c">&lt;!-- entry-point: configure the form authentication as the entry</span>
<span class="c">                          point for unauthenticated users --&gt;</span>
        <span class="nt">&lt;firewall</span> <span class="na">name=</span><span class="s">&quot;main&quot;</span>
            <span class="na">entry-point=</span><span class="s">&quot;form_login&quot;</span>
        <span class="nt">&gt;</span>
            <span class="c">&lt;!-- allow authentication using a form or HTTP basic --&gt;</span>
            <span class="nt">&lt;form-login/&gt;</span>
            <span class="nt">&lt;http-basic/&gt;</span>
    <span class="nt">&lt;/config&gt;</span>
<span class="nt">&lt;/srv:container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/packages/security.php</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Http\Firewall\AccessListener</span><span class="p">;</span>

<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;security&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;enable_authenticator_manager&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span>

    <span class="c1">// ...</span>
    <span class="s1">&#39;firewalls&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;main&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
            <span class="c1">// allow authentication using a form or HTTP basic</span>
            <span class="s1">&#39;form_login&#39;</span> <span class="o">=&gt;</span> <span class="k">null</span><span class="p">,</span>
            <span class="s1">&#39;http_basic&#39;</span> <span class="o">=&gt;</span> <span class="k">null</span><span class="p">,</span>

            <span class="c1">// configure the form authentication as the entry point for unauthenticated users</span>
            <span class="s1">&#39;entry_point&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;form_login&#39;</span>
        <span class="p">],</span>
    <span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>You can also create your own authentication entry point by creating a
class that implements
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/EntryPoint/AuthenticationEntryPointInterface.php" title="Symfony\Component\Security\Http\EntryPoint\AuthenticationEntryPointInterface"><span class="pre">AuthenticationEntryPointInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/EntryPoint/AuthenticationEntryPointInterface.php]</span></span></code>.
You can then set <code class="docutils literal notranslate"><span class="pre">entry_point</span></code> to the service id (e.g.
<code class="docutils literal notranslate"><span class="pre">entry_point:</span> <span class="pre">App\Security\CustomEntryPoint</span></code>)</p>
</div>
</div>
<div class="section" id="creating-a-custom-authenticator">
<span id="authenticators-removed-authentication-providers"></span><h2>Creating a Custom Authenticator</h2>
<p>Security traditionally could be extended by writing
<a class="reference internal" href="custom_authentication_provider.xhtml"><span class="doc">custom authentication providers</span></a>.
The authenticator-based system dropped support for these providers and
introduced a new authenticator interface as a base for custom
authentication methods.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p><a class="reference internal" href="guard_authentication.xhtml"><span class="doc">Guard authenticators</span></a> are still
supported in the authenticator-based system. It is however recommended
to also update these when you’re refactoring your application to the
new system. The new authenticator interface has many similarities with the
guard authenticator interface, making the rewrite easier.</p>
</div>
<p>Authenticators should implement the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Authenticator/AuthenticatorInterface.php" title="Symfony\Component\Security\Http\Authenticator\AuthenticatorInterface"><span class="pre">AuthenticatorInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Authenticator/AuthenticatorInterface.php]</span></span></code>.
You can also extend
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Authenticator/AbstractAuthenticator.php" title="Symfony\Component\Security\Http\Authenticator\AbstractAuthenticator"><span class="pre">AbstractAuthenticator</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Authenticator/AbstractAuthenticator.php]</span></span></code>,
which has a default implementation for the <code class="docutils literal notranslate"><span class="pre">createAuthenticatedToken()</span></code>
method that fits most use-cases:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Security/ApiKeyAuthenticator.php</span>
<span class="k">namespace</span> <span class="nx">App\Security</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Entity\User</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Doctrine\ORM\EntityManagerInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\JsonResponse</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Request</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Core\Authentication\Token\TokenInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Core\Exception\AuthenticationException</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Core\Exception\CustomUserMessageAuthenticationException</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Http\Authenticator\AbstractAuthenticator</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Http\Authenticator\Passport\Badge\UserBadge</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Http\Authenticator\Passport\PassportInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Http\Authenticator\Passport\SelfValidatingPassport</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">ApiKeyAuthenticator</span> <span class="k">extends</span> <span class="nx">AbstractAuthenticator</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$entityManager</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nx">EntityManagerInterface</span> <span class="nv">$entityManager</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">entityManager</span> <span class="o">=</span> <span class="nv">$entityManager</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="sd">/**</span>
<span class="sd">     * Called on every request to decide if this authenticator should be</span>
<span class="sd">     * used for the request. Returning `false` will cause this authenticator</span>
<span class="sd">     * to be skipped.</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">supports</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">)</span><span class="o">:</span> <span class="o">?</span><span class="nx">bool</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">headers</span><span class="o">-&gt;</span><span class="na">has</span><span class="p">(</span><span class="s1">&#39;X-AUTH-TOKEN&#39;</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">authenticate</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">)</span><span class="o">:</span> <span class="nx">PassportInterface</span>
    <span class="p">{</span>
        <span class="nv">$apiToken</span> <span class="o">=</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">headers</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;X-AUTH-TOKEN&#39;</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">null</span> <span class="o">===</span> <span class="nv">$apiToken</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// The token header was empty, authentication fails with HTTP Status</span>
            <span class="c1">// Code 401 &quot;Unauthorized&quot;</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nx">CustomUserMessageAuthenticationException</span><span class="p">(</span><span class="s1">&#39;No API token provided&#39;</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="k">new</span> <span class="nx">SelfValidatingPassport</span><span class="p">(</span><span class="k">new</span> <span class="nx">UserBadge</span><span class="p">(</span><span class="nv">$apiToken</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">onAuthenticationSuccess</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">,</span> <span class="nx">TokenInterface</span> <span class="nv">$token</span><span class="p">,</span> <span class="nx">string</span> <span class="nv">$firewallName</span><span class="p">)</span><span class="o">:</span> <span class="o">?</span><span class="nx">Response</span>
    <span class="p">{</span>
        <span class="c1">// on success, let the request continue</span>
        <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">onAuthenticationFailure</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">,</span> <span class="nx">AuthenticationException</span> <span class="nv">$exception</span><span class="p">)</span><span class="o">:</span> <span class="o">?</span><span class="nx">Response</span>
    <span class="p">{</span>
        <span class="nv">$data</span> <span class="o">=</span> <span class="p">[</span>
            <span class="c1">// you may want to customize or obfuscate the message first</span>
            <span class="s1">&#39;message&#39;</span> <span class="o">=&gt;</span> <span class="nb">strtr</span><span class="p">(</span><span class="nv">$exception</span><span class="o">-&gt;</span><span class="na">getMessageKey</span><span class="p">(),</span> <span class="nv">$exception</span><span class="o">-&gt;</span><span class="na">getMessageData</span><span class="p">())</span>

            <span class="c1">// or to translate this message</span>
            <span class="c1">// $this-&gt;translator-&gt;trans($exception-&gt;getMessageKey(), $exception-&gt;getMessageData())</span>
        <span class="p">];</span>

        <span class="k">return</span> <span class="k">new</span> <span class="nx">JsonResponse</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span> <span class="nx">Response</span><span class="o">::</span><span class="na">HTTP_UNAUTHORIZED</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The authenticator can be enabled using the <code class="docutils literal notranslate"><span class="pre">custom_authenticators</span></code> setting:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/packages/security.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">security</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">enable_authenticator_manager</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">true</span>

    <span class="c1"># ...</span>
    <span class="l l-Scalar l-Scalar-Plain">firewalls</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">main</span><span class="p p-Indicator">:</span>
            <span class="l l-Scalar l-Scalar-Plain">custom_authenticators</span><span class="p p-Indicator">:</span>
                <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">App\Security\ApiKeyAuthenticator</span>

            <span class="c1"># don&#39;t forget to also configure the entry_point if the</span>
            <span class="c1"># authenticator implements AuthenticationEntryPointInterface</span>
            <span class="c1"># entry_point: App\Security\CustomFormLoginAuthenticator</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/packages/security.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="nt">&lt;srv:container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/security&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xmlns:srv=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd</span>
<span class="s">        http://symfony.com/schema/dic/security</span>
<span class="s">        https://symfony.com/schema/dic/security/security-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;config</span> <span class="na">enable-authenticator-manager=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
        <span class="c">&lt;!-- ... --&gt;</span>

        <span class="c">&lt;!-- don&#39;t forget to also configure the entry-point if the</span>
<span class="c">             authenticator implements AuthenticatorEntryPointInterface</span>
<span class="c">        &lt;firewall name=&quot;main&quot;</span>
<span class="c">            entry-point=&quot;App\Security\CustomFormLoginAuthenticator&quot;&gt; --&gt;</span>

        <span class="nt">&lt;firewall</span> <span class="na">name=</span><span class="s">&quot;main&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;custom-authenticator&gt;</span>App\Security\ApiKeyAuthenticator<span class="nt">&lt;/custom-authenticator&gt;</span>
        <span class="nt">&lt;/firewall&gt;</span>
    <span class="nt">&lt;/config&gt;</span>
<span class="nt">&lt;/srv:container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/packages/security.php</span>
<span class="k">use</span> <span class="nx">App\Security\ApiKeyAuthenticator</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Http\Firewall\AccessListener</span><span class="p">;</span>

<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;security&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;enable_authenticator_manager&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span>

    <span class="c1">// ...</span>
    <span class="s1">&#39;firewalls&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;main&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
            <span class="s1">&#39;custom_authenticators&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
                <span class="nx">ApiKeyAuthenticator</span><span class="o">::</span><span class="na">class</span><span class="p">,</span>
            <span class="p">],</span>

            <span class="c1">// don&#39;t forget to also configure the entry_point if the</span>
            <span class="c1">// authenticator implements AuthenticatorEntryPointInterface</span>
            <span class="c1">// &#39;entry_point&#39; =&gt; [App\Security\CustomFormLoginAuthenticator::class],</span>
        <span class="p">],</span>
    <span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>The <code class="docutils literal notranslate"><span class="pre">authenticate()</span></code> method is the most important method of the
authenticator. Its job is to extract credentials (e.g. username &amp;
password, or API tokens) from the <code class="docutils literal notranslate"><span class="pre">Request</span></code> object and transform these
into a security
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Authenticator/Passport/Passport.php" title="Symfony\Component\Security\Http\Authenticator\Passport\Passport"><span class="pre">Passport</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Authenticator/Passport/Passport.php]</span></span></code>.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>If you want to customize the login form, you can also extend from the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Authenticator/AbstractLoginFormAuthenticator.php" title="Symfony\Component\Security\Http\Authenticator\AbstractLoginFormAuthenticator"><span class="pre">AbstractLoginFormAuthenticator</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Authenticator/AbstractLoginFormAuthenticator.php]</span></span></code>
class instead.</p>
</div>
<div class="section" id="security-passports">
<h3>Security Passports</h3>
<div class="versionadded">
<p><span class="versionmodified">New in version 5.2: </span>The <code class="docutils literal notranslate"><span class="pre">UserBadge</span></code> was introduced in Symfony 5.2. Prior to 5.2, the user
instance was provided directly to the passport.</p>
</div>
<p>A passport is an object that contains the user that will be authenticated as
well as other pieces of information, like whether a password should be checked
or if “remember me” functionality should be enabled.</p>
<p>The default
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Authenticator/Passport/Passport.php" title="Symfony\Component\Security\Http\Authenticator\Passport\Passport"><span class="pre">Passport</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Authenticator/Passport/Passport.php]</span></span></code>
requires a user and credentials.</p>
<p>Use the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Authenticator/Passport/Badge/UserBadge.php" title="Symfony\Component\Security\Http\Authenticator\Passport\Badge\UserBadge"><span class="pre">UserBadge</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Authenticator/Passport/Badge/UserBadge.php]</span></span></code>
to attach the user to the passport. The <code class="docutils literal notranslate"><span class="pre">UserBadge</span></code> requires a user
identifier (e.g. the username or email), which is used to load the user
using <a class="reference internal" href="../security.xhtml#security-user-providers"><span class="std std-ref">the user provider</span></a>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Security\Http\Authenticator\Passport\Badge\UserBadge</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="nv">$passport</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Passport</span><span class="p">(</span><span class="k">new</span> <span class="nx">UserBadge</span><span class="p">(</span><span class="nv">$email</span><span class="p">),</span> <span class="nv">$credentials</span><span class="p">);</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>You can optionally pass a user loader as second argument to the
<code class="docutils literal notranslate"><span class="pre">UserBadge</span></code>. This callable receives the <code class="docutils literal notranslate"><span class="pre">$userIdentifier</span></code>
and must return a <code class="docutils literal notranslate"><span class="pre">UserInterface</span></code> object (otherwise a
<code class="docutils literal notranslate"><span class="pre">UsernameNotFoundException</span></code> is thrown):</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="nv">$passport</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Passport</span><span class="p">(</span>
    <span class="k">new</span> <span class="nx">UserBadge</span><span class="p">(</span><span class="nv">$email</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$userIdentifier</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">userRepository</span><span class="o">-&gt;</span><span class="na">findOneBy</span><span class="p">([</span><span class="s1">&#39;email&#39;</span> <span class="o">=&gt;</span> <span class="nv">$userIdentifier</span><span class="p">]);</span>
    <span class="p">}),</span>
    <span class="nv">$credentials</span>
<span class="p">);</span>
</pre></div>
</div>
</div>
<p>The following credential classes are supported by default:</p>
<dl>
<dt><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Authenticator/Passport/Credentials/PasswordCredentials.php" title="Symfony\Component\Security\Http\Authenticator\Passport\Credentials\PasswordCredentials"><span class="pre">PasswordCredentials</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Authenticator/Passport/Credentials/PasswordCredentials.php]</span></span></code></dt>
<dd><p>This requires a plaintext <code class="docutils literal notranslate"><span class="pre">$password</span></code>, which is validated using the
<a class="reference internal" href="../security.xhtml#security-encoding-user-password"><span class="std std-ref">password encoder configured for the user</span></a>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Security\Http\Authenticator\Passport\Credentials\PasswordCredentials</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">return</span> <span class="k">new</span> <span class="nx">Passport</span><span class="p">(</span><span class="nv">$user</span><span class="p">,</span> <span class="k">new</span> <span class="nx">PasswordCredentials</span><span class="p">(</span><span class="nv">$plaintextPassword</span><span class="p">));</span>
</pre></div>
</div>
</dd>
<dt><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Authenticator/Passport/Credentials/CustomCredentials.php" title="Symfony\Component\Security\Http\Authenticator\Passport\Credentials\CustomCredentials"><span class="pre">CustomCredentials</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Authenticator/Passport/Credentials/CustomCredentials.php]</span></span></code></dt>
<dd><p>Allows a custom closure to check credentials:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Security\Http\Authenticator\Passport\Credentials\CustomCredentials</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">return</span> <span class="k">new</span> <span class="nx">Passport</span><span class="p">(</span><span class="nv">$user</span><span class="p">,</span> <span class="k">new</span> <span class="nx">CustomCredentials</span><span class="p">(</span>
    <span class="c1">// If this function returns anything else than `true`, the credentials</span>
    <span class="c1">// are marked as invalid.</span>
    <span class="c1">// The $credentials parameter is equal to the next argument of this class</span>
    <span class="k">function</span> <span class="p">(</span><span class="nv">$credentials</span><span class="p">,</span> <span class="nx">UserInterface</span> <span class="nv">$user</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="na">getApiToken</span><span class="p">()</span> <span class="o">===</span> <span class="nv">$credentials</span><span class="p">;</span>
    <span class="p">},</span>

    <span class="c1">// The custom credentials</span>
    <span class="nv">$apiToken</span>
<span class="p">));</span>
</pre></div>
</div>
</dd>
</dl>
<div class="section" id="self-validating-passport">
<h4>Self Validating Passport</h4>
<p>If you don’t need any credentials to be checked (e.g. when using API
tokens), you can use the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Authenticator/Passport/SelfValidatingPassport.php" title="Symfony\Component\Security\Http\Authenticator\Passport\SelfValidatingPassport"><span class="pre">SelfValidatingPassport</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Authenticator/Passport/SelfValidatingPassport.php]</span></span></code>.
This class only requires a <code class="docutils literal notranslate"><span class="pre">UserBadge</span></code> object and optionally <a class="reference internal" href="#passport-badges">Passport
Badges</a>.</p>
</div>
</div>
<div class="section" id="passport-badges">
<h3>Passport Badges</h3>
<p>The <code class="docutils literal notranslate"><span class="pre">Passport</span></code> also optionally allows you to add <em>security badges</em>.
Badges attach more data to the passport (to extend security). By default,
the following badges are supported:</p>
<dl class="simple">
<dt><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Authenticator/Passport/Badge/RememberMeBadge.php" title="Symfony\Component\Security\Http\Authenticator\Passport\Badge\RememberMeBadge"><span class="pre">RememberMeBadge</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Authenticator/Passport/Badge/RememberMeBadge.php]</span></span></code></dt>
<dd><p>When this badge is added to the passport, the authenticator indicates
remember me is supported. Whether remember me is actually used depends
on special <code class="docutils literal notranslate"><span class="pre">remember_me</span></code> configuration. Read
<a class="reference internal" href="remember_me.xhtml"><span class="doc">How to Add “Remember Me” Login Functionality</span></a> for more information.</p>
</dd>
<dt><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Authenticator/Passport/Badge/PasswordUpgradeBadge.php" title="Symfony\Component\Security\Http\Authenticator\Passport\Badge\PasswordUpgradeBadge"><span class="pre">PasswordUpgradeBadge</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Authenticator/Passport/Badge/PasswordUpgradeBadge.php]</span></span></code></dt>
<dd><p>This is used to automatically upgrade the password to a new hash upon
successful login. This badge requires the plaintext password and a
password upgrader (e.g. the user repository). See <a class="reference internal" href="password_migration.xhtml"><span class="doc">How to Migrate a Password Hash</span></a>.</p>
</dd>
<dt><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Authenticator/Passport/Badge/CsrfTokenBadge.php" title="Symfony\Component\Security\Http\Authenticator\Passport\Badge\CsrfTokenBadge"><span class="pre">CsrfTokenBadge</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Authenticator/Passport/Badge/CsrfTokenBadge.php]</span></span></code></dt>
<dd><p>Automatically validates CSRF tokens for this authenticator during
authentication. The constructor requires a token ID (unique per form)
and CSRF token (unique per request). See <a class="reference internal" href="csrf.xhtml"><span class="doc">How to Implement CSRF Protection</span></a>.</p>
</dd>
<dt><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Authenticator/Passport/Badge/PreAuthenticatedUserBadge.php" title="Symfony\Component\Security\Http\Authenticator\Passport\Badge\PreAuthenticatedUserBadge"><span class="pre">PreAuthenticatedUserBadge</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Authenticator/Passport/Badge/PreAuthenticatedUserBadge.php]</span></span></code></dt>
<dd><p>Indicates that this user was pre-authenticated (i.e. before Symfony was
initiated). This skips the
<a class="reference internal" href="user_checkers.xhtml"><span class="doc">pre-authentication user checker</span></a>.</p>
</dd>
</dl>
<div class="versionadded">
<p><span class="versionmodified">New in version 5.2: </span>Since 5.2, the <code class="docutils literal notranslate"><span class="pre">PasswordUpgradeBadge</span></code> is automatically added to
the passport if the passport has <code class="docutils literal notranslate"><span class="pre">PasswordCredentials</span></code>.</p>
</div>
<p>For instance, if you want to add CSRF to your custom authenticator, you
would initialize the passport like this:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Service/LoginAuthenticator.php</span>
<span class="k">namespace</span> <span class="nx">App\Service</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Http\Authenticator\AbstractAuthenticator</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Http\Authenticator\Passport\Badge\CsrfTokenBadge</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Http\Authenticator\Passport\Badge\UserBadge</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Http\Authenticator\Passport\Passport</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Http\Authenticator\Passport\PassportInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">LoginAuthenticator</span> <span class="k">extends</span> <span class="nx">AbstractAuthenticator</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">authenticate</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">)</span><span class="o">:</span> <span class="nx">PassportInterface</span>
    <span class="p">{</span>
        <span class="nv">$password</span> <span class="o">=</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">request</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;password&#39;</span><span class="p">);</span>
        <span class="nv">$username</span> <span class="o">=</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">request</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;username&#39;</span><span class="p">);</span>
        <span class="nv">$csrfToken</span> <span class="o">=</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">request</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;csrf_token&#39;</span><span class="p">);</span>

        <span class="c1">// ... validate no parameter is empty</span>

        <span class="k">return</span> <span class="k">new</span> <span class="nx">Passport</span><span class="p">(</span>
            <span class="k">new</span> <span class="nx">UserBadge</span><span class="p">(</span><span class="nv">$user</span><span class="p">),</span>
            <span class="k">new</span> <span class="nx">PasswordCredentials</span><span class="p">(</span><span class="nv">$password</span><span class="p">),</span>
            <span class="p">[</span><span class="k">new</span> <span class="nx">CsrfTokenBadge</span><span class="p">(</span><span class="s1">&#39;login&#39;</span><span class="p">,</span> <span class="nv">$csrfToken</span><span class="p">)]</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Besides badges, passports can define attributes, which allows the
<code class="docutils literal notranslate"><span class="pre">authenticate()</span></code> method to store arbitrary information in the
passport to access it from other authenticator methods (e.g.
<code class="docutils literal notranslate"><span class="pre">createAuthenticatedToken()</span></code>):</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Http\Authenticator\Passport\Badge\UserBadge</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">LoginAuthenticator</span> <span class="k">extends</span> <span class="nx">AbstractAuthenticator</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">authenticate</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">)</span><span class="o">:</span> <span class="nx">PassportInterface</span>
    <span class="p">{</span>
        <span class="c1">// ... process the request</span>

        <span class="nv">$passport</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SelfValidatingPassport</span><span class="p">(</span><span class="k">new</span> <span class="nx">UserBadge</span><span class="p">(</span><span class="nv">$username</span><span class="p">),</span> <span class="p">[]);</span>

        <span class="c1">// set a custom attribute (e.g. scope)</span>
        <span class="nv">$passport</span><span class="o">-&gt;</span><span class="na">setAttribute</span><span class="p">(</span><span class="s1">&#39;scope&#39;</span><span class="p">,</span> <span class="nv">$oauthScope</span><span class="p">);</span>

        <span class="k">return</span> <span class="nv">$passport</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">createAuthenticatedToken</span><span class="p">(</span><span class="nx">PassportInterface</span> <span class="nv">$passport</span><span class="p">,</span> <span class="nx">string</span> <span class="nv">$firewallName</span><span class="p">)</span><span class="o">:</span> <span class="nx">TokenInterface</span>
    <span class="p">{</span>
        <span class="c1">// read the attribute value</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nx">CustomOauthToken</span><span class="p">(</span><span class="nv">$passport</span><span class="o">-&gt;</span><span class="na">getUser</span><span class="p">(),</span> <span class="nv">$passport</span><span class="o">-&gt;</span><span class="na">getAttribute</span><span class="p">(</span><span class="s1">&#39;scope&#39;</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="versionadded">
<p><span class="versionmodified">New in version 5.2: </span>Passport attributes were introduced in Symfony 5.2.</p>
</div>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>