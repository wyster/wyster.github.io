<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Implement CSRF Protection</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-implement-csrf-protection">
<span id="index-0"></span><h1>How to Implement CSRF Protection</h1>
<p>CSRF - or <a class="reference external" href="https://en.wikipedia.org/wiki/Cross-site_request_forgery">Cross-site request forgery</a><span class="link-target"> [https://en.wikipedia.org/wiki/Cross-site_request_forgery]</span> - is a method by which a malicious
user attempts to make your legitimate users unknowingly submit data that
they don’t intend to submit.</p>
<p>CSRF protection works by adding a hidden field to your form that contains a
value that only you and your user know. This ensures that the user - not some
other entity - is submitting the given data.</p>
<p>Before using the CSRF protection, install it in your project:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require symfony/security-csrf
</pre></div>
</td></tr></table></div>
<p>Then, enable/disable the CSRF protection with the <code class="docutils literal notranslate"><span class="pre">csrf_protection</span></code> option
(see the <a class="reference internal" href="../reference/configuration/framework.xhtml#reference-framework-csrf-protection"><span class="std std-ref">CSRF configuration reference</span></a>
for more information):</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/packages/framework.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">framework</span><span class="p p-Indicator">:</span>
    <span class="c1"># ...</span>
    <span class="l l-Scalar l-Scalar-Plain">csrf_protection</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">~</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/packages/framework.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xmlns:framework=</span><span class="s">&quot;http://symfony.com/schema/dic/symfony&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd</span>
<span class="s">        http://symfony.com/schema/dic/symfony</span>
<span class="s">        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;framework:config&gt;</span>
        <span class="nt">&lt;framework:csrf-protection</span> <span class="na">enabled=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/framework:config&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/packages/framework.php</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;framework&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;csrf_protection&#39;</span> <span class="o">=&gt;</span> <span class="k">null</span><span class="p">,</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>The tokens used for CSRF protection are meant to be different for every user and
they are stored in the session. That’s why a session is started automatically as
soon as you render a form with CSRF protection.</p>
<p id="caching-pages-that-contain-csrf-protected-forms">Moreover, this means that you cannot fully cache pages that include CSRF
protected forms. As an alternative, you can:</p>
<ul class="simple">
<li><p>Embed the form inside an uncached <a class="reference internal" href="../http_cache/esi.xhtml"><span class="doc">ESI fragment</span></a> and
cache the rest of the page contents;</p></li>
<li><p>Cache the entire page and load the form via an uncached AJAX request;</p></li>
<li><p>Cache the entire page and use <a class="reference internal" href="../templating/hinclude.xhtml"><span class="doc">hinclude.js</span></a> to
load the CSRF token with an uncached AJAX request and replace the form
field value with it.</p></li>
</ul>
<div class="section" id="csrf-protection-in-symfony-forms">
<h2>CSRF Protection in Symfony Forms</h2>
<p>Forms created with the Symfony Form component include CSRF tokens by default
and Symfony checks them automatically, so you don’t have to do anything to be
protected against CSRF attacks.</p>
<p id="form-csrf-customization">By default Symfony adds the CSRF token in a hidden field called <code class="docutils literal notranslate"><span class="pre">_token</span></code>, but
this can be customized on a form-by-form basis:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Form/TaskType.php</span>
<span class="k">namespace</span> <span class="nx">App\Form</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">use</span> <span class="nx">App\Entity\Task</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\OptionsResolver\OptionsResolver</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">TaskType</span> <span class="k">extends</span> <span class="nx">AbstractType</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">configureOptions</span><span class="p">(</span><span class="nx">OptionsResolver</span> <span class="nv">$resolver</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$resolver</span><span class="o">-&gt;</span><span class="na">setDefaults</span><span class="p">([</span>
            <span class="s1">&#39;data_class&#39;</span>      <span class="o">=&gt;</span> <span class="nx">Task</span><span class="o">::</span><span class="na">class</span><span class="p">,</span>
            <span class="c1">// enable/disable CSRF protection for this form</span>
            <span class="s1">&#39;csrf_protection&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span>
            <span class="c1">// the name of the hidden HTML field that stores the token</span>
            <span class="s1">&#39;csrf_field_name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;_token&#39;</span><span class="p">,</span>
            <span class="c1">// an arbitrary string used to generate the value of the token</span>
            <span class="c1">// using a different string for each form improves its security</span>
            <span class="s1">&#39;csrf_token_id&#39;</span>   <span class="o">=&gt;</span> <span class="s1">&#39;task_item&#39;</span><span class="p">,</span>
        <span class="p">]);</span>
    <span class="p">}</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>You can also customize the rendering of the CSRF form field creating a custom
<a class="reference internal" href="../form/form_themes.xhtml"><span class="doc">form theme</span></a> and using <code class="docutils literal notranslate"><span class="pre">csrf_token</span></code> as the prefix of
the field (e.g. define <code class="docutils literal notranslate"><span class="pre">{%</span> <span class="pre">block</span> <span class="pre">csrf_token_widget</span> <span class="pre">%}</span> <span class="pre">...</span> <span class="pre">{%</span> <span class="pre">endblock</span> <span class="pre">%}</span></code> to
customize the entire form field contents).</p>
</div>
<div class="section" id="csrf-protection-in-login-forms">
<h2>CSRF Protection in Login Forms</h2>
<p>See <a class="reference internal" href="form_login_setup.xhtml"><span class="doc">How to Build a Login Form</span></a> for a login form that is protected from
CSRF attacks. You can also configure the
<a class="reference internal" href="../reference/configuration/security.xhtml#reference-security-logout-csrf"><span class="std std-ref">CSRF protection for the logout action</span></a>.</p>
</div>
<div class="section" id="generating-and-checking-csrf-tokens-manually">
<span id="csrf-protection-in-html-forms"></span><h2>Generating and Checking CSRF Tokens Manually</h2>
<p>Although Symfony Forms provide automatic CSRF protection by default, you may
need to generate and check CSRF tokens manually for example when using regular
HTML forms not managed by the Symfony Form component.</p>
<p>Consider a HTML form created to allow deleting items. First, use the
<a class="reference internal" href="../reference/twig_reference.xhtml#reference-twig-function-csrf-token"><span class="std std-ref">csrf_token() Twig function</span></a> to
generate a CSRF token in the template and store it as a hidden form field:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="p">&lt;</span><span class="nt">form</span> <span class="na">action</span><span class="o">=</span><span class="s">&quot;</span><span class="cp">{{</span> <span class="nv">url</span><span class="o">(</span><span class="s1">&#39;admin_post_delete&#39;</span><span class="o">,</span> <span class="o">{</span> <span class="nv">id</span><span class="o">:</span> <span class="nv">post.id</span> <span class="o">})</span> <span class="cp">}}</span><span class="s">&quot;</span> <span class="na">method</span><span class="o">=</span><span class="s">&quot;post&quot;</span><span class="p">&gt;</span>
    <span class="c">{# the argument of csrf_token() is an arbitrary string used to generate the token #}</span>
    <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&quot;hidden&quot;</span> <span class="na">name</span><span class="o">=</span><span class="s">&quot;token&quot;</span> <span class="na">value</span><span class="o">=</span><span class="s">&quot;</span><span class="cp">{{</span> <span class="nv">csrf_token</span><span class="o">(</span><span class="s1">&#39;delete-item&#39;</span><span class="o">)</span> <span class="cp">}}</span><span class="s">&quot;</span><span class="p">/&gt;</span>

    <span class="p">&lt;</span><span class="nt">button</span> <span class="na">type</span><span class="o">=</span><span class="s">&quot;submit&quot;</span><span class="p">&gt;</span>Delete item<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
</pre></div>
</td></tr></table></div>
<p>Then, get the value of the CSRF token in the controller action and use the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Controller/AbstractController.php" title="Symfony\Bundle\FrameworkBundle\Controller\AbstractController::isCsrfTokenValid()"><span class="pre">isCsrfTokenValid()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Controller/AbstractController.php]</span></span></code>
to check its validity:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Request</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">delete</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$submittedToken</span> <span class="o">=</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">request</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;token&#39;</span><span class="p">);</span>

    <span class="c1">// &#39;delete-item&#39; is the same value used in the template to generate the token</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">isCsrfTokenValid</span><span class="p">(</span><span class="s1">&#39;delete-item&#39;</span><span class="p">,</span> <span class="nv">$submittedToken</span><span class="p">))</span> <span class="p">{</span>
        <span class="c1">// ... do something, like deleting an object</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>