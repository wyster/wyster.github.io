<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Migrate a Password Hash</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-migrate-a-password-hash">
<span id="index-0"></span><h1>How to Migrate a Password Hash</h1>
<p>In order to protect passwords, it is recommended to store them using the latest
hash algorithms. This means that if a better hash algorithm is supported on your
system, the user’s password should be <em>rehashed</em> using the newer algorithm and
stored. That’s possible with the <code class="docutils literal notranslate"><span class="pre">migrate_from</span></code> option:</p>
<ol class="arabic simple">
<li><p><a class="reference internal" href="#configure-a-new-encoder-using-migrate-from">Configure a new Encoder Using “migrate_from”</a></p></li>
<li><p><a class="reference internal" href="#upgrade-the-password">Upgrade the Password</a></p></li>
<li><p>Optionally, <a class="reference internal" href="#trigger-password-migration-from-a-custom-encoder">Trigger Password Migration From a Custom Encoder</a></p></li>
</ol>
<div class="section" id="configure-a-new-encoder-using-migrate-from">
<h2>Configure a new Encoder Using “migrate_from”</h2>
<p>When a better hashing algorithm becomes available, you should keep the existing
encoder(s), rename it, and then define the new one. Set the <code class="docutils literal notranslate"><span class="pre">migrate_from</span></code> option
on the new encoder to point to the old, legacy encoder(s):</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/packages/security.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">security</span><span class="p p-Indicator">:</span>
    <span class="c1"># ...</span>

    <span class="l l-Scalar l-Scalar-Plain">encoders</span><span class="p p-Indicator">:</span>
        <span class="c1"># an encoder used in the past for some users</span>
        <span class="l l-Scalar l-Scalar-Plain">legacy</span><span class="p p-Indicator">:</span>
            <span class="l l-Scalar l-Scalar-Plain">algorithm</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">sha256</span>
            <span class="l l-Scalar l-Scalar-Plain">encode_as_base64</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">false</span>
            <span class="l l-Scalar l-Scalar-Plain">iterations</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">1</span>

        <span class="l l-Scalar l-Scalar-Plain">App\Entity\User</span><span class="p p-Indicator">:</span>
            <span class="c1"># the new encoder, along with its options</span>
            <span class="l l-Scalar l-Scalar-Plain">algorithm</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">sodium</span>
            <span class="l l-Scalar l-Scalar-Plain">migrate_from</span><span class="p p-Indicator">:</span>
                <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">bcrypt</span> <span class="c1"># uses the &quot;bcrypt&quot; encoder with the default options</span>
                <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">legacy</span> <span class="c1"># uses the &quot;legacy&quot; encoder configured above</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/packages/security.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xmlns:security=</span><span class="s">&quot;http://symfony.com/schema/dic/security&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/security</span>
<span class="s">        https://symfony.com/schema/dic/security/security-1.0.xsd</span>
<span class="s">        http://symfony.com/schema/dic/security</span>
<span class="s">        https://symfony.com/schema/dic/security/security-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;security:config&gt;</span>
        <span class="c">&lt;!-- ... --&gt;</span>

        <span class="nt">&lt;security:encoder</span> <span class="na">class=</span><span class="s">&quot;legacy&quot;</span>
            <span class="na">algorithm=</span><span class="s">&quot;sha256&quot;</span>
            <span class="na">encode-as-base64=</span><span class="s">&quot;false&quot;</span>
            <span class="na">iterations=</span><span class="s">&quot;1&quot;</span>
        <span class="nt">/&gt;</span>

        <span class="c">&lt;!-- algorithm: the new encoder, along with its options --&gt;</span>
        <span class="nt">&lt;security:encoder</span> <span class="na">class=</span><span class="s">&quot;App\Entity\User&quot;</span>
            <span class="na">algorithm=</span><span class="s">&quot;sodium&quot;</span>
        <span class="nt">&gt;</span>
            <span class="c">&lt;!-- uses the bcrypt encoder with the default options --&gt;</span>
            <span class="nt">&lt;security:migrate-from&gt;</span>bcrypt<span class="nt">&lt;/security:migrate-from&gt;</span>

            <span class="c">&lt;!-- uses the legacy encoder configured above --&gt;</span>
            <span class="nt">&lt;security:migrate-from&gt;</span>legacy<span class="nt">&lt;/security:migrate-from&gt;</span>
        <span class="nt">&lt;/security:encoder&gt;</span>
    <span class="nt">&lt;/security:config&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/packages/security.php</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;security&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="c1">// ...</span>

    <span class="s1">&#39;encoders&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;legacy&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
            <span class="s1">&#39;algorithm&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;sha256&#39;</span><span class="p">,</span>
            <span class="s1">&#39;encode_as_base64&#39;</span> <span class="o">=&gt;</span> <span class="k">false</span><span class="p">,</span>
            <span class="s1">&#39;iterations&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
        <span class="p">],</span>

        <span class="s1">&#39;App\Entity\User&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
            <span class="c1">// the new encoder, along with its options</span>
            <span class="s1">&#39;algorithm&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;sodium&#39;</span><span class="p">,</span>
            <span class="s1">&#39;migrate_from&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
                <span class="s1">&#39;bcrypt&#39;</span><span class="p">,</span> <span class="c1">// uses the &quot;bcrypt&quot; encoder with the default options</span>
                <span class="s1">&#39;legacy&#39;</span><span class="p">,</span> <span class="c1">// uses the &quot;legacy&quot; encoder configured above</span>
            <span class="p">],</span>
        <span class="p">],</span>
    <span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>With this setup:</p>
<ul class="simple">
<li><p>New users will be encoded with the new algorithm;</p></li>
<li><p>Whenever a user logs in whose password is still stored using the old algorithm,
Symfony will verify the password with the old algorithm and then rehash
and update the password using the new algorithm.</p></li>
</ul>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The <em>auto</em>, <em>native</em>, <em>bcrypt</em> and <em>argon</em> encoders automatically enable
password migration using the following list of <code class="docutils literal notranslate"><span class="pre">migrate_from</span></code> algorithms:</p>
<ol class="arabic simple">
<li><p><a class="reference internal" href="../reference/configuration/security.xhtml#reference-security-pbkdf2"><span class="std std-ref">PBKDF2</span></a> (which uses <code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/function.hash-pbkdf2.php" title="hash_pbkdf2"><span class="pre">hash_pbkdf2</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/function.hash-pbkdf2.php]</span></span></code>);</p></li>
<li><p>Message digest (which uses <code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/function.hash.php" title="hash"><span class="pre">hash</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/function.hash.php]</span></span></code>)</p></li>
</ol>
<p>Both use the <code class="docutils literal notranslate"><span class="pre">hash_algorithm</span></code> setting as the algorithm. It is recommended to
use <code class="docutils literal notranslate"><span class="pre">migrate_from</span></code> instead of <code class="docutils literal notranslate"><span class="pre">hash_algorithm</span></code>, unless the <em>auto</em>
encoder is used.</p>
</div>
</div>
<div class="section" id="upgrade-the-password">
<h2>Upgrade the Password</h2>
<p>Upon successful login, the Security system checks whether a better algorithm
is available to hash the user’s password. If it is, it’ll hash the correct
password using the new hash. If you use a Guard authenticator, you first need to
<a class="reference internal" href="#provide-the-password-guard"><span class="std std-ref">provide the original password to the Security system</span></a>.</p>
<p>You can enable the upgrade behavior by implementing how this newly hashed
password should be stored:</p>
<ul class="simple">
<li><p><a class="reference internal" href="#upgrade-the-password-doctrine"><span class="std std-ref">When using Doctrine’s entity user provider</span></a></p></li>
<li><p><a class="reference internal" href="#upgrade-the-password-custom-provider"><span class="std std-ref">When using a custom user provider</span></a></p></li>
</ul>
<p>After this, you’re done and passwords are always hashed as secure as possible!</p>
<div class="section" id="provide-the-password-when-using-guard">
<span id="provide-the-password-guard"></span><h3>Provide the Password when using Guard</h3>
<p>When you’re using a custom <a class="reference internal" href="guard_authentication.xhtml"><span class="doc">guard authenticator</span></a>,
you need to implement <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Guard/PasswordAuthenticatedInterface.php" title="Symfony\Component\Security\Guard\PasswordAuthenticatedInterface"><span class="pre">PasswordAuthenticatedInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Guard/PasswordAuthenticatedInterface.php]</span></span></code>.
This interface defines a <code class="docutils literal notranslate"><span class="pre">getPassword()</span></code> method that returns the password
for this login request. This password is used in the migration process:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Security/CustomAuthenticator.php</span>
<span class="k">namespace</span> <span class="nx">App\Security</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Security\Guard\PasswordAuthenticatedInterface</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="k">class</span> <span class="nc">CustomAuthenticator</span> <span class="k">extends</span> <span class="nx">AbstractGuardAuthenticator</span> <span class="k">implements</span> <span class="nx">PasswordAuthenticatedInterface</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">getPassword</span><span class="p">(</span><span class="nv">$credentials</span><span class="p">)</span><span class="o">:</span> <span class="o">?</span><span class="nx">string</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$credentials</span><span class="p">[</span><span class="s1">&#39;password&#39;</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="upgrade-the-password-when-using-doctrine">
<span id="upgrade-the-password-doctrine"></span><h3>Upgrade the Password when using Doctrine</h3>
<p>When using the <a class="reference internal" href="user_provider.xhtml#security-entity-user-provider"><span class="std std-ref">entity user provider</span></a>, implement
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/User/PasswordUpgraderInterface.php" title="Symfony\Component\Security\Core\User\PasswordUpgraderInterface"><span class="pre">PasswordUpgraderInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/User/PasswordUpgraderInterface.php]</span></span></code> in
the <code class="docutils literal notranslate"><span class="pre">UserRepository</span></code> (see <a class="reference external" href="https://www.doctrine-project.org/projects/doctrine-orm/en/current/reference/working-with-objects.html#custom-repositories">the Doctrine docs for information</a><span class="link-target"> [https://www.doctrine-project.org/projects/doctrine-orm/en/current/reference/working-with-objects.html#custom-repositories]</span> on how to
create this class if it’s not already created). This interface implements
storing the newly created password hash:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Repository/UserRepository.php</span>
<span class="k">namespace</span> <span class="nx">App\Repository</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Core\User\PasswordUpgraderInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">UserRepository</span> <span class="k">extends</span> <span class="nx">EntityRepository</span> <span class="k">implements</span> <span class="nx">PasswordUpgraderInterface</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">upgradePassword</span><span class="p">(</span><span class="nx">UserInterface</span> <span class="nv">$user</span><span class="p">,</span> <span class="nx">string</span> <span class="nv">$newEncodedPassword</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="c1">// set the new encoded password on the User object</span>
        <span class="nv">$user</span><span class="o">-&gt;</span><span class="na">setPassword</span><span class="p">(</span><span class="nv">$newEncodedPassword</span><span class="p">);</span>

        <span class="c1">// execute the queries on the database</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getEntityManager</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">flush</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="upgrade-the-password-when-using-a-custom-user-provider">
<span id="upgrade-the-password-custom-provider"></span><h3>Upgrade the Password when using a Custom User Provider</h3>
<p>If you’re using a <a class="reference internal" href="user_provider.xhtml#custom-user-provider"><span class="std std-ref">custom user provider</span></a>, implement the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/User/PasswordUpgraderInterface.php" title="Symfony\Component\Security\Core\User\PasswordUpgraderInterface"><span class="pre">PasswordUpgraderInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/User/PasswordUpgraderInterface.php]</span></span></code> in
the user provider:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Security/UserProvider.php</span>
<span class="k">namespace</span> <span class="nx">App\Security</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Core\User\PasswordUpgraderInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">UserProvider</span> <span class="k">implements</span> <span class="nx">UserProviderInterface</span><span class="p">,</span> <span class="nx">PasswordUpgraderInterface</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">upgradePassword</span><span class="p">(</span><span class="nx">UserInterface</span> <span class="nv">$user</span><span class="p">,</span> <span class="nx">string</span> <span class="nv">$newEncodedPassword</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="c1">// set the new encoded password on the User object</span>
        <span class="nv">$user</span><span class="o">-&gt;</span><span class="na">setPassword</span><span class="p">(</span><span class="nv">$newEncodedPassword</span><span class="p">);</span>

        <span class="c1">// ... store the new password</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="trigger-password-migration-from-a-custom-encoder">
<h2>Trigger Password Migration From a Custom Encoder</h2>
<p>If you’re using a custom password encoder, you can trigger the password
migration by returning <code class="docutils literal notranslate"><span class="pre">true</span></code> in the <code class="docutils literal notranslate"><span class="pre">needsRehash()</span></code> method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Security/CustomPasswordEncoder.php</span>
<span class="k">namespace</span> <span class="nx">App\Security</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Core\Encoder\PasswordEncoderInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">CustomPasswordEncoder</span> <span class="k">implements</span> <span class="nx">PasswordEncoderInterface</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">needsRehash</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$encoded</span><span class="p">)</span><span class="o">:</span> <span class="nx">bool</span>
    <span class="p">{</span>
        <span class="c1">// check whether the current password is hash using an outdated encoder</span>
        <span class="nv">$hashIsOutdated</span> <span class="o">=</span> <span class="o">...</span><span class="p">;</span>

        <span class="k">return</span> <span class="nv">$hashIsOutdated</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>