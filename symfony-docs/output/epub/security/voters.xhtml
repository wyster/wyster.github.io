<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Use Voters to Check User Permissions</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-use-voters-to-check-user-permissions">
<span id="security-custom-voter"></span><span id="index-0"></span><h1>How to Use Voters to Check User Permissions</h1>
<p>Voters are Symfony’s most powerful way of managing permissions. They allow you
to centralize all permission logic, then reuse them in many places.</p>
<p>However, if you don’t reuse permissions or your rules are basic, you can always
put that logic directly into your controller instead. Here’s an example how
this could look like, if you want to make a route accessible to the “owner” only:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/PostController.php</span>
<span class="c1">// ...</span>

<span class="c1">// inside your controller action</span>
<span class="k">if</span> <span class="p">(</span><span class="nv">$post</span><span class="o">-&gt;</span><span class="na">getOwner</span><span class="p">()</span> <span class="o">!==</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getUser</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createAccessDeniedException</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</div>
<p>In that sense, the following example used throughout this page is a minimal
example for voters.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Take a look at the
<a class="reference internal" href="../components/security/authorization.xhtml"><span class="doc">authorization</span></a>
article for an even deeper understanding on voters.</p>
</div>
<p>Here’s how Symfony works with voters:
All voters are called each time you use the <code class="docutils literal notranslate"><span class="pre">isGranted()</span></code> method on Symfony’s
authorization checker or call <code class="docutils literal notranslate"><span class="pre">denyAccessUnlessGranted()</span></code> in a controller (which
uses the authorization checker), or by
<a class="reference internal" href="access_control.xhtml#security-access-control-enforcement-options"><span class="std std-ref">access controls</span></a>.</p>
<p>Ultimately, Symfony takes the responses from all voters and makes the final
decision (to allow or deny access to the resource) according to the strategy defined
in the application, which can be: affirmative, consensus or unanimous.</p>
<p>For more information take a look at
<a class="reference internal" href="../components/security/authorization.xhtml#components-security-access-decision-manager"><span class="std std-ref">the section about access decision managers</span></a>.</p>
<div class="section" id="the-voter-interface">
<h2>The Voter Interface</h2>
<p>A custom voter needs to implement
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Authorization/Voter/VoterInterface.php" title="Symfony\Component\Security\Core\Authorization\Voter\VoterInterface"><span class="pre">VoterInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Authorization/Voter/VoterInterface.php]</span></span></code>
or extend <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Authorization/Voter/Voter.php" title="Symfony\Component\Security\Core\Authorization\Voter\Voter"><span class="pre">Voter</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Authorization/Voter/Voter.php]</span></span></code>,
which makes creating a voter even easier:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Security\Core\Authentication\Token\TokenInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Core\Authorization\Voter\VoterInterface</span><span class="p">;</span>

<span class="k">abstract</span> <span class="k">class</span> <span class="nc">Voter</span> <span class="k">implements</span> <span class="nx">VoterInterface</span>
<span class="p">{</span>
    <span class="k">abstract</span> <span class="k">protected</span> <span class="k">function</span> <span class="nf">supports</span><span class="p">(</span><span class="nv">$attribute</span><span class="p">,</span> <span class="nv">$subject</span><span class="p">);</span>
    <span class="k">abstract</span> <span class="k">protected</span> <span class="k">function</span> <span class="nf">voteOnAttribute</span><span class="p">(</span><span class="nv">$attribute</span><span class="p">,</span> <span class="nv">$subject</span><span class="p">,</span> <span class="nx">TokenInterface</span> <span class="nv">$token</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="setup-checking-for-access-in-a-controller">
<span id="how-to-use-the-voter-in-a-controller"></span><h2>Setup: Checking for Access in a Controller</h2>
<p>Suppose you have a <code class="docutils literal notranslate"><span class="pre">Post</span></code> object and you need to decide whether or not the current
user can <em>edit</em> or <em>view</em> the object. In your controller, you’ll check access with
code like this:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/PostController.php</span>
<span class="c1">// ...</span>

<span class="k">class</span> <span class="nc">PostController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @Route(&quot;/posts/{id}&quot;, name=&quot;post_show&quot;)</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">show</span><span class="p">(</span><span class="nv">$id</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// get a Post object - e.g. query for it</span>
        <span class="nv">$post</span> <span class="o">=</span> <span class="o">...</span><span class="p">;</span>

        <span class="c1">// check for &quot;view&quot; access: calls all voters</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">denyAccessUnlessGranted</span><span class="p">(</span><span class="s1">&#39;view&#39;</span><span class="p">,</span> <span class="nv">$post</span><span class="p">);</span>

        <span class="c1">// ...</span>
    <span class="p">}</span>

    <span class="sd">/**</span>
<span class="sd">     * @Route(&quot;/posts/{id}/edit&quot;, name=&quot;post_edit&quot;)</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">edit</span><span class="p">(</span><span class="nv">$id</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// get a Post object - e.g. query for it</span>
        <span class="nv">$post</span> <span class="o">=</span> <span class="o">...</span><span class="p">;</span>

        <span class="c1">// check for &quot;edit&quot; access: calls all voters</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">denyAccessUnlessGranted</span><span class="p">(</span><span class="s1">&#39;edit&#39;</span><span class="p">,</span> <span class="nv">$post</span><span class="p">);</span>

        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The <code class="docutils literal notranslate"><span class="pre">denyAccessUnlessGranted()</span></code> method (and also the <code class="docutils literal notranslate"><span class="pre">isGranted()</span></code> method)
calls out to the “voter” system. Right now, no voters will vote on whether or not
the user can “view” or “edit” a <code class="docutils literal notranslate"><span class="pre">Post</span></code>. But you can create your <em>own</em> voter that
decides this using whatever logic you want.</p>
</div>
<div class="section" id="creating-the-custom-voter">
<h2>Creating the custom Voter</h2>
<p>Suppose the logic to decide if a user can “view” or “edit” a <code class="docutils literal notranslate"><span class="pre">Post</span></code> object is
pretty complex. For example, a <code class="docutils literal notranslate"><span class="pre">User</span></code> can always edit or view a <code class="docutils literal notranslate"><span class="pre">Post</span></code> they created.
And if a <code class="docutils literal notranslate"><span class="pre">Post</span></code> is marked as “public”, anyone can view it. A voter for this situation
would look like this:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Security/PostVoter.php</span>
<span class="k">namespace</span> <span class="nx">App\Security</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Entity\Post</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">App\Entity\User</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Core\Authentication\Token\TokenInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Core\Authorization\Voter\Voter</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">PostVoter</span> <span class="k">extends</span> <span class="nx">Voter</span>
<span class="p">{</span>
    <span class="c1">// these strings are just invented: you can use anything</span>
    <span class="k">const</span> <span class="no">VIEW</span> <span class="o">=</span> <span class="s1">&#39;view&#39;</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">EDIT</span> <span class="o">=</span> <span class="s1">&#39;edit&#39;</span><span class="p">;</span>

    <span class="k">protected</span> <span class="k">function</span> <span class="nf">supports</span><span class="p">(</span><span class="nv">$attribute</span><span class="p">,</span> <span class="nv">$subject</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// if the attribute isn&#39;t one we support, return false</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">in_array</span><span class="p">(</span><span class="nv">$attribute</span><span class="p">,</span> <span class="p">[</span><span class="nx">self</span><span class="o">::</span><span class="na">VIEW</span><span class="p">,</span> <span class="nx">self</span><span class="o">::</span><span class="na">EDIT</span><span class="p">]))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// only vote on `Post` objects</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$subject</span> <span class="nx">instanceof</span> <span class="nx">Post</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">protected</span> <span class="k">function</span> <span class="nf">voteOnAttribute</span><span class="p">(</span><span class="nv">$attribute</span><span class="p">,</span> <span class="nv">$subject</span><span class="p">,</span> <span class="nx">TokenInterface</span> <span class="nv">$token</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$user</span> <span class="o">=</span> <span class="nv">$token</span><span class="o">-&gt;</span><span class="na">getUser</span><span class="p">();</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$user</span> <span class="nx">instanceof</span> <span class="nx">User</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// the user must be logged in; if not, deny access</span>
            <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// you know $subject is a Post object, thanks to `supports()`</span>
        <span class="sd">/** @var Post $post */</span>
        <span class="nv">$post</span> <span class="o">=</span> <span class="nv">$subject</span><span class="p">;</span>

        <span class="k">switch</span> <span class="p">(</span><span class="nv">$attribute</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">case</span> <span class="nx">self</span><span class="o">::</span><span class="na">VIEW</span><span class="o">:</span>
                <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">canView</span><span class="p">(</span><span class="nv">$post</span><span class="p">,</span> <span class="nv">$user</span><span class="p">);</span>
            <span class="k">case</span> <span class="nx">self</span><span class="o">::</span><span class="na">EDIT</span><span class="o">:</span>
                <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">canEdit</span><span class="p">(</span><span class="nv">$post</span><span class="p">,</span> <span class="nv">$user</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">throw</span> <span class="k">new</span> <span class="nx">\LogicException</span><span class="p">(</span><span class="s1">&#39;This code should not be reached!&#39;</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">function</span> <span class="nf">canView</span><span class="p">(</span><span class="nx">Post</span> <span class="nv">$post</span><span class="p">,</span> <span class="nx">User</span> <span class="nv">$user</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// if they can edit, they can view</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">canEdit</span><span class="p">(</span><span class="nv">$post</span><span class="p">,</span> <span class="nv">$user</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// the Post object could have, for example, a method `isPrivate()`</span>
        <span class="k">return</span> <span class="o">!</span><span class="nv">$post</span><span class="o">-&gt;</span><span class="na">isPrivate</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">function</span> <span class="nf">canEdit</span><span class="p">(</span><span class="nx">Post</span> <span class="nv">$post</span><span class="p">,</span> <span class="nx">User</span> <span class="nv">$user</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// this assumes that the Post object has a `getOwner()` method</span>
        <span class="k">return</span> <span class="nv">$user</span> <span class="o">===</span> <span class="nv">$post</span><span class="o">-&gt;</span><span class="na">getOwner</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>That’s it! The voter is done! Next, <a class="reference internal" href="#declaring-the-voter-as-a-service"><span class="std std-ref">configure it</span></a>.</p>
<p>To recap, here’s what’s expected from the two abstract methods:</p>
<dl class="simple">
<dt><code class="docutils literal notranslate"><span class="pre">Voter::supports($attribute,</span> <span class="pre">$subject)</span></code></dt>
<dd><p>When <code class="docutils literal notranslate"><span class="pre">isGranted()</span></code> (or <code class="docutils literal notranslate"><span class="pre">denyAccessUnlessGranted()</span></code>) is called, the first
argument is passed here as <code class="docutils literal notranslate"><span class="pre">$attribute</span></code> (e.g. <code class="docutils literal notranslate"><span class="pre">ROLE_USER</span></code>, <code class="docutils literal notranslate"><span class="pre">edit</span></code>) and
the second argument (if any) is passed as <code class="docutils literal notranslate"><span class="pre">$subject</span></code> (e.g. <code class="docutils literal notranslate"><span class="pre">null</span></code>, a <code class="docutils literal notranslate"><span class="pre">Post</span></code>
object). Your job is to determine if your voter should vote on the attribute/subject
combination. If you return true, <code class="docutils literal notranslate"><span class="pre">voteOnAttribute()</span></code> will be called. Otherwise,
your voter is done: some other voter should process this. In this example, you
return <code class="docutils literal notranslate"><span class="pre">true</span></code> if the attribute is <code class="docutils literal notranslate"><span class="pre">view</span></code> or <code class="docutils literal notranslate"><span class="pre">edit</span></code> and if the object is
a <code class="docutils literal notranslate"><span class="pre">Post</span></code> instance.</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">voteOnAttribute($attribute,</span> <span class="pre">$subject,</span> <span class="pre">TokenInterface</span> <span class="pre">$token)</span></code></dt>
<dd><p>If you return <code class="docutils literal notranslate"><span class="pre">true</span></code> from <code class="docutils literal notranslate"><span class="pre">supports()</span></code>, then this method is called. Your
job is to return <code class="docutils literal notranslate"><span class="pre">true</span></code> to allow access and <code class="docutils literal notranslate"><span class="pre">false</span></code> to deny access.
The <code class="docutils literal notranslate"><span class="pre">$token</span></code> can be used to find the current user object (if any). In this
example, all of the complex business logic is included to determine access.</p>
</dd>
</dl>
</div>
<div class="section" id="configuring-the-voter">
<span id="declaring-the-voter-as-a-service"></span><h2>Configuring the Voter</h2>
<p>To inject the voter into the security layer, you must declare it as a service
and tag it with <code class="docutils literal notranslate"><span class="pre">security.voter</span></code>. But if you’re using the
<a class="reference internal" href="../service_container.xhtml#service-container-services-load-example"><span class="std std-ref">default services.yaml configuration</span></a>,
that’s done automatically for you! When you
<a class="reference internal" href="#how-to-use-the-voter-in-a-controller"><span class="std std-ref">call isGranted() with view/edit and pass a Post object</span></a>,
your voter will be called and you can control access.</p>
</div>
<div class="section" id="checking-for-roles-inside-a-voter">
<h2>Checking for Roles inside a Voter</h2>
<p>What if you want to call <code class="docutils literal notranslate"><span class="pre">isGranted()</span></code> from <em>inside</em> your voter - e.g. you want
to see if the current user has <code class="docutils literal notranslate"><span class="pre">ROLE_SUPER_ADMIN</span></code>. That’s possible by injecting
the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Security.php" title="Symfony\Component\Security\Core\Security"><span class="pre">Security</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Security.php]</span></span></code>
into your voter. You can use this to, for example, <em>always</em> allow access to a user
with <code class="docutils literal notranslate"><span class="pre">ROLE_SUPER_ADMIN</span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Security/PostVoter.php</span>

<span class="c1">// ...</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Core\Security</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">PostVoter</span> <span class="k">extends</span> <span class="nx">Voter</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="k">private</span> <span class="nv">$security</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nx">Security</span> <span class="nv">$security</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">security</span> <span class="o">=</span> <span class="nv">$security</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">protected</span> <span class="k">function</span> <span class="nf">voteOnAttribute</span><span class="p">(</span><span class="nv">$attribute</span><span class="p">,</span> <span class="nv">$subject</span><span class="p">,</span> <span class="nx">TokenInterface</span> <span class="nv">$token</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>

        <span class="c1">// ROLE_SUPER_ADMIN can do anything! The power!</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">security</span><span class="o">-&gt;</span><span class="na">isGranted</span><span class="p">(</span><span class="s1">&#39;ROLE_SUPER_ADMIN&#39;</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// ... all the normal voter logic</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>If you’re using the <a class="reference internal" href="../service_container.xhtml#service-container-services-load-example"><span class="std std-ref">default services.yaml configuration</span></a>,
you’re done! Symfony will automatically pass the <code class="docutils literal notranslate"><span class="pre">security.helper</span></code>
service when instantiating your voter (thanks to autowiring).</p>
</div>
<div class="section" id="changing-the-access-decision-strategy">
<span id="security-voters-change-strategy"></span><h2>Changing the Access Decision Strategy</h2>
<p>Normally, only one voter will vote at any given time (the rest will “abstain”, which
means they return <code class="docutils literal notranslate"><span class="pre">false</span></code> from <code class="docutils literal notranslate"><span class="pre">supports()</span></code>). But in theory, you could make multiple
voters vote for one action and object. For instance, suppose you have one voter that
checks if the user is a member of the site and a second one that checks if the user
is older than 18.</p>
<p>To handle these cases, the access decision manager uses a “strategy” which you can configure.
There are three strategies available:</p>
<dl class="simple">
<dt><code class="docutils literal notranslate"><span class="pre">affirmative</span></code> (default)</dt>
<dd><p>This grants access as soon as there is <em>one</em> voter granting access;</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">consensus</span></code></dt>
<dd><p>This grants access if there are more voters granting access than denying;</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">unanimous</span></code></dt>
<dd><p>This only grants access if there is no voter denying access. If all voters
abstained from voting, the decision is based on the <code class="docutils literal notranslate"><span class="pre">allow_if_all_abstain</span></code>
config option (which defaults to <code class="docutils literal notranslate"><span class="pre">false</span></code>).</p>
</dd>
</dl>
<p>In the above scenario, both voters should grant access in order to grant access
to the user to read the post. In this case, the default strategy is no longer
valid and <code class="docutils literal notranslate"><span class="pre">unanimous</span></code> should be used instead. You can set this in the
security configuration:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/packages/security.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">security</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">access_decision_manager</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">strategy</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">unanimous</span>
        <span class="l l-Scalar l-Scalar-Plain">allow_if_all_abstain</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">false</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/packages/security.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;srv:container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/security&quot;</span>
    <span class="na">xmlns:srv=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span>
<span class="nt">&gt;</span>

    <span class="nt">&lt;config&gt;</span>
        <span class="nt">&lt;access-decision-manager</span> <span class="na">strategy=</span><span class="s">&quot;unanimous&quot;</span> <span class="na">allow-if-all-abstain=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/config&gt;</span>
<span class="nt">&lt;/srv:container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/packages/security.php</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;security&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;access_decision_manager&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;strategy&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;unanimous&#39;</span><span class="p">,</span>
        <span class="s1">&#39;allow_if_all_abstain&#39;</span> <span class="o">=&gt;</span> <span class="k">false</span><span class="p">,</span>
    <span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<div class="section" id="custom-access-decision-strategy">
<h3>Custom Access Decision Strategy</h3>
<p>If none of the built-in strategies fits your use case, define the <code class="docutils literal notranslate"><span class="pre">service</span></code>
option to use a custom service as the Access Decision Manager (your service
must implement the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Authorization/AccessDecisionManagerInterface.php" title="Symfony\Component\Security\Core\Authorization\AccessDecisionManagerInterface"><span class="pre">AccessDecisionManagerInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Authorization/AccessDecisionManagerInterface.php]</span></span></code>):</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/packages/security.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">security</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">access_decision_manager</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">service</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">App\Security\MyCustomAccessDecisionManager</span>
        <span class="c1"># ...</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/packages/security.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;srv:container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/security&quot;</span>
    <span class="na">xmlns:srv=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span>
<span class="nt">&gt;</span>

    <span class="nt">&lt;config&gt;</span>
        <span class="nt">&lt;access-decision-manager</span>
            <span class="na">service=</span><span class="s">&quot;App\Security\MyCustomAccessDecisionManager&quot;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/config&gt;</span>
<span class="nt">&lt;/srv:container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/packages/security.php</span>
<span class="k">use</span> <span class="nx">App\Security\MyCustomAccessDecisionManager</span><span class="p">;</span>

<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;security&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;access_decision_manager&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;service&#39;</span> <span class="o">=&gt;</span> <span class="nx">MyCustomAccessDecisionManager</span><span class="o">::</span><span class="na">class</span><span class="p">,</span>
        <span class="c1">// ...</span>
    <span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>