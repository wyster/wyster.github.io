<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Create a SOAP Web Service in a Symfony Controller</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-create-a-soap-web-service-in-a-symfony-controller">
<span id="how-to-create-a-soap-web-service-in-a-symfony2-controller"></span><span id="index-0"></span><h1>How to Create a SOAP Web Service in a Symfony Controller</h1>
<p>Setting up a controller to act as a SOAP server is aided by a couple
tools. Those tools expect you to have the <a class="reference external" href="https://www.php.net/manual/en/book.soap.php">PHP SOAP</a><span class="link-target"> [https://www.php.net/manual/en/book.soap.php]</span> extension installed.
As the PHP SOAP extension cannot currently generate a WSDL, you must either
create one from scratch or use a 3rd party generator.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>There are several SOAP server implementations available for use with
PHP. <a class="reference external" href="https://docs.laminas.dev/laminas-soap/server/">Laminas SOAP</a><span class="link-target"> [https://docs.laminas.dev/laminas-soap/server/]</span> and <a class="reference external" href="https://sourceforge.net/projects/nusoap">NuSOAP</a><span class="link-target"> [https://sourceforge.net/projects/nusoap]</span> are two examples. Although the PHP SOAP
extension is used in these examples, the general idea should still
be applicable to other implementations.</p>
</div>
<p>SOAP works by exposing the methods of a PHP object to an external entity
(i.e. the person using the SOAP service). To start, create a class - <code class="docutils literal notranslate"><span class="pre">HelloService</span></code> -
which represents the functionality that you’ll expose in your SOAP service.
In this case, the SOAP service will allow the client to call a method called
<code class="docutils literal notranslate"><span class="pre">hello</span></code>, which happens to send an email:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Service/HelloService.php</span>
<span class="k">namespace</span> <span class="nx">App\Service</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">HelloService</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$mailer</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nx">\Swift_Mailer</span> <span class="nv">$mailer</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mailer</span> <span class="o">=</span> <span class="nv">$mailer</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">hello</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span>
    <span class="p">{</span>

        <span class="nv">$message</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\Swift_Message</span><span class="p">(</span><span class="s1">&#39;Hello Service&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">setTo</span><span class="p">(</span><span class="s1">&#39;me@example.com&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">setBody</span><span class="p">(</span><span class="nv">$name</span><span class="o">.</span><span class="s1">&#39; says hi!&#39;</span><span class="p">);</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mailer</span><span class="o">-&gt;</span><span class="na">send</span><span class="p">(</span><span class="nv">$message</span><span class="p">);</span>

        <span class="k">return</span> <span class="s1">&#39;Hello, &#39;</span><span class="o">.</span><span class="nv">$name</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Next, make sure that your new class is registered as a service. If you’re using
the <a class="reference internal" href="../service_container.xhtml#service-container-services-load-example"><span class="std std-ref">default services configuration</span></a>,
you don’t need to do anything!</p>
<p>Finally, below is an example of a controller that is capable of handling a SOAP
request. Because <code class="docutils literal notranslate"><span class="pre">index()</span></code> is accessible via <code class="docutils literal notranslate"><span class="pre">/soap</span></code>, the WSDL document
can be retrieved via <code class="docutils literal notranslate"><span class="pre">/soap?wsdl</span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/HelloServiceController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Service\HelloService</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Annotation\Route</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">HelloServiceController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @Route(&quot;/soap&quot;)</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">(</span><span class="nx">HelloService</span> <span class="nv">$helloService</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$soapServer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\SoapServer</span><span class="p">(</span><span class="s1">&#39;/path/to/hello.wsdl&#39;</span><span class="p">);</span>
        <span class="nv">$soapServer</span><span class="o">-&gt;</span><span class="na">setObject</span><span class="p">(</span><span class="nv">$helloService</span><span class="p">);</span>

        <span class="nv">$response</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">();</span>
        <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">headers</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;text/xml; charset=ISO-8859-1&#39;</span><span class="p">);</span>

        <span class="nb">ob_start</span><span class="p">();</span>
        <span class="nv">$soapServer</span><span class="o">-&gt;</span><span class="na">handle</span><span class="p">();</span>
        <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">setContent</span><span class="p">(</span><span class="nb">ob_get_clean</span><span class="p">());</span>

        <span class="k">return</span> <span class="nv">$response</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Take note of the calls to <code class="docutils literal notranslate"><span class="pre">ob_start()</span></code> and <code class="docutils literal notranslate"><span class="pre">ob_get_clean()</span></code>. These
methods control <a class="reference external" href="https://www.php.net/manual/en/book.outcontrol.php">output buffering</a><span class="link-target"> [https://www.php.net/manual/en/book.outcontrol.php]</span> which allows you to “trap” the echoed
output of <code class="docutils literal notranslate"><span class="pre">$server-&gt;handle()</span></code>. This is necessary because Symfony expects
your controller to return a <code class="docutils literal notranslate"><span class="pre">Response</span></code> object with the output as its “content”.
You must also remember to set the <code class="docutils literal notranslate"><span class="pre">&quot;Content-Type&quot;</span></code> header to <code class="docutils literal notranslate"><span class="pre">&quot;text/xml&quot;</span></code>, as
this is what the client will expect. So, you use <code class="docutils literal notranslate"><span class="pre">ob_start()</span></code> to start
buffering the STDOUT and use <code class="docutils literal notranslate"><span class="pre">ob_get_clean()</span></code> to dump the echoed output
into the content of the Response and clear the output buffer. Finally, you’re
ready to return the <code class="docutils literal notranslate"><span class="pre">Response</span></code>.</p>
<p>Below is an example calling the service using a <a class="reference external" href="https://sourceforge.net/projects/nusoap">NuSOAP</a><span class="link-target"> [https://sourceforge.net/projects/nusoap]</span> client. This example
assumes that the <code class="docutils literal notranslate"><span class="pre">index()</span></code> method in the controller above is accessible via
the route <code class="docutils literal notranslate"><span class="pre">/soap</span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$soapClient</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\SoapClient</span><span class="p">(</span><span class="s1">&#39;http://example.com/index.php/soap?wsdl&#39;</span><span class="p">);</span>

<span class="nv">$result</span> <span class="o">=</span> <span class="nv">$soapClient</span><span class="o">-&gt;</span><span class="na">call</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Scott&#39;</span><span class="p">]);</span>
</pre></div>
</div>
<p>An example WSDL is below.</p>
<div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span>
<span class="nt">&lt;definitions</span> <span class="na">xmlns:SOAP-ENV=</span><span class="s">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span>
    <span class="na">xmlns:xsd=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xmlns:SOAP-ENC=</span><span class="s">&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;</span>
    <span class="na">xmlns:tns=</span><span class="s">&quot;urn:helloservicewsdl&quot;</span>
    <span class="na">xmlns:soap=</span><span class="s">&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot;</span>
    <span class="na">xmlns:wsdl=</span><span class="s">&quot;http://schemas.xmlsoap.org/wsdl/&quot;</span>
    <span class="na">xmlns=</span><span class="s">&quot;http://schemas.xmlsoap.org/wsdl/&quot;</span>
    <span class="na">targetNamespace=</span><span class="s">&quot;urn:helloservicewsdl&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;types&gt;</span>
        <span class="nt">&lt;xsd:schema</span> <span class="na">targetNamespace=</span><span class="s">&quot;urn:hellowsdl&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;xsd:import</span> <span class="na">namespace=</span><span class="s">&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;xsd:import</span> <span class="na">namespace=</span><span class="s">&quot;http://schemas.xmlsoap.org/wsdl/&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/xsd:schema&gt;</span>
    <span class="nt">&lt;/types&gt;</span>

    <span class="nt">&lt;message</span> <span class="na">name=</span><span class="s">&quot;helloRequest&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;part</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span> <span class="na">type=</span><span class="s">&quot;xsd:string&quot;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/message&gt;</span>

    <span class="nt">&lt;message</span> <span class="na">name=</span><span class="s">&quot;helloResponse&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;part</span> <span class="na">name=</span><span class="s">&quot;return&quot;</span> <span class="na">type=</span><span class="s">&quot;xsd:string&quot;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/message&gt;</span>

    <span class="nt">&lt;portType</span> <span class="na">name=</span><span class="s">&quot;hellowsdlPortType&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;operation</span> <span class="na">name=</span><span class="s">&quot;hello&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;documentation&gt;</span>Hello World<span class="nt">&lt;/documentation&gt;</span>
            <span class="nt">&lt;input</span> <span class="na">message=</span><span class="s">&quot;tns:helloRequest&quot;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;output</span> <span class="na">message=</span><span class="s">&quot;tns:helloResponse&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/operation&gt;</span>
    <span class="nt">&lt;/portType&gt;</span>

    <span class="nt">&lt;binding</span> <span class="na">name=</span><span class="s">&quot;hellowsdlBinding&quot;</span> <span class="na">type=</span><span class="s">&quot;tns:hellowsdlPortType&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;soap:binding</span> <span class="na">style=</span><span class="s">&quot;rpc&quot;</span> <span class="na">transport=</span><span class="s">&quot;http://schemas.xmlsoap.org/soap/http&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;operation</span> <span class="na">name=</span><span class="s">&quot;hello&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;soap:operation</span> <span class="na">soapAction=</span><span class="s">&quot;urn:arnleadservicewsdl#hello&quot;</span> <span class="na">style=</span><span class="s">&quot;rpc&quot;</span><span class="nt">/&gt;</span>

            <span class="nt">&lt;input&gt;</span>
                <span class="nt">&lt;soap:body</span> <span class="na">use=</span><span class="s">&quot;encoded&quot;</span> <span class="na">namespace=</span><span class="s">&quot;urn:hellowsdl&quot;</span>
                    <span class="na">encodingStyle=</span><span class="s">&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;/input&gt;</span>

            <span class="nt">&lt;output&gt;</span>
                <span class="nt">&lt;soap:body</span> <span class="na">use=</span><span class="s">&quot;encoded&quot;</span> <span class="na">namespace=</span><span class="s">&quot;urn:hellowsdl&quot;</span>
                    <span class="na">encodingStyle=</span><span class="s">&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;/output&gt;</span>
        <span class="nt">&lt;/operation&gt;</span>
    <span class="nt">&lt;/binding&gt;</span>

    <span class="nt">&lt;service</span> <span class="na">name=</span><span class="s">&quot;hellowsdl&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;port</span> <span class="na">name=</span><span class="s">&quot;hellowsdlPort&quot;</span> <span class="na">binding=</span><span class="s">&quot;tns:hellowsdlBinding&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;soap:address</span> <span class="na">location=</span><span class="s">&quot;http://example.com/index.php/soap&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/port&gt;</span>
    <span class="nt">&lt;/service&gt;</span>
<span class="nt">&lt;/definitions&gt;</span>
</pre></div>
</td></tr></table></div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>