<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Define Controllers as Services</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-define-controllers-as-services">
<span id="index-0"></span><h1>How to Define Controllers as Services</h1>
<p>In Symfony, a controller does <em>not</em> need to be registered as a service. But if youâ€™re
using the <a class="reference internal" href="../service_container.xhtml#service-container-services-load-example"><span class="std std-ref">default services.yaml configuration</span></a>,
your controllers <em>are</em> already registered as services. This means you can use dependency
injection like any other normal service.</p>
<div class="section" id="referencing-your-service-from-routing">
<h2>Referencing your Service from Routing</h2>
<p>Registering your controller as a service is the first step, but you also need to
update your routing config to reference the service properly, so that Symfony
knows to use it.</p>
<p>Use the <code class="docutils literal notranslate"><span class="pre">service_id::method_name</span></code> syntax to refer to the controller method.
If the service id is the fully-qualified class name (FQCN) of your controller,
as Symfony recommends, then the syntax is the same as if the controller was not
a service like: <code class="docutils literal notranslate"><span class="pre">App\Controller\HelloController::index</span></code>:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Annotations</em><div class="highlight-php-annotations notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/HelloController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Annotation\Route</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">HelloController</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @Route(&quot;/hello&quot;, name=&quot;hello&quot;, methods={&quot;GET&quot;})</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/routes.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">hello</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">path</span><span class="p p-Indicator">:</span>     <span class="l l-Scalar l-Scalar-Plain">/hello</span>
    <span class="l l-Scalar l-Scalar-Plain">controller</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">App\Controller\HelloController::index</span>
    <span class="l l-Scalar l-Scalar-Plain">methods</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">GET</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/routes.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;routes</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/routing&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/routing</span>
<span class="s">        https://symfony.com/schema/routing/routing-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;route</span> <span class="na">id=</span><span class="s">&quot;hello&quot;</span> <span class="na">path=</span><span class="s">&quot;/hello&quot;</span> <span class="na">controller=</span><span class="s">&quot;App\Controller\HelloController::index&quot;</span> <span class="na">methods=</span><span class="s">&quot;GET&quot;</span><span class="nt">/&gt;</span>

<span class="nt">&lt;/routes&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/routes.php</span>
<span class="k">use</span> <span class="nx">App\Controller\HelloController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nx">RoutingConfigurator</span> <span class="nv">$routes</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="s1">&#39;/hello&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">controller</span><span class="p">([</span><span class="nx">HelloController</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="s1">&#39;index&#39;</span><span class="p">])</span>
        <span class="o">-&gt;</span><span class="na">methods</span><span class="p">([</span><span class="s1">&#39;GET&#39;</span><span class="p">])</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
<div class="section" id="invokable-controllers">
<span id="controller-service-invoke"></span><h2>Invokable Controllers</h2>
<p>Controllers can also define a single action using the <code class="docutils literal notranslate"><span class="pre">__invoke()</span></code> method,
which is a common practice when following the <a class="reference external" href="https://en.wikipedia.org/wiki/Action%E2%80%93domain%E2%80%93responder">ADR pattern</a><span class="link-target"> [https://en.wikipedia.org/wiki/Action%E2%80%93domain%E2%80%93responder]</span>
(Action-Domain-Responder):</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Annotations</em><div class="highlight-php-annotations notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/Hello.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Annotation\Route</span><span class="p">;</span>

<span class="sd">/**</span>
<span class="sd"> * @Route(&quot;/hello/{name}&quot;, name=&quot;hello&quot;)</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">Hello</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__invoke</span><span class="p">(</span><span class="nv">$name</span> <span class="o">=</span> <span class="s1">&#39;World&#39;</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">(</span><span class="nb">sprintf</span><span class="p">(</span><span class="s1">&#39;Hello %s!&#39;</span><span class="p">,</span> <span class="nv">$name</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/routes.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">hello</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">path</span><span class="p p-Indicator">:</span>     <span class="l l-Scalar l-Scalar-Plain">/hello/{name}</span>
    <span class="l l-Scalar l-Scalar-Plain">defaults</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">{</span> <span class="nv">_controller</span><span class="p p-Indicator">:</span> <span class="nv">app.hello_controller</span> <span class="p p-Indicator">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/routes.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;routes</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/routing&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/routing</span>
<span class="s">        https://symfony.com/schema/routing/routing-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;route</span> <span class="na">id=</span><span class="s">&quot;hello&quot;</span> <span class="na">path=</span><span class="s">&quot;/hello/{name}&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;default</span> <span class="na">key=</span><span class="s">&quot;_controller&quot;</span><span class="nt">&gt;</span>app.hello_controller<span class="nt">&lt;/default&gt;</span>
    <span class="nt">&lt;/route&gt;</span>

<span class="nt">&lt;/routes&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// app/config/routing.php</span>
<span class="nv">$collection</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">Route</span><span class="p">(</span><span class="s1">&#39;/hello&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;_controller&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;app.hello_controller&#39;</span><span class="p">,</span>
<span class="p">]));</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
<div class="section" id="alternatives-to-base-controller-methods">
<h2>Alternatives to base Controller Methods</h2>
<p>When using a controller defined as a service, you can still extend the
<a class="reference internal" href="../controller.xhtml#the-base-controller-class-services"><span class="std std-ref">AbstractController base controller</span></a>
and use its shortcuts. But, you donâ€™t need to! You can choose to extend <em>nothing</em>,
and use dependency injection to access different services.</p>
<p>The base <a class="reference external" href="https://github.com/symfony/symfony/blob/4.4/src/Symfony/Bundle/FrameworkBundle/Controller/ControllerTrait.php">Controller class source code</a><span class="link-target"> [https://github.com/symfony/symfony/blob/4.4/src/Symfony/Bundle/FrameworkBundle/Controller/ControllerTrait.php]</span> is a great way to see how to accomplish
common tasks. For example, <code class="docutils literal notranslate"><span class="pre">$this-&gt;render()</span></code> is usually used to render a Twig
template and return a Response. But, you can also do this directly:</p>
<p>In a controller thatâ€™s defined as a service, you can instead inject the <code class="docutils literal notranslate"><span class="pre">twig</span></code>
service and use it directly:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/HelloController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Twig\Environment</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">HelloController</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$twig</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nx">Environment</span> <span class="nv">$twig</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">twig</span> <span class="o">=</span> <span class="nv">$twig</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$content</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">twig</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span>
            <span class="s1">&#39;hello/index.html.twig&#39;</span><span class="p">,</span>
            <span class="p">[</span><span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="nv">$name</span><span class="p">]</span>
        <span class="p">);</span>

        <span class="k">return</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">(</span><span class="nv">$content</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>You can also use a special <a class="reference internal" href="../controller.xhtml#controller-accessing-services"><span class="std std-ref">action-based dependency injection</span></a>
to receive services as arguments to your controller action methods.</p>
<div class="section" id="base-controller-methods-and-their-service-replacements">
<h3>Base Controller Methods and Their Service Replacements</h3>
<p>The best way to see how to replace base <code class="docutils literal notranslate"><span class="pre">Controller</span></code> convenience methods is to
look at the <a class="reference external" href="https://github.com/symfony/symfony/blob/4.4/src/Symfony/Bundle/FrameworkBundle/Controller/ControllerTrait.php">ControllerTrait</a><span class="link-target"> [https://github.com/symfony/symfony/blob/4.4/src/Symfony/Bundle/FrameworkBundle/Controller/ControllerTrait.php]</span> that holds its logic.</p>
<p>If you want to know what type-hints to use for each service, see the
<code class="docutils literal notranslate"><span class="pre">getSubscribedServices()</span></code> method in <a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Controller/AbstractController.php">AbstractController</a><span class="link-target"> [https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Controller/AbstractController.php]</span>.</p>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>