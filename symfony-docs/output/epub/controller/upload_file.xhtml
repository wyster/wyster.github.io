<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Upload Files</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-upload-files">
<span id="index-0"></span><h1>How to Upload Files</h1>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Instead of handling file uploading yourself, you may consider using the
<a class="reference external" href="https://github.com/dustin10/VichUploaderBundle">VichUploaderBundle</a><span class="link-target"> [https://github.com/dustin10/VichUploaderBundle]</span> community bundle. This bundle provides all the common
operations (such as file renaming, saving and deleting) and it’s tightly
integrated with Doctrine ORM, MongoDB ODM, PHPCR ODM and Propel.</p>
</div>
<p>Imagine that you have a <code class="docutils literal notranslate"><span class="pre">Product</span></code> entity in your application and you want to
add a PDF brochure for each product. To do so, add a new property called
<code class="docutils literal notranslate"><span class="pre">brochureFilename</span></code> in the <code class="docutils literal notranslate"><span class="pre">Product</span></code> entity:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Entity/Product.php</span>
<span class="k">namespace</span> <span class="nx">App\Entity</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Doctrine\ORM\Mapping</span> <span class="k">as</span> <span class="nx">ORM</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Product</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="sd">/**</span>
<span class="sd">     * @ORM\Column(type=&quot;string&quot;)</span>
<span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$brochureFilename</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">getBrochureFilename</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">brochureFilename</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">setBrochureFilename</span><span class="p">(</span><span class="nv">$brochureFilename</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">brochureFilename</span> <span class="o">=</span> <span class="nv">$brochureFilename</span><span class="p">;</span>

        <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Note that the type of the <code class="docutils literal notranslate"><span class="pre">brochureFilename</span></code> column is <code class="docutils literal notranslate"><span class="pre">string</span></code> instead of
<code class="docutils literal notranslate"><span class="pre">binary</span></code> or <code class="docutils literal notranslate"><span class="pre">blob</span></code> because it only stores the PDF file name instead of the
file contents.</p>
<p>The next step is to add a new field to the form that manages the <code class="docutils literal notranslate"><span class="pre">Product</span></code>
entity. This must be a <code class="docutils literal notranslate"><span class="pre">FileType</span></code> field so the browsers can display the file
upload widget. The trick to make it work is to add the form field as “unmapped”,
so Symfony doesn’t try to get/set its value from the related entity:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Form/ProductType.php</span>
<span class="k">namespace</span> <span class="nx">App\Form</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Entity\Product</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\AbstractType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\FileType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\FormBuilderInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\OptionsResolver\OptionsResolver</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints\File</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">ProductType</span> <span class="k">extends</span> <span class="nx">AbstractType</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">buildForm</span><span class="p">(</span><span class="nx">FormBuilderInterface</span> <span class="nv">$builder</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$options</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$builder</span>
            <span class="c1">// ...</span>
            <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;brochure&#39;</span><span class="p">,</span> <span class="nx">FileType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span>
                <span class="s1">&#39;label&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Brochure (PDF file)&#39;</span><span class="p">,</span>

                <span class="c1">// unmapped means that this field is not associated to any entity property</span>
                <span class="s1">&#39;mapped&#39;</span> <span class="o">=&gt;</span> <span class="k">false</span><span class="p">,</span>

                <span class="c1">// make it optional so you don&#39;t have to re-upload the PDF file</span>
                <span class="c1">// every time you edit the Product details</span>
                <span class="s1">&#39;required&#39;</span> <span class="o">=&gt;</span> <span class="k">false</span><span class="p">,</span>

                <span class="c1">// unmapped fields can&#39;t define their validation using annotations</span>
                <span class="c1">// in the associated entity, so you can use the PHP constraint classes</span>
                <span class="s1">&#39;constraints&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
                    <span class="k">new</span> <span class="nx">File</span><span class="p">([</span>
                        <span class="s1">&#39;maxSize&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;1024k&#39;</span><span class="p">,</span>
                        <span class="s1">&#39;mimeTypes&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
                            <span class="s1">&#39;application/pdf&#39;</span><span class="p">,</span>
                            <span class="s1">&#39;application/x-pdf&#39;</span><span class="p">,</span>
                        <span class="p">],</span>
                        <span class="s1">&#39;mimeTypesMessage&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Please upload a valid PDF document&#39;</span><span class="p">,</span>
                    <span class="p">])</span>
                <span class="p">],</span>
            <span class="p">])</span>
            <span class="c1">// ...</span>
        <span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">configureOptions</span><span class="p">(</span><span class="nx">OptionsResolver</span> <span class="nv">$resolver</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$resolver</span><span class="o">-&gt;</span><span class="na">setDefaults</span><span class="p">([</span>
            <span class="s1">&#39;data_class&#39;</span> <span class="o">=&gt;</span> <span class="nx">Product</span><span class="o">::</span><span class="na">class</span><span class="p">,</span>
        <span class="p">]);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Now, update the template that renders the form to display the new <code class="docutils literal notranslate"><span class="pre">brochure</span></code>
field (the exact template code to add depends on the method used by your application
to <a class="reference internal" href="../form/form_customization.xhtml"><span class="doc">customize form rendering</span></a>):</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# templates/product/new.html.twig #}</span>
<span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Adding a new product<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>

<span class="cp">{{</span> <span class="nv">form_start</span><span class="o">(</span><span class="nv">form</span><span class="o">)</span> <span class="cp">}}</span>
    <span class="c">{# ... #}</span>

    <span class="cp">{{</span> <span class="nv">form_row</span><span class="o">(</span><span class="nv">form.brochure</span><span class="o">)</span> <span class="cp">}}</span>
<span class="cp">{{</span> <span class="nv">form_end</span><span class="o">(</span><span class="nv">form</span><span class="o">)</span> <span class="cp">}}</span>
</pre></div>
</td></tr></table></div>
<p>Finally, you need to update the code of the controller that handles the form:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/ProductController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Entity\Product</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">App\Form\ProductType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\File\Exception\FileException</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\File\UploadedFile</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Request</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Annotation\Route</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\String\Slugger\SluggerInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">ProductController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @Route(&quot;/product/new&quot;, name=&quot;app_product_new&quot;)</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">new</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">,</span> <span class="nx">SluggerInterface</span> <span class="nv">$slugger</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$product</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Product</span><span class="p">();</span>
        <span class="nv">$form</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createForm</span><span class="p">(</span><span class="nx">ProductType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="nv">$product</span><span class="p">);</span>
        <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">handleRequest</span><span class="p">(</span><span class="nv">$request</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$form</span><span class="o">-&gt;</span><span class="na">isSubmitted</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">isValid</span><span class="p">())</span> <span class="p">{</span>
            <span class="sd">/** @var UploadedFile $brochureFile */</span>
            <span class="nv">$brochureFile</span> <span class="o">=</span> <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;brochure&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">getData</span><span class="p">();</span>

            <span class="c1">// this condition is needed because the &#39;brochure&#39; field is not required</span>
            <span class="c1">// so the PDF file must be processed only when a file is uploaded</span>
            <span class="k">if</span> <span class="p">(</span><span class="nv">$brochureFile</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$originalFilename</span> <span class="o">=</span> <span class="nb">pathinfo</span><span class="p">(</span><span class="nv">$brochureFile</span><span class="o">-&gt;</span><span class="na">getClientOriginalName</span><span class="p">(),</span> <span class="nx">PATHINFO_FILENAME</span><span class="p">);</span>
                <span class="c1">// this is needed to safely include the file name as part of the URL</span>
                <span class="nv">$safeFilename</span> <span class="o">=</span> <span class="nv">$slugger</span><span class="o">-&gt;</span><span class="na">slug</span><span class="p">(</span><span class="nv">$originalFilename</span><span class="p">);</span>
                <span class="nv">$newFilename</span> <span class="o">=</span> <span class="nv">$safeFilename</span><span class="o">.</span><span class="s1">&#39;-&#39;</span><span class="o">.</span><span class="nb">uniqid</span><span class="p">()</span><span class="o">.</span><span class="s1">&#39;.&#39;</span><span class="o">.</span><span class="nv">$brochureFile</span><span class="o">-&gt;</span><span class="na">guessExtension</span><span class="p">();</span>

                <span class="c1">// Move the file to the directory where brochures are stored</span>
                <span class="k">try</span> <span class="p">{</span>
                    <span class="nv">$brochureFile</span><span class="o">-&gt;</span><span class="na">move</span><span class="p">(</span>
                        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getParameter</span><span class="p">(</span><span class="s1">&#39;brochures_directory&#39;</span><span class="p">),</span>
                        <span class="nv">$newFilename</span>
                    <span class="p">);</span>
                <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">FileException</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
                    <span class="c1">// ... handle exception if something happens during file upload</span>
                <span class="p">}</span>

                <span class="c1">// updates the &#39;brochureFilename&#39; property to store the PDF file name</span>
                <span class="c1">// instead of its contents</span>
                <span class="nv">$product</span><span class="o">-&gt;</span><span class="na">setBrochureFilename</span><span class="p">(</span><span class="nv">$newFilename</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="c1">// ... persist the $product variable or any other work</span>

            <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">redirectToRoute</span><span class="p">(</span><span class="s1">&#39;app_product_list&#39;</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="s1">&#39;product/new.html.twig&#39;</span><span class="p">,</span> <span class="p">[</span>
            <span class="s1">&#39;form&#39;</span> <span class="o">=&gt;</span> <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">createView</span><span class="p">(),</span>
        <span class="p">]);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Now, create the <code class="docutils literal notranslate"><span class="pre">brochures_directory</span></code> parameter that was used in the
controller to specify the directory in which the brochures should be stored:</p>
<div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>

<span class="c1"># ...</span>
<span class="l l-Scalar l-Scalar-Plain">parameters</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">brochures_directory</span><span class="p p-Indicator">:</span> <span class="s">&#39;%kernel.project_dir%/public/uploads/brochures&#39;</span>
</pre></div>
</td></tr></table></div>
<p>There are some important things to consider in the code of the above controller:</p>
<ol class="arabic simple">
<li><p>In Symfony applications, uploaded files are objects of the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/File/UploadedFile.php" title="Symfony\Component\HttpFoundation\File\UploadedFile"><span class="pre">UploadedFile</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/File/UploadedFile.php]</span></span></code> class. This class
provides methods for the most common operations when dealing with uploaded files;</p></li>
<li><p>A well-known security best practice is to never trust the input provided by
users. This also applies to the files uploaded by your visitors. The <code class="docutils literal notranslate"><span class="pre">UploadedFile</span></code>
class provides methods to get the original file extension
(<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/File/UploadedFile.php" title="Symfony\Component\HttpFoundation\File\UploadedFile::getExtension()"><span class="pre">getExtension()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/File/UploadedFile.php]</span></span></code>),
the original file size (<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/File/UploadedFile.php" title="Symfony\Component\HttpFoundation\File\UploadedFile::getSize()"><span class="pre">getSize()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/File/UploadedFile.php]</span></span></code>)
and the original file name (<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/File/UploadedFile.php" title="Symfony\Component\HttpFoundation\File\UploadedFile::getClientOriginalName()"><span class="pre">getClientOriginalName()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/File/UploadedFile.php]</span></span></code>).
However, they are considered <em>not safe</em> because a malicious user could tamper
that information. That’s why it’s always better to generate a unique name and
use the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/File/UploadedFile.php" title="Symfony\Component\HttpFoundation\File\UploadedFile::guessExtension()"><span class="pre">guessExtension()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/File/UploadedFile.php]</span></span></code>
method to let Symfony guess the right extension according to the file MIME type;</p></li>
</ol>
<p>You can use the following code to link to the PDF brochure of a product:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&quot;</span><span class="cp">{{</span> <span class="nv">asset</span><span class="o">(</span><span class="s1">&#39;uploads/brochures/&#39;</span> <span class="o">~</span> <span class="nv">product.brochureFilename</span><span class="o">)</span> <span class="cp">}}</span><span class="s">&quot;</span><span class="p">&gt;</span>View brochure (PDF)<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</pre></div>
</td></tr></table></div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>When creating a form to edit an already persisted item, the file form type
still expects a <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/File/File.php" title="Symfony\Component\HttpFoundation\File\File"><span class="pre">File</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/File/File.php]</span></span></code>
instance. As the persisted entity now contains only the relative file path,
you first have to concatenate the configured upload path with the stored
filename and create a new <code class="docutils literal notranslate"><span class="pre">File</span></code> class:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\File\File</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="nv">$product</span><span class="o">-&gt;</span><span class="na">setBrochureFilename</span><span class="p">(</span>
    <span class="k">new</span> <span class="nx">File</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getParameter</span><span class="p">(</span><span class="s1">&#39;brochures_directory&#39;</span><span class="p">)</span><span class="o">.</span><span class="s1">&#39;/&#39;</span><span class="o">.</span><span class="nv">$product</span><span class="o">-&gt;</span><span class="na">getBrochureFilename</span><span class="p">())</span>
<span class="p">);</span>
</pre></div>
</div>
</div>
<div class="section" id="creating-an-uploader-service">
<h2>Creating an Uploader Service</h2>
<p>To avoid logic in controllers, making them big, you can extract the upload
logic to a separate service:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Service/FileUploader.php</span>
<span class="k">namespace</span> <span class="nx">App\Service</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\File\Exception\FileException</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\File\UploadedFile</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\String\Slugger\SluggerInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">FileUploader</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$targetDirectory</span><span class="p">;</span>
    <span class="k">private</span> <span class="nv">$slugger</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$targetDirectory</span><span class="p">,</span> <span class="nx">SluggerInterface</span> <span class="nv">$slugger</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">targetDirectory</span> <span class="o">=</span> <span class="nv">$targetDirectory</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">slugger</span> <span class="o">=</span> <span class="nv">$slugger</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">upload</span><span class="p">(</span><span class="nx">UploadedFile</span> <span class="nv">$file</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$originalFilename</span> <span class="o">=</span> <span class="nb">pathinfo</span><span class="p">(</span><span class="nv">$file</span><span class="o">-&gt;</span><span class="na">getClientOriginalName</span><span class="p">(),</span> <span class="nx">PATHINFO_FILENAME</span><span class="p">);</span>
        <span class="nv">$safeFilename</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">slugger</span><span class="o">-&gt;</span><span class="na">slug</span><span class="p">(</span><span class="nv">$originalFilename</span><span class="p">);</span>
        <span class="nv">$fileName</span> <span class="o">=</span> <span class="nv">$safeFilename</span><span class="o">.</span><span class="s1">&#39;-&#39;</span><span class="o">.</span><span class="nb">uniqid</span><span class="p">()</span><span class="o">.</span><span class="s1">&#39;.&#39;</span><span class="o">.</span><span class="nv">$file</span><span class="o">-&gt;</span><span class="na">guessExtension</span><span class="p">();</span>

        <span class="k">try</span> <span class="p">{</span>
            <span class="nv">$file</span><span class="o">-&gt;</span><span class="na">move</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getTargetDirectory</span><span class="p">(),</span> <span class="nv">$fileName</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">FileException</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// ... handle exception if something happens during file upload</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nv">$fileName</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">getTargetDirectory</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">targetDirectory</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>In addition to the generic <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/File/Exception/FileException.php" title="Symfony\Component\HttpFoundation\File\Exception\FileException"><span class="pre">FileException</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/File/Exception/FileException.php]</span></span></code>
class there are other exception classes to handle failed file uploads:
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/File/Exception/CannotWriteFileException.php" title="Symfony\Component\HttpFoundation\File\Exception\CannotWriteFileException"><span class="pre">CannotWriteFileException</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/File/Exception/CannotWriteFileException.php]</span></span></code>,
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/File/Exception/ExtensionFileException.php" title="Symfony\Component\HttpFoundation\File\Exception\ExtensionFileException"><span class="pre">ExtensionFileException</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/File/Exception/ExtensionFileException.php]</span></span></code>,
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/File/Exception/FormSizeFileException.php" title="Symfony\Component\HttpFoundation\File\Exception\FormSizeFileException"><span class="pre">FormSizeFileException</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/File/Exception/FormSizeFileException.php]</span></span></code>,
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/File/Exception/IniSizeFileException.php" title="Symfony\Component\HttpFoundation\File\Exception\IniSizeFileException"><span class="pre">IniSizeFileException</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/File/Exception/IniSizeFileException.php]</span></span></code>,
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/File/Exception/NoFileException.php" title="Symfony\Component\HttpFoundation\File\Exception\NoFileException"><span class="pre">NoFileException</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/File/Exception/NoFileException.php]</span></span></code>,
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/File/Exception/NoTmpDirFileException.php" title="Symfony\Component\HttpFoundation\File\Exception\NoTmpDirFileException"><span class="pre">NoTmpDirFileException</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/File/Exception/NoTmpDirFileException.php]</span></span></code>,
and <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/File/Exception/PartialFileException.php" title="Symfony\Component\HttpFoundation\File\Exception\PartialFileException"><span class="pre">PartialFileException</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/File/Exception/PartialFileException.php]</span></span></code>.</p>
</div>
<p>Then, define a service for this class:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="c1"># ...</span>

    <span class="l l-Scalar l-Scalar-Plain">App\Service\FileUploader</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">arguments</span><span class="p p-Indicator">:</span>
            <span class="l l-Scalar l-Scalar-Plain">$targetDirectory</span><span class="p p-Indicator">:</span> <span class="s">&#39;%brochures_directory%&#39;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>
    <span class="c">&lt;!-- ... --&gt;</span>

    <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\Service\FileUploader&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;argument&gt;</span>%brochures_directory%<span class="nt">&lt;/argument&gt;</span>
    <span class="nt">&lt;/service&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Service\FileUploader</span><span class="p">;</span>

<span class="k">return</span> <span class="k">static</span> <span class="k">function</span> <span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$container</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$services</span> <span class="o">=</span> <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">services</span><span class="p">();</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">FileUploader</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">arg</span><span class="p">(</span><span class="s1">&#39;$targetDirectory&#39;</span><span class="p">,</span> <span class="s1">&#39;%brochures_directory%&#39;</span><span class="p">)</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>Now you’re ready to use this service in the controller:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/ProductController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Service\FileUploader</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Request</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">new</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">,</span> <span class="nx">FileUploader</span> <span class="nv">$fileUploader</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="k">if</span> <span class="p">(</span><span class="nv">$form</span><span class="o">-&gt;</span><span class="na">isSubmitted</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">isValid</span><span class="p">())</span> <span class="p">{</span>
        <span class="sd">/** @var UploadedFile $brochureFile */</span>
        <span class="nv">$brochureFile</span> <span class="o">=</span> <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;brochure&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">getData</span><span class="p">();</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$brochureFile</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$brochureFileName</span> <span class="o">=</span> <span class="nv">$fileUploader</span><span class="o">-&gt;</span><span class="na">upload</span><span class="p">(</span><span class="nv">$brochureFile</span><span class="p">);</span>
            <span class="nv">$product</span><span class="o">-&gt;</span><span class="na">setBrochureFilename</span><span class="p">(</span><span class="nv">$brochureFileName</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// ...</span>
    <span class="p">}</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="using-a-doctrine-listener">
<h2>Using a Doctrine Listener</h2>
<p>The previous versions of this article explained how to handle file uploads using
<a class="reference internal" href="../doctrine/events.xhtml#doctrine-lifecycle-listener"><span class="std std-ref">Doctrine listeners</span></a>. However, this is no longer
recommended, because Doctrine events shouldn’t be used for your domain logic.</p>
<p>Moreover, Doctrine listeners are often dependent on internal Doctrine behavior
which may change in future versions. Also, they can introduce performance issues
unwillingly (because your listener persists entities which cause other entities to
be changed and persisted).</p>
<p>As an alternative, you can use <a class="reference internal" href="../event_dispatcher.xhtml"><span class="doc">Symfony events, listeners and subscribers</span></a>.</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>