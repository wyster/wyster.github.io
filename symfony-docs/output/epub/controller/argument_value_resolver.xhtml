<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Extending Action Argument Resolving</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="extending-action-argument-resolving">
<span id="index-0"></span><h1>Extending Action Argument Resolving</h1>
<p>In the <a class="reference internal" href="../controller.xhtml"><span class="doc">controller guide</span></a>, you’ve learned that you can get the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Request.php" title="Symfony\Component\HttpFoundation\Request"><span class="pre">Request</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Request.php]</span></span></code> object via an argument in
your controller. This argument has to be type-hinted by the <code class="docutils literal notranslate"><span class="pre">Request</span></code> class
in order to be recognized. This is done via the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Controller/ArgumentResolver.php" title="Symfony\Component\HttpKernel\Controller\ArgumentResolver"><span class="pre">ArgumentResolver</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Controller/ArgumentResolver.php]</span></span></code>. By
creating and registering custom argument value resolvers, you can extend this
functionality.</p>
<div class="section" id="built-in-value-resolvers">
<span id="functionality-shipped-with-the-httpkernel"></span><h2>Built-In Value Resolvers</h2>
<p>Symfony ships with the following value resolvers in the
<a class="reference internal" href="../components/http_kernel.xhtml"><span class="doc">HttpKernel component</span></a>:</p>
<dl class="simple">
<dt><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Controller/ArgumentResolver/RequestAttributeValueResolver.php" title="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver"><span class="pre">RequestAttributeValueResolver</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Controller/ArgumentResolver/RequestAttributeValueResolver.php]</span></span></code></dt>
<dd><p>Attempts to find a request attribute that matches the name of the argument.</p>
</dd>
<dt><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Controller/ArgumentResolver/RequestValueResolver.php" title="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver"><span class="pre">RequestValueResolver</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Controller/ArgumentResolver/RequestValueResolver.php]</span></span></code></dt>
<dd><p>Injects the current <code class="docutils literal notranslate"><span class="pre">Request</span></code> if type-hinted with <code class="docutils literal notranslate"><span class="pre">Request</span></code> or a class
extending <code class="docutils literal notranslate"><span class="pre">Request</span></code>.</p>
</dd>
<dt><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Controller/ArgumentResolver/ServiceValueResolver.php" title="Symfony\Component\HttpKernel\Controller\ArgumentResolver\ServiceValueResolver"><span class="pre">ServiceValueResolver</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Controller/ArgumentResolver/ServiceValueResolver.php]</span></span></code></dt>
<dd><p>Injects a service if type-hinted with a valid service class or interface. This
works like <a class="reference internal" href="../service_container/autowiring.xhtml"><span class="doc">autowiring</span></a>.</p>
</dd>
<dt><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Controller/ArgumentResolver/SessionValueResolver.php" title="Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver"><span class="pre">SessionValueResolver</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Controller/ArgumentResolver/SessionValueResolver.php]</span></span></code></dt>
<dd><p>Injects the configured session class implementing <code class="docutils literal notranslate"><span class="pre">SessionInterface</span></code> if
type-hinted with <code class="docutils literal notranslate"><span class="pre">SessionInterface</span></code> or a class implementing
<code class="docutils literal notranslate"><span class="pre">SessionInterface</span></code>.</p>
</dd>
<dt><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Controller/ArgumentResolver/DefaultValueResolver.php" title="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver"><span class="pre">DefaultValueResolver</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Controller/ArgumentResolver/DefaultValueResolver.php]</span></span></code></dt>
<dd><p>Will set the default value of the argument if present and the argument
is optional.</p>
</dd>
<dt><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Controller/ArgumentResolver/VariadicValueResolver.php" title="Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver"><span class="pre">VariadicValueResolver</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Controller/ArgumentResolver/VariadicValueResolver.php]</span></span></code></dt>
<dd><p>Verifies if the request data is an array and will add all of them to the
argument list. When the action is called, the last (variadic) argument will
contain all the values of this array.</p>
</dd>
</dl>
<p>In addition, some components and official bundles provide other value resolvers:</p>
<dl class="simple">
<dt><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Controller/UserValueResolver.php" title="Symfony\Component\Security\Http\Controller\UserValueResolver"><span class="pre">UserValueResolver</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Controller/UserValueResolver.php]</span></span></code></dt>
<dd><p>Injects the object that represents the current logged in user if type-hinted
with <code class="docutils literal notranslate"><span class="pre">UserInterface</span></code>. Default value can be set to <code class="docutils literal notranslate"><span class="pre">null</span></code> in case
the controller can be accessed by anonymous users. It requires installing
the <a class="reference internal" href="../components/security.xhtml"><span class="doc">Security component</span></a>.</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">Psr7ServerRequestResolver</span></code></dt>
<dd><p>Injects a <a class="reference external" href="https://www.php-fig.org/psr/psr-7/">PSR-7</a><span class="link-target"> [https://www.php-fig.org/psr/psr-7/]</span> compliant version of the current request if type-hinted
with <code class="docutils literal notranslate"><span class="pre">RequestInterface</span></code>, <code class="docutils literal notranslate"><span class="pre">MessageInterface</span></code> or <code class="docutils literal notranslate"><span class="pre">ServerRequestInterface</span></code>.
It requires installing the <a class="reference external" href="https://github.com/sensiolabs/SensioFrameworkExtraBundle">SensioFrameworkExtraBundle</a><span class="link-target"> [https://github.com/sensiolabs/SensioFrameworkExtraBundle]</span>.</p>
</dd>
</dl>
</div>
<div class="section" id="adding-a-custom-value-resolver">
<h2>Adding a Custom Value Resolver</h2>
<p>In the next example, you’ll create a value resolver to inject the object that
represents the current user whenever a controller method type-hints an argument
with the <code class="docutils literal notranslate"><span class="pre">User</span></code> class:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/UserController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Entity\User</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">UserController</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">(</span><span class="nx">User</span> <span class="nv">$user</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">(</span><span class="s1">&#39;Hello &#39;</span><span class="o">.</span><span class="nv">$user</span><span class="o">-&gt;</span><span class="na">getUsername</span><span class="p">()</span><span class="o">.</span><span class="s1">&#39;!&#39;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Beware that this feature is already provided by the <a class="reference external" href="https://symfony.com/doc/current/bundles/SensioFrameworkExtraBundle/annotations/converters.html">&#64;ParamConverter</a><span class="link-target"> [https://symfony.com/doc/current/bundles/SensioFrameworkExtraBundle/annotations/converters.html]</span>
annotation from the SensioFrameworkExtraBundle. If you have that bundle
installed in your project, add this config to disable the auto-conversion of
type-hinted method arguments:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/packages/sensio_framework_extra.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">sensio_framework_extra</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">request</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">converters</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">true</span>
        <span class="l l-Scalar l-Scalar-Plain">auto_convert</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">false</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/packages/sensio_framework_extra.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xmlns:sensio-framework-extra=</span><span class="s">&quot;http://symfony.com/schema/dic/symfony_extra&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd</span>
<span class="s">        http://symfony.com/schema/dic/symfony_extra</span>
<span class="s">        https://symfony.com/schema/dic/symfony_extra/symfony_extra-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;sensio-framework-extra:config&gt;</span>
        <span class="nt">&lt;request</span> <span class="na">converters=</span><span class="s">&quot;true&quot;</span> <span class="na">auto-convert=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/sensio-framework-extra:config&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/packages/sensio_framework_extra.php</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;sensio_framework_extra&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;request&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;converters&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span>
        <span class="s1">&#39;auto_convert&#39;</span> <span class="o">=&gt;</span> <span class="k">false</span><span class="p">,</span>
    <span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>Adding a new value resolver requires creating a class that implements
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Controller/ArgumentValueResolverInterface.php" title="Symfony\Component\HttpKernel\Controller\ArgumentValueResolverInterface"><span class="pre">ArgumentValueResolverInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Controller/ArgumentValueResolverInterface.php]</span></span></code>
and defining a service for it. The interface defines two methods:</p>
<dl class="simple">
<dt><code class="docutils literal notranslate"><span class="pre">supports()</span></code></dt>
<dd><p>This method is used to check whether the value resolver supports the
given argument. <code class="docutils literal notranslate"><span class="pre">resolve()</span></code> will only be called when this returns <code class="docutils literal notranslate"><span class="pre">true</span></code>.</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">resolve()</span></code></dt>
<dd><p>This method will resolve the actual value for the argument. Once the value
is resolved, you must <a class="reference external" href="https://www.php.net/manual/en/language.generators.syntax.php">yield</a><span class="link-target"> [https://www.php.net/manual/en/language.generators.syntax.php]</span> the value to the <code class="docutils literal notranslate"><span class="pre">ArgumentResolver</span></code>.</p>
</dd>
</dl>
<p>Both methods get the <code class="docutils literal notranslate"><span class="pre">Request</span></code> object, which is the current request, and an
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/ControllerMetadata/ArgumentMetadata.php" title="Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadata"><span class="pre">ArgumentMetadata</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/ControllerMetadata/ArgumentMetadata.php]</span></span></code>
instance. This object contains all information retrieved from the method signature
for the current argument.</p>
<p>Now that you know what to do, you can implement this interface. To get the
current <code class="docutils literal notranslate"><span class="pre">User</span></code>, you need the current security token. This token can be
retrieved from the token storage:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/ArgumentResolver/UserValueResolver.php</span>
<span class="k">namespace</span> <span class="nx">App\ArgumentResolver</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Entity\User</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Request</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Controller\ArgumentValueResolverInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadata</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Security\Core\Security</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">UserValueResolver</span> <span class="k">implements</span> <span class="nx">ArgumentValueResolverInterface</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$security</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nx">Security</span> <span class="nv">$security</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">security</span> <span class="o">=</span> <span class="nv">$security</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">supports</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">,</span> <span class="nx">ArgumentMetadata</span> <span class="nv">$argument</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">User</span><span class="o">::</span><span class="na">class</span> <span class="o">!==</span> <span class="nv">$argument</span><span class="o">-&gt;</span><span class="na">getType</span><span class="p">())</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">security</span><span class="o">-&gt;</span><span class="na">getUser</span><span class="p">()</span> <span class="nx">instanceof</span> <span class="nx">User</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">resolve</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">,</span> <span class="nx">ArgumentMetadata</span> <span class="nv">$argument</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">yield</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">security</span><span class="o">-&gt;</span><span class="na">getUser</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>In order to get the actual <code class="docutils literal notranslate"><span class="pre">User</span></code> object in your argument, the given value
must fulfill the following requirements:</p>
<ul class="simple">
<li><p>An argument must be type-hinted as <code class="docutils literal notranslate"><span class="pre">User</span></code> in your action method signature;</p></li>
<li><p>The value must be an instance of the <code class="docutils literal notranslate"><span class="pre">User</span></code> class.</p></li>
</ul>
<p>When all those requirements are met and <code class="docutils literal notranslate"><span class="pre">true</span></code> is returned, the
<code class="docutils literal notranslate"><span class="pre">ArgumentResolver</span></code> calls <code class="docutils literal notranslate"><span class="pre">resolve()</span></code> with the same values as it called
<code class="docutils literal notranslate"><span class="pre">supports()</span></code>.</p>
<p>That’s it! Now all you have to do is add the configuration for the service
container. This can be done by tagging the service with <code class="docutils literal notranslate"><span class="pre">controller.argument_value_resolver</span></code>
and adding a priority.</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">_defaults</span><span class="p p-Indicator">:</span>
        <span class="c1"># ... be sure autowiring is enabled</span>
        <span class="l l-Scalar l-Scalar-Plain">autowire</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">true</span>
    <span class="c1"># ...</span>

    <span class="l l-Scalar l-Scalar-Plain">App\ArgumentResolver\UserValueResolver</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">tags</span><span class="p p-Indicator">:</span>
            <span class="p p-Indicator">-</span> <span class="p p-Indicator">{</span> <span class="nv">name</span><span class="p p-Indicator">:</span> <span class="nv">controller.argument_value_resolver</span><span class="p p-Indicator">,</span> <span class="nv">priority</span><span class="p p-Indicator">:</span> <span class="nv">50</span> <span class="p p-Indicator">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-Instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="c">&lt;!-- ... be sure autowiring is enabled --&gt;</span>
        <span class="nt">&lt;defaults</span> <span class="na">autowire=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
        <span class="c">&lt;!-- ... --&gt;</span>

        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\ArgumentResolver\UserValueResolver&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;tag</span> <span class="na">name=</span><span class="s">&quot;controller.argument_value_resolver&quot;</span> <span class="na">priority=</span><span class="s">&quot;50&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/service&gt;</span>
    <span class="nt">&lt;/services&gt;</span>

<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\ArgumentResolver\UserValueResolver</span><span class="p">;</span>

<span class="k">return</span> <span class="k">static</span> <span class="k">function</span> <span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$container</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$services</span> <span class="o">=</span> <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">services</span><span class="p">();</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">UserValueResolver</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">tag</span><span class="p">(</span><span class="s1">&#39;controller.argument_value_resolver&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;priority&#39;</span> <span class="o">=&gt;</span> <span class="mi">50</span><span class="p">])</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>While adding a priority is optional, it’s recommended to add one to make sure
the expected value is injected. The built-in <code class="docutils literal notranslate"><span class="pre">RequestAttributeValueResolver</span></code>,
which fetches attributes from the <code class="docutils literal notranslate"><span class="pre">Request</span></code>, has a priority of <code class="docutils literal notranslate"><span class="pre">100</span></code>. If your
resolver also fetches <code class="docutils literal notranslate"><span class="pre">Request</span></code> attributes, set a priority of <code class="docutils literal notranslate"><span class="pre">100</span></code> or more.
Otherwise, set a priority lower than <code class="docutils literal notranslate"><span class="pre">100</span></code> to make sure the argument resolver
is not triggered when the <code class="docutils literal notranslate"><span class="pre">Request</span></code> attribute is present (for example, when
passing the user along sub-requests).</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>As you can see in the <code class="docutils literal notranslate"><span class="pre">UserValueResolver::supports()</span></code> method, the user
may not be available (e.g. when the controller is not behind a firewall).
In these cases, the resolver will not be executed. If no argument value
is resolved, an exception will be thrown.</p>
<p>To prevent this, you can add a default value in the controller (e.g. <code class="docutils literal notranslate"><span class="pre">User</span>
<span class="pre">$user</span> <span class="pre">=</span> <span class="pre">null</span></code>). The <code class="docutils literal notranslate"><span class="pre">DefaultValueResolver</span></code> is executed as the last
resolver and will use the default value if no value was already resolved.</p>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>