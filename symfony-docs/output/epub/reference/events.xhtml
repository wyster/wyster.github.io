<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Built-in Symfony Events</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="built-in-symfony-events">
<h1>Built-in Symfony Events</h1>
<p>During the handling of an HTTP request, the Symfony framework (or any
application using the <a class="reference internal" href="../components/http_kernel.xhtml"><span class="doc">HttpKernel component</span></a>)
dispatches some <a class="reference internal" href="../event_dispatcher.xhtml"><span class="doc">events</span></a> which you can use to modify
how the request is handled.</p>
<div class="section" id="kernel-events">
<h2>Kernel Events</h2>
<p>Each event dispatched by the HttpKernel component is a subclass of
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Event/KernelEvent.php" title="Symfony\Component\HttpKernel\Event\KernelEvent"><span class="pre">KernelEvent</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Event/KernelEvent.php]</span></span></code>, which provides the
following information:</p>
<dl class="simple">
<dt><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Event/KernelEvent.php" title="Symfony\Component\HttpKernel\Event\KernelEvent::getRequestType()"><span class="pre">getRequestType()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Event/KernelEvent.php]</span></span></code></dt>
<dd><p>Returns the <em>type</em> of the request (<code class="docutils literal notranslate"><span class="pre">HttpKernelInterface::MASTER_REQUEST</span></code>
or <code class="docutils literal notranslate"><span class="pre">HttpKernelInterface::SUB_REQUEST</span></code>).</p>
</dd>
<dt><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Event/KernelEvent.php" title="Symfony\Component\HttpKernel\Event\KernelEvent::getKernel()"><span class="pre">getKernel()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Event/KernelEvent.php]</span></span></code></dt>
<dd><p>Returns the Kernel handling the request.</p>
</dd>
<dt><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Event/KernelEvent.php" title="Symfony\Component\HttpKernel\Event\KernelEvent::getRequest()"><span class="pre">getRequest()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Event/KernelEvent.php]</span></span></code></dt>
<dd><p>Returns the current <code class="docutils literal notranslate"><span class="pre">Request</span></code> being handled.</p>
</dd>
<dt><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Event/KernelEvent.php" title="Symfony\Component\HttpKernel\Event\KernelEvent::isMasterRequest()"><span class="pre">isMasterRequest()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Event/KernelEvent.php]</span></span></code></dt>
<dd><p>Checks if this is a master request.</p>
</dd>
</dl>
<div class="section" id="kernel-request">
<span id="kernel-core-request"></span><h3><code class="docutils literal notranslate"><span class="pre">kernel.request</span></code></h3>
<p><strong>Event Class</strong>: <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Event/RequestEvent.php" title="Symfony\Component\HttpKernel\Event\RequestEvent"><span class="pre">RequestEvent</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Event/RequestEvent.php]</span></span></code></p>
<p>This event is dispatched very early in Symfony, before the controller is
determined. It’s useful to add information to the Request or return a Response
early to stop the handling of the request.</p>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>Read more on the <a class="reference internal" href="../components/http_kernel.xhtml#component-http-kernel-kernel-request"><span class="std std-ref">kernel.request event</span></a>.</p>
</div>
<p>Execute this command to find out which listeners are registered for this event and
their priorities:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console debug:event-dispatcher kernel.request
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="kernel-controller">
<h3><code class="docutils literal notranslate"><span class="pre">kernel.controller</span></code></h3>
<p><strong>Event Class</strong>: <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Event/ControllerEvent.php" title="Symfony\Component\HttpKernel\Event\ControllerEvent"><span class="pre">ControllerEvent</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Event/ControllerEvent.php]</span></span></code></p>
<p>This event is dispatched after the controller to be executed has been resolved
but before executing it. It’s useful to initialize things later needed by the
controller, such as <a class="reference external" href="https://symfony.com/doc/master/bundles/SensioFrameworkExtraBundle/annotations/converters.html">param converters</a><span class="link-target"> [https://symfony.com/doc/master/bundles/SensioFrameworkExtraBundle/annotations/converters.html]</span>, and even to change the controller
entirely:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Event\ControllerEvent</span><span class="p">;</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">onKernelController</span><span class="p">(</span><span class="nx">ControllerEvent</span> <span class="nv">$event</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="c1">// the controller can be changed to any PHP callable</span>
    <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">setController</span><span class="p">(</span><span class="nv">$myCustomController</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>Read more on the <a class="reference internal" href="../components/http_kernel.xhtml#component-http-kernel-kernel-controller"><span class="std std-ref">kernel.controller event</span></a>.</p>
</div>
<p>Execute this command to find out which listeners are registered for this event and
their priorities:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console debug:event-dispatcher kernel.controller
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="kernel-controller-arguments">
<h3><code class="docutils literal notranslate"><span class="pre">kernel.controller_arguments</span></code></h3>
<p><strong>Event Class</strong>: <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Event/ControllerArgumentsEvent.php" title="Symfony\Component\HttpKernel\Event\ControllerArgumentsEvent"><span class="pre">ControllerArgumentsEvent</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Event/ControllerArgumentsEvent.php]</span></span></code></p>
<p>This event is dispatched just before a controller is called. It’s useful to
configure the arguments that are going to be passed to the controller.
Typically, this is used to map URL routing parameters to their corresponding
named arguments; or pass the current request when the <code class="docutils literal notranslate"><span class="pre">Request</span></code> type-hint is
found:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Event\ControllerArgumentsEvent</span><span class="p">;</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">onKernelControllerArguments</span><span class="p">(</span><span class="nx">ControllerArgumentsEvent</span> <span class="nv">$event</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="c1">// get controller and request arguments</span>
    <span class="nv">$namedArguments</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getRequest</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">attributes</span><span class="o">-&gt;</span><span class="na">all</span><span class="p">();</span>
    <span class="nv">$controllerArguments</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getArguments</span><span class="p">();</span>

    <span class="c1">// set the controller arguments to modify the original arguments or add new ones</span>
    <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">setArguments</span><span class="p">(</span><span class="nv">$newArguments</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Execute this command to find out which listeners are registered for this event and
their priorities:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console debug:event-dispatcher kernel.controller_arguments
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="kernel-view">
<h3><code class="docutils literal notranslate"><span class="pre">kernel.view</span></code></h3>
<p><strong>Event Class</strong>: <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Event/ViewEvent.php" title="Symfony\Component\HttpKernel\Event\ViewEvent"><span class="pre">ViewEvent</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Event/ViewEvent.php]</span></span></code></p>
<p>This event is dispatched after the controller has been executed but <em>only</em> if
the controller does <em>not</em> return a <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Response.php" title="Symfony\Component\HttpFoundation\Response"><span class="pre">Response</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Response.php]</span></span></code>
object. It’s useful to transform the returned value (e.g. a string with some
HTML contents) into the <code class="docutils literal notranslate"><span class="pre">Response</span></code> object needed by Symfony:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Event\ViewEvent</span><span class="p">;</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">onKernelView</span><span class="p">(</span><span class="nx">ViewEvent</span> <span class="nv">$event</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$value</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getControllerResult</span><span class="p">();</span>
    <span class="nv">$response</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">();</span>

    <span class="c1">// ... somehow customize the Response from the return value</span>

    <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">setResponse</span><span class="p">(</span><span class="nv">$response</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>Read more on the <a class="reference internal" href="../components/http_kernel.xhtml#component-http-kernel-kernel-view"><span class="std std-ref">kernel.view event</span></a>.</p>
</div>
<p>Execute this command to find out which listeners are registered for this event and
their priorities:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console debug:event-dispatcher kernel.view
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="kernel-response">
<h3><code class="docutils literal notranslate"><span class="pre">kernel.response</span></code></h3>
<p><strong>Event Class</strong>: <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Event/ResponseEvent.php" title="Symfony\Component\HttpKernel\Event\ResponseEvent"><span class="pre">ResponseEvent</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Event/ResponseEvent.php]</span></span></code></p>
<p>This event is dispatched after the controller or any <code class="docutils literal notranslate"><span class="pre">kernel.view</span></code> listener
returns a <code class="docutils literal notranslate"><span class="pre">Response</span></code> object. It’s useful to modify or replace the response
before sending it back (e.g. add/modify HTTP headers, add cookies, etc.):</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Event\ResponseEvent</span><span class="p">;</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">onKernelResponse</span><span class="p">(</span><span class="nx">ResponseEvent</span> <span class="nv">$event</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$response</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getResponse</span><span class="p">();</span>

    <span class="c1">// ... modify the response object</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>Read more on the <a class="reference internal" href="../components/http_kernel.xhtml#component-http-kernel-kernel-response"><span class="std std-ref">kernel.response event</span></a>.</p>
</div>
<p>Execute this command to find out which listeners are registered for this event and
their priorities:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console debug:event-dispatcher kernel.response
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="kernel-finish-request">
<h3><code class="docutils literal notranslate"><span class="pre">kernel.finish_request</span></code></h3>
<p><strong>Event Class</strong>: <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Event/FinishRequestEvent.php" title="Symfony\Component\HttpKernel\Event\FinishRequestEvent"><span class="pre">FinishRequestEvent</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Event/FinishRequestEvent.php]</span></span></code></p>
<p>This event is dispatched after the <code class="docutils literal notranslate"><span class="pre">kernel.response</span></code> event. It’s useful to reset
the global state of the application (for example, the translator listener resets
the translator’s locale to the one of the parent request):</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Event\FinishRequestEvent</span><span class="p">;</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">onKernelFinishRequest</span><span class="p">(</span><span class="nx">FinishRequestEvent</span> <span class="nv">$event</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">null</span> <span class="o">===</span> <span class="nv">$parentRequest</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">requestStack</span><span class="o">-&gt;</span><span class="na">getParentRequest</span><span class="p">())</span> <span class="p">{</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// reset the locale of the subrequest to the locale of the parent request</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">setLocale</span><span class="p">(</span><span class="nv">$parentRequest</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Execute this command to find out which listeners are registered for this event and
their priorities:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console debug:event-dispatcher kernel.finish_request
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="kernel-terminate">
<h3><code class="docutils literal notranslate"><span class="pre">kernel.terminate</span></code></h3>
<p><strong>Event Class</strong>: <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Event/TerminateEvent.php" title="Symfony\Component\HttpKernel\Event\TerminateEvent"><span class="pre">TerminateEvent</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Event/TerminateEvent.php]</span></span></code></p>
<p>This event is dispatched after the response has been sent (after the execution
of the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/HttpKernel.php" title="Symfony\Component\HttpKernel\HttpKernel::handle()"><span class="pre">handle()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/HttpKernel.php]</span></span></code> method).
It’s useful to perform slow or complex tasks that don’t need to be completed to
send the response (e.g. sending emails).</p>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>Read more on the <a class="reference internal" href="../components/http_kernel.xhtml#component-http-kernel-kernel-terminate"><span class="std std-ref">kernel.terminate event</span></a>.</p>
</div>
<p>Execute this command to find out which listeners are registered for this event and
their priorities:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console debug:event-dispatcher kernel.terminate
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="kernel-exception">
<span id="kernel-kernel-exception"></span><h3><code class="docutils literal notranslate"><span class="pre">kernel.exception</span></code></h3>
<p><strong>Event Class</strong>: <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Event/ExceptionEvent.php" title="Symfony\Component\HttpKernel\Event\ExceptionEvent"><span class="pre">ExceptionEvent</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Event/ExceptionEvent.php]</span></span></code></p>
<p>This event is dispatched as soon as an error occurs during the handling of the
HTTP request. It’s useful to recover from errors or modify the exception details
sent as response:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Event\ExceptionEvent</span><span class="p">;</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">onKernelException</span><span class="p">(</span><span class="nx">ExceptionEvent</span> <span class="nv">$event</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$exception</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getThrowable</span><span class="p">();</span>
    <span class="nv">$response</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">();</span>
    <span class="c1">// setup the Response object based on the caught exception</span>
    <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">setResponse</span><span class="p">(</span><span class="nv">$response</span><span class="p">);</span>

    <span class="c1">// you can alternatively set a new Exception</span>
    <span class="c1">// $exception = new \Exception(&#39;Some special exception&#39;);</span>
    <span class="c1">// $event-&gt;setThrowable($exception);</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The TwigBundle registers an <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/EventListener/ErrorListener.php" title="Symfony\Component\HttpKernel\EventListener\ErrorListener"><span class="pre">ErrorListener</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/EventListener/ErrorListener.php]</span></span></code>
that forwards the <code class="docutils literal notranslate"><span class="pre">Request</span></code> to a given controller defined by the
<code class="docutils literal notranslate"><span class="pre">exception_listener.controller</span></code> parameter.</p>
</div>
<p>Symfony uses the following logic to determine the HTTP status code of the
response:</p>
<ul class="simple">
<li><p>If <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Response.php" title="Symfony\Component\HttpFoundation\Response::isClientError()"><span class="pre">isClientError()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Response.php]</span></span></code>,
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Response.php" title="Symfony\Component\HttpFoundation\Response::isServerError()"><span class="pre">isServerError()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Response.php]</span></span></code> or
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Response.php" title="Symfony\Component\HttpFoundation\Response::isRedirect()"><span class="pre">isRedirect()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Response.php]</span></span></code> is true,
then the status code on your <code class="docutils literal notranslate"><span class="pre">Response</span></code> object is used;</p></li>
<li><p>If the original exception implements
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Exception/HttpExceptionInterface.php" title="Symfony\Component\HttpKernel\Exception\HttpExceptionInterface"><span class="pre">HttpExceptionInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Exception/HttpExceptionInterface.php]</span></span></code>,
then <code class="docutils literal notranslate"><span class="pre">getStatusCode()</span></code> is called on the exception and used (the headers
from <code class="docutils literal notranslate"><span class="pre">getHeaders()</span></code> are also added);</p></li>
<li><p>If both of the above aren’t true, then a 500 status code is used.</p></li>
</ul>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If you want to overwrite the status code of the exception response, which
you should not without a good reason, call
<code class="docutils literal notranslate"><span class="pre">ExceptionEvent::allowCustomResponseCode()</span></code> first and then
set the status code on the response:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$event</span><span class="o">-&gt;</span><span class="na">allowCustomResponseCode</span><span class="p">();</span>
<span class="nv">$response</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">(</span><span class="s1">&#39;No Content&#39;</span><span class="p">,</span> <span class="mi">204</span><span class="p">);</span>
<span class="nv">$event</span><span class="o">-&gt;</span><span class="na">setResponse</span><span class="p">(</span><span class="nv">$response</span><span class="p">);</span>
</pre></div>
</div>
<p>The status code sent to the client in the above example will be <code class="docutils literal notranslate"><span class="pre">204</span></code>. If
<code class="docutils literal notranslate"><span class="pre">$event-&gt;allowCustomResponseCode()</span></code> is omitted, then the kernel will set
an appropriate status code based on the type of exception thrown.</p>
</div>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>Read more on the <a class="reference internal" href="../components/http_kernel.xhtml#component-http-kernel-kernel-exception"><span class="std std-ref">kernel.exception event</span></a>.</p>
</div>
<p>Execute this command to find out which listeners are registered for this event and
their priorities:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console debug:event-dispatcher kernel.exception
</pre></div>
</td></tr></table></div>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>