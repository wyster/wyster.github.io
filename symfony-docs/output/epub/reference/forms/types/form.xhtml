<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>FormType Field</title>
    <link rel="stylesheet" href="../../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="formtype-field">
<span id="index-0"></span><h1>FormType Field</h1>
<p>The <code class="docutils literal notranslate"><span class="pre">FormType</span></code> predefines a couple of options that are then available
on all types for which <code class="docutils literal notranslate"><span class="pre">FormType</span></code> is the parent.</p>
<table class="docutils">
<colgroup>
<col style="width: 28%" />
<col style="width: 72%" />
</colgroup>
<tbody>
<tr class="row-odd"><td><p>Options</p></td>
<td><ul class="simple">
<li><p><a class="reference internal" href="#action">action</a></p></li>
<li><p><a class="reference internal" href="#allow-extra-fields">allow_extra_fields</a></p></li>
<li><p><a class="reference internal" href="#by-reference">by_reference</a></p></li>
<li><p><a class="reference internal" href="#compound">compound</a></p></li>
<li><p><a class="reference internal" href="#constraints">constraints</a></p></li>
<li><p><a class="reference internal" href="#data">data</a></p></li>
<li><p><a class="reference internal" href="#data-class">data_class</a></p></li>
<li><p><a class="reference internal" href="#empty-data">empty_data</a></p></li>
<li><p><a class="reference internal" href="#error-bubbling">error_bubbling</a></p></li>
<li><p><a class="reference internal" href="#error-mapping">error_mapping</a></p></li>
<li><p><a class="reference internal" href="#extra-fields-message">extra_fields_message</a></p></li>
<li><p><a class="reference internal" href="#help">help</a></p></li>
<li><p><a class="reference internal" href="#help-attr">help_attr</a></p></li>
<li><p><a class="reference internal" href="#help-html">help_html</a></p></li>
<li><p><a class="reference internal" href="#help-translation-parameters">help_translation_parameters</a></p></li>
<li><p><a class="reference internal" href="#inherit-data">inherit_data</a></p></li>
<li><p><a class="reference internal" href="#invalid-message">invalid_message</a></p></li>
<li><p><a class="reference internal" href="#invalid-message-parameters">invalid_message_parameters</a></p></li>
<li><p><a class="reference internal" href="#label-attr">label_attr</a></p></li>
<li><p><a class="reference internal" href="#label-format">label_format</a></p></li>
<li><p><a class="reference internal" href="#mapped">mapped</a></p></li>
<li><p><a class="reference internal" href="#method">method</a></p></li>
<li><p><a class="reference internal" href="#post-max-size-message">post_max_size_message</a></p></li>
<li><p><a class="reference internal" href="#property-path">property_path</a></p></li>
<li><p><a class="reference internal" href="#required">required</a></p></li>
<li><p><a class="reference internal" href="#trim">trim</a></p></li>
<li><p><a class="reference internal" href="#validation-groups">validation_groups</a></p></li>
</ul>
</td>
</tr>
<tr class="row-even"><td><p>Inherited options</p></td>
<td><ul class="simple">
<li><p><a class="reference internal" href="#attr">attr</a></p></li>
<li><p><a class="reference internal" href="#auto-initialize">auto_initialize</a></p></li>
<li><p><a class="reference internal" href="#block-name">block_name</a></p></li>
<li><p><a class="reference internal" href="#block-prefix">block_prefix</a></p></li>
<li><p><a class="reference internal" href="#disabled">disabled</a></p></li>
<li><p><a class="reference internal" href="#label">label</a></p></li>
<li><p><a class="reference internal" href="#label-html">label_html</a></p></li>
<li><p><a class="reference internal" href="#row-attr">row_attr</a></p></li>
<li><p><a class="reference internal" href="#translation-domain">translation_domain</a></p></li>
<li><p><a class="reference internal" href="#label-translation-parameters">label_translation_parameters</a></p></li>
<li><p><a class="reference internal" href="#attr-translation-parameters">attr_translation_parameters</a></p></li>
</ul>
</td>
</tr>
<tr class="row-odd"><td><p>Default invalid message</p></td>
<td><p>This value is not valid.</p></td>
</tr>
<tr class="row-even"><td><p>Legacy invalid message</p></td>
<td><p>This value is not valid.</p></td>
</tr>
<tr class="row-odd"><td><p>Parent</p></td>
<td><p>none</p></td>
</tr>
<tr class="row-even"><td><p>Class</p></td>
<td><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Extension/Core/Type/FormType.php" title="Symfony\Component\Form\Extension\Core\Type\FormType"><span class="pre">FormType</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Extension/Core/Type/FormType.php]</span></span></code></p></td>
</tr>
</tbody>
</table>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The full list of options defined and inherited by this form type is
available running this command in your app:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># replace &#39;FooType&#39; by the class name of your form type</span>
<span class="gp">$</span> php bin/console debug:form FooType
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="field-options">
<h2>Field Options</h2>
<div class="section" id="action">
<span id="form-option-action"></span><h3><code class="docutils literal notranslate"><span class="pre">action</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">string</span></code> <strong>default</strong>: empty string</p>
<p>This option specifies where to send the form’s data on submission (usually
a URI). Its value is rendered as the <code class="docutils literal notranslate"><span class="pre">action</span></code> attribute of the <code class="docutils literal notranslate"><span class="pre">form</span></code>
element. An empty value is considered a same-document reference, i.e. the
form will be submitted to the same URI that rendered the form.</p>
</div>
<div class="section" id="allow-extra-fields">
<span id="form-option-allow-extra-fields"></span><h3><code class="docutils literal notranslate"><span class="pre">allow_extra_fields</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">boolean</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">false</span></code></p>
<p>Usually, if you submit extra fields that aren’t configured in your form,
you’ll get a “This form should not contain extra fields.” validation error.</p>
<p>You can silence this validation error by enabling the <code class="docutils literal notranslate"><span class="pre">allow_extra_fields</span></code>
option on the form.</p>
</div>
<div class="section" id="by-reference">
<h3><code class="docutils literal notranslate"><span class="pre">by_reference</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">boolean</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">true</span></code></p>
<p>In most cases, if you have an <code class="docutils literal notranslate"><span class="pre">author</span></code> field, then you expect <code class="docutils literal notranslate"><span class="pre">setAuthor()</span></code>
to be called on the underlying object. In some cases, however, <code class="docutils literal notranslate"><span class="pre">setAuthor()</span></code>
may <em>not</em> be called. Setting <code class="docutils literal notranslate"><span class="pre">by_reference</span></code> to <code class="docutils literal notranslate"><span class="pre">false</span></code> ensures that the setter is
called in all cases.</p>
<p>To explain this further, here’s a simple example:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\EmailType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\FormType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\TextType</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="nv">$builder</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createFormBuilder</span><span class="p">(</span><span class="nv">$article</span><span class="p">);</span>
<span class="nv">$builder</span>
    <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="nx">TextType</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span>
        <span class="nv">$builder</span><span class="o">-&gt;</span><span class="na">create</span><span class="p">(</span><span class="s1">&#39;author&#39;</span><span class="p">,</span> <span class="nx">FormType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;by_reference&#39;</span> <span class="o">=&gt;</span> <span class="o">?</span><span class="p">])</span>
            <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="nx">TextType</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;email&#39;</span><span class="p">,</span> <span class="nx">EmailType</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
    <span class="p">)</span>
</pre></div>
</div>
<p>If <code class="docutils literal notranslate"><span class="pre">by_reference</span></code> is true, the following takes place behind the scenes
when you call <code class="docutils literal notranslate"><span class="pre">submit()</span></code> (or <code class="docutils literal notranslate"><span class="pre">handleRequest()</span></code>) on the form:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$article</span><span class="o">-&gt;</span><span class="na">setTitle</span><span class="p">(</span><span class="s1">&#39;...&#39;</span><span class="p">);</span>
<span class="nv">$article</span><span class="o">-&gt;</span><span class="na">getAuthor</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">setName</span><span class="p">(</span><span class="s1">&#39;...&#39;</span><span class="p">);</span>
<span class="nv">$article</span><span class="o">-&gt;</span><span class="na">getAuthor</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">setEmail</span><span class="p">(</span><span class="s1">&#39;...&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>Notice that <code class="docutils literal notranslate"><span class="pre">setAuthor()</span></code> is not called. The author is modified by reference.</p>
<p>If you set <code class="docutils literal notranslate"><span class="pre">by_reference</span></code> to false, submitting looks like this:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$article</span><span class="o">-&gt;</span><span class="na">setTitle</span><span class="p">(</span><span class="s1">&#39;...&#39;</span><span class="p">);</span>
<span class="nv">$author</span> <span class="o">=</span> <span class="k">clone</span> <span class="nv">$article</span><span class="o">-&gt;</span><span class="na">getAuthor</span><span class="p">();</span>
<span class="nv">$author</span><span class="o">-&gt;</span><span class="na">setName</span><span class="p">(</span><span class="s1">&#39;...&#39;</span><span class="p">);</span>
<span class="nv">$author</span><span class="o">-&gt;</span><span class="na">setEmail</span><span class="p">(</span><span class="s1">&#39;...&#39;</span><span class="p">);</span>
<span class="nv">$article</span><span class="o">-&gt;</span><span class="na">setAuthor</span><span class="p">(</span><span class="nv">$author</span><span class="p">);</span>
</pre></div>
</div>
<p>So, all that <code class="docutils literal notranslate"><span class="pre">by_reference=false</span></code> really does is that it clones the object,
which enforces the framework to call the setter on the parent object.</p>
<p>Similarly, if you’re using the <a class="reference internal" href="collection.xhtml"><span class="doc">CollectionType</span></a>
field where your underlying collection data is an object (like with
Doctrine’s <code class="docutils literal notranslate"><span class="pre">ArrayCollection</span></code>), then <code class="docutils literal notranslate"><span class="pre">by_reference</span></code> must be set to <code class="docutils literal notranslate"><span class="pre">false</span></code>
if you need the adder and remover (e.g. <code class="docutils literal notranslate"><span class="pre">addAuthor()</span></code> and <code class="docutils literal notranslate"><span class="pre">removeAuthor()</span></code>)
to be called.</p>
</div>
<div class="section" id="compound">
<h3><code class="docutils literal notranslate"><span class="pre">compound</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">boolean</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">true</span></code></p>
<p>A compound form can be either an entire <code class="docutils literal notranslate"><span class="pre">&lt;form&gt;</span></code> element or a group of form fields (rendered
for example inside a <code class="docutils literal notranslate"><span class="pre">&lt;div&gt;</span></code> or <code class="docutils literal notranslate"><span class="pre">&lt;tr&gt;</span></code> container elements). Compound forms use the
DataMapperInterface to initialize their children or to write back their submitted data.</p>
<p>A simple (non-compound) form is rendered as any of these HTML elements: <code class="docutils literal notranslate"><span class="pre">&lt;input&gt;</span></code>
(<code class="docutils literal notranslate"><span class="pre">TextType</span></code>, <code class="docutils literal notranslate"><span class="pre">FileType</span></code>, <code class="docutils literal notranslate"><span class="pre">HiddenType</span></code>), <code class="docutils literal notranslate"><span class="pre">&lt;textarea&gt;</span></code> (<code class="docutils literal notranslate"><span class="pre">TextareaType</span></code>)
or <code class="docutils literal notranslate"><span class="pre">&lt;select&gt;</span></code> (<code class="docutils literal notranslate"><span class="pre">ChoiceType</span></code>).</p>
<p>Some core types like date related types or the <code class="docutils literal notranslate"><span class="pre">ChoiceType</span></code> are simple or compound depending
on other options (such as <code class="docutils literal notranslate"><span class="pre">expanded</span></code> or <code class="docutils literal notranslate"><span class="pre">widget</span></code>). They will either behave as a simple text
field or as a group of text or choice fields.</p>
</div>
<div class="section" id="constraints">
<span id="reference-form-option-constraints"></span><h3><code class="docutils literal notranslate"><span class="pre">constraints</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">array</span></code> or <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Constraint.php" title="Symfony\Component\Validator\Constraint"><span class="pre">Constraint</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Constraint.php]</span></span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">null</span></code></p>
<p>Allows you to attach one or more validation constraints to a specific field.
For more information, see <a class="reference internal" href="../../../form/without_class.xhtml#form-option-constraints"><span class="std std-ref">Adding Validation</span></a>.
This option is added in the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Extension/Validator/Type/FormTypeValidatorExtension.php" title="Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension"><span class="pre">FormTypeValidatorExtension</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Extension/Validator/Type/FormTypeValidatorExtension.php]</span></span></code>
form extension.</p>
</div>
<div class="section" id="data">
<h3><code class="docutils literal notranslate"><span class="pre">data</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">mixed</span></code> <strong>default</strong>: Defaults to field of the underlying structure.</p>
<p>When you create a form, each field initially displays the value of the
corresponding property of the form’s domain data (e.g. if you bind an object to
the form). If you want to override this initial value for the form or
an individual field, you can set it in the data option:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\HiddenType</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="nv">$builder</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;token&#39;</span><span class="p">,</span> <span class="nx">HiddenType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;data&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;abcdef&#39;</span><span class="p">,</span>
<span class="p">]);</span>
</pre></div>
</div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>The <code class="docutils literal notranslate"><span class="pre">data</span></code> option <em>always</em> overrides the value taken from the domain data
(object) when rendering. This means the object value is also overridden when
the form edits an already persisted object, causing it to lose its
persisted value when the form is submitted.</p>
</div>
</div>
<div class="section" id="data-class">
<h3><code class="docutils literal notranslate"><span class="pre">data_class</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">string</span></code></p>
<p>This option is used to set the appropriate data mapper to be used by the
form, so you can use it for any form field type which requires an object:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">App\Entity\Media</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">App\Form\MediaType</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="nv">$builder</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;media&#39;</span><span class="p">,</span> <span class="nx">MediaType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;data_class&#39;</span> <span class="o">=&gt;</span> <span class="nx">Media</span><span class="o">::</span><span class="na">class</span><span class="p">,</span>
<span class="p">]);</span>
</pre></div>
</div>
</div>
<div class="section" id="empty-data">
<span id="reference-form-option-empty-data"></span><h3><code class="docutils literal notranslate"><span class="pre">empty_data</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">mixed</span></code></p>
<p>The actual default value of this option depends on other field options:</p>
<ul class="simple">
<li><p>If <code class="docutils literal notranslate"><span class="pre">data_class</span></code> is set and <code class="docutils literal notranslate"><span class="pre">required</span></code> is <code class="docutils literal notranslate"><span class="pre">true</span></code>, then <code class="docutils literal notranslate"><span class="pre">new</span> <span class="pre">$data_class()</span></code>;</p></li>
<li><p>If <code class="docutils literal notranslate"><span class="pre">data_class</span></code> is set and <code class="docutils literal notranslate"><span class="pre">required</span></code> is <code class="docutils literal notranslate"><span class="pre">false</span></code>, then <code class="docutils literal notranslate"><span class="pre">null</span></code>;</p></li>
<li><p>If <code class="docutils literal notranslate"><span class="pre">data_class</span></code> is not set and <code class="docutils literal notranslate"><span class="pre">compound</span></code> is <code class="docutils literal notranslate"><span class="pre">true</span></code>, then <code class="docutils literal notranslate"><span class="pre">[]</span></code>
(empty array);</p></li>
<li><p>If <code class="docutils literal notranslate"><span class="pre">data_class</span></code> is not set and <code class="docutils literal notranslate"><span class="pre">compound</span></code> is <code class="docutils literal notranslate"><span class="pre">false</span></code>, then <code class="docutils literal notranslate"><span class="pre">''</span></code>
(empty string).</p></li>
</ul>
<p>This option determines what value the field will <em>return</em> when the submitted
value is empty (or missing). It does not set an initial value if none is
provided when the form is rendered in a view.</p>
<p>This means it helps you handling form submission with blank fields. For
example, if you want the <code class="docutils literal notranslate"><span class="pre">name</span></code> field to be explicitly set to <code class="docutils literal notranslate"><span class="pre">John</span> <span class="pre">Doe</span></code>
when no value is selected, you can do it like this:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$builder</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;required&#39;</span>   <span class="o">=&gt;</span> <span class="k">false</span><span class="p">,</span>
    <span class="s1">&#39;empty_data&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;John Doe&#39;</span><span class="p">,</span>
<span class="p">]);</span>
</pre></div>
</div>
<p>This will still render an empty text box, but upon submission the <code class="docutils literal notranslate"><span class="pre">John</span> <span class="pre">Doe</span></code>
value will be set. Use the <code class="docutils literal notranslate"><span class="pre">data</span></code> or <code class="docutils literal notranslate"><span class="pre">placeholder</span></code> options to show this
initial value in the rendered form.</p>
<p>If a form is compound, you can set <code class="docutils literal notranslate"><span class="pre">empty_data</span></code> as an array, object or
closure. See the <a class="reference internal" href="../../../form/use_empty_data.xhtml"><span class="doc">How to Configure empty Data for a Form Class</span></a> article for more details about
these options.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If you want to set the <code class="docutils literal notranslate"><span class="pre">empty_data</span></code> option for your entire form class,
see the <a class="reference internal" href="../../../form/use_empty_data.xhtml"><span class="doc">How to Configure empty Data for a Form Class</span></a> article.</p>
</div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p><a class="reference internal" href="../../../form/data_transformers.xhtml"><span class="doc">Form data transformers</span></a> will still be
applied to the <code class="docutils literal notranslate"><span class="pre">empty_data</span></code> value. This means that an empty string will
be cast to <code class="docutils literal notranslate"><span class="pre">null</span></code>. Use a custom data transformer if you explicitly want
to return the empty string.</p>
</div>
</div>
<div class="section" id="error-bubbling">
<span id="reference-form-option-error-bubbling"></span><h3><code class="docutils literal notranslate"><span class="pre">error_bubbling</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">boolean</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">false</span></code> unless the form is <code class="docutils literal notranslate"><span class="pre">compound</span></code></p>
<p>If <code class="docutils literal notranslate"><span class="pre">true</span></code>, any errors for this field will be passed to the parent field
or form. For example, if set to <code class="docutils literal notranslate"><span class="pre">true</span></code> on a normal field, any errors for
that field will be attached to the main form, not to the specific field.</p>
</div>
<div class="section" id="error-mapping">
<h3><code class="docutils literal notranslate"><span class="pre">error_mapping</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">array</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">[]</span></code></p>
<p>This option allows you to modify the target of a validation error.</p>
<p>Imagine you have a custom method named <code class="docutils literal notranslate"><span class="pre">matchingCityAndZipCode()</span></code> that validates
whether the city and zip code match. Unfortunately, there is no <code class="docutils literal notranslate"><span class="pre">matchingCityAndZipCode</span></code>
field in your form, so all that Symfony can do is display the error on top
of the form.</p>
<p>With customized error mapping, you can do better: map the error to the city
field so that it displays above it:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">public</span> <span class="k">function</span> <span class="nf">configureOptions</span><span class="p">(</span><span class="nx">OptionsResolver</span> <span class="nv">$resolver</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$resolver</span><span class="o">-&gt;</span><span class="na">setDefaults</span><span class="p">([</span>
        <span class="s1">&#39;error_mapping&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
            <span class="s1">&#39;matchingCityAndZipCode&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;city&#39;</span><span class="p">,</span>
        <span class="p">],</span>
    <span class="p">]);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Here are the rules for the left and the right side of the mapping:</p>
<ul class="simple">
<li><p>The left side contains property paths;</p></li>
<li><p>If the violation is generated on a property or method of a class, its
path is the <code class="docutils literal notranslate"><span class="pre">propertyName</span></code>;</p></li>
<li><p>If the violation is generated on an entry of an <code class="docutils literal notranslate"><span class="pre">array</span></code> or <code class="docutils literal notranslate"><span class="pre">ArrayAccess</span></code>
object, the property path is <code class="docutils literal notranslate"><span class="pre">[indexName]</span></code>;</p></li>
<li><p>You can construct nested property paths by concatenating them, separating
properties by dots. For example: <code class="docutils literal notranslate"><span class="pre">addresses[work].matchingCityAndZipCode</span></code>;</p></li>
<li><p>The right side contains the names of fields in the form.</p></li>
</ul>
<p>By default, errors for any property that is not mapped will bubble up to the
parent form. You can use the dot (<code class="docutils literal notranslate"><span class="pre">.</span></code>) on the left side to map errors of all
unmapped properties to a particular field. For instance, to map all these
errors to the <code class="docutils literal notranslate"><span class="pre">city</span></code> field, use:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$resolver</span><span class="o">-&gt;</span><span class="na">setDefaults</span><span class="p">([</span>
    <span class="s1">&#39;error_mapping&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;.&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;city&#39;</span><span class="p">,</span>
    <span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</div>
</div>
<div class="section" id="extra-fields-message">
<h3><code class="docutils literal notranslate"><span class="pre">extra_fields_message</span></code></h3>
<div class="versionadded">
<p><span class="versionmodified">New in version 5.1: </span>Pluralization support was introduced in Symfony 5.1.</p>
</div>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">string</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">This</span> <span class="pre">form</span> <span class="pre">should</span> <span class="pre">not</span> <span class="pre">contain</span> <span class="pre">extra</span> <span class="pre">fields.</span></code></p>
<p>This is the validation error message that’s used if the submitted form data
contains one or more fields that are not part of the form definition. The
placeholder <code class="docutils literal notranslate"><span class="pre">{{</span> <span class="pre">extra_fields</span> <span class="pre">}}</span></code> can be used to display a comma separated
list of the submitted extra field names.</p>
<p>This message can be pluralized, see
<a class="reference internal" href="../../../translation/message_format.xhtml#component-translation-pluralization"><span class="std std-ref">formatting pluralized messages</span></a> for
details.</p>
</div>
<div class="section" id="help">
<h3>help</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">string</span></code> <strong>default</strong>: null</p>
<p>Allows you to define a help message for the form field, which by default is
rendered below the field:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$builder</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;zipCode&#39;</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;help&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;The ZIP/Postal code for your credit card\&#39;s billing address.&#39;</span><span class="p">,</span>
<span class="p">]);</span>
</pre></div>
</div>
</div>
<div class="section" id="help-attr">
<h3>help_attr</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">array</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">[]</span></code></p>
<p>Sets the HTML attributes for the element used to display the help message of the
form field. Its value is an associative array with HTML attribute names as keys.
These attributes can also be set in the template:</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{{</span> <span class="nv">form_help</span><span class="o">(</span><span class="nv">form.name</span><span class="o">,</span> <span class="s1">&#39;Your name&#39;</span><span class="o">,</span> <span class="o">{</span>
    <span class="s1">&#39;help_attr&#39;</span><span class="o">:</span> <span class="o">{</span><span class="s1">&#39;class&#39;</span><span class="o">:</span> <span class="s1">&#39;CUSTOM_LABEL_CLASS&#39;</span><span class="o">}</span>
<span class="o">})</span> <span class="cp">}}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="help-html">
<h3>help_html</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">boolean</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">false</span></code></p>
<p>By default, the contents of the <code class="docutils literal notranslate"><span class="pre">help</span></code> option are escaped before rendering
them in the template. Set this option to <code class="docutils literal notranslate"><span class="pre">true</span></code> to not escape them, which is
useful when the help contains HTML elements.</p>
</div>
<div class="section" id="help-translation-parameters">
<h3>help_translation_parameters</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">array</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">[]</span></code></p>
<p>The content of the <a class="reference internal" href="#help">help</a> option is translated before displaying it, so it
can contain <a class="reference internal" href="../../../translation/message_format.xhtml#component-translation-placeholders"><span class="std std-ref">translation placeholders</span></a>.
This option defines the values used to replace those placeholders.</p>
<p>Given this translation message:</p>
<div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># translations/messages.en.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">form.order.id.help</span><span class="p p-Indicator">:</span> <span class="s">&#39;This</span><span class="nv"> </span><span class="s">will</span><span class="nv"> </span><span class="s">be</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">reference</span><span class="nv"> </span><span class="s">in</span><span class="nv"> </span><span class="s">communications</span><span class="nv"> </span><span class="s">with</span><span class="nv"> </span><span class="s">%company%&#39;</span>
</pre></div>
</td></tr></table></div>
<p>You can specify the placeholder values as follows:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$builder</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;help&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;form.order.id.help&#39;</span><span class="p">,</span>
    <span class="s1">&#39;help_translation_parameters&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;%company%&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;ACME Inc.&#39;</span><span class="p">,</span>
    <span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</div>
<p>The <code class="docutils literal notranslate"><span class="pre">help_translation_parameters</span></code> option of children fields is merged with the
same option of their parents, so children can reuse and/or override any of the
parent placeholders.</p>
</div>
<div class="section" id="inherit-data">
<h3><code class="docutils literal notranslate"><span class="pre">inherit_data</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">boolean</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">false</span></code></p>
<p>This option determines if the form will inherit data from its parent form.
This can be useful if you have a set of fields that are duplicated across
multiple forms. See <a class="reference internal" href="../../../form/inherit_data_option.xhtml"><span class="doc">How to Reduce Code Duplication with “inherit_data”</span></a>.</p>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>When a field has the <code class="docutils literal notranslate"><span class="pre">inherit_data</span></code> option set, it uses the data of
the parent form as is. This means that
<a class="reference internal" href="../../../form/data_transformers.xhtml"><span class="doc">Data Transformers</span></a> won’t be
applied to that field.</p>
</div>
</div>
<div class="section" id="invalid-message">
<h3><code class="docutils literal notranslate"><span class="pre">invalid_message</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">string</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">This</span> <span class="pre">value</span> <span class="pre">is</span> <span class="pre">not</span> <span class="pre">valid</span></code></p>
<p>This is the validation error message that’s used if the data entered into
this field doesn’t make sense (i.e. fails validation).</p>
<p>This might happen, for example, if the user enters a nonsense string into
a <a class="reference internal" href="time.xhtml"><span class="doc">TimeType</span></a> field that cannot be converted
into a real time or if the user enters a string (e.g. <code class="docutils literal notranslate"><span class="pre">apple</span></code>) into a
number field.</p>
<p>Normal (business logic) validation (such as when setting a minimum length
for a field) should be set using validation messages with your validation
rules (<a class="reference internal" href="../../../validation.xhtml#validation-constraint-configuration"><span class="std std-ref">reference</span></a>).</p>
</div>
<div class="section" id="invalid-message-parameters">
<h3><code class="docutils literal notranslate"><span class="pre">invalid_message_parameters</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">array</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">[]</span></code></p>
<p>When setting the <code class="docutils literal notranslate"><span class="pre">invalid_message</span></code> option, you may need to
include some variables in the string. This can be done by adding placeholders
to that option and including the variables in this option:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$builder</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;someField&#39;</span><span class="p">,</span> <span class="nx">SomeFormType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span>
    <span class="c1">// ...</span>
    <span class="s1">&#39;invalid_message&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;You entered an invalid value, it should include %num% letters&#39;</span><span class="p">,</span>
    <span class="s1">&#39;invalid_message_parameters&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;%num%&#39;</span> <span class="o">=&gt;</span> <span class="mi">6</span><span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</div>
</div>
<div class="section" id="label-attr">
<h3><code class="docutils literal notranslate"><span class="pre">label_attr</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">array</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">[]</span></code></p>
<p>Sets the HTML attributes for the <code class="docutils literal notranslate"><span class="pre">&lt;label&gt;</span></code> element, which will be used
when rendering the label for the field. It’s an associative array with HTML
attribute as a key. This attributes can also be directly set inside the
template:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Twig</em><div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{{</span> <span class="nv">form_label</span><span class="o">(</span><span class="nv">form.name</span><span class="o">,</span> <span class="s1">&#39;Your name&#39;</span><span class="o">,</span> <span class="o">{</span>
    <span class="s1">&#39;label_attr&#39;</span><span class="o">:</span> <span class="o">{</span><span class="s1">&#39;class&#39;</span><span class="o">:</span> <span class="s1">&#39;CUSTOM_LABEL_CLASS&#39;</span><span class="o">}</span>
<span class="o">})</span> <span class="cp">}}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="k">echo</span> <span class="nv">$view</span><span class="p">[</span><span class="s1">&#39;form&#39;</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">label</span><span class="p">(</span>
    <span class="nv">$form</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">],</span>
    <span class="s1">&#39;Your name&#39;</span><span class="p">,</span>
    <span class="p">[</span><span class="s1">&#39;label_attr&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;class&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;CUSTOM_LABEL_CLASS&#39;</span><span class="p">]]</span>
<span class="p">);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
<div class="section" id="label-format">
<h3><code class="docutils literal notranslate"><span class="pre">label_format</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">string</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">null</span></code></p>
<p>Configures the string used as the label of the field, in case the <code class="docutils literal notranslate"><span class="pre">label</span></code>
option was not set. This is useful when using
<a class="reference internal" href="../../../translation.xhtml#translation-real-vs-keyword-messages"><span class="std std-ref">keyword translation messages</span></a>.</p>
<p>If you’re using keyword translation messages as labels, you often end up having
multiple keyword messages for the same label (e.g. <code class="docutils literal notranslate"><span class="pre">profile_address_street</span></code>,
<code class="docutils literal notranslate"><span class="pre">invoice_address_street</span></code>). This is because the label is built for each “path”
to a field. To avoid duplicated keyword messages, you can configure the label
format to a static value, like:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="nv">$profileFormBuilder</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;address&#39;</span><span class="p">,</span> <span class="nx">AddressType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;label_format&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;form.address.%name%&#39;</span><span class="p">,</span>
<span class="p">]);</span>

<span class="nv">$invoiceFormBuilder</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;invoice&#39;</span><span class="p">,</span> <span class="nx">AddressType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;label_format&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;form.address.%name%&#39;</span><span class="p">,</span>
<span class="p">]);</span>
</pre></div>
</div>
<p>This option is inherited by the child types. With the code above, the label of
the <code class="docutils literal notranslate"><span class="pre">street</span></code> field of both forms will use the <code class="docutils literal notranslate"><span class="pre">form.address.street</span></code> keyword
message.</p>
<p>Two variables are available in the label format:</p>
<dl class="simple">
<dt><code class="docutils literal notranslate"><span class="pre">%id%</span></code></dt>
<dd><p>A unique identifier for the field, consisting of the complete path to the
field and the field name (e.g. <code class="docutils literal notranslate"><span class="pre">profile_address_street</span></code>);</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">%name%</span></code></dt>
<dd><p>The field name (e.g. <code class="docutils literal notranslate"><span class="pre">street</span></code>).</p>
</dd>
</dl>
<p>The default value (<code class="docutils literal notranslate"><span class="pre">null</span></code>) results in a
<a class="reference internal" href="../../twig_reference.xhtml#reference-twig-humanize-filter"><span class="std std-ref">“humanized” version</span></a> of the field name.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The <code class="docutils literal notranslate"><span class="pre">label_format</span></code> option is evaluated in the form theme. Make sure to
update your templates in case you
<a class="reference internal" href="../../../form/form_customization.xhtml"><span class="doc">customized form theming</span></a>.</p>
</div>
</div>
<div class="section" id="mapped">
<span id="reference-form-option-mapped"></span><h3><code class="docutils literal notranslate"><span class="pre">mapped</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">boolean</span></code>  <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">true</span></code></p>
<p>If you wish the field to be ignored when reading or writing to the object,
you can set the <code class="docutils literal notranslate"><span class="pre">mapped</span></code> option to <code class="docutils literal notranslate"><span class="pre">false</span></code>.</p>
</div>
<div class="section" id="method">
<span id="form-option-method"></span><h3><code class="docutils literal notranslate"><span class="pre">method</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">string</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">POST</span></code></p>
<p>This option specifies the HTTP method used to submit the form’s data. Its
value is rendered as the <code class="docutils literal notranslate"><span class="pre">method</span></code> attribute of the <code class="docutils literal notranslate"><span class="pre">form</span></code> element and
is used to decide whether to process the form submission in the
<code class="docutils literal notranslate"><span class="pre">handleRequest()</span></code> method after submission. Possible values are:</p>
<ul class="simple">
<li><p>POST</p></li>
<li><p>GET</p></li>
<li><p>PUT</p></li>
<li><p>DELETE</p></li>
<li><p>PATCH</p></li>
</ul>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>When the method is PUT, PATCH, or DELETE, Symfony will automatically
render a <code class="docutils literal notranslate"><span class="pre">_method</span></code> hidden field in your form. This is used to “fake”
these HTTP methods, as they’re not supported on standard browsers. This can
be useful when <a class="reference internal" href="../../../routing.xhtml#routing-matching-http-methods"><span class="std std-ref">matching routes by HTTP method</span></a>.</p>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The PATCH method allows submitting partial data. In other words, if
the submitted form data is missing certain fields, those will be ignored
and the default values (if any) will be used. With all other HTTP methods,
if the submitted form data is missing some fields, those fields are
set to <code class="docutils literal notranslate"><span class="pre">null</span></code>.</p>
</div>
</div>
<div class="section" id="post-max-size-message">
<h3><code class="docutils literal notranslate"><span class="pre">post_max_size_message</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">string</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">The</span> <span class="pre">uploaded</span> <span class="pre">file</span> <span class="pre">was</span> <span class="pre">too</span> <span class="pre">large.</span> <span class="pre">Please</span> <span class="pre">try</span> <span class="pre">to</span> <span class="pre">upload</span> <span class="pre">a</span> <span class="pre">smaller</span> <span class="pre">file.</span></code></p>
<p>This is the validation error message that’s used if submitted POST form
data exceeds <code class="docutils literal notranslate"><span class="pre">php.ini</span></code>’s <code class="docutils literal notranslate"><span class="pre">post_max_size</span></code> directive. The <code class="docutils literal notranslate"><span class="pre">{{</span> <span class="pre">max</span> <span class="pre">}}</span></code>
placeholder can be used to display the allowed size.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Validating the <code class="docutils literal notranslate"><span class="pre">post_max_size</span></code> only happens on the root form.</p>
</div>
</div>
<div class="section" id="property-path">
<span id="reference-form-option-property-path"></span><h3><code class="docutils literal notranslate"><span class="pre">property_path</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">PropertyPathInterface|string|null</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">null</span></code></p>
<p>By default (when the value of this option is <code class="docutils literal notranslate"><span class="pre">null</span></code>) form fields read from and
write to the properties with the same names in the form’s domain object. The
<code class="docutils literal notranslate"><span class="pre">property_path</span></code> option lets you define which property a field reads from and
writes to. The value of this option can be any
<a class="reference internal" href="../../../components/property_access.xhtml"><span class="doc">valid PropertyAccess syntax</span></a>.</p>
</div>
<div class="section" id="required">
<span id="reference-form-option-required"></span><h3><code class="docutils literal notranslate"><span class="pre">required</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">boolean</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">true</span></code></p>
<p>If true, an <a class="reference external" href="http://diveintohtml5.info/forms.html">HTML5 required attribute</a><span class="link-target"> [http://diveintohtml5.info/forms.html]</span> will be rendered. The corresponding
<code class="docutils literal notranslate"><span class="pre">label</span></code> will also render with a <code class="docutils literal notranslate"><span class="pre">required</span></code> class.</p>
<p>This is superficial and independent of validation. At best, if you let
Symfony guess your field type, then the value of this option will be guessed
from your validation information.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The required option also affects how empty data for each field is
handled. For more details, see the <a class="reference internal" href="#empty-data">empty_data</a> option.</p>
</div>
</div>
<div class="section" id="trim">
<h3><code class="docutils literal notranslate"><span class="pre">trim</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">boolean</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">true</span></code></p>
<p>If true, the whitespace of the submitted string value will be stripped
via the <code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/function.trim.php" title="trim"><span class="pre">trim</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/function.trim.php]</span></span></code> function when the data is bound. This guarantees
that if a value is submitted with extra whitespace, it will be removed before
the value is merged back onto the underlying object.</p>
</div>
<div class="section" id="validation-groups">
<h3><code class="docutils literal notranslate"><span class="pre">validation_groups</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">array</span></code>, <code class="docutils literal notranslate"><span class="pre">string</span></code>, <code class="docutils literal notranslate"><span class="pre">callable</span></code>, <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Constraints/GroupSequence.php" title="Symfony\Component\Validator\Constraints\GroupSequence"><span class="pre">GroupSequence</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Constraints/GroupSequence.php]</span></span></code> or <code class="docutils literal notranslate"><span class="pre">null</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">null</span></code></p>
<p>This option is only valid on the root form and is used to specify which
groups will be used by the validator.</p>
<p>For <code class="docutils literal notranslate"><span class="pre">null</span></code> the validator will just use the <code class="docutils literal notranslate"><span class="pre">Default</span></code> group.</p>
<p>If you specify the groups as an array or string they will be used by the
validator as they are:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">public</span> <span class="k">function</span> <span class="nf">configureOptions</span><span class="p">(</span><span class="nx">OptionsResolver</span> <span class="nv">$resolver</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$resolver</span><span class="o">-&gt;</span><span class="na">setDefaults</span><span class="p">([</span>
        <span class="s1">&#39;validation_groups&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Registration&#39;</span><span class="p">,</span>
    <span class="p">]);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>This is equivalent to passing the group as array:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="s1">&#39;validation_groups&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;Registration&#39;</span><span class="p">],</span>
</pre></div>
</div>
<p>The form’s data will be <a class="reference internal" href="../../../form/validation_groups.xhtml"><span class="doc">validated against all given groups</span></a>.</p>
<p>If the validation groups depend on the form’s data a callable may be passed to
the option. Symfony will then pass the form when calling it:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Form\FormInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\OptionsResolver\OptionsResolver</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">configureOptions</span><span class="p">(</span><span class="nx">OptionsResolver</span> <span class="nv">$resolver</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$resolver</span><span class="o">-&gt;</span><span class="na">setDefaults</span><span class="p">([</span>
        <span class="s1">&#39;validation_groups&#39;</span> <span class="o">=&gt;</span> <span class="k">function</span> <span class="p">(</span><span class="nx">FormInterface</span> <span class="nv">$form</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$entity</span> <span class="o">=</span> <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">getData</span><span class="p">();</span>

            <span class="k">return</span> <span class="nv">$entity</span><span class="o">-&gt;</span><span class="na">isUser</span><span class="p">()</span> <span class="o">?</span> <span class="p">[</span><span class="s1">&#39;User&#39;</span><span class="p">]</span> <span class="o">:</span> <span class="p">[</span><span class="s1">&#39;Company&#39;</span><span class="p">];</span>
        <span class="p">},</span>
    <span class="p">]);</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>You can read more about this in <a class="reference internal" href="../../../form/data_based_validation.xhtml"><span class="doc">How to Choose Validation Groups Based on the Submitted Data</span></a>.</p>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>When your form contains multiple submit buttons, you can change the
validation group depending on <a class="reference internal" href="../../../form/button_based_validation.xhtml"><span class="doc">which button is used</span></a>
to submit the form.</p>
<p>If you need advanced logic to determine the validation groups have
a look at <a class="reference internal" href="../../../form/validation_group_service_resolver.xhtml"><span class="doc">How to Dynamically Configure Form Validation Groups</span></a>.</p>
</div>
<p>In some cases, you want to validate your groups step by step. To do this, you
can pass a <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Constraints/GroupSequence.php" title="Symfony\Component\Validator\Constraints\GroupSequence"><span class="pre">GroupSequence</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Constraints/GroupSequence.php]</span></span></code>
to this option. This enables you to validate against multiple groups,
like when you pass multiple groups in an array, but with the difference that
a group is only validated if the previous groups pass without errors.
Here’s an example:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Form\AbstractType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints\GroupSequence</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="k">class</span> <span class="nc">MyType</span> <span class="k">extends</span> <span class="nx">AbstractType</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">configureOptions</span><span class="p">(</span><span class="nx">OptionsResolver</span> <span class="nv">$resolver</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$resolver</span><span class="o">-&gt;</span><span class="na">setDefaults</span><span class="p">([</span>
            <span class="s1">&#39;validation_groups&#39;</span> <span class="o">=&gt;</span> <span class="k">new</span> <span class="nx">GroupSequence</span><span class="p">([</span><span class="s1">&#39;First&#39;</span><span class="p">,</span> <span class="s1">&#39;Second&#39;</span><span class="p">]),</span>
        <span class="p">]);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>Read the article <a class="reference internal" href="../../../validation/sequence_provider.xhtml"><span class="doc">How to Sequentially Apply Validation Groups</span></a> to find out more about this.</p>
</div>
</div>
</div>
<div class="section" id="inherited-options">
<h2>Inherited Options</h2>
<p>The following options are defined in the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Extension/Core/Type/BaseType.php" title="Symfony\Component\Form\Extension\Core\Type\BaseType"><span class="pre">BaseType</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Extension/Core/Type/BaseType.php]</span></span></code> class.
The <code class="docutils literal notranslate"><span class="pre">BaseType</span></code> class is the parent class for both the <code class="docutils literal notranslate"><span class="pre">form</span></code> type and
the <a class="reference internal" href="button.xhtml"><span class="doc">ButtonType</span></a>, but it is not part
of the form type tree (i.e. it cannot be used as a form type on its own).</p>
<div class="section" id="attr">
<h3><code class="docutils literal notranslate"><span class="pre">attr</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">array</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">[]</span></code></p>
<p>If you want to add extra attributes to an HTML field representation
you can use the <code class="docutils literal notranslate"><span class="pre">attr</span></code> option. It’s an associative array with HTML attributes
as keys. This can be useful when you need to set a custom class for some widget:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$builder</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">,</span> <span class="nx">TextareaType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;attr&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;class&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;tinymce&#39;</span><span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</div>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>Use the <code class="docutils literal notranslate"><span class="pre">row_attr</span></code> option if you want to add these attributes to the
the <a class="reference internal" href="../../../form/form_customization.xhtml#form-rendering-basics"><span class="std std-ref">form type row</span></a> element.</p>
</div>
</div>
<div class="section" id="auto-initialize">
<h3><code class="docutils literal notranslate"><span class="pre">auto_initialize</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">boolean</span></code>  <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">true</span></code></p>
<p>An internal option: sets whether the form should be initialized automatically.
For all fields, this option should only be <code class="docutils literal notranslate"><span class="pre">true</span></code> for root forms. You
won’t need to change this option and probably won’t need to worry about
it.</p>
</div>
<div class="section" id="block-name">
<h3><code class="docutils literal notranslate"><span class="pre">block_name</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">string</span></code> <strong>default</strong>: the form’s name (see <a class="reference internal" href="../../../form/form_themes.xhtml#form-customization-sidebar"><span class="std std-ref">Knowing which
block to customize</span></a>)</p>
<p>Allows you to add a custom block name to the ones used by default to render the
form type. Useful for example if you have multiple instances of the same form
and you need to personalize the rendering of the forms individually.</p>
<p>If you set for example this option to <code class="docutils literal notranslate"><span class="pre">my_custom_name</span></code> and the field is of
type <code class="docutils literal notranslate"><span class="pre">text</span></code>, Symfony will use the following names (and in this order) to find
the block used to render the widget of the field: <code class="docutils literal notranslate"><span class="pre">_my_custom_name_widget</span></code>,
<code class="docutils literal notranslate"><span class="pre">text_widget</span></code> and <code class="docutils literal notranslate"><span class="pre">form_widget</span></code>.</p>
</div>
<div class="section" id="block-prefix">
<h3>block_prefix</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">string</span></code> or <code class="docutils literal notranslate"><span class="pre">null</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">null</span></code> (see <a class="reference internal" href="../../../form/form_themes.xhtml#form-customization-sidebar"><span class="std std-ref">Knowing which
block to customize</span></a>)</p>
<p>Allows you to add a custom block prefix and override the block name
used to render the form type. Useful for example if you have multiple
instances of the same form and you need to personalize the rendering
of all of them without the need to create a new form type.</p>
</div>
<div class="section" id="disabled">
<h3><code class="docutils literal notranslate"><span class="pre">disabled</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">boolean</span></code>  <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">false</span></code></p>
<p>If you don’t want a user to modify the value of a field, you can set the
disabled option to true. Any submitted value will be ignored.</p>
</div>
<div class="section" id="label">
<h3><code class="docutils literal notranslate"><span class="pre">label</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">string</span></code> <strong>default</strong>: The label is “guessed” from the field name</p>
<p>Sets the label that will be used when rendering the field. Setting to false
will suppress the label. The label can also be directly set inside the template:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Twig</em><div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{{</span> <span class="nv">form_label</span><span class="o">(</span><span class="nv">form.name</span><span class="o">,</span> <span class="s1">&#39;Your name&#39;</span><span class="o">)</span> <span class="cp">}}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="k">echo</span> <span class="nv">$view</span><span class="p">[</span><span class="s1">&#39;form&#39;</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">label</span><span class="p">(</span>
    <span class="nv">$form</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">],</span>
    <span class="s1">&#39;Your name&#39;</span>
<span class="p">);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
<div class="section" id="label-html">
<h3><code class="docutils literal notranslate"><span class="pre">label_html</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">boolean</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">false</span></code></p>
<div class="versionadded">
<p><span class="versionmodified">New in version 5.1: </span>The <code class="docutils literal notranslate"><span class="pre">label_html</span></code> option was introduced in Symfony 5.1.</p>
</div>
<p>By default, the contents of the <code class="docutils literal notranslate"><span class="pre">label</span></code> option are escaped before rendering
them in the template. Set this option to <code class="docutils literal notranslate"><span class="pre">true</span></code> to not escape them, which is
useful when the label contains HTML elements.</p>
</div>
<div class="section" id="row-attr">
<h3>row_attr</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">array</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">[]</span></code></p>
<p>An associative array of the HTML attributes added to the element which is used
to render the <a class="reference internal" href="../../../form/form_customization.xhtml#form-rendering-basics"><span class="std std-ref">form type row</span></a>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$builder</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">,</span> <span class="nx">TextareaType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;row_attr&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;class&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text-editor&#39;</span><span class="p">,</span> <span class="s1">&#39;id&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;...&#39;</span><span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</div>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>Use the <code class="docutils literal notranslate"><span class="pre">attr</span></code> option if you want to add these attributes to the
the <a class="reference internal" href="../../../form/form_customization.xhtml#form-rendering-basics"><span class="std std-ref">form type widget</span></a> element.</p>
</div>
</div>
<div class="section" id="translation-domain">
<h3><code class="docutils literal notranslate"><span class="pre">translation_domain</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">string</span></code>, <code class="docutils literal notranslate"><span class="pre">null</span></code> or <code class="docutils literal notranslate"><span class="pre">false</span></code>  <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">null</span></code></p>
<p>This is the translation domain that will be used for any label or option
that is rendered for this field. Use <code class="docutils literal notranslate"><span class="pre">null</span></code> to reuse the translation domain
of the parent form (or the default domain of the translator for the root
form). Use <code class="docutils literal notranslate"><span class="pre">false</span></code> to disable translations.</p>
</div>
<div class="section" id="label-translation-parameters">
<h3>label_translation_parameters</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">array</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">[]</span></code></p>
<p>The content of the <a class="reference internal" href="#label">label</a> option is translated before displaying it, so it
can contain <a class="reference internal" href="../../../translation/message_format.xhtml#component-translation-placeholders"><span class="std std-ref">translation placeholders</span></a>.
This option defines the values used to replace those placeholders.</p>
<p>Given this translation message:</p>
<div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># translations/messages.en.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">form.order.id</span><span class="p p-Indicator">:</span> <span class="s">&#39;Identifier</span><span class="nv"> </span><span class="s">of</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">order</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">%company%&#39;</span>
</pre></div>
</td></tr></table></div>
<p>You can specify the placeholder values as follows:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$builder</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;label&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;form.order.id&#39;</span><span class="p">,</span>
    <span class="s1">&#39;label_translation_parameters&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;%company%&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;ACME Inc.&#39;</span><span class="p">,</span>
    <span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</div>
<p>The <code class="docutils literal notranslate"><span class="pre">label_translation_parameters</span></code> option of children fields is merged with
the same option of their parents, so children can reuse and/or override any of
the parent placeholders.</p>
</div>
<div class="section" id="attr-translation-parameters">
<h3>attr_translation_parameters</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">array</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">[]</span></code></p>
<p>The content of the <code class="docutils literal notranslate"><span class="pre">title</span></code> and <code class="docutils literal notranslate"><span class="pre">placeholder</span></code> values defined in the <a class="reference internal" href="#attr">attr</a>
option is translated before displaying it, so it can contain
<a class="reference internal" href="../../../translation/message_format.xhtml#component-translation-placeholders"><span class="std std-ref">translation placeholders</span></a>. This
option defines the values used to replace those placeholders.</p>
<p>Given this translation message:</p>
<div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># translations/messages.en.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">form.order.id.placeholder</span><span class="p p-Indicator">:</span> <span class="s">&#39;Enter</span><span class="nv"> </span><span class="s">unique</span><span class="nv"> </span><span class="s">identifier</span><span class="nv"> </span><span class="s">of</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">order</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">%company%&#39;</span>
<span class="l l-Scalar l-Scalar-Plain">form.order.id.title</span><span class="p p-Indicator">:</span> <span class="s">&#39;This</span><span class="nv"> </span><span class="s">will</span><span class="nv"> </span><span class="s">be</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">reference</span><span class="nv"> </span><span class="s">in</span><span class="nv"> </span><span class="s">communications</span><span class="nv"> </span><span class="s">with</span><span class="nv"> </span><span class="s">%company%&#39;</span>
</pre></div>
</td></tr></table></div>
<p>You can specify the placeholder values as follows:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$builder</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;attr&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;placeholder&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;form.order.id.placeholder&#39;</span><span class="p">,</span>
        <span class="s1">&#39;title&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;form.order.id.title&#39;</span><span class="p">,</span>
    <span class="p">],</span>
    <span class="s1">&#39;attr_translation_parameters&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;%company%&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;ACME Inc.&#39;</span><span class="p">,</span>
    <span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</div>
<p>The <code class="docutils literal notranslate"><span class="pre">attr_translation_parameters</span></code> option of children fields is merged with the
same option of their parents, so children can reuse and/or override any of the
parent placeholders.</p>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>