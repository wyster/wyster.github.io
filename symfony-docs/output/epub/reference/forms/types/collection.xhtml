<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>CollectionType Field</title>
    <link rel="stylesheet" href="../../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="collectiontype-field">
<span id="index-0"></span><h1>CollectionType Field</h1>
<p>This field type is used to render a “collection” of some field or form.
In the easiest sense, it could be an array of <code class="docutils literal notranslate"><span class="pre">TextType</span></code> fields that populate
an array <code class="docutils literal notranslate"><span class="pre">emails</span></code> values. In more complex examples, you can embed entire
forms, which is useful when creating forms that expose one-to-many
relationships (e.g. a product from where you can manage many related product
photos).</p>
<table class="docutils">
<colgroup>
<col style="width: 27%" />
<col style="width: 73%" />
</colgroup>
<tbody>
<tr class="row-odd"><td><p>Rendered as</p></td>
<td><p>depends on the <a class="reference internal" href="#entry-type">entry_type</a> option</p></td>
</tr>
<tr class="row-even"><td><p>Options</p></td>
<td><ul class="simple">
<li><p><a class="reference internal" href="#allow-add">allow_add</a></p></li>
<li><p><a class="reference internal" href="#allow-delete">allow_delete</a></p></li>
<li><p><a class="reference internal" href="#delete-empty">delete_empty</a></p></li>
<li><p><a class="reference internal" href="#entry-options">entry_options</a></p></li>
<li><p><a class="reference internal" href="#entry-type">entry_type</a></p></li>
<li><p><a class="reference internal" href="#prototype">prototype</a></p></li>
<li><p><a class="reference internal" href="#prototype-data">prototype_data</a></p></li>
<li><p><a class="reference internal" href="#prototype-name">prototype_name</a></p></li>
</ul>
</td>
</tr>
<tr class="row-odd"><td><p>Overridden options</p></td>
<td><ul class="simple">
<li><p><a class="reference internal" href="#invalid-message">invalid_message</a></p></li>
</ul>
</td>
</tr>
<tr class="row-even"><td><p>Inherited options</p></td>
<td><ul class="simple">
<li><p><a class="reference internal" href="#attr">attr</a></p></li>
<li><p><a class="reference internal" href="#by-reference">by_reference</a></p></li>
<li><p><a class="reference internal" href="#empty-data">empty_data</a></p></li>
<li><p><a class="reference internal" href="#error-bubbling">error_bubbling</a></p></li>
<li><p><a class="reference internal" href="#error-mapping">error_mapping</a></p></li>
<li><p><a class="reference internal" href="#help">help</a></p></li>
<li><p><a class="reference internal" href="#help-attr">help_attr</a></p></li>
<li><p><a class="reference internal" href="#help-html">help_html</a></p></li>
<li><p><a class="reference internal" href="#label">label</a></p></li>
<li><p><a class="reference internal" href="#label-attr">label_attr</a></p></li>
<li><p><a class="reference internal" href="#label-format">label_format</a></p></li>
<li><p><a class="reference internal" href="#mapped">mapped</a></p></li>
<li><p><a class="reference internal" href="#required">required</a></p></li>
<li><p><a class="reference internal" href="#row-attr">row_attr</a></p></li>
</ul>
</td>
</tr>
<tr class="row-odd"><td><p>Default invalid message</p></td>
<td><p>The collection is invalid.</p></td>
</tr>
<tr class="row-even"><td><p>Legacy invalid message</p></td>
<td><p>The value {{ value }} is not valid.</p></td>
</tr>
<tr class="row-odd"><td><p>Parent type</p></td>
<td><p><a class="reference internal" href="form.xhtml"><span class="doc">FormType</span></a></p></td>
</tr>
<tr class="row-even"><td><p>Class</p></td>
<td><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Extension/Core/Type/CollectionType.php" title="Symfony\Component\Form\Extension\Core\Type\CollectionType"><span class="pre">CollectionType</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Extension/Core/Type/CollectionType.php]</span></span></code></p></td>
</tr>
</tbody>
</table>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The full list of options defined and inherited by this form type is
available running this command in your app:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># replace &#39;FooType&#39; by the class name of your form type</span>
<span class="gp">$</span> php bin/console debug:form FooType
</pre></div>
</td></tr></table></div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If you are working with a collection of Doctrine entities, pay special
attention to the <a class="reference internal" href="#allow-add">allow_add</a>, <a class="reference internal" href="#allow-delete">allow_delete</a> and <a class="reference internal" href="#by-reference">by_reference</a> options.
You can also see a complete example in the <a class="reference internal" href="../../../form/form_collections.xhtml"><span class="doc">How to Embed a Collection of Forms</span></a>
article.</p>
</div>
<div class="section" id="basic-usage">
<h2>Basic Usage</h2>
<p>This type is used when you want to manage a collection of similar items
in a form. For example, suppose you have an <code class="docutils literal notranslate"><span class="pre">emails</span></code> field that corresponds
to an array of email addresses. In the form, you want to expose each email
address as its own input text box:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\CollectionType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\EmailType</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="nv">$builder</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;emails&#39;</span><span class="p">,</span> <span class="nx">CollectionType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span>
    <span class="c1">// each entry in the array will be an &quot;email&quot; field</span>
    <span class="s1">&#39;entry_type&#39;</span> <span class="o">=&gt;</span> <span class="nx">EmailType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span>
    <span class="c1">// these options are passed to each &quot;email&quot; type</span>
    <span class="s1">&#39;entry_options&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;attr&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;class&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;email-box&#39;</span><span class="p">],</span>
    <span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</div>
<p>The simplest way to render this is all at once:</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{{</span> <span class="nv">form_row</span><span class="o">(</span><span class="nv">form.emails</span><span class="o">)</span> <span class="cp">}}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
<p>A much more flexible method would look like this:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{{</span> <span class="nv">form_label</span><span class="o">(</span><span class="nv">form.emails</span><span class="o">)</span> <span class="cp">}}</span>
<span class="cp">{{</span> <span class="nv">form_errors</span><span class="o">(</span><span class="nv">form.emails</span><span class="o">)</span> <span class="cp">}}</span>

<span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
<span class="cp">{%</span> <span class="k">for</span> <span class="nv">emailField</span> <span class="k">in</span> <span class="nv">form.emails</span> <span class="cp">%}</span>
    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>
        <span class="cp">{{</span> <span class="nv">form_errors</span><span class="o">(</span><span class="nv">emailField</span><span class="o">)</span> <span class="cp">}}</span>
        <span class="cp">{{</span> <span class="nv">form_widget</span><span class="o">(</span><span class="nv">emailField</span><span class="o">)</span> <span class="cp">}}</span>
    <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
<span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span>
<span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</pre></div>
</td></tr></table></div>
<p>In both cases, no input fields would render unless your <code class="docutils literal notranslate"><span class="pre">emails</span></code> data
array already contained some emails.</p>
<p>In this simple example, it’s still impossible to add new addresses or remove
existing addresses. Adding new addresses is possible by using the <a class="reference internal" href="#allow-add">allow_add</a>
option (and optionally the <a class="reference internal" href="#prototype">prototype</a> option) (see example below). Removing
emails from the <code class="docutils literal notranslate"><span class="pre">emails</span></code> array is possible with the <a class="reference internal" href="#allow-delete">allow_delete</a> option.</p>
<div class="section" id="adding-and-removing-items">
<h3>Adding and Removing Items</h3>
<p>If <a class="reference internal" href="#allow-add">allow_add</a> is set to <code class="docutils literal notranslate"><span class="pre">true</span></code>, then if any unrecognized items are submitted,
they’ll be added seamlessly to the array of items. This is great in theory,
but takes a little bit more effort in practice to get the client-side JavaScript
correct.</p>
<p>Following along with the previous example, suppose you start with two
emails in the <code class="docutils literal notranslate"><span class="pre">emails</span></code> data array. In that case, two input fields will
be rendered that will look something like this (depending on the name of
your form):</p>
<div class="highlight-html notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&quot;email&quot;</span> <span class="na">id</span><span class="o">=</span><span class="s">&quot;form_emails_0&quot;</span> <span class="na">name</span><span class="o">=</span><span class="s">&quot;form[emails][0]&quot;</span> <span class="na">value</span><span class="o">=</span><span class="s">&quot;foo@foo.com&quot;</span><span class="p">/&gt;</span>
<span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&quot;email&quot;</span> <span class="na">id</span><span class="o">=</span><span class="s">&quot;form_emails_1&quot;</span> <span class="na">name</span><span class="o">=</span><span class="s">&quot;form[emails][1]&quot;</span> <span class="na">value</span><span class="o">=</span><span class="s">&quot;bar@bar.com&quot;</span><span class="p">/&gt;</span>
</pre></div>
</td></tr></table></div>
<p>To allow your user to add another email, just set <a class="reference internal" href="#allow-add">allow_add</a> to <code class="docutils literal notranslate"><span class="pre">true</span></code>
and - via JavaScript - render another field with the name <code class="docutils literal notranslate"><span class="pre">form[emails][2]</span></code>
(and so on for more and more fields).</p>
<p>To help make this easier, setting the <a class="reference internal" href="#prototype">prototype</a> option to <code class="docutils literal notranslate"><span class="pre">true</span></code> allows
you to render a “template” field, which you can then use in your JavaScript
to help you dynamically create these new fields. A rendered prototype field
will look like this:</p>
<div class="highlight-html notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&quot;email&quot;</span>
    <span class="na">id</span><span class="o">=</span><span class="s">&quot;form_emails___name__&quot;</span>
    <span class="na">name</span><span class="o">=</span><span class="s">&quot;form[emails][__name__]&quot;</span>
    <span class="na">value</span><span class="o">=</span><span class="s">&quot;&quot;</span>
<span class="p">/&gt;</span>
</pre></div>
</td></tr></table></div>
<p>By replacing <code class="docutils literal notranslate"><span class="pre">__name__</span></code> with some unique value (e.g. <code class="docutils literal notranslate"><span class="pre">2</span></code>),
you can build and insert new HTML fields into your form.</p>
<p>Using jQuery, a simple example might look like this. If you’re rendering
your collection fields all at once (e.g. <code class="docutils literal notranslate"><span class="pre">form_row(form.emails)</span></code>), then
things are even easier because the <code class="docutils literal notranslate"><span class="pre">data-prototype</span></code> attribute is rendered
automatically for you (with a slight difference - see note below) and all
you need is this JavaScript code:</p>
<div class="highlight-javascript notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// add-collection-widget.js</span>
<span class="nx">jQuery</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">jQuery</span><span class="p">(</span><span class="s1">&#39;.add-another-collection-widget&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">list</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">(</span><span class="nx">jQuery</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;data-list-selector&#39;</span><span class="p">));</span>
        <span class="c1">// Try to find the counter of the list or use the length of the list</span>
        <span class="kd">var</span> <span class="nx">counter</span> <span class="o">=</span> <span class="nx">list</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;widget-counter&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="nx">list</span><span class="p">.</span><span class="nx">children</span><span class="p">().</span><span class="nx">length</span><span class="p">;</span>

        <span class="c1">// grab the prototype template</span>
        <span class="kd">var</span> <span class="nx">newWidget</span> <span class="o">=</span> <span class="nx">list</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;data-prototype&#39;</span><span class="p">);</span>
        <span class="c1">// replace the &quot;__name__&quot; used in the id and name of the prototype</span>
        <span class="c1">// with a number that&#39;s unique to your emails</span>
        <span class="c1">// end name attribute looks like name=&quot;contact[emails][2]&quot;</span>
        <span class="nx">newWidget</span> <span class="o">=</span> <span class="nx">newWidget</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/__name__/g</span><span class="p">,</span> <span class="nx">counter</span><span class="p">);</span>
        <span class="c1">// Increase the counter</span>
        <span class="nx">counter</span><span class="o">++</span><span class="p">;</span>
        <span class="c1">// And store it, the length cannot be used if deleting widgets is allowed</span>
        <span class="nx">list</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;widget-counter&#39;</span><span class="p">,</span> <span class="nx">counter</span><span class="p">);</span>

        <span class="c1">// create a new list element and add it to the list</span>
        <span class="kd">var</span> <span class="nx">newElem</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">(</span><span class="nx">list</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;data-widget-tags&#39;</span><span class="p">)).</span><span class="nx">html</span><span class="p">(</span><span class="nx">newWidget</span><span class="p">);</span>
        <span class="nx">newElem</span><span class="p">.</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">list</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">});</span>
</pre></div>
</td></tr></table></div>
<p>And update the template as follows:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{{</span> <span class="nv">form_start</span><span class="o">(</span><span class="nv">form</span><span class="o">)</span> <span class="cp">}}</span>
    <span class="c">{# ... #}</span>

    <span class="c">{# store the prototype on the data-prototype attribute #}</span>
    <span class="p">&lt;</span><span class="nt">ul</span> <span class="na">id</span><span class="o">=</span><span class="s">&quot;email-fields-list&quot;</span>
        <span class="na">data-prototype</span><span class="o">=</span><span class="s">&quot;</span><span class="cp">{{</span> <span class="nv">form_widget</span><span class="o">(</span><span class="nv">form.emails.vars.prototype</span><span class="o">)|</span><span class="nf">e</span> <span class="cp">}}</span><span class="s">&quot;</span>
        <span class="na">data-widget-tags</span><span class="o">=</span><span class="s">&quot;</span><span class="cp">{{</span> <span class="s1">&#39;&lt;li&gt;&lt;/li&gt;&#39;</span><span class="o">|</span><span class="nf">e</span> <span class="cp">}}</span><span class="s">&quot;</span>
        <span class="na">data-widget-counter</span><span class="o">=</span><span class="s">&quot;</span><span class="cp">{{</span> <span class="nv">form.emails</span><span class="o">|</span><span class="nf">length</span> <span class="cp">}}</span><span class="s">&quot;</span><span class="p">&gt;</span>
    <span class="cp">{%</span> <span class="k">for</span> <span class="nv">emailField</span> <span class="k">in</span> <span class="nv">form.emails</span> <span class="cp">%}</span>
        <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>
            <span class="cp">{{</span> <span class="nv">form_errors</span><span class="o">(</span><span class="nv">emailField</span><span class="o">)</span> <span class="cp">}}</span>
            <span class="cp">{{</span> <span class="nv">form_widget</span><span class="o">(</span><span class="nv">emailField</span><span class="o">)</span> <span class="cp">}}</span>
        <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
    <span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span>
    <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>

    <span class="p">&lt;</span><span class="nt">button</span> <span class="na">type</span><span class="o">=</span><span class="s">&quot;button&quot;</span>
        <span class="na">class</span><span class="o">=</span><span class="s">&quot;add-another-collection-widget&quot;</span>
        <span class="na">data-list-selector</span><span class="o">=</span><span class="s">&quot;#email-fields-list&quot;</span><span class="p">&gt;</span>Add another email<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>

    <span class="c">{# ... #}</span>
<span class="cp">{{</span> <span class="nv">form_end</span><span class="o">(</span><span class="nv">form</span><span class="o">)</span> <span class="cp">}}</span>

<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&quot;add-collection-widget.js&quot;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</pre></div>
</td></tr></table></div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>If you’re rendering the entire collection at once, then the prototype
is automatically available on the <code class="docutils literal notranslate"><span class="pre">data-prototype</span></code> attribute of the
element (e.g. <code class="docutils literal notranslate"><span class="pre">div</span></code> or <code class="docutils literal notranslate"><span class="pre">table</span></code>) that surrounds your collection.
The only difference is that the entire “form row” is rendered for you,
meaning you wouldn’t have to wrap it in any container element as it
was done above.</p>
</div>
</div>
</div>
<div class="section" id="field-options">
<h2>Field Options</h2>
<div class="section" id="allow-add">
<h3>allow_add</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">boolean</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">false</span></code></p>
<p>If set to <code class="docutils literal notranslate"><span class="pre">true</span></code>, then if unrecognized items are submitted to the collection,
they will be added as new items. The ending array will contain the existing
items as well as the new item that was in the submitted data. See the above
example for more details.</p>
<p>The <a class="reference internal" href="#prototype">prototype</a> option can be used to help render a prototype item that
can be used - with JavaScript - to create new form items dynamically on
the client side. For more information, see the above example and
<a class="reference internal" href="../../../form/form_collections.xhtml#form-collections-new-prototype"><span class="std std-ref">Allowing “new” Tags with the “Prototype”</span></a>.</p>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>If you’re embedding entire other forms to reflect a one-to-many database
relationship, you may need to manually ensure that the foreign key of
these new objects is set correctly. If you’re using Doctrine, this won’t
happen automatically. See the above link for more details.</p>
</div>
</div>
<div class="section" id="allow-delete">
<h3>allow_delete</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">boolean</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">false</span></code></p>
<p>If set to <code class="docutils literal notranslate"><span class="pre">true</span></code>, then if an existing item is not contained in the submitted
data, it will be correctly absent from the final array of items. This means
that you can implement a “delete” button via JavaScript which removes a form
element from the DOM. When the user submits the form, its absence from the
submitted data will mean that it’s removed from the final array.</p>
<p>For more information, see <a class="reference internal" href="../../../form/form_collections.xhtml#form-collections-remove"><span class="std std-ref">Allowing Tags to be Removed</span></a>.</p>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>Be careful when using this option when you’re embedding a collection
of objects. In this case, if any embedded forms are removed, they <em>will</em>
correctly be missing from the final array of objects. However, depending
on your application logic, when one of those objects is removed, you
may want to delete it or at least remove its foreign key reference to
the main object. None of this is handled automatically. For more
information, see <a class="reference internal" href="../../../form/form_collections.xhtml#form-collections-remove"><span class="std std-ref">Allowing Tags to be Removed</span></a>.</p>
</div>
</div>
<div class="section" id="delete-empty">
<h3>delete_empty</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">Boolean</span></code> or <code class="docutils literal notranslate"><span class="pre">callable</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">false</span></code></p>
<p>If you want to explicitly remove entirely empty collection entries from your
form you have to set this option to <code class="docutils literal notranslate"><span class="pre">true</span></code>. However, existing collection entries
will only be deleted if you have the <a class="reference internal" href="#allow-delete">allow_delete</a> option enabled. Otherwise
the empty values will be kept.</p>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>The <code class="docutils literal notranslate"><span class="pre">delete_empty</span></code> option only removes items when the normalized value is
<code class="docutils literal notranslate"><span class="pre">null</span></code>. If the nested <a class="reference internal" href="#entry-type">entry_type</a> is a compound form type, you must
either set the <code class="docutils literal notranslate"><span class="pre">required</span></code> option to <code class="docutils literal notranslate"><span class="pre">false</span></code> or set the <code class="docutils literal notranslate"><span class="pre">empty_data</span></code>
option to <code class="docutils literal notranslate"><span class="pre">null</span></code>. Both of these options can be set inside <a class="reference internal" href="#entry-options">entry_options</a>.
Read about the <a class="reference internal" href="form.xhtml#reference-form-option-empty-data"><span class="std std-ref">form’s empty_data option</span></a>
to learn why this is necessary.</p>
</div>
<p>A value is deleted from the collection only if the normalized value is <code class="docutils literal notranslate"><span class="pre">null</span></code>.
However, you can also set the option value to a callable, which will be executed
for each value in the submitted collection. If the callable returns <code class="docutils literal notranslate"><span class="pre">true</span></code>,
the value is removed from the collection. For example:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\CollectionType</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="nv">$builder</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">,</span> <span class="nx">CollectionType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span>
    <span class="c1">// ...</span>
    <span class="s1">&#39;delete_empty&#39;</span> <span class="o">=&gt;</span> <span class="k">function</span> <span class="p">(</span><span class="nx">User</span> <span class="nv">$user</span> <span class="o">=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">null</span> <span class="o">===</span> <span class="nv">$user</span> <span class="o">||</span> <span class="k">empty</span><span class="p">(</span><span class="nv">$user</span><span class="o">-&gt;</span><span class="na">getFirstName</span><span class="p">());</span>
    <span class="p">},</span>
<span class="p">]);</span>
</pre></div>
</div>
<p>Using a callable is particularly useful in case of compound form types, which
may define complex conditions for considering them empty.</p>
</div>
<div class="section" id="entry-options">
<h3>entry_options</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">array</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">[]</span></code></p>
<p>This is the array that’s passed to the form type specified in the <a class="reference internal" href="#entry-type">entry_type</a>
option. For example, if you used the <a class="reference internal" href="choice.xhtml"><span class="doc">ChoiceType</span></a>
as your <a class="reference internal" href="#entry-type">entry_type</a> option (e.g. for a collection of drop-down menus),
then you’d need to at least pass the <code class="docutils literal notranslate"><span class="pre">choices</span></code> option to the underlying
type:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\ChoiceType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\CollectionType</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="nv">$builder</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;favoriteCities&#39;</span><span class="p">,</span> <span class="nx">CollectionType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;entry_type&#39;</span>   <span class="o">=&gt;</span> <span class="nx">ChoiceType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span>
    <span class="s1">&#39;entry_options&#39;</span>  <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;choices&#39;</span>  <span class="o">=&gt;</span> <span class="p">[</span>
            <span class="s1">&#39;Nashville&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;nashville&#39;</span><span class="p">,</span>
            <span class="s1">&#39;Paris&#39;</span>     <span class="o">=&gt;</span> <span class="s1">&#39;paris&#39;</span><span class="p">,</span>
            <span class="s1">&#39;Berlin&#39;</span>    <span class="o">=&gt;</span> <span class="s1">&#39;berlin&#39;</span><span class="p">,</span>
            <span class="s1">&#39;London&#39;</span>    <span class="o">=&gt;</span> <span class="s1">&#39;london&#39;</span><span class="p">,</span>
        <span class="p">],</span>
    <span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</div>
</div>
<div class="section" id="entry-type">
<h3>entry_type</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">string</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">'Symfony\Component\Form\Extension\Core\Type\TextType'</span></code></p>
<p>This is the field type for each item in this collection (e.g. <code class="docutils literal notranslate"><span class="pre">TextType</span></code>,
<code class="docutils literal notranslate"><span class="pre">ChoiceType</span></code>, etc). For example, if you have an array of email addresses,
you’d use the <a class="reference internal" href="email.xhtml"><span class="doc">EmailType</span></a>. If you want
to embed a collection of some other form, pass the form type class as this
option (e.g. <code class="docutils literal notranslate"><span class="pre">MyFormType::class</span></code>).</p>
</div>
<div class="section" id="prototype">
<h3>prototype</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">boolean</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">true</span></code></p>
<p>This option is useful when using the <a class="reference internal" href="#allow-add">allow_add</a> option. If <code class="docutils literal notranslate"><span class="pre">true</span></code> (and
if <a class="reference internal" href="#allow-add">allow_add</a> is also <code class="docutils literal notranslate"><span class="pre">true</span></code>), a special “prototype” attribute will
be available so that you can render a “template” example on your page of
what a new element should look like. The <code class="docutils literal notranslate"><span class="pre">name</span></code> attribute given to this
element is <code class="docutils literal notranslate"><span class="pre">__name__</span></code>. This allows you to add a “add another” button via
JavaScript which reads the prototype, replaces <code class="docutils literal notranslate"><span class="pre">__name__</span></code> with some unique
name or number and render it inside your form. When submitted, it will
be added to your underlying array due to the <a class="reference internal" href="#allow-add">allow_add</a> option.</p>
<p>The prototype field can be rendered via the <code class="docutils literal notranslate"><span class="pre">prototype</span></code> variable in the
collection field:</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{{</span> <span class="nv">form_row</span><span class="o">(</span><span class="nv">form.emails.vars.prototype</span><span class="o">)</span> <span class="cp">}}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
<p>Note that all you really need is the “widget”, but depending on how you’re
rendering your form, having the entire “form row” may be easier for you.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>If you’re rendering the entire collection field at once, then the prototype
form row is automatically available on the <code class="docutils literal notranslate"><span class="pre">data-prototype</span></code> attribute
of the element (e.g. <code class="docutils literal notranslate"><span class="pre">div</span></code> or <code class="docutils literal notranslate"><span class="pre">table</span></code>) that surrounds your collection.</p>
</div>
<p>For details on how to actually use this option, see the above example as
well as <a class="reference internal" href="../../../form/form_collections.xhtml#form-collections-new-prototype"><span class="std std-ref">Allowing “new” Tags with the “Prototype”</span></a>.</p>
</div>
<div class="section" id="prototype-data">
<h3>prototype_data</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">mixed</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">null</span></code></p>
<p>Allows you to define specific data for the prototype. Each new row added will
initially contain the data set by this option. By default, the data configured
for all entries with the <a class="reference internal" href="#entry-options">entry_options</a> option will be used:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\CollectionType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\TextType</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="nv">$builder</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;tags&#39;</span><span class="p">,</span> <span class="nx">CollectionType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;entry_type&#39;</span> <span class="o">=&gt;</span> <span class="nx">TextType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span>
    <span class="s1">&#39;allow_add&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span>
    <span class="s1">&#39;prototype&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span>
    <span class="s1">&#39;prototype_data&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;New Tag Placeholder&#39;</span><span class="p">,</span>
<span class="p">]);</span>
</pre></div>
</div>
</div>
<div class="section" id="prototype-name">
<h3>prototype_name</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">string</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">__name__</span></code></p>
<p>If you have several collections in your form, or worse, nested collections
you may want to change the placeholder so that unrelated placeholders are
not replaced with the same value.</p>
</div>
</div>
<div class="section" id="overridden-options">
<h2>Overridden Options</h2>
<div class="section" id="invalid-message">
<h3><code class="docutils literal notranslate"><span class="pre">invalid_message</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">string</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">This</span> <span class="pre">value</span> <span class="pre">is</span> <span class="pre">not</span> <span class="pre">valid</span></code></p>
<p>This is the validation error message that’s used if the data entered into
this field doesn’t make sense (i.e. fails validation).</p>
<p>This might happen, for example, if the user enters a nonsense string into
a <a class="reference internal" href="time.xhtml"><span class="doc">TimeType</span></a> field that cannot be converted
into a real time or if the user enters a string (e.g. <code class="docutils literal notranslate"><span class="pre">apple</span></code>) into a
number field.</p>
<p>Normal (business logic) validation (such as when setting a minimum length
for a field) should be set using validation messages with your validation
rules (<a class="reference internal" href="../../../validation.xhtml#validation-constraint-configuration"><span class="std std-ref">reference</span></a>).</p>
</div>
</div>
<div class="section" id="inherited-options">
<h2>Inherited Options</h2>
<p>These options inherit from the <a class="reference internal" href="form.xhtml"><span class="doc">FormType</span></a>.
Not all options are listed here - only the most applicable to this type:</p>
<div class="section" id="attr">
<h3><code class="docutils literal notranslate"><span class="pre">attr</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">array</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">[]</span></code></p>
<p>If you want to add extra attributes to an HTML field representation
you can use the <code class="docutils literal notranslate"><span class="pre">attr</span></code> option. It’s an associative array with HTML attributes
as keys. This can be useful when you need to set a custom class for some widget:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$builder</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">,</span> <span class="nx">TextareaType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;attr&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;class&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;tinymce&#39;</span><span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</div>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>Use the <code class="docutils literal notranslate"><span class="pre">row_attr</span></code> option if you want to add these attributes to the
the <a class="reference internal" href="../../../form/form_customization.xhtml#form-rendering-basics"><span class="std std-ref">form type row</span></a> element.</p>
</div>
</div>
<div class="section" id="by-reference">
<span id="reference-form-types-by-reference"></span><h3><code class="docutils literal notranslate"><span class="pre">by_reference</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">boolean</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">true</span></code></p>
<p>In most cases, if you have an <code class="docutils literal notranslate"><span class="pre">author</span></code> field, then you expect <code class="docutils literal notranslate"><span class="pre">setAuthor()</span></code>
to be called on the underlying object. In some cases, however, <code class="docutils literal notranslate"><span class="pre">setAuthor()</span></code>
may <em>not</em> be called. Setting <code class="docutils literal notranslate"><span class="pre">by_reference</span></code> to <code class="docutils literal notranslate"><span class="pre">false</span></code> ensures that the setter is
called in all cases.</p>
<p>To explain this further, here’s a simple example:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\EmailType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\FormType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Form\Extension\Core\Type\TextType</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="nv">$builder</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createFormBuilder</span><span class="p">(</span><span class="nv">$article</span><span class="p">);</span>
<span class="nv">$builder</span>
    <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="nx">TextType</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span>
        <span class="nv">$builder</span><span class="o">-&gt;</span><span class="na">create</span><span class="p">(</span><span class="s1">&#39;author&#39;</span><span class="p">,</span> <span class="nx">FormType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;by_reference&#39;</span> <span class="o">=&gt;</span> <span class="o">?</span><span class="p">])</span>
            <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="nx">TextType</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;email&#39;</span><span class="p">,</span> <span class="nx">EmailType</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
    <span class="p">)</span>
</pre></div>
</div>
<p>If <code class="docutils literal notranslate"><span class="pre">by_reference</span></code> is true, the following takes place behind the scenes
when you call <code class="docutils literal notranslate"><span class="pre">submit()</span></code> (or <code class="docutils literal notranslate"><span class="pre">handleRequest()</span></code>) on the form:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$article</span><span class="o">-&gt;</span><span class="na">setTitle</span><span class="p">(</span><span class="s1">&#39;...&#39;</span><span class="p">);</span>
<span class="nv">$article</span><span class="o">-&gt;</span><span class="na">getAuthor</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">setName</span><span class="p">(</span><span class="s1">&#39;...&#39;</span><span class="p">);</span>
<span class="nv">$article</span><span class="o">-&gt;</span><span class="na">getAuthor</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">setEmail</span><span class="p">(</span><span class="s1">&#39;...&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>Notice that <code class="docutils literal notranslate"><span class="pre">setAuthor()</span></code> is not called. The author is modified by reference.</p>
<p>If you set <code class="docutils literal notranslate"><span class="pre">by_reference</span></code> to false, submitting looks like this:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$article</span><span class="o">-&gt;</span><span class="na">setTitle</span><span class="p">(</span><span class="s1">&#39;...&#39;</span><span class="p">);</span>
<span class="nv">$author</span> <span class="o">=</span> <span class="k">clone</span> <span class="nv">$article</span><span class="o">-&gt;</span><span class="na">getAuthor</span><span class="p">();</span>
<span class="nv">$author</span><span class="o">-&gt;</span><span class="na">setName</span><span class="p">(</span><span class="s1">&#39;...&#39;</span><span class="p">);</span>
<span class="nv">$author</span><span class="o">-&gt;</span><span class="na">setEmail</span><span class="p">(</span><span class="s1">&#39;...&#39;</span><span class="p">);</span>
<span class="nv">$article</span><span class="o">-&gt;</span><span class="na">setAuthor</span><span class="p">(</span><span class="nv">$author</span><span class="p">);</span>
</pre></div>
</div>
<p>So, all that <code class="docutils literal notranslate"><span class="pre">by_reference=false</span></code> really does is that it clones the object,
which enforces the framework to call the setter on the parent object.</p>
<p>Similarly, if you’re using the <a class="reference internal" href="#"><span class="doc">CollectionType</span></a>
field where your underlying collection data is an object (like with
Doctrine’s <code class="docutils literal notranslate"><span class="pre">ArrayCollection</span></code>), then <code class="docutils literal notranslate"><span class="pre">by_reference</span></code> must be set to <code class="docutils literal notranslate"><span class="pre">false</span></code>
if you need the adder and remover (e.g. <code class="docutils literal notranslate"><span class="pre">addAuthor()</span></code> and <code class="docutils literal notranslate"><span class="pre">removeAuthor()</span></code>)
to be called.</p>
</div>
<div class="section" id="empty-data">
<h3><code class="docutils literal notranslate"><span class="pre">empty_data</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">mixed</span></code></p>
<p>The default value is <code class="docutils literal notranslate"><span class="pre">[]</span></code> (empty array).</p>
<p>This option determines what value the field will <em>return</em> when the submitted
value is empty (or missing). It does not set an initial value if none is
provided when the form is rendered in a view.</p>
<p>This means it helps you handling form submission with blank fields. For
example, if you want the <code class="docutils literal notranslate"><span class="pre">name</span></code> field to be explicitly set to <code class="docutils literal notranslate"><span class="pre">John</span> <span class="pre">Doe</span></code>
when no value is selected, you can do it like this:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$builder</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;required&#39;</span>   <span class="o">=&gt;</span> <span class="k">false</span><span class="p">,</span>
    <span class="s1">&#39;empty_data&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;John Doe&#39;</span><span class="p">,</span>
<span class="p">]);</span>
</pre></div>
</div>
<p>This will still render an empty text box, but upon submission the <code class="docutils literal notranslate"><span class="pre">John</span> <span class="pre">Doe</span></code>
value will be set. Use the <code class="docutils literal notranslate"><span class="pre">data</span></code> or <code class="docutils literal notranslate"><span class="pre">placeholder</span></code> options to show this
initial value in the rendered form.</p>
<p>If a form is compound, you can set <code class="docutils literal notranslate"><span class="pre">empty_data</span></code> as an array, object or
closure. See the <a class="reference internal" href="../../../form/use_empty_data.xhtml"><span class="doc">How to Configure empty Data for a Form Class</span></a> article for more details about
these options.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If you want to set the <code class="docutils literal notranslate"><span class="pre">empty_data</span></code> option for your entire form class,
see the <a class="reference internal" href="../../../form/use_empty_data.xhtml"><span class="doc">How to Configure empty Data for a Form Class</span></a> article.</p>
</div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p><a class="reference internal" href="../../../form/data_transformers.xhtml"><span class="doc">Form data transformers</span></a> will still be
applied to the <code class="docutils literal notranslate"><span class="pre">empty_data</span></code> value. This means that an empty string will
be cast to <code class="docutils literal notranslate"><span class="pre">null</span></code>. Use a custom data transformer if you explicitly want
to return the empty string.</p>
</div>
</div>
<div class="section" id="error-bubbling">
<h3>error_bubbling</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">boolean</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">true</span></code></p>
<p>If <code class="docutils literal notranslate"><span class="pre">true</span></code>, any errors for this field will be passed to the parent field
or form. For example, if set to <code class="docutils literal notranslate"><span class="pre">true</span></code> on a normal field, any errors for
that field will be attached to the main form, not to the specific field.</p>
</div>
<div class="section" id="error-mapping">
<h3><code class="docutils literal notranslate"><span class="pre">error_mapping</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">array</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">[]</span></code></p>
<p>This option allows you to modify the target of a validation error.</p>
<p>Imagine you have a custom method named <code class="docutils literal notranslate"><span class="pre">matchingCityAndZipCode()</span></code> that validates
whether the city and zip code match. Unfortunately, there is no <code class="docutils literal notranslate"><span class="pre">matchingCityAndZipCode</span></code>
field in your form, so all that Symfony can do is display the error on top
of the form.</p>
<p>With customized error mapping, you can do better: map the error to the city
field so that it displays above it:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">public</span> <span class="k">function</span> <span class="nf">configureOptions</span><span class="p">(</span><span class="nx">OptionsResolver</span> <span class="nv">$resolver</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$resolver</span><span class="o">-&gt;</span><span class="na">setDefaults</span><span class="p">([</span>
        <span class="s1">&#39;error_mapping&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
            <span class="s1">&#39;matchingCityAndZipCode&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;city&#39;</span><span class="p">,</span>
        <span class="p">],</span>
    <span class="p">]);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Here are the rules for the left and the right side of the mapping:</p>
<ul class="simple">
<li><p>The left side contains property paths;</p></li>
<li><p>If the violation is generated on a property or method of a class, its
path is the <code class="docutils literal notranslate"><span class="pre">propertyName</span></code>;</p></li>
<li><p>If the violation is generated on an entry of an <code class="docutils literal notranslate"><span class="pre">array</span></code> or <code class="docutils literal notranslate"><span class="pre">ArrayAccess</span></code>
object, the property path is <code class="docutils literal notranslate"><span class="pre">[indexName]</span></code>;</p></li>
<li><p>You can construct nested property paths by concatenating them, separating
properties by dots. For example: <code class="docutils literal notranslate"><span class="pre">addresses[work].matchingCityAndZipCode</span></code>;</p></li>
<li><p>The right side contains the names of fields in the form.</p></li>
</ul>
<p>By default, errors for any property that is not mapped will bubble up to the
parent form. You can use the dot (<code class="docutils literal notranslate"><span class="pre">.</span></code>) on the left side to map errors of all
unmapped properties to a particular field. For instance, to map all these
errors to the <code class="docutils literal notranslate"><span class="pre">city</span></code> field, use:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$resolver</span><span class="o">-&gt;</span><span class="na">setDefaults</span><span class="p">([</span>
    <span class="s1">&#39;error_mapping&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;.&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;city&#39;</span><span class="p">,</span>
    <span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</div>
</div>
<div class="section" id="help">
<h3>help</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">string</span></code> <strong>default</strong>: null</p>
<p>Allows you to define a help message for the form field, which by default is
rendered below the field:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$builder</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;zipCode&#39;</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;help&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;The ZIP/Postal code for your credit card\&#39;s billing address.&#39;</span><span class="p">,</span>
<span class="p">]);</span>
</pre></div>
</div>
</div>
<div class="section" id="help-attr">
<h3>help_attr</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">array</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">[]</span></code></p>
<p>Sets the HTML attributes for the element used to display the help message of the
form field. Its value is an associative array with HTML attribute names as keys.
These attributes can also be set in the template:</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{{</span> <span class="nv">form_help</span><span class="o">(</span><span class="nv">form.name</span><span class="o">,</span> <span class="s1">&#39;Your name&#39;</span><span class="o">,</span> <span class="o">{</span>
    <span class="s1">&#39;help_attr&#39;</span><span class="o">:</span> <span class="o">{</span><span class="s1">&#39;class&#39;</span><span class="o">:</span> <span class="s1">&#39;CUSTOM_LABEL_CLASS&#39;</span><span class="o">}</span>
<span class="o">})</span> <span class="cp">}}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="help-html">
<h3>help_html</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">boolean</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">false</span></code></p>
<p>By default, the contents of the <code class="docutils literal notranslate"><span class="pre">help</span></code> option are escaped before rendering
them in the template. Set this option to <code class="docutils literal notranslate"><span class="pre">true</span></code> to not escape them, which is
useful when the help contains HTML elements.</p>
</div>
<div class="section" id="label">
<h3><code class="docutils literal notranslate"><span class="pre">label</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">string</span></code> <strong>default</strong>: The label is “guessed” from the field name</p>
<p>Sets the label that will be used when rendering the field. Setting to false
will suppress the label. The label can also be directly set inside the template:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Twig</em><div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{{</span> <span class="nv">form_label</span><span class="o">(</span><span class="nv">form.name</span><span class="o">,</span> <span class="s1">&#39;Your name&#39;</span><span class="o">)</span> <span class="cp">}}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="k">echo</span> <span class="nv">$view</span><span class="p">[</span><span class="s1">&#39;form&#39;</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">label</span><span class="p">(</span>
    <span class="nv">$form</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">],</span>
    <span class="s1">&#39;Your name&#39;</span>
<span class="p">);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
<div class="section" id="label-attr">
<h3><code class="docutils literal notranslate"><span class="pre">label_attr</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">array</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">[]</span></code></p>
<p>Sets the HTML attributes for the <code class="docutils literal notranslate"><span class="pre">&lt;label&gt;</span></code> element, which will be used
when rendering the label for the field. It’s an associative array with HTML
attribute as a key. This attributes can also be directly set inside the
template:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Twig</em><div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{{</span> <span class="nv">form_label</span><span class="o">(</span><span class="nv">form.name</span><span class="o">,</span> <span class="s1">&#39;Your name&#39;</span><span class="o">,</span> <span class="o">{</span>
    <span class="s1">&#39;label_attr&#39;</span><span class="o">:</span> <span class="o">{</span><span class="s1">&#39;class&#39;</span><span class="o">:</span> <span class="s1">&#39;CUSTOM_LABEL_CLASS&#39;</span><span class="o">}</span>
<span class="o">})</span> <span class="cp">}}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="k">echo</span> <span class="nv">$view</span><span class="p">[</span><span class="s1">&#39;form&#39;</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">label</span><span class="p">(</span>
    <span class="nv">$form</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">],</span>
    <span class="s1">&#39;Your name&#39;</span><span class="p">,</span>
    <span class="p">[</span><span class="s1">&#39;label_attr&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;class&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;CUSTOM_LABEL_CLASS&#39;</span><span class="p">]]</span>
<span class="p">);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
<div class="section" id="label-format">
<h3><code class="docutils literal notranslate"><span class="pre">label_format</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">string</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">null</span></code></p>
<p>Configures the string used as the label of the field, in case the <code class="docutils literal notranslate"><span class="pre">label</span></code>
option was not set. This is useful when using
<a class="reference internal" href="../../../translation.xhtml#translation-real-vs-keyword-messages"><span class="std std-ref">keyword translation messages</span></a>.</p>
<p>If you’re using keyword translation messages as labels, you often end up having
multiple keyword messages for the same label (e.g. <code class="docutils literal notranslate"><span class="pre">profile_address_street</span></code>,
<code class="docutils literal notranslate"><span class="pre">invoice_address_street</span></code>). This is because the label is built for each “path”
to a field. To avoid duplicated keyword messages, you can configure the label
format to a static value, like:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="nv">$profileFormBuilder</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;address&#39;</span><span class="p">,</span> <span class="nx">AddressType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;label_format&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;form.address.%name%&#39;</span><span class="p">,</span>
<span class="p">]);</span>

<span class="nv">$invoiceFormBuilder</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;invoice&#39;</span><span class="p">,</span> <span class="nx">AddressType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;label_format&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;form.address.%name%&#39;</span><span class="p">,</span>
<span class="p">]);</span>
</pre></div>
</div>
<p>This option is inherited by the child types. With the code above, the label of
the <code class="docutils literal notranslate"><span class="pre">street</span></code> field of both forms will use the <code class="docutils literal notranslate"><span class="pre">form.address.street</span></code> keyword
message.</p>
<p>Two variables are available in the label format:</p>
<dl class="simple">
<dt><code class="docutils literal notranslate"><span class="pre">%id%</span></code></dt>
<dd><p>A unique identifier for the field, consisting of the complete path to the
field and the field name (e.g. <code class="docutils literal notranslate"><span class="pre">profile_address_street</span></code>);</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">%name%</span></code></dt>
<dd><p>The field name (e.g. <code class="docutils literal notranslate"><span class="pre">street</span></code>).</p>
</dd>
</dl>
<p>The default value (<code class="docutils literal notranslate"><span class="pre">null</span></code>) results in a
<a class="reference internal" href="../../twig_reference.xhtml#reference-twig-humanize-filter"><span class="std std-ref">“humanized” version</span></a> of the field name.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The <code class="docutils literal notranslate"><span class="pre">label_format</span></code> option is evaluated in the form theme. Make sure to
update your templates in case you
<a class="reference internal" href="../../../form/form_customization.xhtml"><span class="doc">customized form theming</span></a>.</p>
</div>
</div>
<div class="section" id="mapped">
<h3><code class="docutils literal notranslate"><span class="pre">mapped</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">boolean</span></code>  <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">true</span></code></p>
<p>If you wish the field to be ignored when reading or writing to the object,
you can set the <code class="docutils literal notranslate"><span class="pre">mapped</span></code> option to <code class="docutils literal notranslate"><span class="pre">false</span></code>.</p>
</div>
<div class="section" id="required">
<h3><code class="docutils literal notranslate"><span class="pre">required</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">boolean</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">true</span></code></p>
<p>If true, an <a class="reference external" href="http://diveintohtml5.info/forms.html">HTML5 required attribute</a><span class="link-target"> [http://diveintohtml5.info/forms.html]</span> will be rendered. The corresponding
<code class="docutils literal notranslate"><span class="pre">label</span></code> will also render with a <code class="docutils literal notranslate"><span class="pre">required</span></code> class.</p>
<p>This is superficial and independent of validation. At best, if you let
Symfony guess your field type, then the value of this option will be guessed
from your validation information.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The required option also affects how empty data for each field is
handled. For more details, see the <a class="reference internal" href="#empty-data">empty_data</a> option.</p>
</div>
</div>
<div class="section" id="row-attr">
<h3>row_attr</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">array</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">[]</span></code></p>
<p>An associative array of the HTML attributes added to the element which is used
to render the <a class="reference internal" href="../../../form/form_customization.xhtml#form-rendering-basics"><span class="std std-ref">form type row</span></a>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$builder</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">,</span> <span class="nx">TextareaType</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;row_attr&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;class&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text-editor&#39;</span><span class="p">,</span> <span class="s1">&#39;id&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;...&#39;</span><span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</div>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>Use the <code class="docutils literal notranslate"><span class="pre">attr</span></code> option if you want to add these attributes to the
the <a class="reference internal" href="../../../form/form_customization.xhtml#form-rendering-basics"><span class="std std-ref">form type widget</span></a> element.</p>
</div>
</div>
</div>
<div class="section" id="field-variables">
<h2>Field Variables</h2>
<table class="docutils">
<colgroup>
<col style="width: 19%" />
<col style="width: 17%" />
<col style="width: 63%" />
</colgroup>
<thead>
<tr class="row-odd"><th class="head"><p>Variable</p></th>
<th class="head"><p>Type</p></th>
<th class="head"><p>Usage</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p>allow_add</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">boolean</span></code></p></td>
<td><p>The value of the <a class="reference internal" href="#allow-add">allow_add</a> option.</p></td>
</tr>
<tr class="row-odd"><td><p>allow_delete</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">boolean</span></code></p></td>
<td><p>The value of the <a class="reference internal" href="#allow-delete">allow_delete</a> option.</p></td>
</tr>
</tbody>
</table>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>