<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Expression</title>
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="expression">
<h1>Expression</h1>
<p>This constraint allows you to use an <a class="reference internal" href="../../components/expression_language.xhtml#component-expression-language-examples"><span class="std std-ref">expression</span></a>
for more complex, dynamic validation. See <a class="reference internal" href="#basic-usage">Basic Usage</a> for an example.
See <a class="reference internal" href="Callback.xhtml"><span class="doc">Callback</span></a> for a different constraint that
gives you similar flexibility.</p>
<table class="docutils">
<colgroup>
<col style="width: 12%" />
<col style="width: 88%" />
</colgroup>
<tbody>
<tr class="row-odd"><td><p>Applies to</p></td>
<td><p><a class="reference internal" href="../../validation.xhtml#validation-class-target"><span class="std std-ref">class</span></a>
or <a class="reference internal" href="../../validation.xhtml#validation-property-target"><span class="std std-ref">property/method</span></a></p></td>
</tr>
<tr class="row-even"><td><p>Options</p></td>
<td><ul class="simple">
<li><p><a class="reference internal" href="#reference-constraint-expression-option"><span class="std std-ref">expression</span></a></p></li>
<li><p><a class="reference internal" href="#groups">groups</a></p></li>
<li><p><a class="reference internal" href="#message">message</a></p></li>
<li><p><a class="reference internal" href="#payload">payload</a></p></li>
<li><p><a class="reference internal" href="#values">values</a></p></li>
</ul>
</td>
</tr>
<tr class="row-odd"><td><p>Class</p></td>
<td><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Constraints/Expression.php" title="Symfony\Component\Validator\Constraints\Expression"><span class="pre">Expression</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Constraints/Expression.php]</span></span></code></p></td>
</tr>
<tr class="row-even"><td><p>Validator</p></td>
<td><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Constraints/ExpressionValidator.php" title="Symfony\Component\Validator\Constraints\ExpressionValidator"><span class="pre">ExpressionValidator</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Constraints/ExpressionValidator.php]</span></span></code></p></td>
</tr>
</tbody>
</table>
<div class="section" id="basic-usage">
<h2>Basic Usage</h2>
<p>Imagine you have a class <code class="docutils literal notranslate"><span class="pre">BlogPost</span></code> with <code class="docutils literal notranslate"><span class="pre">category</span></code> and <code class="docutils literal notranslate"><span class="pre">isTechnicalPost</span></code>
properties:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Model/BlogPost.php</span>
<span class="k">namespace</span> <span class="nx">App\Model</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints</span> <span class="k">as</span> <span class="nx">Assert</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">BlogPost</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$category</span><span class="p">;</span>

    <span class="k">private</span> <span class="nv">$isTechnicalPost</span><span class="p">;</span>

    <span class="c1">// ...</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">getCategory</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">category</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">setIsTechnicalPost</span><span class="p">(</span><span class="nv">$isTechnicalPost</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">isTechnicalPost</span> <span class="o">=</span> <span class="nv">$isTechnicalPost</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>To validate the object, you have some special requirements:</p>
<ol class="upperalpha simple">
<li><p>If <code class="docutils literal notranslate"><span class="pre">isTechnicalPost</span></code> is true, then <code class="docutils literal notranslate"><span class="pre">category</span></code> must be either <code class="docutils literal notranslate"><span class="pre">php</span></code>
or <code class="docutils literal notranslate"><span class="pre">symfony</span></code>;</p></li>
<li><p>If <code class="docutils literal notranslate"><span class="pre">isTechnicalPost</span></code> is false, then <code class="docutils literal notranslate"><span class="pre">category</span></code> can be anything.</p></li>
</ol>
<p>One way to accomplish this is with the Expression constraint:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Annotations</em><div class="highlight-php-annotations notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Model/BlogPost.php</span>
<span class="k">namespace</span> <span class="nx">App\Model</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints</span> <span class="k">as</span> <span class="nx">Assert</span><span class="p">;</span>

<span class="sd">/**</span>
<span class="sd"> * @Assert\Expression(</span>
<span class="sd"> *     &quot;this.getCategory() in [&#39;php&#39;, &#39;symfony&#39;] or !this.isTechnicalPost()&quot;,</span>
<span class="sd"> *     message=&quot;If this is a tech post, the category should be either php or symfony!&quot;</span>
<span class="sd"> * )</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">BlogPost</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/validator/validation.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">App\Model\BlogPost</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">constraints</span><span class="p p-Indicator">:</span>
        <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">Expression</span><span class="p p-Indicator">:</span>
            <span class="l l-Scalar l-Scalar-Plain">expression</span><span class="p p-Indicator">:</span> <span class="s">&quot;this.getCategory()</span><span class="nv"> </span><span class="s">in</span><span class="nv"> </span><span class="s">[&#39;php&#39;,</span><span class="nv"> </span><span class="s">&#39;symfony&#39;]</span><span class="nv"> </span><span class="s">or</span><span class="nv"> </span><span class="s">!this.isTechnicalPost()&quot;</span>
            <span class="l l-Scalar l-Scalar-Plain">message</span><span class="p p-Indicator">:</span> <span class="s">&quot;If</span><span class="nv"> </span><span class="s">this</span><span class="nv"> </span><span class="s">is</span><span class="nv"> </span><span class="s">a</span><span class="nv"> </span><span class="s">tech</span><span class="nv"> </span><span class="s">post,</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">category</span><span class="nv"> </span><span class="s">should</span><span class="nv"> </span><span class="s">be</span><span class="nv"> </span><span class="s">either</span><span class="nv"> </span><span class="s">php</span><span class="nv"> </span><span class="s">or</span><span class="nv"> </span><span class="s">symfony!&quot;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/validator/validation.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;constraint-mapping</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/constraint-mapping&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;class</span> <span class="na">name=</span><span class="s">&quot;App\Model\BlogPost&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;constraint</span> <span class="na">name=</span><span class="s">&quot;Expression&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;option</span> <span class="na">name=</span><span class="s">&quot;expression&quot;</span><span class="nt">&gt;</span>
                this.getCategory() in [&#39;php&#39;, &#39;symfony&#39;] or !this.isTechnicalPost()
            <span class="nt">&lt;/option&gt;</span>
            <span class="nt">&lt;option</span> <span class="na">name=</span><span class="s">&quot;message&quot;</span><span class="nt">&gt;</span>
                If this is a tech post, the category should be either php or symfony!
            <span class="nt">&lt;/option&gt;</span>
        <span class="nt">&lt;/constraint&gt;</span>
    <span class="nt">&lt;/class&gt;</span>
<span class="nt">&lt;/constraint-mapping&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Model/BlogPost.php</span>
<span class="k">namespace</span> <span class="nx">App\Model</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints</span> <span class="k">as</span> <span class="nx">Assert</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Mapping\ClassMetadata</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">BlogPost</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">loadValidatorMetadata</span><span class="p">(</span><span class="nx">ClassMetadata</span> <span class="nv">$metadata</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$metadata</span><span class="o">-&gt;</span><span class="na">addConstraint</span><span class="p">(</span><span class="k">new</span> <span class="nx">Assert\Expression</span><span class="p">([</span>
            <span class="s1">&#39;expression&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;this.getCategory() in [&quot;php&quot;, &quot;symfony&quot;] or !this.isTechnicalPost()&#39;</span><span class="p">,</span>
            <span class="s1">&#39;message&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;If this is a tech post, the category should be either php or symfony!&#39;</span><span class="p">,</span>
        <span class="p">]));</span>
    <span class="p">}</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>The <a class="reference internal" href="#reference-constraint-expression-option"><span class="std std-ref">expression</span></a> option is the
expression that must return true in order for validation to pass. To learn
more about the expression language syntax, see
<a class="reference internal" href="../../components/expression_language/syntax.xhtml"><span class="doc">The Expression Syntax</span></a>.</p>
<div class="sidebar">
<p class="sidebar-title">Mapping the Error to a Specific Field</p>
<p>You can also attach the constraint to a specific property and still validate
based on the values of the entire entity. This is handy if you want to attach
the error to a specific field. In this context, <code class="docutils literal notranslate"><span class="pre">value</span></code> represents the value
of <code class="docutils literal notranslate"><span class="pre">isTechnicalPost</span></code>.</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Annotations</em><div class="highlight-php-annotations notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Model/BlogPost.php</span>
<span class="k">namespace</span> <span class="nx">App\Model</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints</span> <span class="k">as</span> <span class="nx">Assert</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">BlogPost</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="sd">/**</span>
<span class="sd">     * @Assert\Expression(</span>
<span class="sd">     *     &quot;this.getCategory() in [&#39;php&#39;, &#39;symfony&#39;] or value == false&quot;,</span>
<span class="sd">     *     message=&quot;If this is a tech post, the category should be either php or symfony!&quot;</span>
<span class="sd">     * )</span>
<span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$isTechnicalPost</span><span class="p">;</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/validator/validation.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">App\Model\BlogPost</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">properties</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">isTechnicalPost</span><span class="p p-Indicator">:</span>
            <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">Expression</span><span class="p p-Indicator">:</span>
                <span class="l l-Scalar l-Scalar-Plain">expression</span><span class="p p-Indicator">:</span> <span class="s">&quot;this.getCategory()</span><span class="nv"> </span><span class="s">in</span><span class="nv"> </span><span class="s">[&#39;php&#39;,</span><span class="nv"> </span><span class="s">&#39;symfony&#39;]</span><span class="nv"> </span><span class="s">or</span><span class="nv"> </span><span class="s">value</span><span class="nv"> </span><span class="s">==</span><span class="nv"> </span><span class="s">false&quot;</span>
                <span class="l l-Scalar l-Scalar-Plain">message</span><span class="p p-Indicator">:</span> <span class="s">&quot;If</span><span class="nv"> </span><span class="s">this</span><span class="nv"> </span><span class="s">is</span><span class="nv"> </span><span class="s">a</span><span class="nv"> </span><span class="s">tech</span><span class="nv"> </span><span class="s">post,</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">category</span><span class="nv"> </span><span class="s">should</span><span class="nv"> </span><span class="s">be</span><span class="nv"> </span><span class="s">either</span><span class="nv"> </span><span class="s">php</span><span class="nv"> </span><span class="s">or</span><span class="nv"> </span><span class="s">symfony!&quot;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/validator/validation.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;constraint-mapping</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/constraint-mapping&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;class</span> <span class="na">name=</span><span class="s">&quot;App\Model\BlogPost&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;isTechnicalPost&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;constraint</span> <span class="na">name=</span><span class="s">&quot;Expression&quot;</span><span class="nt">&gt;</span>
                <span class="nt">&lt;option</span> <span class="na">name=</span><span class="s">&quot;expression&quot;</span><span class="nt">&gt;</span>
                    this.getCategory() in [&#39;php&#39;, &#39;symfony&#39;] or value == false
                <span class="nt">&lt;/option&gt;</span>
                <span class="nt">&lt;option</span> <span class="na">name=</span><span class="s">&quot;message&quot;</span><span class="nt">&gt;</span>
                    If this is a tech post, the category should be either php or symfony!
                <span class="nt">&lt;/option&gt;</span>
            <span class="nt">&lt;/constraint&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
    <span class="nt">&lt;/class&gt;</span>
<span class="nt">&lt;/constraint-mapping&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Model/BlogPost.php</span>
<span class="k">namespace</span> <span class="nx">App\Model</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints</span> <span class="k">as</span> <span class="nx">Assert</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Mapping\ClassMetadata</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">BlogPost</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">loadValidatorMetadata</span><span class="p">(</span><span class="nx">ClassMetadata</span> <span class="nv">$metadata</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$metadata</span><span class="o">-&gt;</span><span class="na">addPropertyConstraint</span><span class="p">(</span><span class="s1">&#39;isTechnicalPost&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">Assert\Expression</span><span class="p">([</span>
            <span class="s1">&#39;expression&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;this.getCategory() in [&quot;php&quot;, &quot;symfony&quot;] or value == false&#39;</span><span class="p">,</span>
            <span class="s1">&#39;message&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;If this is a tech post, the category should be either php or symfony!&#39;</span><span class="p">,</span>
        <span class="p">]));</span>
    <span class="p">}</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
<p>For more information about the expression and what variables are available
to you, see the <a class="reference internal" href="#reference-constraint-expression-option"><span class="std std-ref">expression</span></a>
option details below.</p>
</div>
<div class="section" id="options">
<h2>Options</h2>
<div class="section" id="reference-constraint-expression-option">
<span id="id1"></span><h3><code class="docutils literal notranslate"><span class="pre">expression</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">string</span></code> [<a class="reference internal" href="../../validation.xhtml#validation-default-option"><span class="std std-ref">default option</span></a>]</p>
<p>The expression that will be evaluated. If the expression evaluates to a false
value (using <code class="docutils literal notranslate"><span class="pre">==</span></code>, not <code class="docutils literal notranslate"><span class="pre">===</span></code>), validation will fail.</p>
<p>To learn more about the expression language syntax, see
<a class="reference internal" href="../../components/expression_language/syntax.xhtml"><span class="doc">The Expression Syntax</span></a>.</p>
<p>Inside of the expression, you have access to up to 2 variables:</p>
<p>Depending on how you use the constraint, you have access to 1 or 2 variables
in your expression:</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">this</span></code>: The object being validated (e.g. an instance of BlogPost);</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">value</span></code>: The value of the property being validated (only available when
the constraint is applied directly to a property);</p></li>
</ul>
</div>
<div class="section" id="groups">
<h3><code class="docutils literal notranslate"><span class="pre">groups</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">array</span></code> | <code class="docutils literal notranslate"><span class="pre">string</span></code></p>
<p>It defines the validation group or groups this constraint belongs to. Read more
about <a class="reference internal" href="../../validation/groups.xhtml"><span class="doc">validation groups</span></a>.</p>
</div>
<div class="section" id="message">
<h3><code class="docutils literal notranslate"><span class="pre">message</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">string</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">This</span> <span class="pre">value</span> <span class="pre">is</span> <span class="pre">not</span> <span class="pre">valid.</span></code></p>
<p>The default message supplied when the expression evaluates to false.</p>
<p>You can use the following parameters in this message:</p>
<table class="docutils">
<colgroup>
<col style="width: 19%" />
<col style="width: 81%" />
</colgroup>
<thead>
<tr class="row-odd"><th class="head"><p>Parameter</p></th>
<th class="head"><p>Description</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">{{</span> <span class="pre">value</span> <span class="pre">}}</span></code></p></td>
<td><p>The current (invalid) value</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">{{</span> <span class="pre">label</span> <span class="pre">}}</span></code></p></td>
<td><p>Corresponding form field label</p></td>
</tr>
</tbody>
</table>
<div class="versionadded">
<p><span class="versionmodified">New in version 5.2: </span>The <code class="docutils literal notranslate"><span class="pre">{{</span> <span class="pre">label</span> <span class="pre">}}</span></code> parameter was introduced in Symfony 5.2.</p>
</div>
</div>
<div class="section" id="payload">
<h3><code class="docutils literal notranslate"><span class="pre">payload</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">mixed</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">null</span></code></p>
<p>This option can be used to attach arbitrary domain-specific data to a constraint.
The configured payload is not used by the Validator component, but its processing
is completely up to you.</p>
<p>For example, you may want to use
<a class="reference internal" href="../../validation/severity.xhtml"><span class="doc">several error levels</span></a> to present failed
constraints differently in the front-end depending on the severity of the
error.</p>
</div>
<div class="section" id="values">
<h3>values</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">array</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">[]</span></code></p>
<p>The values of the custom variables used in the expression. Values can be of any
type (numeric, boolean, strings, null, etc.)</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Annotations</em><div class="highlight-php-annotations notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Model/Analysis.php</span>
<span class="k">namespace</span> <span class="nx">App\Model</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints</span> <span class="k">as</span> <span class="nx">Assert</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Analysis</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @Assert\Expression(</span>
<span class="sd">     *     &quot;value + error_margin &lt; threshold&quot;,</span>
<span class="sd">     *     values = { &quot;error_margin&quot;: 0.25, &quot;threshold&quot;: 1.5 }</span>
<span class="sd">     * )</span>
<span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$metric</span><span class="p">;</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/validator/validation.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">App\Model\Analysis</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">properties</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">metric</span><span class="p p-Indicator">:</span>
            <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">Expression</span><span class="p p-Indicator">:</span>
                <span class="l l-Scalar l-Scalar-Plain">expression</span><span class="p p-Indicator">:</span> <span class="s">&quot;value</span><span class="nv"> </span><span class="s">+</span><span class="nv"> </span><span class="s">error_margin</span><span class="nv"> </span><span class="s">&lt;</span><span class="nv"> </span><span class="s">threshold&quot;</span>
                <span class="l l-Scalar l-Scalar-Plain">values</span><span class="p p-Indicator">:</span>     <span class="p p-Indicator">{</span> <span class="nv">error_margin</span><span class="p p-Indicator">:</span> <span class="nv">0.25</span><span class="p p-Indicator">,</span> <span class="nv">threshold</span><span class="p p-Indicator">:</span> <span class="nv">1.5</span> <span class="p p-Indicator">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/validator/validation.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;constraint-mapping</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/constraint-mapping&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;class</span> <span class="na">name=</span><span class="s">&quot;App\Model\Analysis&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;metric&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;constraint</span> <span class="na">name=</span><span class="s">&quot;Expression&quot;</span><span class="nt">&gt;</span>
                <span class="nt">&lt;option</span> <span class="na">name=</span><span class="s">&quot;expression&quot;</span><span class="nt">&gt;</span>
                    value + error_margin <span class="ni">&amp;lt;</span> threshold
                <span class="nt">&lt;/option&gt;</span>
                <span class="nt">&lt;option</span> <span class="na">name=</span><span class="s">&quot;values&quot;</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;value</span> <span class="na">key=</span><span class="s">&quot;error_margin&quot;</span><span class="nt">&gt;</span>0.25<span class="nt">&lt;/value&gt;</span>
                    <span class="nt">&lt;value</span> <span class="na">key=</span><span class="s">&quot;threshold&quot;</span><span class="nt">&gt;</span>1.5<span class="nt">&lt;/value&gt;</span>
                <span class="nt">&lt;/option&gt;</span>
            <span class="nt">&lt;/constraint&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
    <span class="nt">&lt;/class&gt;</span>
<span class="nt">&lt;/constraint-mapping&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Model/Analysis.php</span>
<span class="k">namespace</span> <span class="nx">App\Model</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints</span> <span class="k">as</span> <span class="nx">Assert</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Mapping\ClassMetadata</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Analysis</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">loadValidatorMetadata</span><span class="p">(</span><span class="nx">ClassMetadata</span> <span class="nv">$metadata</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$metadata</span><span class="o">-&gt;</span><span class="na">addPropertyConstraint</span><span class="p">(</span><span class="s1">&#39;metric&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">Assert\Expression</span><span class="p">([</span>
            <span class="s1">&#39;expression&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;value + error_margin &lt; threshold&#39;</span><span class="p">,</span>
            <span class="s1">&#39;values&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;error_margin&#39;</span> <span class="o">=&gt;</span> <span class="mf">0.25</span><span class="p">,</span> <span class="s1">&#39;threshold&#39;</span> <span class="o">=&gt;</span> <span class="mf">1.5</span><span class="p">],</span>
        <span class="p">]));</span>
    <span class="p">}</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>