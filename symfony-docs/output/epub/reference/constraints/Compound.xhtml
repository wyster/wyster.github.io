<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Compound</title>
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="compound">
<h1>Compound</h1>
<p>To the contrary to the other constraints, this constraint cannot be used on its own.
Instead, it allows you to create your own set of reusable constraints, representing
rules to use consistently across your application, by extending the constraint.</p>
<div class="versionadded">
<p><span class="versionmodified">New in version 5.1: </span>The <code class="docutils literal notranslate"><span class="pre">Compound</span></code> constraint was introduced in Symfony 5.1.</p>
</div>
<table class="docutils">
<colgroup>
<col style="width: 9%" />
<col style="width: 91%" />
</colgroup>
<tbody>
<tr class="row-odd"><td><p>Applies to</p></td>
<td><p><a class="reference internal" href="../../validation.xhtml#validation-class-target"><span class="std std-ref">class</span></a> or <a class="reference internal" href="../../validation.xhtml#validation-property-target"><span class="std std-ref">property or method</span></a></p></td>
</tr>
<tr class="row-even"><td><p>Options</p></td>
<td><ul class="simple">
<li><p><a class="reference internal" href="#groups">groups</a></p></li>
<li><p><a class="reference internal" href="#payload">payload</a></p></li>
</ul>
</td>
</tr>
<tr class="row-odd"><td><p>Class</p></td>
<td><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Constraints/Compound.php" title="Symfony\Component\Validator\Constraints\Compound"><span class="pre">Compound</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Constraints/Compound.php]</span></span></code></p></td>
</tr>
<tr class="row-even"><td><p>Validator</p></td>
<td><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Constraints/CompoundValidator.php" title="Symfony\Component\Validator\Constraints\CompoundValidator"><span class="pre">CompoundValidator</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Constraints/CompoundValidator.php]</span></span></code></p></td>
</tr>
</tbody>
</table>
<div class="section" id="basic-usage">
<h2>Basic Usage</h2>
<p>Suppose that you have different places where a user password must be validated,
you can create your own named set or requirements to be reused consistently everywhere:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Validator/Constraints/PasswordRequirements.php</span>
<span class="k">namespace</span> <span class="nx">App\Validator\Constraints</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints\Compound</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints</span> <span class="k">as</span> <span class="nx">Assert</span><span class="p">;</span>

<span class="sd">/**</span>
<span class="sd"> * @Annotation</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">PasswordRequirements</span> <span class="k">extends</span> <span class="nx">Compound</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="k">function</span> <span class="nf">getConstraints</span><span class="p">(</span><span class="k">array</span> <span class="nv">$options</span><span class="p">)</span><span class="o">:</span> <span class="k">array</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="p">[</span>
            <span class="k">new</span> <span class="nx">Assert\NotBlank</span><span class="p">(),</span>
            <span class="k">new</span> <span class="nx">Assert\Type</span><span class="p">(</span><span class="s1">&#39;string&#39;</span><span class="p">),</span>
            <span class="k">new</span> <span class="nx">Assert\Length</span><span class="p">([</span><span class="s1">&#39;min&#39;</span> <span class="o">=&gt;</span> <span class="mi">12</span><span class="p">]),</span>
            <span class="k">new</span> <span class="nx">Assert\NotCompromisedPassword</span><span class="p">(),</span>
        <span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>You can now use it anywhere you need it:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Annotations</em><div class="highlight-php-annotations notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/User/RegisterUser.php</span>
<span class="k">namespace</span> <span class="nx">App\User</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Validator\Constraints</span> <span class="k">as</span> <span class="nx">AcmeAssert</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">RegisterUser</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @AcmeAssert\PasswordRequirements()</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="nv">$password</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/validator/validation.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">App\User\RegisterUser</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">properties</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">password</span><span class="p p-Indicator">:</span>
            <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">App\Validator\Constraints\PasswordRequirements</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">~</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/validator/validation.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;constraint-mapping</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/constraint-mapping&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;class</span> <span class="na">name=</span><span class="s">&quot;App\User\RegisterUser&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;password&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;constraint</span> <span class="na">name=</span><span class="s">&quot;App\Validator\Constraints\PasswordRequirements&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
    <span class="nt">&lt;/class&gt;</span>
<span class="nt">&lt;/constraint-mapping&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/User/RegisterUser.php</span>
<span class="k">namespace</span> <span class="nx">App\User</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Validator\Constraints</span> <span class="k">as</span> <span class="nx">AcmeAssert</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Mapping\ClassMetadata</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">RegisterUser</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">loadValidatorMetadata</span><span class="p">(</span><span class="nx">ClassMetadata</span> <span class="nv">$metadata</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$metadata</span><span class="o">-&gt;</span><span class="na">addPropertyConstraint</span><span class="p">(</span><span class="s1">&#39;password&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">AcmeAssert\PasswordRequirements</span><span class="p">());</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
<div class="section" id="options">
<h2>Options</h2>
<div class="section" id="groups">
<h3><code class="docutils literal notranslate"><span class="pre">groups</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">array</span></code> | <code class="docutils literal notranslate"><span class="pre">string</span></code></p>
<p>It defines the validation group or groups this constraint belongs to. Read more
about <a class="reference internal" href="../../validation/groups.xhtml"><span class="doc">validation groups</span></a>.</p>
</div>
<div class="section" id="payload">
<h3><code class="docutils literal notranslate"><span class="pre">payload</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">mixed</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">null</span></code></p>
<p>This option can be used to attach arbitrary domain-specific data to a constraint.
The configured payload is not used by the Validator component, but its processing
is completely up to you.</p>
<p>For example, you may want to use
<a class="reference internal" href="../../validation/severity.xhtml"><span class="doc">several error levels</span></a> to present failed
constraints differently in the front-end depending on the severity of the
error.</p>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>