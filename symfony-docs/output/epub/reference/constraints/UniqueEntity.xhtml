<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>UniqueEntity</title>
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="uniqueentity">
<h1>UniqueEntity</h1>
<p>Validates that a particular field (or fields) in a Doctrine entity is (are)
unique. This is commonly used, for example, to prevent a new user to register
using an email address that already exists in the system.</p>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>If you want to validate that all the elements of the collection are unique
use the <a class="reference internal" href="Unique.xhtml"><span class="doc">Unique constraint</span></a>.</p>
</div>
<table class="docutils">
<colgroup>
<col style="width: 11%" />
<col style="width: 89%" />
</colgroup>
<tbody>
<tr class="row-odd"><td><p>Applies to</p></td>
<td><p><a class="reference internal" href="../../validation.xhtml#validation-class-target"><span class="std std-ref">class</span></a></p></td>
</tr>
<tr class="row-even"><td><p>Options</p></td>
<td><ul class="simple">
<li><p><a class="reference internal" href="#em">em</a></p></li>
<li><p><a class="reference internal" href="#entityclass">entityClass</a></p></li>
<li><p><a class="reference internal" href="#errorpath">errorPath</a></p></li>
<li><p><a class="reference internal" href="#fields">fields</a></p></li>
<li><p><a class="reference internal" href="#groups">groups</a></p></li>
<li><p><a class="reference internal" href="#ignorenull">ignoreNull</a></p></li>
<li><p><a class="reference internal" href="#message">message</a></p></li>
<li><p><a class="reference internal" href="#payload">payload</a></p></li>
<li><p><a class="reference internal" href="#repositorymethod">repositoryMethod</a></p></li>
</ul>
</td>
</tr>
<tr class="row-odd"><td><p>Class</p></td>
<td><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Doctrine/Validator/Constraints/UniqueEntity.php" title="Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity"><span class="pre">UniqueEntity</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Doctrine/Validator/Constraints/UniqueEntity.php]</span></span></code></p></td>
</tr>
<tr class="row-even"><td><p>Validator</p></td>
<td><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Doctrine/Validator/Constraints/UniqueEntityValidator.php" title="Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator"><span class="pre">UniqueEntityValidator</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Doctrine/Validator/Constraints/UniqueEntityValidator.php]</span></span></code></p></td>
</tr>
</tbody>
</table>
<div class="section" id="basic-usage">
<h2>Basic Usage</h2>
<p>Suppose you have a <code class="docutils literal notranslate"><span class="pre">User</span></code> entity that has an <code class="docutils literal notranslate"><span class="pre">email</span></code> field. You can use the
<code class="docutils literal notranslate"><span class="pre">UniqueEntity</span></code> constraint to guarantee that the <code class="docutils literal notranslate"><span class="pre">email</span></code> field remains unique
between all of the rows in your user table:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Annotations</em><div class="highlight-php-annotations notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Entity/User.php</span>
<span class="k">namespace</span> <span class="nx">App\Entity</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Doctrine\ORM\Mapping</span> <span class="k">as</span> <span class="nx">ORM</span><span class="p">;</span>

<span class="c1">// DON&#39;T forget the following use statement!!!</span>
<span class="k">use</span> <span class="nx">Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints</span> <span class="k">as</span> <span class="nx">Assert</span><span class="p">;</span>

<span class="sd">/**</span>
<span class="sd"> * @ORM\Entity</span>
<span class="sd"> * @UniqueEntity(&quot;email&quot;)</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">User</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @ORM\Column(name=&quot;email&quot;, type=&quot;string&quot;, length=255, unique=true)</span>
<span class="sd">     * @Assert\Email</span>
<span class="sd">     */</span>
    <span class="k">protected</span> <span class="nv">$email</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/validator/validation.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">App\Entity\User</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">constraints</span><span class="p p-Indicator">:</span>
        <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">email</span>
    <span class="l l-Scalar l-Scalar-Plain">properties</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">email</span><span class="p p-Indicator">:</span>
            <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">Email</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">~</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/validator/validation.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;constraint-mapping</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/constraint-mapping&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;class</span> <span class="na">name=</span><span class="s">&quot;App\Entity\User&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;constraint</span> <span class="na">name=</span><span class="s">&quot;Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;option</span> <span class="na">name=</span><span class="s">&quot;fields&quot;</span><span class="nt">&gt;</span>email<span class="nt">&lt;/option&gt;</span>
        <span class="nt">&lt;/constraint&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;email&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;constraint</span> <span class="na">name=</span><span class="s">&quot;Email&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
    <span class="nt">&lt;/class&gt;</span>
<span class="nt">&lt;/constraint-mapping&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Entity/User.php</span>
<span class="k">namespace</span> <span class="nx">App\Entity</span><span class="p">;</span>

<span class="c1">// DON&#39;T forget the following use statement!!!</span>
<span class="k">use</span> <span class="nx">Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints</span> <span class="k">as</span> <span class="nx">Assert</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">User</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">loadValidatorMetadata</span><span class="p">(</span><span class="nx">ClassMetadata</span> <span class="nv">$metadata</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$metadata</span><span class="o">-&gt;</span><span class="na">addConstraint</span><span class="p">(</span><span class="k">new</span> <span class="nx">UniqueEntity</span><span class="p">([</span>
            <span class="s1">&#39;fields&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;email&#39;</span><span class="p">,</span>
        <span class="p">]));</span>

        <span class="nv">$metadata</span><span class="o">-&gt;</span><span class="na">addPropertyConstraint</span><span class="p">(</span><span class="s1">&#39;email&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">Assert\Email</span><span class="p">());</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>This constraint doesn’t provide any protection against <a class="reference external" href="https://en.wikipedia.org/wiki/Race_condition">race conditions</a><span class="link-target"> [https://en.wikipedia.org/wiki/Race_condition]</span>.
They may occur when another entity is persisted by an external process after
this validation has passed and before this entity is actually persisted in
the database.</p>
</div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>This constraint cannot deal with duplicates found in a collection of items
that haven’t been persisted as entities yet. You’ll need to create your own
validator to handle that case.</p>
</div>
</div>
<div class="section" id="options">
<h2>Options</h2>
<div class="section" id="em">
<h3>em</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">string</span></code></p>
<p>The name of the entity manager to use for making the query to determine
the uniqueness. If it’s left blank, the correct entity manager will be
determined for this class. For that reason, this option should probably
not need to be used.</p>
</div>
<div class="section" id="entityclass">
<h3>entityClass</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">string</span></code></p>
<p>By default, the query performed to ensure the uniqueness uses the repository of
the current class instance. However, in some cases, such as when using Doctrine
inheritance mapping, you need to execute the query in a different repository.
Use this option to define the fully-qualified class name (FQCN) of the Doctrine
entity associated with the repository you want to use.</p>
</div>
<div class="section" id="errorpath">
<h3>errorPath</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">string</span></code> <strong>default</strong>: The name of the first field in <a class="reference internal" href="#fields">fields</a></p>
<p>If the entity violates the constraint the error message is bound to the
first field in <a class="reference internal" href="#fields">fields</a>. If there is more than one field, you may want
to map the error message to another field.</p>
<p>Consider this example:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Annotations</em><div class="highlight-php-annotations notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Entity/Service.php</span>
<span class="k">namespace</span> <span class="nx">App\Entity</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Doctrine\ORM\Mapping</span> <span class="k">as</span> <span class="nx">ORM</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity</span><span class="p">;</span>

<span class="sd">/**</span>
<span class="sd"> * @ORM\Entity</span>
<span class="sd"> * @UniqueEntity(</span>
<span class="sd"> *     fields={&quot;host&quot;, &quot;port&quot;},</span>
<span class="sd"> *     errorPath=&quot;port&quot;,</span>
<span class="sd"> *     message=&quot;This port is already in use on that host.&quot;</span>
<span class="sd"> * )</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">Service</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @ORM\ManyToOne(targetEntity=&quot;App\Entity\Host&quot;)</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="nv">$host</span><span class="p">;</span>

    <span class="sd">/**</span>
<span class="sd">     * @ORM\Column(type=&quot;integer&quot;)</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="nv">$port</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/validator/validation.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">App\Entity\Service</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">constraints</span><span class="p p-Indicator">:</span>
        <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity</span><span class="p p-Indicator">:</span>
            <span class="l l-Scalar l-Scalar-Plain">fields</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="nv">host</span><span class="p p-Indicator">,</span> <span class="nv">port</span><span class="p p-Indicator">]</span>
            <span class="l l-Scalar l-Scalar-Plain">errorPath</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">port</span>
            <span class="l l-Scalar l-Scalar-Plain">message</span><span class="p p-Indicator">:</span> <span class="s">&#39;This</span><span class="nv"> </span><span class="s">port</span><span class="nv"> </span><span class="s">is</span><span class="nv"> </span><span class="s">already</span><span class="nv"> </span><span class="s">in</span><span class="nv"> </span><span class="s">use</span><span class="nv"> </span><span class="s">on</span><span class="nv"> </span><span class="s">that</span><span class="nv"> </span><span class="s">host.&#39;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/validator/validation.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;constraint-mapping</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/constraint-mapping&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;class</span> <span class="na">name=</span><span class="s">&quot;App\Entity\Service&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;constraint</span> <span class="na">name=</span><span class="s">&quot;Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;option</span> <span class="na">name=</span><span class="s">&quot;fields&quot;</span><span class="nt">&gt;</span>
                <span class="nt">&lt;value&gt;</span>host<span class="nt">&lt;/value&gt;</span>
                <span class="nt">&lt;value&gt;</span>port<span class="nt">&lt;/value&gt;</span>
            <span class="nt">&lt;/option&gt;</span>
            <span class="nt">&lt;option</span> <span class="na">name=</span><span class="s">&quot;errorPath&quot;</span><span class="nt">&gt;</span>port<span class="nt">&lt;/option&gt;</span>
            <span class="nt">&lt;option</span> <span class="na">name=</span><span class="s">&quot;message&quot;</span><span class="nt">&gt;</span>This port is already in use on that host.<span class="nt">&lt;/option&gt;</span>
        <span class="nt">&lt;/constraint&gt;</span>
    <span class="nt">&lt;/class&gt;</span>

<span class="nt">&lt;/constraint-mapping&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Entity/Service.php</span>
<span class="k">namespace</span> <span class="nx">App\Entity</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Mapping\ClassMetadata</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Service</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nv">$host</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$port</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">loadValidatorMetadata</span><span class="p">(</span><span class="nx">ClassMetadata</span> <span class="nv">$metadata</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$metadata</span><span class="o">-&gt;</span><span class="na">addConstraint</span><span class="p">(</span><span class="k">new</span> <span class="nx">UniqueEntity</span><span class="p">([</span>
            <span class="s1">&#39;fields&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;host&#39;</span><span class="p">,</span> <span class="s1">&#39;port&#39;</span><span class="p">],</span>
            <span class="s1">&#39;errorPath&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;port&#39;</span><span class="p">,</span>
            <span class="s1">&#39;message&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;This port is already in use on that host.&#39;</span><span class="p">,</span>
        <span class="p">]));</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>Now, the message would be bound to the <code class="docutils literal notranslate"><span class="pre">port</span></code> field with this configuration.</p>
</div>
<div class="section" id="fields">
<h3>fields</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">array</span></code> | <code class="docutils literal notranslate"><span class="pre">string</span></code> [<a class="reference internal" href="../../validation.xhtml#validation-default-option"><span class="std std-ref">default option</span></a>]</p>
<p>This required option is the field (or list of fields) on which this entity
should be unique. For example, if you specified both the <code class="docutils literal notranslate"><span class="pre">email</span></code> and <code class="docutils literal notranslate"><span class="pre">name</span></code>
field in a single <code class="docutils literal notranslate"><span class="pre">UniqueEntity</span></code> constraint, then it would enforce that
the combination value is unique (e.g. two users could have the same email,
as long as they don’t have the same name also).</p>
<p>If you need to require two fields to be individually unique (e.g. a unique
<code class="docutils literal notranslate"><span class="pre">email</span></code> <em>and</em> a unique <code class="docutils literal notranslate"><span class="pre">username</span></code>), you use two <code class="docutils literal notranslate"><span class="pre">UniqueEntity</span></code> entries,
each with a single field.</p>
</div>
<div class="section" id="groups">
<h3><code class="docutils literal notranslate"><span class="pre">groups</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">array</span></code> | <code class="docutils literal notranslate"><span class="pre">string</span></code></p>
<p>It defines the validation group or groups this constraint belongs to. Read more
about <a class="reference internal" href="../../validation/groups.xhtml"><span class="doc">validation groups</span></a>.</p>
</div>
<div class="section" id="ignorenull">
<h3>ignoreNull</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">boolean</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">true</span></code></p>
<p>If this option is set to <code class="docutils literal notranslate"><span class="pre">true</span></code>, then the constraint will allow multiple
entities to have a <code class="docutils literal notranslate"><span class="pre">null</span></code> value for a field without failing validation.
If set to <code class="docutils literal notranslate"><span class="pre">false</span></code>, only one <code class="docutils literal notranslate"><span class="pre">null</span></code> value is allowed - if a second entity
also has a <code class="docutils literal notranslate"><span class="pre">null</span></code> value, validation would fail.</p>
</div>
<div class="section" id="message">
<h3>message</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">string</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">This</span> <span class="pre">value</span> <span class="pre">is</span> <span class="pre">already</span> <span class="pre">used.</span></code></p>
<p>The message that’s displayed when this constraint fails. This message is by default
mapped to the first field causing the violation. When using multiple fields
in the constraint, the mapping can be specified via the <a class="reference internal" href="#errorpath">errorPath</a> property.</p>
<p>Messages can include the <code class="docutils literal notranslate"><span class="pre">{{</span> <span class="pre">value</span> <span class="pre">}}</span></code> placeholder to display a string
representation of the invalid entity. If the entity doesn’t define the
<code class="docutils literal notranslate"><span class="pre">__toString()</span></code> method, the following generic value will be used: <em>“Object of
class __CLASS__ identified by &lt;comma separated IDs&gt;”</em></p>
<p>You can use the following parameters in this message:</p>
<table class="docutils">
<colgroup>
<col style="width: 19%" />
<col style="width: 81%" />
</colgroup>
<thead>
<tr class="row-odd"><th class="head"><p>Parameter</p></th>
<th class="head"><p>Description</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">{{</span> <span class="pre">value</span> <span class="pre">}}</span></code></p></td>
<td><p>The current (invalid) value</p></td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="payload">
<h3><code class="docutils literal notranslate"><span class="pre">payload</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">mixed</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">null</span></code></p>
<p>This option can be used to attach arbitrary domain-specific data to a constraint.
The configured payload is not used by the Validator component, but its processing
is completely up to you.</p>
<p>For example, you may want to use
<a class="reference internal" href="../../validation/severity.xhtml"><span class="doc">several error levels</span></a> to present failed
constraints differently in the front-end depending on the severity of the
error.</p>
</div>
<div class="section" id="repositorymethod">
<h3>repositoryMethod</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">string</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">findBy</span></code></p>
<p>The name of the repository method used to determine the uniqueness. If it’s left
blank, <code class="docutils literal notranslate"><span class="pre">findBy()</span></code> will be used. The method receives as its argument a
<code class="docutils literal notranslate"><span class="pre">fieldName</span> <span class="pre">=&gt;</span> <span class="pre">value</span></code> associative array (where <code class="docutils literal notranslate"><span class="pre">fieldName</span></code> is each of the
fields configured in the <code class="docutils literal notranslate"><span class="pre">fields</span></code> option). The method should return a
<code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/function.is-countable.php" title="is_countable"><span class="pre">countable</span> <span class="pre">PHP</span> <span class="pre">variable</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/function.is-countable.php]</span></span></code>.</p>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>