<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Callback</title>
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="callback">
<h1>Callback</h1>
<p>The purpose of the Callback constraint is to create completely custom
validation rules and to assign any validation errors to specific fields
on your object. If you’re using validation with forms, this means that
instead of displaying custom errors at the top of the form, you can
display them next to the field they apply to.</p>
<p>This process works by specifying one or more <em>callback</em> methods, each of
which will be called during the validation process. Each of those methods
can do anything, including creating and assigning validation errors.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>A callback method itself doesn’t <em>fail</em> or return any value. Instead,
as you’ll see in the example, a callback method has the ability to directly
add validator “violations”.</p>
</div>
<table class="docutils">
<colgroup>
<col style="width: 10%" />
<col style="width: 90%" />
</colgroup>
<tbody>
<tr class="row-odd"><td><p>Applies to</p></td>
<td><p><a class="reference internal" href="../../validation.xhtml#validation-class-target"><span class="std std-ref">class</span></a> or <a class="reference internal" href="../../validation.xhtml#validation-property-target"><span class="std std-ref">property/method</span></a></p></td>
</tr>
<tr class="row-even"><td><p>Options</p></td>
<td><ul class="simple">
<li><p><a class="reference internal" href="#callback-option"><span class="std std-ref">callback</span></a></p></li>
<li><p><a class="reference internal" href="#groups">groups</a></p></li>
<li><p><a class="reference internal" href="#payload">payload</a></p></li>
</ul>
</td>
</tr>
<tr class="row-odd"><td><p>Class</p></td>
<td><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Constraints/Callback.php" title="Symfony\Component\Validator\Constraints\Callback"><span class="pre">Callback</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Constraints/Callback.php]</span></span></code></p></td>
</tr>
<tr class="row-even"><td><p>Validator</p></td>
<td><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Constraints/CallbackValidator.php" title="Symfony\Component\Validator\Constraints\CallbackValidator"><span class="pre">CallbackValidator</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Constraints/CallbackValidator.php]</span></span></code></p></td>
</tr>
</tbody>
</table>
<div class="section" id="configuration">
<h2>Configuration</h2>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Annotations</em><div class="highlight-php-annotations notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Entity/Author.php</span>
<span class="k">namespace</span> <span class="nx">App\Entity</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints</span> <span class="k">as</span> <span class="nx">Assert</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Context\ExecutionContextInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Author</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @Assert\Callback</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">validate</span><span class="p">(</span><span class="nx">ExecutionContextInterface</span> <span class="nv">$context</span><span class="p">,</span> <span class="nv">$payload</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/validator/validation.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">App\Entity\Author</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">constraints</span><span class="p p-Indicator">:</span>
        <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">Callback</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">validate</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/validator/validation.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;constraint-mapping</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/constraint-mapping&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;class</span> <span class="na">name=</span><span class="s">&quot;App\Entity\Author&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;constraint</span> <span class="na">name=</span><span class="s">&quot;Callback&quot;</span><span class="nt">&gt;</span>validate<span class="nt">&lt;/constraint&gt;</span>
    <span class="nt">&lt;/class&gt;</span>
<span class="nt">&lt;/constraint-mapping&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Entity/Author.php</span>
<span class="k">namespace</span> <span class="nx">App\Entity</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints</span> <span class="k">as</span> <span class="nx">Assert</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Mapping\ClassMetadata</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Author</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">loadValidatorMetadata</span><span class="p">(</span><span class="nx">ClassMetadata</span> <span class="nv">$metadata</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$metadata</span><span class="o">-&gt;</span><span class="na">addConstraint</span><span class="p">(</span><span class="k">new</span> <span class="nx">Assert\Callback</span><span class="p">(</span><span class="s1">&#39;validate&#39;</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">validate</span><span class="p">(</span><span class="nx">ExecutionContextInterface</span> <span class="nv">$context</span><span class="p">,</span> <span class="nv">$payload</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
<div class="section" id="the-callback-method">
<h2>The Callback Method</h2>
<p>The callback method is passed a special <code class="docutils literal notranslate"><span class="pre">ExecutionContextInterface</span></code> object.
You can set “violations” directly on this object and determine to which
field those errors should be attributed:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Context\ExecutionContextInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Author</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
    <span class="k">private</span> <span class="nv">$firstName</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">validate</span><span class="p">(</span><span class="nx">ExecutionContextInterface</span> <span class="nv">$context</span><span class="p">,</span> <span class="nv">$payload</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// somehow you have an array of &quot;fake names&quot;</span>
        <span class="nv">$fakeNames</span> <span class="o">=</span> <span class="p">[</span><span class="cm">/* ... */</span><span class="p">];</span>

        <span class="c1">// check if the name is actually a fake name</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">in_array</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getFirstName</span><span class="p">(),</span> <span class="nv">$fakeNames</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$context</span><span class="o">-&gt;</span><span class="na">buildViolation</span><span class="p">(</span><span class="s1">&#39;This name sounds totally fake!&#39;</span><span class="p">)</span>
                <span class="o">-&gt;</span><span class="na">atPath</span><span class="p">(</span><span class="s1">&#39;firstName&#39;</span><span class="p">)</span>
                <span class="o">-&gt;</span><span class="na">addViolation</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="static-callbacks">
<h2>Static Callbacks</h2>
<p>You can also use the constraint with static methods. Since static methods don’t
have access to the object instance, they receive the object as the first argument:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">validate</span><span class="p">(</span><span class="nv">$object</span><span class="p">,</span> <span class="nx">ExecutionContextInterface</span> <span class="nv">$context</span><span class="p">,</span> <span class="nv">$payload</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// somehow you have an array of &quot;fake names&quot;</span>
    <span class="nv">$fakeNames</span> <span class="o">=</span> <span class="p">[</span><span class="cm">/* ... */</span><span class="p">];</span>

    <span class="c1">// check if the name is actually a fake name</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">in_array</span><span class="p">(</span><span class="nv">$object</span><span class="o">-&gt;</span><span class="na">getFirstName</span><span class="p">(),</span> <span class="nv">$fakeNames</span><span class="p">))</span> <span class="p">{</span>
        <span class="nv">$context</span><span class="o">-&gt;</span><span class="na">buildViolation</span><span class="p">(</span><span class="s1">&#39;This name sounds totally fake!&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">atPath</span><span class="p">(</span><span class="s1">&#39;firstName&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">addViolation</span><span class="p">()</span>
        <span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="external-callbacks-and-closures">
<h2>External Callbacks and Closures</h2>
<p>If you want to execute a static callback method that is not located in the
class of the validated object, you can configure the constraint to invoke
an array callable as supported by PHP’s <code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/function.call-user-func.php" title="call_user_func"><span class="pre">call_user_func</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/function.call-user-func.php]</span></span></code> function.
Suppose your validation function is <code class="docutils literal notranslate"><span class="pre">Acme\Validator::validate()</span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">namespace</span> <span class="nx">Acme</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Context\ExecutionContextInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Validator</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">validate</span><span class="p">(</span><span class="nv">$object</span><span class="p">,</span> <span class="nx">ExecutionContextInterface</span> <span class="nv">$context</span><span class="p">,</span> <span class="nv">$payload</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>You can then use the following configuration to invoke this validator:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Annotations</em><div class="highlight-php-annotations notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Entity/Author.php</span>
<span class="k">namespace</span> <span class="nx">App\Entity</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints</span> <span class="k">as</span> <span class="nx">Assert</span><span class="p">;</span>

<span class="sd">/**</span>
<span class="sd"> * @Assert\Callback({&quot;Acme\Validator&quot;, &quot;validate&quot;})</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">Author</span>
<span class="p">{</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/validator/validation.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">App\Entity\Author</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">constraints</span><span class="p p-Indicator">:</span>
        <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">Callback</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="nv">Acme\Validator</span><span class="p p-Indicator">,</span> <span class="nv">validate</span><span class="p p-Indicator">]</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/validator/validation.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;constraint-mapping</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/constraint-mapping&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;class</span> <span class="na">name=</span><span class="s">&quot;App\Entity\Author&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;constraint</span> <span class="na">name=</span><span class="s">&quot;Callback&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;value&gt;</span>Acme\Validator<span class="nt">&lt;/value&gt;</span>
            <span class="nt">&lt;value&gt;</span>validate<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/constraint&gt;</span>
    <span class="nt">&lt;/class&gt;</span>
<span class="nt">&lt;/constraint-mapping&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Entity/Author.php</span>
<span class="k">namespace</span> <span class="nx">App\Entity</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Acme\Validator</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints</span> <span class="k">as</span> <span class="nx">Assert</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Mapping\ClassMetadata</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Author</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">loadValidatorMetadata</span><span class="p">(</span><span class="nx">ClassMetadata</span> <span class="nv">$metadata</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$metadata</span><span class="o">-&gt;</span><span class="na">addConstraint</span><span class="p">(</span><span class="k">new</span> <span class="nx">Assert\Callback</span><span class="p">([</span>
            <span class="nx">Validator</span><span class="o">::</span><span class="na">class</span><span class="p">,</span>
            <span class="s1">&#39;validate&#39;</span><span class="p">,</span>
        <span class="p">]));</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The Callback constraint does <em>not</em> support global callback functions
nor is it possible to specify a global function or a service method
as callback. To validate using a service, you should
<a class="reference internal" href="../../validation/custom_constraint.xhtml"><span class="doc">create a custom validation constraint</span></a>
and add that new constraint to your class.</p>
</div>
<p>When configuring the constraint via PHP, you can also pass a closure to the
constructor of the Callback constraint:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Entity/Author.php</span>
<span class="k">namespace</span> <span class="nx">App\Entity</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints</span> <span class="k">as</span> <span class="nx">Assert</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Context\ExecutionContextInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Mapping\ClassMetadata</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Author</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">loadValidatorMetadata</span><span class="p">(</span><span class="nx">ClassMetadata</span> <span class="nv">$metadata</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$callback</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$object</span><span class="p">,</span> <span class="nx">ExecutionContextInterface</span> <span class="nv">$context</span><span class="p">,</span> <span class="nv">$payload</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// ...</span>
        <span class="p">};</span>

        <span class="nv">$metadata</span><span class="o">-&gt;</span><span class="na">addConstraint</span><span class="p">(</span><span class="k">new</span> <span class="nx">Assert\Callback</span><span class="p">(</span><span class="nv">$callback</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="options">
<h2>Options</h2>
<div class="section" id="callback-option">
<span id="id1"></span><h3><code class="docutils literal notranslate"><span class="pre">callback</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">string</span></code>, <code class="docutils literal notranslate"><span class="pre">array</span></code> or <code class="docutils literal notranslate"><span class="pre">Closure</span></code> [<a class="reference internal" href="../../validation.xhtml#validation-default-option"><span class="std std-ref">default option</span></a>]</p>
<p>The callback option accepts three different formats for specifying the
callback method:</p>
<ul class="simple">
<li><p>A <strong>string</strong> containing the name of a concrete or static method;</p></li>
<li><p>An array callable with the format <code class="docutils literal notranslate"><span class="pre">['&lt;Class&gt;',</span> <span class="pre">'&lt;method&gt;']</span></code>;</p></li>
<li><p>A closure.</p></li>
</ul>
<p>Concrete callbacks receive an <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Context/ExecutionContextInterface.php" title="Symfony\Component\Validator\Context\ExecutionContextInterface"><span class="pre">ExecutionContextInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Context/ExecutionContextInterface.php]</span></span></code>
instance as only argument.</p>
<p>Static or closure callbacks receive the validated object as the first argument
and the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Context/ExecutionContextInterface.php" title="Symfony\Component\Validator\Context\ExecutionContextInterface"><span class="pre">ExecutionContextInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Context/ExecutionContextInterface.php]</span></span></code>
instance as the second argument.</p>
</div>
<div class="section" id="groups">
<h3><code class="docutils literal notranslate"><span class="pre">groups</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">array</span></code> | <code class="docutils literal notranslate"><span class="pre">string</span></code></p>
<p>It defines the validation group or groups this constraint belongs to. Read more
about <a class="reference internal" href="../../validation/groups.xhtml"><span class="doc">validation groups</span></a>.</p>
</div>
<div class="section" id="payload">
<h3><code class="docutils literal notranslate"><span class="pre">payload</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">mixed</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">null</span></code></p>
<p>This option can be used to attach arbitrary domain-specific data to a constraint.
The configured payload is not used by the Validator component, but its processing
is completely up to you.</p>
<p>For example, you may want to use
<a class="reference internal" href="../../validation/severity.xhtml"><span class="doc">several error levels</span></a> to present failed
constraints differently in the front-end depending on the severity of the
error.</p>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>