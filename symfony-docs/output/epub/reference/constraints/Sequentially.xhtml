<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Sequentially</title>
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="sequentially">
<h1>Sequentially</h1>
<p>This constraint allows you to apply a set of rules that should be validated
step-by-step, allowing to interrupt the validation once the first violation is raised.</p>
<p>As an alternative in situations <code class="docutils literal notranslate"><span class="pre">Sequentially</span></code> cannot solve, you may consider
using <a class="reference internal" href="../../validation/sequence_provider.xhtml"><span class="doc">GroupSequence</span></a> which allows more control.</p>
<div class="versionadded">
<p><span class="versionmodified">New in version 5.1: </span>The <code class="docutils literal notranslate"><span class="pre">Sequentially</span></code> constraint was introduced in Symfony 5.1.</p>
</div>
<table class="docutils">
<colgroup>
<col style="width: 12%" />
<col style="width: 88%" />
</colgroup>
<tbody>
<tr class="row-odd"><td><p>Applies to</p></td>
<td><p><a class="reference internal" href="../../validation.xhtml#validation-property-target"><span class="std std-ref">property or method</span></a></p></td>
</tr>
<tr class="row-even"><td><p>Options</p></td>
<td><ul class="simple">
<li><p><a class="reference internal" href="#constraints">constraints</a></p></li>
<li><p><a class="reference internal" href="#groups">groups</a></p></li>
<li><p><a class="reference internal" href="#payload">payload</a></p></li>
</ul>
</td>
</tr>
<tr class="row-odd"><td><p>Class</p></td>
<td><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Constraints/Sequentially.php" title="Symfony\Component\Validator\Constraints\Sequentially"><span class="pre">Sequentially</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Constraints/Sequentially.php]</span></span></code></p></td>
</tr>
<tr class="row-even"><td><p>Validator</p></td>
<td><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Constraints/SequentiallyValidator.php" title="Symfony\Component\Validator\Constraints\SequentiallyValidator"><span class="pre">SequentiallyValidator</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Constraints/SequentiallyValidator.php]</span></span></code></p></td>
</tr>
</tbody>
</table>
<div class="section" id="basic-usage">
<h2>Basic Usage</h2>
<p>Suppose that you have a <code class="docutils literal notranslate"><span class="pre">Place</span></code> object with an <code class="docutils literal notranslate"><span class="pre">$address</span></code> property which
must match the following requirements:</p>
<ul class="simple">
<li><p>it’s a non-blank string</p></li>
<li><p>of at least 10 chars long</p></li>
<li><p>with a specific format</p></li>
<li><p>and geolocalizable using an external service</p></li>
</ul>
<p>In such situations, you may encounter three issues:</p>
<ul class="simple">
<li><p>the <code class="docutils literal notranslate"><span class="pre">Length</span></code> or <code class="docutils literal notranslate"><span class="pre">Regex</span></code> constraints may fail hard with a <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Exception/UnexpectedValueException.php" title="Symfony\Component\Validator\Exception\UnexpectedValueException"><span class="pre">UnexpectedValueException</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Exception/UnexpectedValueException.php]</span></span></code>
exception if the actual value is not a string, as enforced by <code class="docutils literal notranslate"><span class="pre">Type</span></code>.</p></li>
<li><p>you may end with multiple error messages for the same property</p></li>
<li><p>you may perform a useless and heavy external call to geolocalize the address,
while the format isn’t valid.</p></li>
</ul>
<p>You can validate each of these constraints sequentially to solve these issues:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Annotations</em><div class="highlight-php-annotations notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Localization/Place.php</span>
<span class="k">namespace</span> <span class="nx">App\Localization</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Validator\Constraints</span> <span class="k">as</span> <span class="nx">AcmeAssert</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints</span> <span class="k">as</span> <span class="nx">Assert</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Place</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @var string</span>
<span class="sd">     *</span>
<span class="sd">     * @Assert\Sequentially({</span>
<span class="sd">     *     @Assert\NotNull(),</span>
<span class="sd">     *     @Assert\Type(&quot;string&quot;),</span>
<span class="sd">     *     @Assert\Length(min=10),</span>
<span class="sd">     *     @Assert\Regex(Place::ADDRESS_REGEX),</span>
<span class="sd">     *     @AcmeAssert\Geolocalizable(),</span>
<span class="sd">     * })</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="nv">$address</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/validator/validation.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">App\Localization\Place</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">properties</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">address</span><span class="p p-Indicator">:</span>
            <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">Sequentially</span><span class="p p-Indicator">:</span>
                <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">NotNull</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">~</span>
                <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">Type</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">string</span>
                <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">Length</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">{</span> <span class="nv">min</span><span class="p p-Indicator">:</span> <span class="nv">10</span> <span class="p p-Indicator">}</span>
                <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">Regex</span><span class="p p-Indicator">:</span> <span class="kt">!php/const</span> <span class="l l-Scalar l-Scalar-Plain">App\Localization\Place::ADDRESS_REGEX</span>
                <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">App\Validator\Constraints\Geolocalizable</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">~</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/validator/validation.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;constraint-mapping</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/constraint-mapping&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;class</span> <span class="na">name=</span><span class="s">&quot;App\Localization\Place&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;address&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;constraint</span> <span class="na">name=</span><span class="s">&quot;Sequentially&quot;</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;constraint</span> <span class="na">name=</span><span class="s">&quot;NotNull&quot;</span><span class="nt">/&gt;</span>
                    <span class="nt">&lt;constraint</span> <span class="na">name=</span><span class="s">&quot;Type&quot;</span><span class="nt">&gt;</span>string<span class="nt">&lt;/constraint&gt;</span>
                    <span class="nt">&lt;constraint</span> <span class="na">name=</span><span class="s">&quot;Length&quot;</span><span class="nt">&gt;</span>
                        <span class="nt">&lt;option</span> <span class="na">name=</span><span class="s">&quot;min&quot;</span><span class="nt">&gt;</span>10<span class="nt">&lt;/option&gt;</span>
                    <span class="nt">&lt;/constraint&gt;</span>
                    <span class="nt">&lt;constraint</span> <span class="na">name=</span><span class="s">&quot;Regex&quot;</span><span class="nt">&gt;</span>
                        <span class="nt">&lt;option</span> <span class="na">name=</span><span class="s">&quot;pattern&quot;</span><span class="nt">&gt;</span>/address-regex/<span class="nt">&lt;/option&gt;</span>
                    <span class="nt">&lt;/constraint&gt;</span>
                    <span class="nt">&lt;constraint</span> <span class="na">name=</span><span class="s">&quot;App\Validator\Constraints\Geolocalizable&quot;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;/constraint&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
    <span class="nt">&lt;/class&gt;</span>
<span class="nt">&lt;/constraint-mapping&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// src/Localization/Place.php</span>
<span class="k">namespace</span> <span class="nx">App\Localization</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Validator\Constraints</span> <span class="k">as</span> <span class="nx">AcmeAssert</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Constraints</span> <span class="k">as</span> <span class="nx">Assert</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Validator\Mapping\ClassMetadata</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Place</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">loadValidatorMetadata</span><span class="p">(</span><span class="nx">ClassMetadata</span> <span class="nv">$metadata</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$metadata</span><span class="o">-&gt;</span><span class="na">addPropertyConstraint</span><span class="p">(</span><span class="s1">&#39;address&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">Assert\Sequentially</span><span class="p">([</span>
            <span class="k">new</span> <span class="nx">Assert\NotNull</span><span class="p">(),</span>
            <span class="k">new</span> <span class="nx">Assert\Type</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="p">),</span>
            <span class="k">new</span> <span class="nx">Assert\Length</span><span class="p">([</span><span class="s1">&#39;min&#39;</span> <span class="o">=&gt;</span> <span class="mi">10</span><span class="p">]),</span>
            <span class="k">new</span> <span class="nx">Assert\Regex</span><span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="na">ADDRESS_REGEX</span><span class="p">),</span>
            <span class="k">new</span> <span class="nx">AcmeAssert\Geolocalizable</span><span class="p">(),</span>
        <span class="p">]));</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
<div class="section" id="options">
<h2>Options</h2>
<div class="section" id="constraints">
<h3><code class="docutils literal notranslate"><span class="pre">constraints</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">array</span></code> [<a class="reference internal" href="../../validation.xhtml#validation-default-option"><span class="std std-ref">default option</span></a>]</p>
<p>This required option is the array of validation constraints that you want
to apply sequentially.</p>
</div>
<div class="section" id="groups">
<h3><code class="docutils literal notranslate"><span class="pre">groups</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">array</span></code> | <code class="docutils literal notranslate"><span class="pre">string</span></code></p>
<p>It defines the validation group or groups this constraint belongs to. Read more
about <a class="reference internal" href="../../validation/groups.xhtml"><span class="doc">validation groups</span></a>.</p>
</div>
<div class="section" id="payload">
<h3><code class="docutils literal notranslate"><span class="pre">payload</span></code></h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">mixed</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">null</span></code></p>
<p>This option can be used to attach arbitrary domain-specific data to a constraint.
The configured payload is not used by the Validator component, but its processing
is completely up to you.</p>
<p>For example, you may want to use
<a class="reference internal" href="../../validation/severity.xhtml"><span class="doc">several error levels</span></a> to present failed
constraints differently in the front-end depending on the severity of the
error.</p>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>