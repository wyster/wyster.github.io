<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Configuring in the Kernel</title>
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="configuring-in-the-kernel">
<span id="index-0"></span><h1>Configuring in the Kernel</h1>
<p>Some configuration can be done on the kernel class itself (located by default at
<code class="docutils literal notranslate"><span class="pre">src/Kernel.php</span></code>). You can do this by overriding specific methods in
the parent <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Kernel.php" title="Symfony\Component\HttpKernel\Kernel"><span class="pre">Kernel</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Kernel.php]</span></span></code> class.</p>
<div class="section" id="configuration">
<h2>Configuration</h2>
<ul class="simple">
<li><p><a class="reference internal" href="#charset">Charset</a></p></li>
<li><p><a class="reference internal" href="#project-directory">Project Directory</a></p></li>
<li><p><a class="reference internal" href="#cache-directory">Cache Directory</a></p></li>
<li><p><a class="reference internal" href="#log-directory">Log Directory</a></p></li>
<li><p><a class="reference internal" href="#container-build-time">Container Build Time</a></p></li>
</ul>
<p>In previous Symfony versions there was another configuration option to define
the “kernel name”, which is only important when
<a class="reference internal" href="../../configuration/multiple_kernels.xhtml"><span class="doc">using applications with multiple kernels</span></a>.
If you need a unique ID for your kernels use the <code class="docutils literal notranslate"><span class="pre">kernel.container_class</span></code>
parameter or the <code class="docutils literal notranslate"><span class="pre">Kernel::getContainerClass()</span></code> method.</p>
<div class="section" id="charset">
<span id="configuration-kernel-charset"></span><h3>Charset</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">string</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">UTF-8</span></code></p>
<p>This option defines the charset that is used in the application. This value is
exposed via the <code class="docutils literal notranslate"><span class="pre">kernel.charset</span></code> configuration parameter and the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Kernel.php" title="Symfony\Component\HttpKernel\Kernel::getCharset()"><span class="pre">getCharset()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Kernel.php]</span></span></code> method.</p>
<p>To change this value, override the <code class="docutils literal notranslate"><span class="pre">getCharset()</span></code> method and return another
charset:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Kernel.php</span>
<span class="k">namespace</span> <span class="nx">App</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Kernel</span> <span class="k">as</span> <span class="nx">BaseKernel</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="k">class</span> <span class="nc">Kernel</span> <span class="k">extends</span> <span class="nx">BaseKernel</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">getCharset</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="s1">&#39;ISO-8859-1&#39;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="project-directory">
<span id="configuration-kernel-project-directory"></span><h3>Project Directory</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">string</span></code> <strong>default</strong>: the directory of the project <code class="docutils literal notranslate"><span class="pre">composer.json</span></code></p>
<p>This returns the absolute path of the root directory of your Symfony project,
which is used by applications to perform operations with file paths relative to
the project’s root directory.</p>
<p>By default, its value is calculated automatically as the directory where the
main <code class="docutils literal notranslate"><span class="pre">composer.json</span></code> file is stored. This value is exposed via the
<code class="docutils literal notranslate"><span class="pre">kernel.project_dir</span></code> configuration parameter and the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Kernel.php" title="Symfony\Component\HttpKernel\Kernel::getProjectDir()"><span class="pre">getProjectDir()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Kernel.php]</span></span></code> method.</p>
<p>If you don’t use Composer, or have moved the <code class="docutils literal notranslate"><span class="pre">composer.json</span></code> file location or
have deleted it entirely (for example in the production servers), you can
override the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Kernel.php" title="Symfony\Component\HttpKernel\Kernel::getProjectDir()"><span class="pre">getProjectDir()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Kernel.php]</span></span></code>
method to return the right project directory:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Kernel.php</span>
<span class="k">namespace</span> <span class="nx">App</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Kernel</span> <span class="k">as</span> <span class="nx">BaseKernel</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="k">class</span> <span class="nc">Kernel</span> <span class="k">extends</span> <span class="nx">BaseKernel</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">getProjectDir</span><span class="p">()</span><span class="o">:</span> <span class="nx">string</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nx">\dirname</span><span class="p">(</span><span class="no">__DIR__</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="cache-directory">
<h3>Cache Directory</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">string</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">$this-&gt;getProjectDir()/var/cache/$this-&gt;environment</span></code></p>
<p>This returns the absolute path of the cache directory of your Symfony project.
It’s calculated automatically based on the current
<a class="reference internal" href="../../configuration.xhtml#configuration-environments"><span class="std std-ref">environment</span></a>. Data might be written to this
path at runtime.</p>
<p>This value is exposed via the <code class="docutils literal notranslate"><span class="pre">kernel.cache_dir</span></code> configuration parameter and
the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Kernel.php" title="Symfony\Component\HttpKernel\Kernel::getCacheDir()"><span class="pre">getCacheDir()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Kernel.php]</span></span></code> method. To
change this setting, override the <code class="docutils literal notranslate"><span class="pre">getCacheDir()</span></code> method to return the correct
cache directory.</p>
</div>
<div class="section" id="build-directory">
<h3>Build Directory</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">string</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">$this-&gt;getCacheDir()</span></code></p>
<div class="versionadded">
<p><span class="versionmodified">New in version 5.2: </span>The build directory feature was introduced in Symfony 5.2.</p>
</div>
<p>This returns the absolute path of a build directory of your Symfony project. This
directory can be used to separate read-only cache (i.e. the compiled container)
from read-write cache (i.e. <a class="reference internal" href="../../cache.xhtml"><span class="doc">cache pools</span></a>). Specify a non-default
value when the application is deployed in a read-only filesystem like a Docker
container or AWS Lambda.</p>
<p>This value is exposed via the <code class="docutils literal notranslate"><span class="pre">kernel.build_dir</span></code> configuration parameter and
the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Kernel.php" title="Symfony\Component\HttpKernel\Kernel::getBuildDir()"><span class="pre">getBuildDir()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Kernel.php]</span></span></code> method. To
change this setting, override the <code class="docutils literal notranslate"><span class="pre">getBuildDir()</span></code> method to return the correct
build directory.</p>
</div>
<div class="section" id="log-directory">
<h3>Log Directory</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">string</span></code> <strong>default</strong>: <code class="docutils literal notranslate"><span class="pre">$this-&gt;getProjectDir()/var/log</span></code></p>
<p>This returns the absolute path of the log directory of your Symfony project.
It’s calculated automatically based on the current
<a class="reference internal" href="../../configuration.xhtml#configuration-environments"><span class="std std-ref">environment</span></a>.</p>
<p>This value is exposed via the <code class="docutils literal notranslate"><span class="pre">kernel.logs_dir</span></code> configuration parameter and
the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Kernel.php" title="Symfony\Component\HttpKernel\Kernel::getLogDir()"><span class="pre">getLogDir()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Kernel.php]</span></span></code> method. To
change this setting, override the <code class="docutils literal notranslate"><span class="pre">getLogDir()</span></code> method to return the right
log directory.</p>
</div>
<div class="section" id="container-build-time">
<h3>Container Build Time</h3>
<p><strong>type</strong>: <code class="docutils literal notranslate"><span class="pre">string</span></code> <strong>default</strong>: the result of executing <code class="docutils literal notranslate"><span class="pre">time()</span></code></p>
<p>Symfony follows the <a class="reference external" href="https://en.wikipedia.org/wiki/Reproducible_builds">reproducible builds</a><span class="link-target"> [https://en.wikipedia.org/wiki/Reproducible_builds]</span> philosophy, which ensures that the
result of compiling the exact same source code doesn’t produce different
results. This helps checking that a given binary or executable code was compiled
from some trusted source code.</p>
<p>In practice, the compiled <a class="reference internal" href="../../service_container.xhtml"><span class="doc">service container</span></a> of your
application will always be the same if you don’t change its source code. This is
exposed via these configuration parameters:</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">container.build_hash</span></code>, a hash of the contents of all your source files;</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">container.build_time</span></code>, a timestamp of the moment when the container was
built (the result of executing PHP’s <code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/function.time.php" title="time"><span class="pre">time</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/function.time.php]</span></span></code> function);</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">container.build_id</span></code>, the result of merging the two previous parameters and
encoding the result using CRC32.</p></li>
</ul>
<p>Since the <code class="docutils literal notranslate"><span class="pre">container.build_time</span></code> value will change every time you compile the
application, the build will not be strictly reproducible. If you care about
this, the solution is to use another configuration parameter called
<code class="docutils literal notranslate"><span class="pre">kernel.container_build_time</span></code> and set it to a non-changing build time to
achieve a strict reproducible build:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">parameters</span><span class="p p-Indicator">:</span>
    <span class="c1"># ...</span>
    <span class="l l-Scalar l-Scalar-Plain">kernel.container_build_time</span><span class="p p-Indicator">:</span> <span class="s">&#39;1234567890&#39;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;parameters&gt;</span>
        <span class="c">&lt;!-- ... --&gt;</span>
        <span class="nt">&lt;parameter</span> <span class="na">key=</span><span class="s">&quot;kernel.container_build_time&quot;</span><span class="nt">&gt;</span>1234567890<span class="nt">&lt;/parameter&gt;</span>
    <span class="nt">&lt;/parameters&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>

<span class="c1">// ...</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">setParameter</span><span class="p">(</span><span class="s1">&#39;kernel.container_build_time&#39;</span><span class="p">,</span> <span class="s1">&#39;1234567890&#39;</span><span class="p">);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>