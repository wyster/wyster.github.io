<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Events and Event Listeners</title>
    <link rel="stylesheet" href="_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="events-and-event-listeners">
<span id="index-0"></span><h1>Events and Event Listeners</h1>
<p>During the execution of a Symfony application, lots of event notifications are
triggered. Your application can listen to these notifications and respond to
them by executing any piece of code.</p>
<p>Symfony triggers several <a class="reference internal" href="reference/events.xhtml"><span class="doc">events related to the kernel</span></a>
while processing the HTTP Request. Third-party bundles may also dispatch events, and
you can even dispatch <a class="reference internal" href="components/event_dispatcher.xhtml"><span class="doc">custom events</span></a> from your
own code.</p>
<p>All the examples shown in this article use the same <code class="docutils literal notranslate"><span class="pre">KernelEvents::EXCEPTION</span></code>
event for consistency purposes. In your own application, you can use any event
and even mix several of them in the same subscriber.</p>
<div class="section" id="creating-an-event-listener">
<h2>Creating an Event Listener</h2>
<p>The most common way to listen to an event is to register an <strong>event listener</strong>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/EventListener/ExceptionListener.php</span>
<span class="k">namespace</span> <span class="nx">App\EventListener</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Event\ExceptionEvent</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Exception\HttpExceptionInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">ExceptionListener</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">onKernelException</span><span class="p">(</span><span class="nx">ExceptionEvent</span> <span class="nv">$event</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// You get the exception object from the received event</span>
        <span class="nv">$exception</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getThrowable</span><span class="p">();</span>
        <span class="nv">$message</span> <span class="o">=</span> <span class="nb">sprintf</span><span class="p">(</span>
            <span class="s1">&#39;My Error says: %s with code: %s&#39;</span><span class="p">,</span>
            <span class="nv">$exception</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">(),</span>
            <span class="nv">$exception</span><span class="o">-&gt;</span><span class="na">getCode</span><span class="p">()</span>
        <span class="p">);</span>

        <span class="c1">// Customize your response object to display the exception details</span>
        <span class="nv">$response</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">();</span>
        <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">setContent</span><span class="p">(</span><span class="nv">$message</span><span class="p">);</span>

        <span class="c1">// HttpExceptionInterface is a special type of exception that</span>
        <span class="c1">// holds status code and header details</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$exception</span> <span class="nx">instanceof</span> <span class="nx">HttpExceptionInterface</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">setStatusCode</span><span class="p">(</span><span class="nv">$exception</span><span class="o">-&gt;</span><span class="na">getStatusCode</span><span class="p">());</span>
            <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">headers</span><span class="o">-&gt;</span><span class="na">replace</span><span class="p">(</span><span class="nv">$exception</span><span class="o">-&gt;</span><span class="na">getHeaders</span><span class="p">());</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">setStatusCode</span><span class="p">(</span><span class="nx">Response</span><span class="o">::</span><span class="na">HTTP_INTERNAL_SERVER_ERROR</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// sends the modified response object to the event</span>
        <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">setResponse</span><span class="p">(</span><span class="nv">$response</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Each event receives a slightly different type of <code class="docutils literal notranslate"><span class="pre">$event</span></code> object. For
the <code class="docutils literal notranslate"><span class="pre">kernel.exception</span></code> event, it is <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Event/ExceptionEvent.php" title="Symfony\Component\HttpKernel\Event\ExceptionEvent"><span class="pre">ExceptionEvent</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Event/ExceptionEvent.php]</span></span></code>.
Check out the <a class="reference internal" href="reference/events.xhtml"><span class="doc">Symfony events reference</span></a> to see
what type of object each event provides.</p>
</div>
<p>Now that the class is created, you need to register it as a service and
notify Symfony that it is a “listener” on the <code class="docutils literal notranslate"><span class="pre">kernel.exception</span></code> event by
using a special “tag”:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">App\EventListener\ExceptionListener</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">tags</span><span class="p p-Indicator">:</span>
            <span class="p p-Indicator">-</span> <span class="p p-Indicator">{</span> <span class="nv">name</span><span class="p p-Indicator">:</span> <span class="nv">kernel.event_listener</span><span class="p p-Indicator">,</span> <span class="nv">event</span><span class="p p-Indicator">:</span> <span class="nv">kernel.exception</span> <span class="p p-Indicator">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\EventListener\ExceptionListener&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;tag</span> <span class="na">name=</span><span class="s">&quot;kernel.event_listener&quot;</span> <span class="na">event=</span><span class="s">&quot;kernel.exception&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/service&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\EventListener\ExceptionListener</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$services</span> <span class="o">=</span> <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">services</span><span class="p">();</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">ExceptionListener</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">tag</span><span class="p">(</span><span class="s1">&#39;kernel.event_listener&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;event&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;kernel.exception&#39;</span><span class="p">])</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>Symfony follows this logic to decide which method to call inside the event
listener class:</p>
<ol class="arabic simple">
<li><p>If the <code class="docutils literal notranslate"><span class="pre">kernel.event_listener</span></code> tag defines the <code class="docutils literal notranslate"><span class="pre">method</span></code> attribute, that’s
the name of the method to be called;</p></li>
<li><p>If no <code class="docutils literal notranslate"><span class="pre">method</span></code> attribute is defined, try to call the method whose name
is <code class="docutils literal notranslate"><span class="pre">on</span></code> + “camel-cased event name” (e.g. <code class="docutils literal notranslate"><span class="pre">onKernelException()</span></code> method for
the <code class="docutils literal notranslate"><span class="pre">kernel.exception</span></code> event);</p></li>
<li><p>If that method is not defined either, try to call the <code class="docutils literal notranslate"><span class="pre">__invoke()</span></code> magic
method (which makes event listeners invokable);</p></li>
<li><p>If the <code class="docutils literal notranslate"><span class="pre">__invoke()</span></code> method is not defined either, throw an exception.</p></li>
</ol>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>There is an optional attribute for the <code class="docutils literal notranslate"><span class="pre">kernel.event_listener</span></code> tag called
<code class="docutils literal notranslate"><span class="pre">priority</span></code>, which is a positive or negative integer that defaults to <code class="docutils literal notranslate"><span class="pre">0</span></code>
and it controls the order in which listeners are executed (the higher the
number, the earlier a listener is executed). This is useful when you need to
guarantee that one listener is executed before another. The priorities of the
internal Symfony listeners usually range from <code class="docutils literal notranslate"><span class="pre">-256</span></code> to <code class="docutils literal notranslate"><span class="pre">256</span></code> but your
own listeners can use any positive or negative integer.</p>
</div>
</div>
<div class="section" id="creating-an-event-subscriber">
<span id="events-subscriber"></span><h2>Creating an Event Subscriber</h2>
<p>Another way to listen to events is via an <strong>event subscriber</strong>, which is a class
that defines one or more methods that listen to one or various events. The main
difference with the event listeners is that subscribers always know which events
they are listening to.</p>
<p>If different event subscriber methods listen to the same event, their order is
defined by the <code class="docutils literal notranslate"><span class="pre">priority</span></code> parameter. This value is a positive or negative
integer which defaults to <code class="docutils literal notranslate"><span class="pre">0</span></code>. The higher the number, the earlier the method
is called. <strong>Priority is aggregated for all listeners and subscribers</strong>, so your
methods could be called before or after the methods defined in other listeners
and subscribers. To learn more about event subscribers, read <a class="reference internal" href="components/event_dispatcher.xhtml"><span class="doc">The EventDispatcher Component</span></a>.</p>
<p>The following example shows an event subscriber that defines several methods which
listen to the same <code class="docutils literal notranslate"><span class="pre">kernel.exception</span></code> event:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/EventSubscriber/ExceptionSubscriber.php</span>
<span class="k">namespace</span> <span class="nx">App\EventSubscriber</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\EventDispatcher\EventSubscriberInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Event\ExceptionEvent</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\KernelEvents</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">ExceptionSubscriber</span> <span class="k">implements</span> <span class="nx">EventSubscriberInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">getSubscribedEvents</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// return the subscribed events, their methods and priorities</span>
        <span class="k">return</span> <span class="p">[</span>
            <span class="nx">KernelEvents</span><span class="o">::</span><span class="na">EXCEPTION</span> <span class="o">=&gt;</span> <span class="p">[</span>
                <span class="p">[</span><span class="s1">&#39;processException&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">],</span>
                <span class="p">[</span><span class="s1">&#39;logException&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
                <span class="p">[</span><span class="s1">&#39;notifyException&#39;</span><span class="p">,</span> <span class="o">-</span><span class="mi">10</span><span class="p">],</span>
            <span class="p">],</span>
        <span class="p">];</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">processException</span><span class="p">(</span><span class="nx">ExceptionEvent</span> <span class="nv">$event</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">logException</span><span class="p">(</span><span class="nx">ExceptionEvent</span> <span class="nv">$event</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">notifyException</span><span class="p">(</span><span class="nx">ExceptionEvent</span> <span class="nv">$event</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>That’s it! Your <code class="docutils literal notranslate"><span class="pre">services.yaml</span></code> file should already be setup to load services from
the <code class="docutils literal notranslate"><span class="pre">EventSubscriber</span></code> directory. Symfony takes care of the rest.</p>
<div class="admonition tip" id="ref-event-subscriber-configuration">
<p class="admonition-title">Tip</p>
<p>If your methods are <em>not</em> called when an exception is thrown, double-check that
you’re <a class="reference internal" href="service_container.xhtml#service-container-services-load-example"><span class="std std-ref">loading services</span></a> from
the <code class="docutils literal notranslate"><span class="pre">EventSubscriber</span></code> directory and have <a class="reference internal" href="service_container.xhtml#services-autoconfigure"><span class="std std-ref">autoconfigure</span></a>
enabled. You can also manually add the <code class="docutils literal notranslate"><span class="pre">kernel.event_subscriber</span></code> tag.</p>
</div>
</div>
<div class="section" id="request-events-checking-types">
<h2>Request Events, Checking Types</h2>
<p>A single page can make several requests (one master request, and then multiple
sub-requests - typically when <a class="reference internal" href="templates.xhtml#templates-embed-controllers"><span class="std std-ref">embedding controllers in templates</span></a>).
For the core Symfony events, you might need to check to see if the event is for
a “master” request or a “sub request”:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/EventListener/RequestListener.php</span>
<span class="k">namespace</span> <span class="nx">App\EventListener</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Event\RequestEvent</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">RequestListener</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">onKernelRequest</span><span class="p">(</span><span class="nx">RequestEvent</span> <span class="nv">$event</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$event</span><span class="o">-&gt;</span><span class="na">isMasterRequest</span><span class="p">())</span> <span class="p">{</span>
            <span class="c1">// don&#39;t do anything if it&#39;s not the master request</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Certain things, like checking information on the <em>real</em> request, may not need to
be done on the sub-request listeners.</p>
</div>
<div class="section" id="listeners-or-subscribers">
<span id="events-or-subscribers"></span><h2>Listeners or Subscribers</h2>
<p>Listeners and subscribers can be used in the same application indistinctly. The
decision to use either of them is usually a matter of personal taste. However,
there are some minor advantages for each of them:</p>
<ul class="simple">
<li><p><strong>Subscribers are easier to reuse</strong> because the knowledge of the events is kept
in the class rather than in the service definition. This is the reason why
Symfony uses subscribers internally;</p></li>
<li><p><strong>Listeners are more flexible</strong> because bundles can enable or disable each of
them conditionally depending on some configuration value.</p></li>
</ul>
</div>
<div class="section" id="event-aliases">
<h2>Event Aliases</h2>
<p>When configuring event listeners and subscribers via dependency injection,
Symfony’s core events can also be referred to by the fully qualified class
name (FQCN) of the corresponding event class:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/EventSubscriber/RequestSubscriber.php</span>
<span class="k">namespace</span> <span class="nx">App\EventSubscriber</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\EventDispatcher\EventSubscriberInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Event\RequestEvent</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">RequestSubscriber</span> <span class="k">implements</span> <span class="nx">EventSubscriberInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">getSubscribedEvents</span><span class="p">()</span><span class="o">:</span> <span class="k">array</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="p">[</span>
            <span class="nx">RequestEvent</span><span class="o">::</span><span class="na">class</span> <span class="o">=&gt;</span> <span class="s1">&#39;onKernelRequest&#39;</span><span class="p">,</span>
        <span class="p">];</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">onKernelRequest</span><span class="p">(</span><span class="nx">RequestEvent</span> <span class="nv">$event</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Internally, the event FQCN are treated as aliases for the original event names.
Since the mapping already happens when compiling the service container, event
listeners and subscribers using FQCN instead of event names will appear under
the original event name when inspecting the event dispatcher.</p>
<p>This alias mapping can be extended for custom events by registering the
compiler pass <code class="docutils literal notranslate"><span class="pre">AddEventAliasesPass</span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Kernel.php</span>
<span class="k">namespace</span> <span class="nx">App</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Event\MyCustomEvent</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\ContainerBuilder</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\EventDispatcher\DependencyInjection\AddEventAliasesPass</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Kernel</span> <span class="k">as</span> <span class="nx">BaseKernel</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Kernel</span> <span class="k">extends</span> <span class="nx">BaseKernel</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="k">function</span> <span class="nf">build</span><span class="p">(</span><span class="nx">ContainerBuilder</span> <span class="nv">$container</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$container</span><span class="o">-&gt;</span><span class="na">addCompilerPass</span><span class="p">(</span><span class="k">new</span> <span class="nx">AddEventAliasesPass</span><span class="p">([</span>
            <span class="nx">MyCustomEvent</span><span class="o">::</span><span class="na">class</span> <span class="o">=&gt;</span> <span class="s1">&#39;my_custom_event&#39;</span><span class="p">,</span>
        <span class="p">]));</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The compiler pass will always extend the existing list of aliases. Because of
that, it is safe to register multiple instances of the pass with different
configurations.</p>
</div>
<div class="section" id="debugging-event-listeners">
<h2>Debugging Event Listeners</h2>
<p>You can find out what listeners are registered in the event dispatcher
using the console. To show all events and their listeners, run:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console debug:event-dispatcher
</pre></div>
</td></tr></table></div>
<p>You can get registered listeners for a particular event by specifying
its name:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console debug:event-dispatcher kernel.exception
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="learn-more">
<h2>Learn more</h2>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="event_dispatcher/before_after_filters.xhtml">How to Set Up Before and After Filters</a></li>
<li class="toctree-l1"><a class="reference internal" href="event_dispatcher/method_behavior.xhtml">How to Customize a Method Behavior without Using Inheritance</a></li>
</ul>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>