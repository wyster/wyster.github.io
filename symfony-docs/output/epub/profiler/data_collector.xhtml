<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Create a custom Data Collector</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-create-a-custom-data-collector">
<span id="index-0"></span><h1>How to Create a custom Data Collector</h1>
<p>The <a class="reference internal" href="../profiler.xhtml"><span class="doc">Symfony Profiler</span></a> obtains its profiling and debug
information using some special classes called data collectors. Symfony comes
bundled with a few of them, but you can also create your own.</p>
<div class="section" id="creating-a-custom-data-collector">
<h2>Creating a custom Data Collector</h2>
<p>A data collector is a PHP class that implements the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/DataCollector/DataCollectorInterface.php" title="Symfony\Component\HttpKernel\DataCollector\DataCollectorInterface"><span class="pre">DataCollectorInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/DataCollector/DataCollectorInterface.php]</span></span></code>.
For convenience, your data collectors can also extend from the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/DataCollector/DataCollector.php" title="Symfony\Component\HttpKernel\DataCollector\DataCollector"><span class="pre">DataCollector</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/DataCollector/DataCollector.php]</span></span></code> class, which
implements the interface and provides some utilities and the <code class="docutils literal notranslate"><span class="pre">$this-&gt;data</span></code>
property to store the collected information.</p>
<p>The following example shows a custom collector that stores information about the
request:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/DataCollector/RequestCollector.php</span>
<span class="k">namespace</span> <span class="nx">App\DataCollector</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Request</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\DataCollector\DataCollector</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">RequestCollector</span> <span class="k">extends</span> <span class="nx">DataCollector</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">collect</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">,</span> <span class="nx">Response</span> <span class="nv">$response</span><span class="p">,</span> <span class="nx">\Throwable</span> <span class="nv">$exception</span> <span class="o">=</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">data</span> <span class="o">=</span> <span class="p">[</span>
            <span class="s1">&#39;method&#39;</span> <span class="o">=&gt;</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">getMethod</span><span class="p">(),</span>
            <span class="s1">&#39;acceptable_content_types&#39;</span> <span class="o">=&gt;</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">getAcceptableContentTypes</span><span class="p">(),</span>
        <span class="p">];</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">reset</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">data</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">getName</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="s1">&#39;app.request_collector&#39;</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
<dl>
<dt><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/DataCollector/DataCollectorInterface.php" title="Symfony\Component\HttpKernel\DataCollector\DataCollectorInterface::collect()"><span class="pre">collect()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/DataCollector/DataCollectorInterface.php]</span></span></code> method:</dt>
<dd><p>Stores the collected data in local properties (<code class="docutils literal notranslate"><span class="pre">$this-&gt;data</span></code> if you extend
from <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/DataCollector/DataCollector.php" title="Symfony\Component\HttpKernel\DataCollector\DataCollector"><span class="pre">DataCollector</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/DataCollector/DataCollector.php]</span></span></code>).
If the data to collect cannot be obtained through the request or response,
inject the needed services in the data collector.</p>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>The <code class="docutils literal notranslate"><span class="pre">collect()</span></code> method is only called once. It is not used to “gather”
data but is there to “pick up” the data that has been stored by your
service.</p>
</div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>As the profiler serializes data collector instances, you should not
store objects that cannot be serialized (like PDO objects) or you need
to provide your own <code class="docutils literal notranslate"><span class="pre">serialize()</span></code> method.</p>
</div>
</dd>
<dt><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/DataCollector/DataCollectorInterface.php" title="Symfony\Component\HttpKernel\DataCollector\DataCollectorInterface::reset()"><span class="pre">reset()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/DataCollector/DataCollectorInterface.php]</span></span></code> method:</dt>
<dd><p>It’s called between requests to reset the state of the profiler. Use it to
remove all the information collected with the <code class="docutils literal notranslate"><span class="pre">collect()</span></code> method.</p>
</dd>
<dt><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/DataCollector/DataCollectorInterface.php" title="Symfony\Component\HttpKernel\DataCollector\DataCollectorInterface::getName()"><span class="pre">getName()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/DataCollector/DataCollectorInterface.php]</span></span></code> method:</dt>
<dd><p>Returns the collector identifier, which must be unique in the application.
This value is used later to access the collector information (see
<a class="reference internal" href="../testing/profiling.xhtml"><span class="doc">How to Use the Profiler in a Functional Test</span></a>) so it’s recommended to return a string which is
short, lowercase and without white spaces.</p>
</dd>
</dl>
<p>The <code class="docutils literal notranslate"><span class="pre">collect()</span></code> method is called during the <a class="reference internal" href="../components/http_kernel.xhtml#component-http-kernel-kernel-response"><span class="std std-ref">kernel.response</span></a>
event. If you need to collect data that is only available later, implement
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/DataCollector/LateDataCollectorInterface.php" title="Symfony\Component\HttpKernel\DataCollector\LateDataCollectorInterface"><span class="pre">LateDataCollectorInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/DataCollector/LateDataCollectorInterface.php]</span></span></code>
and define the <code class="docutils literal notranslate"><span class="pre">lateCollect()</span></code> method, which is invoked right before the profiler
data serialization (during <a class="reference internal" href="../components/http_kernel.xhtml#component-http-kernel-kernel-terminate"><span class="std std-ref">kernel.terminate</span></a> event).</p>
</div>
<div class="section" id="enabling-custom-data-collectors">
<span id="data-collector-tag"></span><h2>Enabling Custom Data Collectors</h2>
<p>If you’re using the <a class="reference internal" href="../service_container.xhtml#service-container-services-load-example"><span class="std std-ref">default services.yaml configuration</span></a>
with <code class="docutils literal notranslate"><span class="pre">autoconfigure</span></code>, then Symfony will automatically see your new data collector!
Your <code class="docutils literal notranslate"><span class="pre">collect()</span></code> method should be called next time your refresh.</p>
<p>If you’re not using <code class="docutils literal notranslate"><span class="pre">autoconfigure</span></code>, you can also <a class="reference internal" href="../service_container.xhtml#services-explicitly-configure-wire-services"><span class="std std-ref">manually wire your service</span></a>
and <a class="reference internal" href="../service_container/tags.xhtml"><span class="doc">tag</span></a> it with <code class="docutils literal notranslate"><span class="pre">data_collector</span></code>.</p>
</div>
<div class="section" id="adding-web-profiler-templates">
<h2>Adding Web Profiler Templates</h2>
<p>The information collected by your data collector can be displayed both in the
web debug toolbar and in the web profiler. To do so, you need to create a Twig
template that includes some specific blocks.</p>
<p>However, first you must add some getters in the data collector class to give the
template access to the collected information:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/DataCollector/RequestCollector.php</span>
<span class="k">namespace</span> <span class="nx">App\DataCollector</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\DataCollector\DataCollector</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">RequestCollector</span> <span class="k">extends</span> <span class="nx">DataCollector</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">getMethod</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">data</span><span class="p">[</span><span class="s1">&#39;method&#39;</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">getAcceptableContentTypes</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">data</span><span class="p">[</span><span class="s1">&#39;acceptable_content_types&#39;</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>In the simplest case, you want to display the information in the toolbar
without providing a profiler panel. This requires to define the <code class="docutils literal notranslate"><span class="pre">toolbar</span></code>
block and set the value of two variables called <code class="docutils literal notranslate"><span class="pre">icon</span></code> and <code class="docutils literal notranslate"><span class="pre">text</span></code>:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{%</span> <span class="k">extends</span> <span class="s1">&#39;@WebProfiler/Profiler/layout.html.twig&#39;</span> <span class="cp">%}</span>

<span class="cp">{%</span> <span class="k">block</span> <span class="nv">toolbar</span> <span class="cp">%}</span>
    <span class="cp">{%</span> <span class="k">set</span> <span class="nv">icon</span> <span class="cp">%}</span>
        <span class="c">{# this is the content displayed as a panel in the toolbar #}</span>
        <span class="p">&lt;</span><span class="nt">svg</span> <span class="na">xmlns</span><span class="o">=</span><span class="s">&quot;http://www.w3.org/2000/svg&quot;</span><span class="p">&gt;</span> ... <span class="p">&lt;/</span><span class="nt">svg</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;sf-toolbar-value&quot;</span><span class="p">&gt;</span>Request<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="cp">{%</span> <span class="k">endset</span> <span class="cp">%}</span>

    <span class="cp">{%</span> <span class="k">set</span> <span class="nv">text</span> <span class="cp">%}</span>
        <span class="c">{# this is the content displayed when hovering the mouse over</span>
<span class="c">           the toolbar panel #}</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;sf-toolbar-info-piece&quot;</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">b</span><span class="p">&gt;</span>Method<span class="p">&lt;/</span><span class="nt">b</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span><span class="cp">{{</span> <span class="nv">collector.method</span> <span class="cp">}}</span><span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;sf-toolbar-info-piece&quot;</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">b</span><span class="p">&gt;</span>Accepted content type<span class="p">&lt;/</span><span class="nt">b</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span><span class="cp">{{</span> <span class="nv">collector.acceptableContentTypes</span><span class="o">|</span><span class="nf">join</span><span class="o">(</span><span class="s1">&#39;, &#39;</span><span class="o">)</span> <span class="cp">}}</span><span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="cp">{%</span> <span class="k">endset</span> <span class="cp">%}</span>

    <span class="c">{# the &#39;link&#39; value set to &#39;false&#39; means that this panel doesn&#39;t</span>
<span class="c">       show a section in the web profiler #}</span>
    <span class="cp">{{</span> <span class="nv">include</span><span class="o">(</span><span class="s1">&#39;@WebProfiler/Profiler/toolbar_item.html.twig&#39;</span><span class="o">,</span> <span class="o">{</span> <span class="nv">link</span><span class="o">:</span> <span class="kp">false</span> <span class="o">})</span> <span class="cp">}}</span>
<span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span>
</pre></div>
</td></tr></table></div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Built-in collector templates define all their images as embedded SVG files.
This makes them work everywhere without having to mess with web assets links:</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{%</span> <span class="k">set</span> <span class="nv">icon</span> <span class="cp">%}</span><span class="x"></span>
<span class="x">    </span><span class="cp">{{</span> <span class="nv">include</span><span class="o">(</span><span class="s1">&#39;data_collector/icon.svg&#39;</span><span class="o">)</span> <span class="cp">}}</span><span class="x"></span>
<span class="x">    </span><span class="c">{# ... #}</span><span class="x"></span>
<span class="cp">{%</span> <span class="k">endset</span> <span class="cp">%}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
</div>
<p>If the toolbar panel includes extended web profiler information, the Twig template
must also define additional blocks:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{%</span> <span class="k">extends</span> <span class="s1">&#39;@WebProfiler/Profiler/layout.html.twig&#39;</span> <span class="cp">%}</span>

<span class="cp">{%</span> <span class="k">block</span> <span class="nv">toolbar</span> <span class="cp">%}</span>
    <span class="cp">{%</span> <span class="k">set</span> <span class="nv">icon</span> <span class="cp">%}</span>
        <span class="c">{# ... #}</span>
    <span class="cp">{%</span> <span class="k">endset</span> <span class="cp">%}</span>

    <span class="cp">{%</span> <span class="k">set</span> <span class="nv">text</span> <span class="cp">%}</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;sf-toolbar-info-piece&quot;</span><span class="p">&gt;</span>
            <span class="c">{# ... #}</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="cp">{%</span> <span class="k">endset</span> <span class="cp">%}</span>

    <span class="cp">{{</span> <span class="nv">include</span><span class="o">(</span><span class="s1">&#39;@WebProfiler/Profiler/toolbar_item.html.twig&#39;</span><span class="o">,</span> <span class="o">{</span> <span class="s1">&#39;link&#39;</span><span class="o">:</span> <span class="kp">true</span> <span class="o">})</span> <span class="cp">}}</span>
<span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span>

<span class="cp">{%</span> <span class="k">block</span> <span class="nv">head</span> <span class="cp">%}</span>
    <span class="c">{# Optional. Here you can link to or define your own CSS and JS contents. #}</span>
    <span class="c">{# Use {{ parent() }} to extend the default styles instead of overriding them. #}</span>
<span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span>

<span class="cp">{%</span> <span class="k">block</span> <span class="nv">menu</span> <span class="cp">%}</span>
    <span class="c">{# This left-hand menu appears when using the full-screen profiler. #}</span>
    <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;label&quot;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&quot;icon&quot;</span><span class="p">&gt;&lt;</span><span class="nt">img</span> <span class="na">src</span><span class="o">=</span><span class="s">&quot;...&quot;</span> <span class="na">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="p">/&gt;&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">strong</span><span class="p">&gt;</span>Request<span class="p">&lt;/</span><span class="nt">strong</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
<span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span>

<span class="cp">{%</span> <span class="k">block</span> <span class="nv">panel</span> <span class="cp">%}</span>
    <span class="c">{# Optional, for showing the most details. #}</span>
    <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>Acceptable Content Types<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">table</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">th</span><span class="p">&gt;</span>Content Type<span class="p">&lt;/</span><span class="nt">th</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>

        <span class="cp">{%</span> <span class="k">for</span> <span class="nv">type</span> <span class="k">in</span> <span class="nv">collector.acceptableContentTypes</span> <span class="cp">%}</span>
        <span class="p">&lt;</span><span class="nt">tr</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span><span class="cp">{{</span> <span class="nv">type</span> <span class="cp">}}</span><span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
        <span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span>
    <span class="p">&lt;/</span><span class="nt">table</span><span class="p">&gt;</span>
<span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span>
</pre></div>
</td></tr></table></div>
<p>The <code class="docutils literal notranslate"><span class="pre">menu</span></code> and <code class="docutils literal notranslate"><span class="pre">panel</span></code> blocks are the only required blocks to define the
contents displayed in the web profiler panel associated with this data collector.
All blocks have access to the <code class="docutils literal notranslate"><span class="pre">collector</span></code> object.</p>
<p>Finally, to enable the data collector template, override your service configuration
to specify a tag that contains the template:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">App\DataCollector\RequestCollector</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">tags</span><span class="p p-Indicator">:</span>
            <span class="p p-Indicator">-</span>
                <span class="l l-Scalar l-Scalar-Plain">name</span><span class="p p-Indicator">:</span>     <span class="l l-Scalar l-Scalar-Plain">data_collector</span>
                <span class="l l-Scalar l-Scalar-Plain">template</span><span class="p p-Indicator">:</span> <span class="s">&#39;data_collector/template.html.twig&#39;</span>
                <span class="c1"># must match the value returned by the getName() method</span>
                <span class="l l-Scalar l-Scalar-Plain">id</span><span class="p p-Indicator">:</span>       <span class="s">&#39;app.request_collector&#39;</span>
                <span class="c1"># optional priority</span>
                <span class="c1"># priority: 300</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\DataCollector\RequestCollector&quot;</span><span class="nt">&gt;</span>
            <span class="c">&lt;!-- priority=&quot;300&quot; --&gt;</span>
            <span class="nt">&lt;tag</span> <span class="na">name=</span><span class="s">&quot;data_collector&quot;</span>
                <span class="na">template=</span><span class="s">&quot;data_collector/template.html.twig&quot;</span>
                <span class="na">id=</span><span class="s">&quot;app.request_collector&quot;</span>
            <span class="nt">/&gt;</span>
        <span class="nt">&lt;/service&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\DataCollector\RequestCollector</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$services</span> <span class="o">=</span> <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">services</span><span class="p">();</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="nx">RequestCollector</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">autowire</span><span class="p">()</span>
        <span class="o">-&gt;</span><span class="na">tag</span><span class="p">(</span><span class="s1">&#39;data_collector&#39;</span><span class="p">,</span> <span class="p">[</span>
            <span class="s1">&#39;template&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;data_collector/template.html.twig&#39;</span><span class="p">,</span>
            <span class="s1">&#39;id&#39;</span>       <span class="o">=&gt;</span> <span class="s1">&#39;app.request_collector&#39;</span><span class="p">,</span>
            <span class="c1">// &#39;priority&#39; =&gt; 300,</span>
        <span class="p">]);</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>The position of each panel in the toolbar is determined by the collector priority.
Priorities are defined as positive or negative integers and they default to <code class="docutils literal notranslate"><span class="pre">0</span></code>.
Most built-in collectors use <code class="docutils literal notranslate"><span class="pre">255</span></code> as their priority. If you want your collector
to be displayed before them, use a higher value (like 300).</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>