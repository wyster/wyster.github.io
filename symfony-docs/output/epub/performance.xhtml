<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Performance</title>
    <link rel="stylesheet" href="_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="performance">
<span id="index-0"></span><h1>Performance</h1>
<p>Symfony is fast, right out of the box. However, you can make it faster if you
optimize your servers and your applications as explained in the following
performance checklists.</p>
<div class="section" id="performance-checklists">
<h2>Performance Checklists</h2>
<p>Use these checklists to verify that your application and server are configured
for maximum performance:</p>
<ul class="simple">
<li><p><strong>Symfony Application Checklist</strong>:</p>
<ol class="arabic simple">
<li><p><a class="reference internal" href="#performance-install-apcu-polyfill"><span class="std std-ref">Install APCu Polyfill if your server uses APC</span></a></p></li>
</ol>
</li>
<li><p><strong>Production Server Checklist</strong>:</p>
<ol class="arabic simple">
<li><p><a class="reference internal" href="#performance-service-container-single-file"><span class="std std-ref">Dump the service container into a single file</span></a></p></li>
<li><p><a class="reference internal" href="#performance-use-opcache"><span class="std std-ref">Use the OPcache byte code cache</span></a></p></li>
<li><p><a class="reference internal" href="#performance-configure-opcache"><span class="std std-ref">Configure OPcache for maximum performance</span></a></p></li>
<li><p><a class="reference internal" href="#performance-dont-check-timestamps"><span class="std std-ref">Don’t check PHP files timestamps</span></a></p></li>
<li><p><a class="reference internal" href="#performance-configure-realpath-cache"><span class="std std-ref">Configure the PHP realpath Cache</span></a></p></li>
<li><p><a class="reference internal" href="#performance-optimize-composer-autoloader"><span class="std std-ref">Optimize Composer Autoloader</span></a></p></li>
</ol>
</li>
</ul>
<div class="section" id="install-apcu-polyfill-if-your-server-uses-apc">
<span id="performance-install-apcu-polyfill"></span><h3>Install APCu Polyfill if your Server Uses APC</h3>
<p>If your production server still uses the legacy APC PHP extension instead of
OPcache, install the <a class="reference external" href="https://github.com/symfony/polyfill-apcu">APCu Polyfill component</a><span class="link-target"> [https://github.com/symfony/polyfill-apcu]</span> in your application to enable
compatibility with <a class="reference external" href="https://www.php.net/manual/en/ref.apcu.php">APCu PHP functions</a><span class="link-target"> [https://www.php.net/manual/en/ref.apcu.php]</span> and unlock support for advanced Symfony
features, such as the APCu Cache adapter.</p>
</div>
<div class="section" id="dump-the-service-container-into-a-single-file">
<span id="performance-service-container-single-file"></span><h3>Dump the Service Container into a Single File</h3>
<div class="versionadded">
<p><span class="versionmodified">New in version 4.4: </span>The <code class="docutils literal notranslate"><span class="pre">container.dumper.inline_factories</span></code> parameter was introduced in
Symfony 4.4.</p>
</div>
<p>Symfony compiles the <a class="reference internal" href="service_container.xhtml"><span class="doc">service container</span></a> into multiple
small files by default. Set this parameter to <code class="docutils literal notranslate"><span class="pre">true</span></code> to compile the entire
container into a single file, which could improve performance when using
“class preloading” in PHP 7.4 or newer versions:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">parameters</span><span class="p p-Indicator">:</span>
    <span class="c1"># ...</span>
    <span class="l l-Scalar l-Scalar-Plain">container.dumper.inline_factories</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">true</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;parameters&gt;</span>
        <span class="c">&lt;!-- ... --&gt;</span>
        <span class="nt">&lt;parameter</span> <span class="na">key=</span><span class="s">&quot;container.dumper.inline_factories&quot;</span><span class="nt">&gt;</span>true<span class="nt">&lt;/parameter&gt;</span>
    <span class="nt">&lt;/parameters&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>

<span class="c1">// ...</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">setParameter</span><span class="p">(</span><span class="s1">&#39;container.dumper.inline_factories&#39;</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
<div class="section" id="use-the-opcache-byte-code-cache">
<span id="performance-use-opcache"></span><h3>Use the OPcache Byte Code Cache</h3>
<p>OPcache stores the compiled PHP files to avoid having to recompile them for
every request. There are some <a class="reference external" href="https://en.wikipedia.org/wiki/List_of_PHP_accelerators">byte code caches</a><span class="link-target"> [https://en.wikipedia.org/wiki/List_of_PHP_accelerators]</span> available, but as of PHP
5.5, PHP comes with <a class="reference external" href="https://www.php.net/manual/en/book.opcache.php">OPcache</a><span class="link-target"> [https://www.php.net/manual/en/book.opcache.php]</span> built-in. For older versions, the most widely
used byte code cache is <a class="reference external" href="https://www.php.net/manual/en/book.apc.php">APC</a><span class="link-target"> [https://www.php.net/manual/en/book.apc.php]</span>.</p>
</div>
<div class="section" id="use-the-opcache-class-preloading">
<span id="performance-use-preloading"></span><h3>Use the OPcache class preloading</h3>
<div class="versionadded">
<p><span class="versionmodified">New in version 4.4: </span>The feature that generates the preloading file was introduced in Symfony 4.4.</p>
</div>
<p>Starting from PHP 7.4, OPcache can compile and load classes at start-up and
make them available to all requests until the server is restarted, improving
performance significantly.</p>
<p>During container compilation (e.g. when running the <code class="docutils literal notranslate"><span class="pre">cache:clear</span></code> command),
Symfony generates a file called <code class="docutils literal notranslate"><span class="pre">preload.php</span></code> in the <code class="docutils literal notranslate"><span class="pre">config/</span></code> directory
with the list of classes to preload.</p>
<p>The only requirement is that you need to set both <code class="docutils literal notranslate"><span class="pre">container.dumper.inline_factories</span></code>
and <code class="docutils literal notranslate"><span class="pre">container.dumper.inline_class_loader</span></code> parameters to <code class="docutils literal notranslate"><span class="pre">true</span></code>. Then, you
can configure PHP to use this preload file:</p>
<div class="highlight-ini notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">; php.ini</span>
<span class="na">opcache.preload</span><span class="o">=</span><span class="s">/path/to/project/config/preload.php</span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="configure-opcache-for-maximum-performance">
<span id="performance-configure-opcache"></span><h3>Configure OPcache for Maximum Performance</h3>
<p>The default OPcache configuration is not suited for Symfony applications, so
it’s recommended to change these settings as follows:</p>
<div class="highlight-ini notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">; php.ini</span>
<span class="c1">; maximum memory that OPcache can use to store compiled PHP files</span>
<span class="na">opcache.memory_consumption</span><span class="o">=</span><span class="s">256</span>

<span class="c1">; maximum number of files that can be stored in the cache</span>
<span class="na">opcache.max_accelerated_files</span><span class="o">=</span><span class="s">20000</span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="don-t-check-php-files-timestamps">
<span id="performance-dont-check-timestamps"></span><h3>Don’t Check PHP Files Timestamps</h3>
<p>In production servers, PHP files should never change, unless a new application
version is deployed. However, by default OPcache checks if cached files have
changed their contents since they were cached. This check introduces some
overhead that can be avoided as follows:</p>
<div class="highlight-ini notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">; php.ini</span>
<span class="na">opcache.validate_timestamps</span><span class="o">=</span><span class="s">0</span>
</pre></div>
</td></tr></table></div>
<p>After each deploy, you must empty and regenerate the cache of OPcache. Otherwise
you won’t see the updates made in the application. Given that in PHP, the CLI
and the web processes don’t share the same OPcache, you cannot clear the web
server OPcache by executing some command in your terminal. These are some of the
possible solutions:</p>
<ol class="arabic simple">
<li><p>Restart the web server;</p></li>
<li><p>Call the <code class="docutils literal notranslate"><span class="pre">apc_clear_cache()</span></code> or <code class="docutils literal notranslate"><span class="pre">opcache_reset()</span></code> functions via the
web server (i.e. by having these in a script that you execute over the web);</p></li>
<li><p>Use the <a class="reference external" href="https://github.com/gordalina/cachetool">cachetool</a><span class="link-target"> [https://github.com/gordalina/cachetool]</span> utility to control APC and OPcache from the CLI.</p></li>
</ol>
</div>
<div class="section" id="configure-the-php-realpath-cache">
<span id="performance-configure-realpath-cache"></span><h3>Configure the PHP <code class="docutils literal notranslate"><span class="pre">realpath</span></code> Cache</h3>
<p>When a relative path is transformed into its real and absolute path, PHP
caches the result to improve performance. Applications that open many PHP files,
such as Symfony projects, should use at least these values:</p>
<div class="highlight-ini notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">; php.ini</span>
<span class="c1">; maximum memory allocated to store the results</span>
<span class="na">realpath_cache_size</span><span class="o">=</span><span class="s">4096K</span>

<span class="c1">; save the results for 10 minutes (600 seconds)</span>
<span class="na">realpath_cache_ttl</span><span class="o">=</span><span class="s">600</span>
</pre></div>
</td></tr></table></div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>PHP disables the <code class="docutils literal notranslate"><span class="pre">realpath</span></code> cache when the <a class="reference external" href="https://www.php.net/manual/ini.core.php#ini.open-basedir">open_basedir</a><span class="link-target"> [https://www.php.net/manual/ini.core.php#ini.open-basedir]</span> config option
is enabled.</p>
</div>
</div>
<div class="section" id="optimize-composer-autoloader">
<span id="performance-optimize-composer-autoloader"></span><h3>Optimize Composer Autoloader</h3>
<p>The class loader used while developing the application is optimized to find new
and changed classes. In production servers, PHP files should never change,
unless a new application version is deployed. That’s why you can optimize
Composer’s autoloader to scan the entire application once and build an
optimized “class map”, which is a big array of the locations of all the classes
and it’s stored in <code class="docutils literal notranslate"><span class="pre">vendor/composer/autoload_classmap.php</span></code>.</p>
<p>Execute this command to generate the new class map (and make it part of your
deployment process too):</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer dump-autoload --no-dev --classmap-authoritative
</pre></div>
</td></tr></table></div>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">--no-dev</span></code> excludes the classes that are only needed in the development
environment (i.e. <code class="docutils literal notranslate"><span class="pre">require-dev</span></code> dependencies and <code class="docutils literal notranslate"><span class="pre">autoload-dev</span></code> rules);</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">--classmap-authoritative</span></code> creates a class map for PSR-0 and PSR-4 compatible classes
used in your application and prevents Composer from scanning the file system for
classes that are not found in the class map. (see: <a class="reference external" href="https://getcomposer.org/doc/articles/autoloader-optimization.md">Composer’s autoloader optimization</a><span class="link-target"> [https://getcomposer.org/doc/articles/autoloader-optimization.md]</span>).</p></li>
</ul>
</div>
</div>
<div class="section" id="profiling-symfony-applications">
<span id="profiling-applications"></span><h2>Profiling Symfony Applications</h2>
<div class="section" id="profiling-with-blackfire">
<h3>Profiling with Blackfire</h3>
<p><a class="reference external" href="https://blackfire.io/docs/introduction?utm_source=symfony&amp;utm_medium=symfonycom_docs&amp;utm_campaign=performance">Blackfire</a><span class="link-target"> [https://blackfire.io/docs/introduction?utm_source=symfony&amp;utm_medium=symfonycom_docs&amp;utm_campaign=performance]</span> is the best tool to profile and optimize performance of Symfony
applications during development, test and production. It’s a commercial service,
but provides free features that you can use to find bottlenecks in your projects.</p>
</div>
<div class="section" id="profiling-with-symfony-stopwatch">
<h3>Profiling with Symfony Stopwatch</h3>
<p>Symfony provides a basic performance profiler in the development
<a class="reference internal" href="configuration.xhtml#configuration-environments"><span class="std std-ref">config environment</span></a>. Click on the “time panel”
of the <a class="reference internal" href="page_creation.xhtml#web-debug-toolbar"><span class="std std-ref">web debug toolbar</span></a> to see how much time Symfony
spent on tasks such as making database queries and rendering templates.</p>
<p>You can measure the execution time and memory consumption of your own code and
display the result in the Symfony profiler thanks to the <a class="reference external" href="https://symfony.com/components/Stopwatch">Stopwatch component</a><span class="link-target"> [https://symfony.com/components/Stopwatch]</span>.</p>
<p>When using <a class="reference internal" href="service_container.xhtml#services-autowire"><span class="std std-ref">autowiring</span></a>, type-hint any controller or
service argument with the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Stopwatch/Stopwatch.php" title="Symfony\Component\Stopwatch\Stopwatch"><span class="pre">Stopwatch</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Stopwatch/Stopwatch.php]</span></span></code> class
and Symfony will inject the <code class="docutils literal notranslate"><span class="pre">debug.stopwatch</span></code> service:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Stopwatch\Stopwatch</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">DataExporter</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$stopwatch</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nx">Stopwatch</span> <span class="nv">$stopwatch</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">stopwatch</span> <span class="o">=</span> <span class="nv">$stopwatch</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">export</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// the argument is the name of the &quot;profiling event&quot;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">stopwatch</span><span class="o">-&gt;</span><span class="na">start</span><span class="p">(</span><span class="s1">&#39;export-data&#39;</span><span class="p">);</span>

        <span class="c1">// ...do things to export data...</span>

        <span class="c1">// reset the stopwatch to delete all the data measured so far</span>
        <span class="c1">// $this-&gt;stopwatch-&gt;reset();</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">stopwatch</span><span class="o">-&gt;</span><span class="na">stop</span><span class="p">(</span><span class="s1">&#39;export-data&#39;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>If the request calls this service during its execution, you’ll see a new
event called <code class="docutils literal notranslate"><span class="pre">export-data</span></code> in the Symfony profiler.</p>
<p>The <code class="docutils literal notranslate"><span class="pre">start()</span></code>, <code class="docutils literal notranslate"><span class="pre">stop()</span></code> and <code class="docutils literal notranslate"><span class="pre">getEvent()</span></code> methods return a
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Stopwatch/StopwatchEvent.php" title="Symfony\Component\Stopwatch\StopwatchEvent"><span class="pre">StopwatchEvent</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Stopwatch/StopwatchEvent.php]</span></span></code> object that provides
information about the current event, even while it’s still running. This
object can be converted to a string for a quick summary:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="nx">dump</span><span class="p">((</span><span class="nx">string</span><span class="p">)</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">stopwatch</span><span class="o">-&gt;</span><span class="na">getEvent</span><span class="p">());</span> <span class="c1">// dumps e.g. &#39;4.50 MiB - 26 ms&#39;</span>
</pre></div>
</div>
<p>You can also profile your template code with the <a class="reference internal" href="reference/twig_reference.xhtml#reference-twig-tag-stopwatch"><span class="std std-ref">stopwatch Twig tag</span></a>:</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">{%</span> <span class="k">stopwatch</span> <span class="s1">&#39;render-blog-posts&#39;</span> <span class="cp">%}</span><span class="x"></span>
<span class="x">    </span><span class="cp">{%</span> <span class="k">for</span> <span class="nv">post</span> <span class="k">in</span> <span class="nv">blog_posts</span><span class="cp">%}</span><span class="x"></span>
<span class="x">        </span><span class="c">{# ... #}</span><span class="x"></span>
<span class="x">    </span><span class="cp">{%</span> <span class="k">endfor</span> <span class="cp">%}</span><span class="x"></span>
<span class="cp">{%</span> <span class="k">endstopwatch</span> <span class="cp">%}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
<div class="section" id="profiling-categories">
<h4>Profiling Categories</h4>
<p>Use the second optional argument of the <code class="docutils literal notranslate"><span class="pre">start()</span></code> method to define the
category or tag of the event. This helps keep events organized by type:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">stopwatch</span><span class="o">-&gt;</span><span class="na">start</span><span class="p">(</span><span class="s1">&#39;export-data&#39;</span><span class="p">,</span> <span class="s1">&#39;export&#39;</span><span class="p">);</span>
</pre></div>
</div>
</div>
<div class="section" id="profiling-periods">
<h4>Profiling Periods</h4>
<p>A <a class="reference external" href="https://en.wikipedia.org/wiki/Stopwatch">real-world stopwatch</a><span class="link-target"> [https://en.wikipedia.org/wiki/Stopwatch]</span> not only includes the start/stop button but also a
“lap button” to measure each partial lap. This is exactly what the <code class="docutils literal notranslate"><span class="pre">lap()</span></code>
method does, which stops an event and then restarts it immediately:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">stopwatch</span><span class="o">-&gt;</span><span class="na">start</span><span class="p">(</span><span class="s1">&#39;process-data-records&#39;</span><span class="p">,</span> <span class="s1">&#39;export&#39;</span><span class="p">);</span>

<span class="k">foreach</span> <span class="p">(</span><span class="nv">$records</span> <span class="k">as</span> <span class="nv">$record</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ... some code goes here</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">stopwatch</span><span class="o">-&gt;</span><span class="na">lap</span><span class="p">(</span><span class="s1">&#39;process-data-records&#39;</span><span class="p">);</span>
<span class="p">}</span>

<span class="nv">$event</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">stopwatch</span><span class="o">-&gt;</span><span class="na">stop</span><span class="p">(</span><span class="s1">&#39;process-data-records&#39;</span><span class="p">);</span>
<span class="c1">// $event-&gt;getDuration(), $event-&gt;getMemory(), etc.</span>

<span class="c1">// Lap information is stored as &quot;periods&quot; within the event:</span>
<span class="c1">// $event-&gt;getPeriods();</span>
</pre></div>
</div>
</div>
<div class="section" id="profiling-sections">
<h4>Profiling Sections</h4>
<p>Sections are a way to split the profile timeline into groups. Example:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">stopwatch</span><span class="o">-&gt;</span><span class="na">openSection</span><span class="p">();</span>
<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">stopwatch</span><span class="o">-&gt;</span><span class="na">start</span><span class="p">(</span><span class="s1">&#39;validating-file&#39;</span><span class="p">,</span> <span class="s1">&#39;validation&#39;</span><span class="p">);</span>
<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">stopwatch</span><span class="o">-&gt;</span><span class="na">stopSection</span><span class="p">(</span><span class="s1">&#39;parsing&#39;</span><span class="p">);</span>

<span class="nv">$events</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">stopwatch</span><span class="o">-&gt;</span><span class="na">getSectionEvents</span><span class="p">(</span><span class="s1">&#39;parsing&#39;</span><span class="p">);</span>

<span class="c1">// later you can reopen a section passing its name to the openSection() method</span>
<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">stopwatch</span><span class="o">-&gt;</span><span class="na">openSection</span><span class="p">(</span><span class="s1">&#39;parsing&#39;</span><span class="p">);</span>
<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">stopwatch</span><span class="o">-&gt;</span><span class="na">start</span><span class="p">(</span><span class="s1">&#39;processing-file&#39;</span><span class="p">);</span>
<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">stopwatch</span><span class="o">-&gt;</span><span class="na">stopSection</span><span class="p">(</span><span class="s1">&#39;parsing&#39;</span><span class="p">);</span>
</pre></div>
</div>
</div>
</div>
</div>
<div class="section" id="learn-more">
<h2>Learn more</h2>
<ul class="simple">
<li><p><a class="reference internal" href="http_cache/varnish.xhtml"><span class="doc">How to Use Varnish to Speed up my Website</span></a></p></li>
</ul>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>