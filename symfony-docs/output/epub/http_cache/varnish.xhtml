<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Use Varnish to Speed up my Website</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-use-varnish-to-speed-up-my-website">
<span id="index-0"></span><h1>How to Use Varnish to Speed up my Website</h1>
<p>Because Symfony’s cache uses the standard HTTP cache headers, the
<a class="reference internal" href="../http_cache.xhtml#symfony-gateway-cache"><span class="std std-ref">Symfony Reverse Proxy</span></a> can be replaced with any other reverse
proxy. <a class="reference external" href="https://varnish-cache.org/">Varnish</a><span class="link-target"> [https://varnish-cache.org/]</span> is a powerful, open-source, HTTP accelerator capable of serving
cached content fast and including support for <a class="reference internal" href="esi.xhtml"><span class="doc">Edge Side Includes</span></a>.</p>
<div class="section" id="make-symfony-trust-the-reverse-proxy">
<span id="index-1"></span><h2>Make Symfony Trust the Reverse Proxy</h2>
<p>Varnish automatically forwards the IP as <code class="docutils literal notranslate"><span class="pre">X-Forwarded-For</span></code> and leaves the
<code class="docutils literal notranslate"><span class="pre">X-Forwarded-Proto</span></code> header in the request. If you do not configure Varnish as
trusted proxy, Symfony will see all requests as coming through insecure HTTP
connections from the Varnish host instead of the real client.</p>
<p>Remember to call the <a class="reference internal" href="../deployment/proxies.xhtml#request-set-trusted-proxies"><span class="std std-ref">Request::setTrustedProxies()</span></a>
method in your front controller so that Varnish is seen as a trusted proxy
and the <a class="reference internal" href="#varnish-x-forwarded-headers"><span class="std std-ref">X-Forwarded-*</span></a> headers are used.</p>
</div>
<div class="section" id="routing-and-x-forwarded-headers">
<span id="varnish-x-forwarded-headers"></span><h2>Routing and X-FORWARDED Headers</h2>
<p>To ensure that the Symfony Router generates URLs correctly with Varnish,
an <code class="docutils literal notranslate"><span class="pre">X-Forwarded-Port</span></code> header must be present for Symfony to use the
correct port number.</p>
<p>This port number corresponds to the port your setup is using to receive external
connections (<code class="docutils literal notranslate"><span class="pre">80</span></code> is the default value for HTTP connections). If the application
also accepts HTTPS connections, there could be another proxy (as Varnish does
not do HTTPS itself) on the default HTTPS port 443 that handles the SSL termination
and forwards the requests as HTTP requests to Varnish with an <code class="docutils literal notranslate"><span class="pre">X-Forwarded-Proto</span></code>
header. In this case, you need to add the following configuration snippet:</p>
<div class="highlight-varnish4 notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="n">sub</span> <span class="n">vcl_recv</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">X</span><span class="o">-</span><span class="n">Forwarded</span><span class="o">-</span><span class="n">Proto</span> <span class="o">==</span> <span class="s">&quot;https&quot;</span> <span class="p">)</span> <span class="p">{</span>
        <span class="n">set</span> <span class="n">req</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">X</span><span class="o">-</span><span class="n">Forwarded</span><span class="o">-</span><span class="n">Port</span> <span class="o">=</span> <span class="s">&quot;443&quot;</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">set</span> <span class="n">req</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">X</span><span class="o">-</span><span class="n">Forwarded</span><span class="o">-</span><span class="n">Port</span> <span class="o">=</span> <span class="s">&quot;80&quot;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="cookies-and-caching">
<h2>Cookies and Caching</h2>
<p>By default, most caching proxies do not cache anything when a request is sent
with <a class="reference internal" href="../http_cache.xhtml#http-cache-introduction"><span class="std std-ref">cookies or a basic authentication header</span></a>.
This is because the content of the page is supposed to depend on the cookie
value or authentication header.</p>
<p>If you know for sure that the backend never uses sessions or basic
authentication, have Varnish remove the corresponding header from requests to
prevent clients from bypassing the cache. In practice, you will need sessions
at least for some parts of the site, e.g. when using forms with
<a class="reference internal" href="../security/csrf.xhtml"><span class="doc">CSRF Protection</span></a>. In this situation, make sure to
<a class="reference internal" href="../session.xhtml#session-avoid-start"><span class="std std-ref">only start a session when actually needed</span></a>
and clear the session when it is no longer needed. Alternatively, you can look
into <a class="reference internal" href="../security/csrf.xhtml#caching-pages-that-contain-csrf-protected-forms"><span class="std std-ref">caching pages that contain CSRF protected forms</span></a>.</p>
<p>Cookies created in JavaScript and used only in the frontend, e.g. when using
Google Analytics, are nonetheless sent to the server. These cookies are not
relevant for the backend and should not affect the caching decision. Configure
your Varnish cache to <a class="reference external" href="https://varnish-cache.org/trac/wiki/VCLExampleRemovingSomeCookies">clean the cookies header</a><span class="link-target"> [https://varnish-cache.org/trac/wiki/VCLExampleRemovingSomeCookies]</span>. You want to keep the
session cookie, if there is one, and get rid of all other cookies so that pages
are cached if there is no active session. Unless you changed the default
configuration of PHP, your session cookie has the name <code class="docutils literal notranslate"><span class="pre">PHPSESSID</span></code>:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Varnish 4</em><div class="highlight-varnish4 notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="n">sub</span> <span class="n">vcl_recv</span> <span class="p">{</span>
    <span class="c1">// Remove all cookies except the session ID.</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">Cookie</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">set</span> <span class="n">req</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">Cookie</span> <span class="o">=</span> <span class="s">&quot;;&quot;</span> <span class="o">+</span> <span class="n">req</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">Cookie</span><span class="p">;</span>
        <span class="n">set</span> <span class="n">req</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">Cookie</span> <span class="o">=</span> <span class="n">regsuball</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">Cookie</span><span class="p">,</span> <span class="s">&quot;; +&quot;</span><span class="p">,</span> <span class="s">&quot;;&quot;</span><span class="p">);</span>
        <span class="n">set</span> <span class="n">req</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">Cookie</span> <span class="o">=</span> <span class="n">regsuball</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">Cookie</span><span class="p">,</span> <span class="s">&quot;;(PHPSESSID)=&quot;</span><span class="p">,</span> <span class="s">&quot;; </span><span class="se">\1</span><span class="s">=&quot;</span><span class="p">);</span>
        <span class="n">set</span> <span class="n">req</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">Cookie</span> <span class="o">=</span> <span class="n">regsuball</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">Cookie</span><span class="p">,</span> <span class="s">&quot;;[^ ][^;]*&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">);</span>
        <span class="n">set</span> <span class="n">req</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">Cookie</span> <span class="o">=</span> <span class="n">regsuball</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">Cookie</span><span class="p">,</span> <span class="s">&quot;^[; ]+|[; ]+$&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">Cookie</span> <span class="o">==</span> <span class="s">&quot;&quot;</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// If there are no more cookies, remove the header to get page cached.</span>
            <span class="n">unset</span> <span class="n">req</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">Cookie</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>Varnish 3</em><div class="highlight-varnish3 notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="n">sub</span> <span class="n">vcl_recv</span> <span class="p">{</span>
    <span class="c1">// Remove all cookies except the session ID.</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">Cookie</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">set</span> <span class="n">req</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">Cookie</span> <span class="o">=</span> <span class="s">&quot;;&quot;</span> <span class="o">+</span> <span class="n">req</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">Cookie</span><span class="p">;</span>
        <span class="n">set</span> <span class="n">req</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">Cookie</span> <span class="o">=</span> <span class="n">regsuball</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">Cookie</span><span class="p">,</span> <span class="s">&quot;; +&quot;</span><span class="p">,</span> <span class="s">&quot;;&quot;</span><span class="p">);</span>
        <span class="n">set</span> <span class="n">req</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">Cookie</span> <span class="o">=</span> <span class="n">regsuball</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">Cookie</span><span class="p">,</span> <span class="s">&quot;;(PHPSESSID)=&quot;</span><span class="p">,</span> <span class="s">&quot;; </span><span class="se">\1</span><span class="s">=&quot;</span><span class="p">);</span>
        <span class="n">set</span> <span class="n">req</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">Cookie</span> <span class="o">=</span> <span class="n">regsuball</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">Cookie</span><span class="p">,</span> <span class="s">&quot;;[^ ][^;]*&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">);</span>
        <span class="n">set</span> <span class="n">req</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">Cookie</span> <span class="o">=</span> <span class="n">regsuball</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">Cookie</span><span class="p">,</span> <span class="s">&quot;^[; ]+|[; ]+$&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">Cookie</span> <span class="o">==</span> <span class="s">&quot;&quot;</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// If there are no more cookies, remove the header to get page cached.</span>
            <span class="n">remove</span> <span class="n">req</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">Cookie</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>If content is not different for every user, but depends on the roles of a
user, a solution is to separate the cache per group. This pattern is
implemented and explained by the <a class="reference external" href="https://foshttpcachebundle.readthedocs.io/en/latest/features/user-context.html">FOSHttpCacheBundle</a><span class="link-target"> [https://foshttpcachebundle.readthedocs.io/en/latest/features/user-context.html]</span> under the name
<a class="reference external" href="https://foshttpcachebundle.readthedocs.org/en/latest/features/user-context.html">User Context</a><span class="link-target"> [https://foshttpcachebundle.readthedocs.org/en/latest/features/user-context.html]</span>.</p>
</div>
</div>
<div class="section" id="ensure-consistent-caching-behavior">
<h2>Ensure Consistent Caching Behavior</h2>
<p>Varnish uses the cache headers sent by your application to determine how
to cache content. However, versions prior to Varnish 4 did not respect
<code class="docutils literal notranslate"><span class="pre">Cache-Control:</span> <span class="pre">no-cache</span></code>, <code class="docutils literal notranslate"><span class="pre">no-store</span></code> and <code class="docutils literal notranslate"><span class="pre">private</span></code>. To ensure
consistent behavior, use the following configuration if you are still
using Varnish 3:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Varnish 3</em><div class="highlight-varnish3 notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="n">sub</span> <span class="n">vcl_fetch</span> <span class="p">{</span>
    <span class="c1">// By default, Varnish3 ignores Cache-Control: no-cache and private</span>
    <span class="c1">// https://www.varnish-cache.org/docs/3.0/tutorial/increasing_your_hitrate.html#cache-control</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">beresp</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">Cache</span><span class="o">-</span><span class="n">Control</span> <span class="o">~</span> <span class="s">&quot;private&quot;</span> <span class="o">||</span>
        <span class="n">beresp</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">Cache</span><span class="o">-</span><span class="n">Control</span> <span class="o">~</span> <span class="s">&quot;no-cache&quot;</span> <span class="o">||</span>
        <span class="n">beresp</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">Cache</span><span class="o">-</span><span class="n">Control</span> <span class="o">~</span> <span class="s">&quot;no-store&quot;</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span><span class="n">hit_for_pass</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>You can see the default behavior of Varnish in the form of a VCL file:
<a class="reference external" href="https://github.com/varnishcache/varnish-cache/blob/3.0/bin/varnishd/default.vcl">default.vcl</a><span class="link-target"> [https://github.com/varnishcache/varnish-cache/blob/3.0/bin/varnishd/default.vcl]</span> for Varnish 3, <a class="reference external" href="https://github.com/varnishcache/varnish-cache/blob/4.1/bin/varnishd/builtin.vcl">builtin.vcl</a><span class="link-target"> [https://github.com/varnishcache/varnish-cache/blob/4.1/bin/varnishd/builtin.vcl]</span> for Varnish 4.</p>
</div>
</div>
<div class="section" id="enable-edge-side-includes-esi">
<h2>Enable Edge Side Includes (ESI)</h2>
<p>As explained in the <a class="reference internal" href="esi.xhtml"><span class="doc">Edge Side Includes article</span></a>, Symfony
detects whether it talks to a reverse proxy that understands ESI or not. When
you use the Symfony reverse proxy, you don’t need to do anything. But to make
Varnish instead of Symfony resolve the ESI tags, you need some configuration
in Varnish. Symfony uses the <code class="docutils literal notranslate"><span class="pre">Surrogate-Capability</span></code> header from the <a class="reference external" href="http://www.w3.org/TR/edge-arch">Edge Architecture</a><span class="link-target"> [http://www.w3.org/TR/edge-arch]</span>
described by Akamai.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Varnish only supports the <code class="docutils literal notranslate"><span class="pre">src</span></code> attribute for ESI tags (<code class="docutils literal notranslate"><span class="pre">onerror</span></code> and
<code class="docutils literal notranslate"><span class="pre">alt</span></code> attributes are ignored).</p>
</div>
<p>First, configure Varnish so that it advertises its ESI support by adding a
<code class="docutils literal notranslate"><span class="pre">Surrogate-Capability</span></code> header to requests forwarded to the backend
application:</p>
<div class="highlight-varnish4 notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="n">sub</span> <span class="n">vcl_recv</span> <span class="p">{</span>
    <span class="c1">// Add a Surrogate-Capability header to announce ESI support.</span>
    <span class="n">set</span> <span class="n">req</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">Surrogate</span><span class="o">-</span><span class="n">Capability</span> <span class="o">=</span> <span class="s">&quot;abc=ESI/1.0&quot;</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The <code class="docutils literal notranslate"><span class="pre">abc</span></code> part of the header isn’t important unless you have multiple
“surrogates” that need to advertise their capabilities. See
<a class="reference external" href="http://www.w3.org/TR/edge-arch">Surrogate-Capability Header</a><span class="link-target"> [http://www.w3.org/TR/edge-arch]</span> for details.</p>
</div>
<p>Then, optimize Varnish so that it only parses the response contents when there
is at least one ESI tag by checking the <code class="docutils literal notranslate"><span class="pre">Surrogate-Control</span></code> header that
Symfony adds automatically:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>Varnish 4</em><div class="highlight-varnish4 notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="n">sub</span> <span class="n">vcl_backend_response</span> <span class="p">{</span>
    <span class="c1">// Check for ESI acknowledgement and remove Surrogate-Control header</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">beresp</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">Surrogate</span><span class="o">-</span><span class="n">Control</span> <span class="o">~</span> <span class="s">&quot;ESI/1.0&quot;</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">unset</span> <span class="n">beresp</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">Surrogate</span><span class="o">-</span><span class="n">Control</span><span class="p">;</span>
        <span class="n">set</span> <span class="n">beresp</span><span class="p">.</span><span class="n">do_esi</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>Varnish 3</em><div class="highlight-varnish3 notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="n">sub</span> <span class="n">vcl_fetch</span> <span class="p">{</span>
    <span class="c1">// Check for ESI acknowledgement and remove Surrogate-Control header</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">beresp</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">Surrogate</span><span class="o">-</span><span class="n">Control</span> <span class="o">~</span> <span class="s">&quot;ESI/1.0&quot;</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">unset</span> <span class="n">beresp</span><span class="p">.</span><span class="n">http</span><span class="p">.</span><span class="n">Surrogate</span><span class="o">-</span><span class="n">Control</span><span class="p">;</span>
        <span class="n">set</span> <span class="n">beresp</span><span class="p">.</span><span class="n">do_esi</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>If you followed the advice about ensuring a consistent caching
behavior, those VCL functions already exist. Append the code
to the end of the function, they won’t interfere with each other.</p>
</div>
</div>
<div class="section" id="cache-invalidation">
<span id="index-2"></span><h2>Cache Invalidation</h2>
<p>If you want to cache content that changes frequently and still serve
the most recent version to users, you need to invalidate that content.
While <a class="reference external" href="https://tools.ietf.org/html/rfc2616#section-13.10">cache invalidation</a><span class="link-target"> [https://tools.ietf.org/html/rfc2616#section-13.10]</span> allows you to purge content from your
proxy before it has expired, it adds complexity to your caching setup.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The open source <a class="reference external" href="https://foshttpcachebundle.readthedocs.io/en/latest/features/user-context.html">FOSHttpCacheBundle</a><span class="link-target"> [https://foshttpcachebundle.readthedocs.io/en/latest/features/user-context.html]</span> takes the pain out of cache
invalidation by helping you to organize your caching and
invalidation setup.</p>
<p>The documentation of the <a class="reference external" href="https://foshttpcachebundle.readthedocs.io/en/latest/features/user-context.html">FOSHttpCacheBundle</a><span class="link-target"> [https://foshttpcachebundle.readthedocs.io/en/latest/features/user-context.html]</span> explains how to configure
Varnish and other reverse proxies for cache invalidation.</p>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>