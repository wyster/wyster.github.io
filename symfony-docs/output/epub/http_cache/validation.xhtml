<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>HTTP Cache Validation</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="http-cache-validation">
<span id="index-0"></span><h1>HTTP Cache Validation</h1>
<p>When a resource needs to be updated as soon as a change is made to the underlying
data, the expiration model falls short. With the <a class="reference external" href="https://tools.ietf.org/html/rfc2616#section-13.2">expiration model</a><span class="link-target"> [https://tools.ietf.org/html/rfc2616#section-13.2]</span>, the
application won’t be asked to return the updated response until the cache
finally becomes stale.</p>
<p>The validation model addresses this issue. Under this model, the cache continues
to store responses. The difference is that, for each request, the cache asks the
application if the cached response is still valid or if it needs to be regenerated.
If the cache <em>is</em> still valid, your application should return a 304 status code
and no content. This tells the cache that it’s OK to return the cached response.</p>
<p>Under this model, you only save CPU if you’re able to determine that the
cached response is still valid by doing <em>less</em> work than generating the whole
page again (see below for an implementation example).</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The 304 status code means “Not Modified”. It’s important because with
this status code the response does <em>not</em> contain the actual content being
requested. Instead, the response only consists of the response headers that
tells the cache that it can use its stored version of the content.</p>
</div>
<p>Like with expiration, there are two different HTTP headers that can be used
to implement the validation model: <code class="docutils literal notranslate"><span class="pre">ETag</span></code> and <code class="docutils literal notranslate"><span class="pre">Last-Modified</span></code>.</p>
<div class="sidebar">
<p class="sidebar-title">Expiration and Validation</p>
<p>You can use both validation and expiration within the same <code class="docutils literal notranslate"><span class="pre">Response</span></code>.
As expiration wins over validation, you can benefit from the best of
both worlds. In other words, by using both expiration and validation, you
can instruct the cache to serve the cached content, while checking back
at some interval (the expiration) to verify that the content is still valid.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>You can also define HTTP caching headers for expiration and validation by using
annotations. See the <a class="reference external" href="https://symfony.com/doc/current/bundles/SensioFrameworkExtraBundle/annotations/cache.html">FrameworkExtraBundle documentation</a><span class="link-target"> [https://symfony.com/doc/current/bundles/SensioFrameworkExtraBundle/annotations/cache.html]</span>.</p>
</div>
</div>
<div class="section" id="validation-with-the-etag-header">
<span id="index-1"></span><h2>Validation with the <code class="docutils literal notranslate"><span class="pre">ETag</span></code> Header</h2>
<p>The <a class="reference external" href="https://en.wikipedia.org/wiki/HTTP_ETag">HTTP ETag</a><span class="link-target"> [https://en.wikipedia.org/wiki/HTTP_ETag]</span> (“entity-tag”) header is an optional HTTP header whose value is
an arbitrary string that uniquely identifies one representation of the target
resource. It’s entirely generated and set by your application so that you can
tell, for example, if the <code class="docutils literal notranslate"><span class="pre">/about</span></code> resource that’s stored by the cache is
up-to-date with what your application would return.</p>
<p>An <code class="docutils literal notranslate"><span class="pre">ETag</span></code> is like a fingerprint and is used to quickly compare if two
different versions of a resource are equivalent. Like fingerprints, each
<code class="docutils literal notranslate"><span class="pre">ETag</span></code> must be unique across all representations of the same resource.</p>
<p>To see a short implementation, generate the <code class="docutils literal notranslate"><span class="pre">ETag</span></code> as the <code class="docutils literal notranslate"><span class="pre">md5</span></code> of the
content:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/DefaultController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Request</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">DefaultController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">homepage</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$response</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="s1">&#39;static/homepage.html.twig&#39;</span><span class="p">);</span>
        <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">setEtag</span><span class="p">(</span><span class="nb">md5</span><span class="p">(</span><span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getContent</span><span class="p">()));</span>
        <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">setPublic</span><span class="p">();</span> <span class="c1">// make sure the response is public/cacheable</span>
        <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">isNotModified</span><span class="p">(</span><span class="nv">$request</span><span class="p">);</span>

        <span class="k">return</span> <span class="nv">$response</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Response.php" title="Symfony\Component\HttpFoundation\Response::isNotModified()"><span class="pre">isNotModified()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Response.php]</span></span></code>
method compares the <code class="docutils literal notranslate"><span class="pre">If-None-Match</span></code> header with the <code class="docutils literal notranslate"><span class="pre">ETag</span></code> response header.
If the two match, the method automatically sets the <code class="docutils literal notranslate"><span class="pre">Response</span></code> status code
to 304.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>When using <code class="docutils literal notranslate"><span class="pre">mod_deflate</span></code> or <code class="docutils literal notranslate"><span class="pre">mod_brotli</span></code> in Apache 2.4, the original
<code class="docutils literal notranslate"><span class="pre">ETag</span></code> value is modified (e.g. if <code class="docutils literal notranslate"><span class="pre">ETag</span></code> was <code class="docutils literal notranslate"><span class="pre">foo</span></code>, Apache turns it
into <code class="docutils literal notranslate"><span class="pre">foo-gzip</span></code> or <code class="docutils literal notranslate"><span class="pre">foo-br</span></code>), which breaks the <code class="docutils literal notranslate"><span class="pre">ETag</span></code>-based validation.</p>
<p>You can control this behavior with the <a class="reference external" href="https://httpd.apache.org/docs/trunk/mod/mod_deflate.html#deflatealteretag">DeflateAlterETag</a><span class="link-target"> [https://httpd.apache.org/docs/trunk/mod/mod_deflate.html#deflatealteretag]</span> and <a class="reference external" href="https://httpd.apache.org/docs/2.4/mod/mod_brotli.html#brotlialteretag">BrotliAlterETag</a><span class="link-target"> [https://httpd.apache.org/docs/2.4/mod/mod_brotli.html#brotlialteretag]</span>
directives. Alternatively, you can use the following Apache configuration to
keep both the original <code class="docutils literal notranslate"><span class="pre">ETag</span></code> and the modified one when compressing responses:</p>
<div class="highlight-apache notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="nb">RequestHeader</span> edit <span class="s2">&quot;If-None-Match&quot;</span> &#39;^<span class="s2">&quot;((.*)-(gzip|br))&quot;</span>$&#39; &#39;<span class="s2">&quot;$1&quot;</span>, <span class="s2">&quot;$2&quot;</span>&#39;
</pre></div>
</td></tr></table></div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The cache sets the <code class="docutils literal notranslate"><span class="pre">If-None-Match</span></code> header on the request to the <code class="docutils literal notranslate"><span class="pre">ETag</span></code>
of the original cached response before sending the request back to the
app. This is how the cache and server communicate with each other and
decide whether or not the resource has been updated since it was cached.</p>
</div>
<p>This algorithm works and is very generic, but you need to create the whole
<code class="docutils literal notranslate"><span class="pre">Response</span></code> before being able to compute the <code class="docutils literal notranslate"><span class="pre">ETag</span></code>, which is sub-optimal.
In other words, it saves on bandwidth, but not CPU cycles.</p>
<p>In the <a class="reference internal" href="#optimizing-cache-validation"><span class="std std-ref">Optimizing your Code with Validation</span></a> section, you’ll see how validation
can be used more intelligently to determine the validity of a cache without
doing so much work.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Symfony also supports weak <code class="docutils literal notranslate"><span class="pre">ETag``s</span> <span class="pre">by</span> <span class="pre">passing</span> <span class="pre">``true</span></code> as the second
argument to the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Response.php" title="Symfony\Component\HttpFoundation\Response::setEtag()"><span class="pre">setEtag()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Response.php]</span></span></code> method.</p>
</div>
</div>
<div class="section" id="validation-with-the-last-modified-header">
<span id="index-2"></span><h2>Validation with the <code class="docutils literal notranslate"><span class="pre">Last-Modified</span></code> Header</h2>
<p>The <code class="docutils literal notranslate"><span class="pre">Last-Modified</span></code> header is the second form of validation. According
to the HTTP specification, “The <code class="docutils literal notranslate"><span class="pre">Last-Modified</span></code> header field indicates
the date and time at which the origin server believes the representation
was last modified.” In other words, the application decides whether or not
the cached content has been updated based on whether or not it’s been updated
since the response was cached.</p>
<p>For instance, you can use the latest update date for all the objects needed to
compute the resource representation as the value for the <code class="docutils literal notranslate"><span class="pre">Last-Modified</span></code>
header value:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/ArticleController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">use</span> <span class="nx">App\Entity\Article</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Request</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">ArticleController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">show</span><span class="p">(</span><span class="nx">Article</span> <span class="nv">$article</span><span class="p">,</span> <span class="nx">Request</span> <span class="nv">$request</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$author</span> <span class="o">=</span> <span class="nv">$article</span><span class="o">-&gt;</span><span class="na">getAuthor</span><span class="p">();</span>

        <span class="nv">$articleDate</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\DateTime</span><span class="p">(</span><span class="nv">$article</span><span class="o">-&gt;</span><span class="na">getUpdatedAt</span><span class="p">());</span>
        <span class="nv">$authorDate</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\DateTime</span><span class="p">(</span><span class="nv">$author</span><span class="o">-&gt;</span><span class="na">getUpdatedAt</span><span class="p">());</span>

        <span class="nv">$date</span> <span class="o">=</span> <span class="nv">$authorDate</span> <span class="o">&gt;</span> <span class="nv">$articleDate</span> <span class="o">?</span> <span class="nv">$authorDate</span> <span class="o">:</span> <span class="nv">$articleDate</span><span class="p">;</span>

        <span class="nv">$response</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">();</span>
        <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">setLastModified</span><span class="p">(</span><span class="nv">$date</span><span class="p">);</span>
        <span class="c1">// Set response as public. Otherwise it will be private by default.</span>
        <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">setPublic</span><span class="p">();</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$response</span><span class="o">-&gt;</span><span class="na">isNotModified</span><span class="p">(</span><span class="nv">$request</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nv">$response</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// ... do more work to populate the response with the full content</span>

        <span class="k">return</span> <span class="nv">$response</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Response.php" title="Symfony\Component\HttpFoundation\Response::isNotModified()"><span class="pre">isNotModified()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Response.php]</span></span></code>
method compares the <code class="docutils literal notranslate"><span class="pre">If-Modified-Since</span></code> header with the <code class="docutils literal notranslate"><span class="pre">Last-Modified</span></code>
response header. If they are equivalent, the <code class="docutils literal notranslate"><span class="pre">Response</span></code> will be set to a
304 status code.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The cache sets the <code class="docutils literal notranslate"><span class="pre">If-Modified-Since</span></code> header on the request to the <code class="docutils literal notranslate"><span class="pre">Last-Modified</span></code>
of the original cached response before sending the request back to the
app. This is how the cache and server communicate with each other and
decide whether or not the resource has been updated since it was cached.</p>
</div>
</div>
<div class="section" id="optimizing-your-code-with-validation">
<span id="optimizing-cache-validation"></span><span id="index-3"></span><h2>Optimizing your Code with Validation</h2>
<p>The main goal of any caching strategy is to lighten the load on the application.
Put another way, the less you do in your application to return a 304 response,
the better. The <code class="docutils literal notranslate"><span class="pre">Response::isNotModified()</span></code> method does exactly that:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/ArticleController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Request</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">ArticleController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">show</span><span class="p">(</span><span class="nv">$articleSlug</span><span class="p">,</span> <span class="nx">Request</span> <span class="nv">$request</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// Get the minimum information to compute</span>
        <span class="c1">// the ETag or the Last-Modified value</span>
        <span class="c1">// (based on the Request, data is retrieved from</span>
        <span class="c1">// a database or a key-value store for instance)</span>
        <span class="nv">$article</span> <span class="o">=</span> <span class="o">...</span><span class="p">;</span>

        <span class="c1">// create a Response with an ETag and/or a Last-Modified header</span>
        <span class="nv">$response</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">();</span>
        <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">setEtag</span><span class="p">(</span><span class="nv">$article</span><span class="o">-&gt;</span><span class="na">computeETag</span><span class="p">());</span>
        <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">setLastModified</span><span class="p">(</span><span class="nv">$article</span><span class="o">-&gt;</span><span class="na">getPublishedAt</span><span class="p">());</span>

        <span class="c1">// Set response as public. Otherwise it will be private by default.</span>
        <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">setPublic</span><span class="p">();</span>

        <span class="c1">// Check that the Response is not modified for the given Request</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$response</span><span class="o">-&gt;</span><span class="na">isNotModified</span><span class="p">(</span><span class="nv">$request</span><span class="p">))</span> <span class="p">{</span>
            <span class="c1">// return the 304 Response immediately</span>
            <span class="k">return</span> <span class="nv">$response</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// do more work here - like retrieving more data</span>
        <span class="nv">$comments</span> <span class="o">=</span> <span class="o">...</span><span class="p">;</span>

        <span class="c1">// or render a template with the $response you&#39;ve already started</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="s1">&#39;article/show.html.twig&#39;</span><span class="p">,</span> <span class="p">[</span>
            <span class="s1">&#39;article&#39;</span> <span class="o">=&gt;</span> <span class="nv">$article</span><span class="p">,</span>
            <span class="s1">&#39;comments&#39;</span> <span class="o">=&gt;</span> <span class="nv">$comments</span><span class="p">,</span>
        <span class="p">],</span> <span class="nv">$response</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>When the <code class="docutils literal notranslate"><span class="pre">Response</span></code> is not modified, the <code class="docutils literal notranslate"><span class="pre">isNotModified()</span></code> automatically sets
the response status code to <code class="docutils literal notranslate"><span class="pre">304</span></code>, removes the content, and removes some
headers that must not be present for <code class="docutils literal notranslate"><span class="pre">304</span></code> responses (see
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Response.php" title="Symfony\Component\HttpFoundation\Response::setNotModified()"><span class="pre">setNotModified()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Response.php]</span></span></code>).</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>