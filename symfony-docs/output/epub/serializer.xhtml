<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Use the Serializer</title>
    <link rel="stylesheet" href="_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-use-the-serializer">
<span id="index-0"></span><h1>How to Use the Serializer</h1>
<p>Symfony provides a serializer to serialize/deserialize to and from objects and
different formats (e.g. JSON or XML). Before using it, read the
<a class="reference internal" href="components/serializer.xhtml"><span class="doc">Serializer component docs</span></a> to get familiar with
its philosophy and the normalizers and encoders terminology.</p>
<div class="section" id="installation">
<span id="activating-the-serializer"></span><h2>Installation</h2>
<p>In applications using <a class="reference internal" href="setup.xhtml#symfony-flex"><span class="std std-ref">Symfony Flex</span></a>, run this command to
install the <code class="docutils literal notranslate"><span class="pre">serializer</span></code> <a class="reference internal" href="setup.xhtml#symfony-packs"><span class="std std-ref">Symfony pack</span></a> before using it:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require symfony/serializer-pack
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="using-the-serializer-service">
<h2>Using the Serializer Service</h2>
<p>Once enabled, the serializer service can be injected in any service where
you need it or it can be used in a controller:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/DefaultController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Serializer\SerializerInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">DefaultController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">(</span><span class="nx">SerializerInterface</span> <span class="nv">$serializer</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// keep reading for usage examples</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="adding-normalizers-and-encoders">
<h2>Adding Normalizers and Encoders</h2>
<p>Once enabled, the <code class="docutils literal notranslate"><span class="pre">serializer</span></code> service will be available in the container.
It comes with a set of useful <a class="reference internal" href="components/serializer.xhtml#component-serializer-encoders"><span class="std std-ref">encoders</span></a>
and <a class="reference internal" href="components/serializer.xhtml#component-serializer-normalizers"><span class="std std-ref">normalizers</span></a>.</p>
<p>Encoders supporting the following formats are enabled:</p>
<ul class="simple">
<li><p>JSON: <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Serializer/Encoder/JsonEncoder.php" title="Symfony\Component\Serializer\Encoder\JsonEncoder"><span class="pre">JsonEncoder</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Serializer/Encoder/JsonEncoder.php]</span></span></code></p></li>
<li><p>XML: <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Serializer/Encoder/XmlEncoder.php" title="Symfony\Component\Serializer\Encoder\XmlEncoder"><span class="pre">XmlEncoder</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Serializer/Encoder/XmlEncoder.php]</span></span></code></p></li>
<li><p>CSV: <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Serializer/Encoder/CsvEncoder.php" title="Symfony\Component\Serializer\Encoder\CsvEncoder"><span class="pre">CsvEncoder</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Serializer/Encoder/CsvEncoder.php]</span></span></code></p></li>
<li><p>YAML: <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Serializer/Encoder/YamlEncoder.php" title="Symfony\Component\Serializer\Encoder\YamlEncoder"><span class="pre">YamlEncoder</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Serializer/Encoder/YamlEncoder.php]</span></span></code></p></li>
</ul>
<p>As well as the following normalizers:</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Serializer/Normalizer/ObjectNormalizer.php" title="Symfony\Component\Serializer\Normalizer\ObjectNormalizer"><span class="pre">ObjectNormalizer</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Serializer/Normalizer/ObjectNormalizer.php]</span></span></code> to
handle typical data objects</p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Serializer/Normalizer/DateTimeNormalizer.php" title="Symfony\Component\Serializer\Normalizer\DateTimeNormalizer"><span class="pre">DateTimeNormalizer</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Serializer/Normalizer/DateTimeNormalizer.php]</span></span></code> for
objects implementing the <code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/class.datetimeinterface.php" title="DateTimeInterface"><span class="pre">DateTimeInterface</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/class.datetimeinterface.php]</span></span></code> interface</p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Serializer/Normalizer/DateTimeZoneNormalizer.php" title="Symfony\Component\Serializer\Normalizer\DateTimeZoneNormalizer"><span class="pre">DateTimeZoneNormalizer</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Serializer/Normalizer/DateTimeZoneNormalizer.php]</span></span></code> for
<code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/class.datetimezone.php" title="DateTimeZone"><span class="pre">DateTimeZone</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/class.datetimezone.php]</span></span></code> objects</p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Serializer/Normalizer/DateIntervalNormalizer.php" title="Symfony\Component\Serializer\Normalizer\DateIntervalNormalizer"><span class="pre">DateIntervalNormalizer</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Serializer/Normalizer/DateIntervalNormalizer.php]</span></span></code>
for <code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/class.dateinterval.php" title="DateInterval"><span class="pre">DateInterval</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/class.dateinterval.php]</span></span></code> objects</p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Serializer/Normalizer/DataUriNormalizer.php" title="Symfony\Component\Serializer\Normalizer\DataUriNormalizer"><span class="pre">DataUriNormalizer</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Serializer/Normalizer/DataUriNormalizer.php]</span></span></code> to
transform <code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/class.splfileinfo.php" title="SplFileInfo"><span class="pre">SplFileInfo</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/class.splfileinfo.php]</span></span></code> objects in <a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs">Data URIs</a><span class="link-target"> [https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs]</span></p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Serializer/Normalizer/FormErrorNormalizer.php" title="Symfony\Component\Serializer\Normalizer\FormErrorNormalizer"><span class="pre">FormErrorNormalizer</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Serializer/Normalizer/FormErrorNormalizer.php]</span></span></code> for
objects implementing the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormInterface.php" title="Symfony\Component\Form\FormInterface"><span class="pre">FormInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormInterface.php]</span></span></code> to
normalize form errors.</p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Serializer/Normalizer/JsonSerializableNormalizer.php" title="Symfony\Component\Serializer\Normalizer\JsonSerializableNormalizer"><span class="pre">JsonSerializableNormalizer</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Serializer/Normalizer/JsonSerializableNormalizer.php]</span></span></code>
to deal with objects implementing the <code class="docutils literal notranslate"><a class="reference external" href="https://www.php.net/manual/en/class.jsonserializable.php" title="JsonSerializable"><span class="pre">JsonSerializable</span></a><span class="link-target"> <span class="pre">[https://www.php.net/manual/en/class.jsonserializable.php]</span></span></code> interface</p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Serializer/Normalizer/ArrayDenormalizer.php" title="Symfony\Component\Serializer\Normalizer\ArrayDenormalizer"><span class="pre">ArrayDenormalizer</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Serializer/Normalizer/ArrayDenormalizer.php]</span></span></code> to
denormalize arrays of objects using a notation like <code class="docutils literal notranslate"><span class="pre">MyObject[]</span></code> (note the <code class="docutils literal notranslate"><span class="pre">[]</span></code> suffix)</p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Serializer/Normalizer/ConstraintViolationListNormalizer.php" title="Symfony\Component\Serializer\Normalizer\ConstraintViolationListNormalizer"><span class="pre">ConstraintViolationListNormalizer</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Serializer/Normalizer/ConstraintViolationListNormalizer.php]</span></span></code> for objects implementing the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/ConstraintViolationListInterface.php" title="Symfony\Component\Validator\ConstraintViolationListInterface"><span class="pre">ConstraintViolationListInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/ConstraintViolationListInterface.php]</span></span></code> interface</p></li>
<li><p><code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Serializer/Normalizer/ProblemNormalizer.php" title="Symfony\Component\Serializer\Normalizer\ProblemNormalizer"><span class="pre">ProblemNormalizer</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Serializer/Normalizer/ProblemNormalizer.php]</span></span></code> for <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/ErrorHandler/Exception/FlattenException.php" title="Symfony\Component\ErrorHandler\Exception\FlattenException"><span class="pre">FlattenException</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/ErrorHandler/Exception/FlattenException.php]</span></span></code> objects</p></li>
</ul>
<p>Custom normalizers and/or encoders can also be loaded by tagging them as
<a class="reference internal" href="reference/dic_tags.xhtml#reference-dic-tags-serializer-normalizer"><span class="std std-ref">serializer.normalizer</span></a> and
<a class="reference internal" href="reference/dic_tags.xhtml#reference-dic-tags-serializer-encoder"><span class="std std-ref">serializer.encoder</span></a>. It’s also
possible to set the priority of the tag in order to decide the matching order.</p>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>Always make sure to load the <code class="docutils literal notranslate"><span class="pre">DateTimeNormalizer</span></code> when serializing the
<code class="docutils literal notranslate"><span class="pre">DateTime</span></code> or <code class="docutils literal notranslate"><span class="pre">DateTimeImmutable</span></code> classes to avoid excessive memory
usage and exposing internal details.</p>
</div>
<p>Here is an example on how to load the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Serializer/Normalizer/GetSetMethodNormalizer.php" title="Symfony\Component\Serializer\Normalizer\GetSetMethodNormalizer"><span class="pre">GetSetMethodNormalizer</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Serializer/Normalizer/GetSetMethodNormalizer.php]</span></span></code>, a
faster alternative to the <cite>ObjectNormalizer</cite> when data objects always use
getters (<code class="docutils literal notranslate"><span class="pre">getXxx()</span></code>), issers (<code class="docutils literal notranslate"><span class="pre">isXxx()</span></code>) or hassers (<code class="docutils literal notranslate"><span class="pre">hasXxx()</span></code>) to read
properties and setters (<code class="docutils literal notranslate"><span class="pre">setXxx()</span></code>) to change properties:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">get_set_method_normalizer</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">class</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">Symfony\Component\Serializer\Normalizer\GetSetMethodNormalizer</span>
        <span class="l l-Scalar l-Scalar-Plain">tags</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="nv">serializer.normalizer</span><span class="p p-Indicator">]</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;get_set_method_normalizer&quot;</span> <span class="na">class=</span><span class="s">&quot;Symfony\Component\Serializer\Normalizer\GetSetMethodNormalizer&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;tag</span> <span class="na">name=</span><span class="s">&quot;serializer.normalizer&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/service&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">namespace</span> <span class="nx">Symfony\Component\DependencyInjection\Loader\Configurator</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\Serializer\Normalizer\GetSetMethodNormalizer</span><span class="p">;</span>

<span class="k">return</span> <span class="k">function</span><span class="p">(</span><span class="nx">ContainerConfigurator</span> <span class="nv">$configurator</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$services</span> <span class="o">=</span> <span class="nv">$configurator</span><span class="o">-&gt;</span><span class="na">services</span><span class="p">();</span>

    <span class="nv">$services</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="s1">&#39;get_set_method_normalizer&#39;</span><span class="p">,</span> <span class="nx">GetSetMethodNormalizer</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">tag</span><span class="p">(</span><span class="s1">&#39;serializer.normalizer&#39;</span><span class="p">)</span>
    <span class="p">;</span>
<span class="p">};</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
<div class="section" id="using-serialization-groups-annotations">
<span id="serializer-using-serialization-groups-annotations"></span><h2>Using Serialization Groups Annotations</h2>
<p>To use annotations, first add support for them via the SensioFrameworkExtraBundle:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require sensio/framework-extra-bundle
</pre></div>
</td></tr></table></div>
<p>Next, add the <a class="reference internal" href="components/serializer.xhtml#component-serializer-attributes-groups-annotations"><span class="std std-ref">&#64;Groups annotations</span></a>
to your class:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Entity/Product.php</span>
<span class="k">namespace</span> <span class="nx">App\Entity</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Doctrine\ORM\Mapping</span> <span class="k">as</span> <span class="nx">ORM</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Serializer\Annotation\Groups</span><span class="p">;</span>

<span class="sd">/**</span>
<span class="sd"> * @ORM\Entity()</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">Product</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @ORM\Id</span>
<span class="sd">     * @ORM\GeneratedValue</span>
<span class="sd">     * @ORM\Column(type=&quot;integer&quot;)</span>
<span class="sd">     * @Groups({&quot;show_product&quot;, &quot;list_product&quot;})</span>
<span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$id</span><span class="p">;</span>

    <span class="sd">/**</span>
<span class="sd">     * @ORM\Column(type=&quot;string&quot;, length=255)</span>
<span class="sd">     * @Groups({&quot;show_product&quot;, &quot;list_product&quot;})</span>
<span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$name</span><span class="p">;</span>

    <span class="sd">/**</span>
<span class="sd">     * @ORM\Column(type=&quot;integer&quot;)</span>
<span class="sd">     * @Groups({&quot;show_product&quot;})</span>
<span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$description</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
<p>You can now choose which groups to use when serializing:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$json</span> <span class="o">=</span> <span class="nv">$serializer</span><span class="o">-&gt;</span><span class="na">serialize</span><span class="p">(</span>
    <span class="nv">$product</span><span class="p">,</span>
    <span class="s1">&#39;json&#39;</span><span class="p">,</span>
    <span class="p">[</span><span class="s1">&#39;groups&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;show_product&#39;</span><span class="p">]</span>
<span class="p">);</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The value of the <code class="docutils literal notranslate"><span class="pre">groups</span></code> key can be a single string, or an array of strings.</p>
</div>
<p>In addition to the <code class="docutils literal notranslate"><span class="pre">&#64;Groups</span></code> annotation, the Serializer component also
supports YAML or XML files. These files are automatically loaded when being
stored in one of the following locations:</p>
<ul class="simple">
<li><p>All <code class="docutils literal notranslate"><span class="pre">*.yaml</span></code> and <code class="docutils literal notranslate"><span class="pre">*.xml</span></code> files in the <code class="docutils literal notranslate"><span class="pre">config/serializer/</span></code>
directory.</p></li>
<li><p>The <code class="docutils literal notranslate"><span class="pre">serialization.yaml</span></code> or <code class="docutils literal notranslate"><span class="pre">serialization.xml</span></code> file in
the <code class="docutils literal notranslate"><span class="pre">Resources/config/</span></code> directory of a bundle;</p></li>
<li><p>All <code class="docutils literal notranslate"><span class="pre">*.yaml</span></code> and <code class="docutils literal notranslate"><span class="pre">*.xml</span></code> files in the <code class="docutils literal notranslate"><span class="pre">Resources/config/serialization/</span></code>
directory of a bundle.</p></li>
</ul>
</div>
<div class="section" id="configuring-the-metadata-cache">
<span id="serializer-enabling-metadata-cache"></span><h2>Configuring the Metadata Cache</h2>
<p>The metadata for the serializer is automatically cached to enhance application
performance. By default, the serializer uses the <code class="docutils literal notranslate"><span class="pre">cache.system</span></code> cache pool
which is configured using the <a class="reference internal" href="reference/configuration/framework.xhtml#reference-cache-system"><span class="std std-ref">cache.system</span></a>
option.</p>
</div>
<div class="section" id="enabling-a-name-converter">
<h2>Enabling a Name Converter</h2>
<p>The use of a <a class="reference internal" href="components/serializer.xhtml#component-serializer-converting-property-names-when-serializing-and-deserializing"><span class="std std-ref">name converter</span></a>
service can be defined in the configuration using the <a class="reference internal" href="reference/configuration/framework.xhtml#reference-serializer-name-converter"><span class="std std-ref">name_converter</span></a>
option.</p>
<p>The built-in <a class="reference internal" href="components/serializer.xhtml#using-camelized-method-names-for-underscored-attributes"><span class="std std-ref">CamelCase to snake_case name converter</span></a>
can be enabled by using the <code class="docutils literal notranslate"><span class="pre">serializer.name_converter.camel_case_to_snake_case</span></code>
value:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/packages/framework.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">framework</span><span class="p p-Indicator">:</span>
    <span class="c1"># ...</span>
    <span class="l l-Scalar l-Scalar-Plain">serializer</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">name_converter</span><span class="p p-Indicator">:</span> <span class="s">&#39;serializer.name_converter.camel_case_to_snake_case&#39;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/packages/framework.xml --&gt;</span>
<span class="nt">&lt;framework:config&gt;</span>
    <span class="c">&lt;!-- ... --&gt;</span>
    <span class="nt">&lt;framework:serializer</span> <span class="na">name-converter=</span><span class="s">&quot;serializer.name_converter.camel_case_to_snake_case&quot;</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/framework:config&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/packages/framework.php</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;framework&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="c1">// ...</span>
    <span class="s1">&#39;serializer&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
        <span class="s1">&#39;name_converter&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;serializer.name_converter.camel_case_to_snake_case&#39;</span><span class="p">,</span>
    <span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
<div class="section" id="going-further-with-the-serializer">
<h2>Going Further with the Serializer</h2>
<p><a class="reference external" href="https://api-platform.com">API Platform</a><span class="link-target"> [https://api-platform.com]</span> provides an API system supporting the following formats:</p>
<ul class="simple">
<li><p><a class="reference external" href="https://json-ld.org">JSON-LD</a><span class="link-target"> [https://json-ld.org]</span> along with the <a class="reference external" href="http://www.hydra-cg.com">Hydra Core Vocabulary</a><span class="link-target"> [http://www.hydra-cg.com]</span></p></li>
<li><p><a class="reference external" href="https://www.openapis.org">OpenAPI</a><span class="link-target"> [https://www.openapis.org]</span> v2 (formerly Swagger) and v3</p></li>
<li><p><a class="reference external" href="https://graphql.org">GraphQL</a><span class="link-target"> [https://graphql.org]</span></p></li>
<li><p><a class="reference external" href="https://jsonapi.org">JSON:API</a><span class="link-target"> [https://jsonapi.org]</span></p></li>
<li><p><a class="reference external" href="http://stateless.co/hal_specification.html">HAL</a><span class="link-target"> [http://stateless.co/hal_specification.html]</span></p></li>
<li><p>JSON</p></li>
<li><p>XML</p></li>
<li><p>YAML</p></li>
<li><p>CSV</p></li>
</ul>
<p>It is built on top of the Symfony Framework and its Serializer
component. It provides custom normalizers and a custom encoder, custom metadata
and a caching system.</p>
<p>If you want to leverage the full power of the Symfony Serializer component,
take a look at how this bundle works.</p>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="serializer/normalizers.xhtml">Normalizers</a></li>
<li class="toctree-l1"><a class="reference internal" href="serializer/custom_encoders.xhtml">How to Create your Custom Encoder</a></li>
<li class="toctree-l1"><a class="reference internal" href="serializer/custom_normalizer.xhtml">How to Create your Custom Normalizer</a></li>
</ul>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>