<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Customize a Method Behavior without Using Inheritance</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-customize-a-method-behavior-without-using-inheritance">
<span id="index-0"></span><h1>How to Customize a Method Behavior without Using Inheritance</h1>
<div class="section" id="doing-something-before-or-after-a-method-call">
<h2>Doing something before or after a Method Call</h2>
<p>If you want to do something right before, or directly after a method is
called, you can dispatch an event respectively at the beginning or at the
end of the method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">CustomMailer</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">send</span><span class="p">(</span><span class="nv">$subject</span><span class="p">,</span> <span class="nv">$message</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// dispatch an event before the method</span>
        <span class="nv">$event</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BeforeSendMailEvent</span><span class="p">(</span><span class="nv">$subject</span><span class="p">,</span> <span class="nv">$message</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">dispatcher</span><span class="o">-&gt;</span><span class="na">dispatch</span><span class="p">(</span><span class="nv">$event</span><span class="p">,</span> <span class="s1">&#39;mailer.pre_send&#39;</span><span class="p">);</span>

        <span class="c1">// get $foo and $bar from the event, they may have been modified</span>
        <span class="nv">$subject</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getSubject</span><span class="p">();</span>
        <span class="nv">$message</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">();</span>

        <span class="c1">// the real method implementation is here</span>
        <span class="nv">$returnValue</span> <span class="o">=</span> <span class="o">...</span><span class="p">;</span>

        <span class="c1">// do something after the method</span>
        <span class="nv">$event</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AfterSendMailEvent</span><span class="p">(</span><span class="nv">$returnValue</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">dispatcher</span><span class="o">-&gt;</span><span class="na">dispatch</span><span class="p">(</span><span class="nv">$event</span><span class="p">,</span> <span class="s1">&#39;mailer.post_send&#39;</span><span class="p">);</span>

        <span class="k">return</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getReturnValue</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>In this example, two events are dispatched:</p>
<ol class="arabic simple">
<li><p><code class="docutils literal notranslate"><span class="pre">mailer.pre_send</span></code>, before the method is called,</p></li>
<li><p>and <code class="docutils literal notranslate"><span class="pre">mailer.post_send</span></code> after the method is called.</p></li>
</ol>
<p>Each uses a custom Event class to communicate information to the listeners
of the two events. For example, <code class="docutils literal notranslate"><span class="pre">BeforeSendMailEvent</span></code> might look like
this:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Event/BeforeSendMailEvent.php</span>
<span class="k">namespace</span> <span class="nx">App\Event</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Contracts\EventDispatcher\Event</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">BeforeSendMailEvent</span> <span class="k">extends</span> <span class="nx">Event</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$subject</span><span class="p">;</span>
    <span class="k">private</span> <span class="nv">$message</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$subject</span><span class="p">,</span> <span class="nv">$message</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">subject</span> <span class="o">=</span> <span class="nv">$subject</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">message</span> <span class="o">=</span> <span class="nv">$message</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">getSubject</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">subject</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">setSubject</span><span class="p">(</span><span class="nv">$subject</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">subject</span> <span class="o">=</span> <span class="nv">$subject</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">getMessage</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">message</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">setMessage</span><span class="p">(</span><span class="nv">$message</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">message</span> <span class="o">=</span> <span class="nv">$message</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>And the <code class="docutils literal notranslate"><span class="pre">AfterSendMailEvent</span></code> even like this:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Event/AfterSendMailEvent.php</span>
<span class="k">namespace</span> <span class="nx">App\Event</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Contracts\EventDispatcher\Event</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">AfterSendMailEvent</span> <span class="k">extends</span> <span class="nx">Event</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$returnValue</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$returnValue</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">returnValue</span> <span class="o">=</span> <span class="nv">$returnValue</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">getReturnValue</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">returnValue</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">setReturnValue</span><span class="p">(</span><span class="nv">$returnValue</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">returnValue</span> <span class="o">=</span> <span class="nv">$returnValue</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Both events allow you to get some information (e.g. <code class="docutils literal notranslate"><span class="pre">getMessage()</span></code>) and even change
that information (e.g. <code class="docutils literal notranslate"><span class="pre">setMessage()</span></code>).</p>
<p>Now, you can create an event subscriber to hook into this event. For example, you
could listen to the <code class="docutils literal notranslate"><span class="pre">mailer.post_send</span></code> event and change the methodâ€™s return value:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/EventSubscriber/MailPostSendSubscriber.php</span>
<span class="k">namespace</span> <span class="nx">App\EventSubscriber</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">App\Event\AfterSendMailEvent</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\EventDispatcher\EventSubscriberInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">MailPostSendSubscriber</span> <span class="k">implements</span> <span class="nx">EventSubscriberInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">onMailerPostSend</span><span class="p">(</span><span class="nx">AfterSendMailEvent</span> <span class="nv">$event</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$returnValue</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getReturnValue</span><span class="p">();</span>
        <span class="c1">// modify the original ``$returnValue`` value</span>

        <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">setReturnValue</span><span class="p">(</span><span class="nv">$returnValue</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">getSubscribedEvents</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="p">[</span>
            <span class="s1">&#39;mailer.post_send&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;onMailerPostSend&#39;</span>
        <span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Thatâ€™s it! Your subscriber should be called automatically (or read more about
<a class="reference internal" href="../event_dispatcher.xhtml#ref-event-subscriber-configuration"><span class="std std-ref">event subscriber configuration</span></a>).</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>