<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Upgrading a Third-Party Bundle for a Major Symfony Version</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="upgrading-a-third-party-bundle-for-a-major-symfony-version">
<span id="index-0"></span><h1>Upgrading a Third-Party Bundle for a Major Symfony Version</h1>
<p>Symfony 3 was released on November 2015. Although this version doesn’t contain
any new features, it removes all the backward compatibility layers included in
the previous 2.8 version. If your bundle uses any deprecated feature and it’s
published as a third-party bundle, applications upgrading to Symfony 3 will no
longer be able to use it.</p>
<div class="section" id="allowing-to-install-symfony-3-components">
<h2>Allowing to Install Symfony 3 Components</h2>
<p>Most third-party bundles define their Symfony dependencies using the <code class="docutils literal notranslate"><span class="pre">~2.N</span></code> or
<code class="docutils literal notranslate"><span class="pre">^2.N</span></code> constraints in the <code class="docutils literal notranslate"><span class="pre">composer.json</span></code> file. For example:</p>
<div class="highlight-json notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="p">{</span>
    <span class="nt">&quot;require&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;symfony/framework-bundle&quot;</span><span class="p">:</span> <span class="s2">&quot;~2.7&quot;</span><span class="p">,</span>
        <span class="nt">&quot;symfony/finder&quot;</span><span class="p">:</span> <span class="s2">&quot;~2.7&quot;</span><span class="p">,</span>
        <span class="nt">&quot;symfony/validator&quot;</span><span class="p">:</span> <span class="s2">&quot;~2.7&quot;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
<p>These constraints prevent the bundle from using Symfony 3 components, so it makes
it impossible to install it in a Symfony 3 based application. Thanks to the
flexibility of Composer dependencies constraints, you can specify more than one
major version by replacing <code class="docutils literal notranslate"><span class="pre">~2.N</span></code> by <code class="docutils literal notranslate"><span class="pre">~2.N|~3.0</span></code> (or <code class="docutils literal notranslate"><span class="pre">^2.N</span></code> by <code class="docutils literal notranslate"><span class="pre">^2.N|~3.0</span></code>).</p>
<p>The above example can be updated to work with Symfony 3 as follows:</p>
<div class="highlight-json notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="p">{</span>
    <span class="nt">&quot;require&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;symfony/framework-bundle&quot;</span><span class="p">:</span> <span class="s2">&quot;~2.7|~3.0&quot;</span><span class="p">,</span>
        <span class="nt">&quot;symfony/finder&quot;</span><span class="p">:</span> <span class="s2">&quot;~2.7|~3.0&quot;</span><span class="p">,</span>
        <span class="nt">&quot;symfony/validator&quot;</span><span class="p">:</span> <span class="s2">&quot;~2.7|~3.0&quot;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Another common version constraint found on third-party bundles is <code class="docutils literal notranslate"><span class="pre">&gt;=2.N</span></code>.
You should avoid using that constraint because it’s too generic (it means
that your bundle is compatible with any future Symfony version). Use instead
<code class="docutils literal notranslate"><span class="pre">~2.N|~3.0</span></code> or <code class="docutils literal notranslate"><span class="pre">^2.N|~3.0</span></code> to make your bundle future-proof.</p>
</div>
</div>
<div class="section" id="look-for-deprecations-and-fix-them">
<h2>Look for Deprecations and Fix Them</h2>
<p>Besides allowing users to use your bundle with Symfony 3, your bundle must stop using
any feature deprecated by the 2.8 version because they are removed in 3.0 (you’ll get
exceptions or PHP errors). The easiest way to detect deprecations is to install
the <a class="reference external" href="https://github.com/symfony/phpunit-bridge">symfony/phpunit-bridge package</a><span class="link-target"> [https://github.com/symfony/phpunit-bridge]</span> and then run the test suite.</p>
<p>First, install the component as a <code class="docutils literal notranslate"><span class="pre">dev</span></code> dependency of your bundle:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require --dev symfony/phpunit-bridge
</pre></div>
</td></tr></table></div>
<p>Then, run your test suite and look for the deprecation list displayed after the
PHPUnit test report:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># this command is available after running &quot;composer require --dev symfony/phpunit-bridge&quot;</span>
<span class="gp">$</span> ./bin/phpunit

<span class="c1"># ... PHPUnit output</span>

<span class="go">Remaining deprecation notices (3)</span>

<span class="go">The &quot;pattern&quot; option in file ... is deprecated since version 2.2 and will be</span>
<span class="go">removed in 3.0. Use the &quot;path&quot; option in the route definition instead ...</span>

<span class="go">Twig Function &quot;form_enctype&quot; is deprecated. Use &quot;form_start&quot; instead in ...</span>

<span class="go">The Symfony\Component\Security\Core\SecurityContext class is deprecated since</span>
<span class="go">version 2.6 and will be removed in 3.0. Use ...</span>
</pre></div>
</td></tr></table></div>
<p>Fix the reported deprecations, run the test suite again and repeat the process
until no deprecation usage is reported.</p>
<div class="section" id="useful-resources">
<h3>Useful Resources</h3>
<p>There are several resources that can help you detect, understand and fix the use
of deprecated features:</p>
<dl class="simple">
<dt><a class="reference external" href="https://github.com/symfony/symfony/blob/2.8/UPGRADE-3.0.md">Official Symfony Guide to Upgrade from 2.x to 3.0</a><span class="link-target"> [https://github.com/symfony/symfony/blob/2.8/UPGRADE-3.0.md]</span></dt>
<dd><p>The full list of changes required to upgrade to Symfony 3.0 and grouped
by component.</p>
</dd>
<dt><a class="reference external" href="https://github.com/sensiolabs-de/deprecation-detector">SensioLabs DeprecationDetector</a><span class="link-target"> [https://github.com/sensiolabs-de/deprecation-detector]</span></dt>
<dd><p>It runs a static code analysis against your project’s source code to find
usages of deprecated methods, classes and interfaces. It works for any PHP
application, but it includes special detectors for Symfony applications,
where it can also detect usages of deprecated services.</p>
</dd>
<dt><a class="reference external" href="https://github.com/umpirsky/Symfony-Upgrade-Fixer">Symfony Upgrade Fixer</a><span class="link-target"> [https://github.com/umpirsky/Symfony-Upgrade-Fixer]</span></dt>
<dd><p>It analyzes Symfony projects to find deprecations. In addition it solves
automatically some of them thanks to the growing list of supported “fixers”.</p>
</dd>
</dl>
</div>
</div>
<div class="section" id="testing-your-bundle-in-symfony-3">
<h2>Testing your Bundle in Symfony 3</h2>
<p>Now that your bundle has removed all deprecations, it’s time to test it for real
in a Symfony 3 application. Assuming that you already have a Symfony 3 application,
you can test the updated bundle locally without having to install it through
Composer.</p>
<p>If your operating system supports symbolic links, instead point the appropriate
vendor directory to your local bundle root directory:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> ln -s /path/to/your/local/bundle/ vendor/you-vendor-name/your-bundle-name
</pre></div>
</td></tr></table></div>
<p>If your operating system doesn’t support symbolic links, you’ll need to copy
your local bundle directory into the appropriate directory inside <code class="docutils literal notranslate"><span class="pre">vendor/</span></code>.</p>
<div class="section" id="update-the-travis-ci-configuration">
<h3>Update the Travis CI Configuration</h3>
<p>In addition to running tools locally, it’s recommended to set-up Travis CI service
to run the tests of your bundle using different Symfony configurations. Use the
following recommended configuration as the starting point of your own configuration:</p>
<div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="l l-Scalar l-Scalar-Plain">language</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">php</span>
<span class="l l-Scalar l-Scalar-Plain">php</span><span class="p p-Indicator">:</span>
    <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">5.3</span>
    <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">5.6</span>
    <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">7.0</span>

<span class="l l-Scalar l-Scalar-Plain">matrix</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">include</span><span class="p p-Indicator">:</span>
        <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">php</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">5.3.3</span>
          <span class="l l-Scalar l-Scalar-Plain">env</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">COMPOSER_FLAGS=&#39;--prefer-lowest --prefer-stable&#39; SYMFONY_DEPRECATIONS_HELPER=max[total]=999999</span>
        <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">php</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">5.6</span>
          <span class="l l-Scalar l-Scalar-Plain">env</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">SYMFONY_VERSION=&#39;2.7.*&#39;</span>
        <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">php</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">5.6</span>
          <span class="l l-Scalar l-Scalar-Plain">env</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">SYMFONY_VERSION=&#39;2.8.*&#39;</span>
        <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">php</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">5.6</span>
          <span class="l l-Scalar l-Scalar-Plain">env</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">SYMFONY_VERSION=&#39;3.0.*&#39;</span>
        <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">php</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">5.6</span>
          <span class="l l-Scalar l-Scalar-Plain">env</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">SYMFONY_VERSION=&#39;3.1.*&#39;</span>
        <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">php</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">5.6</span>
          <span class="l l-Scalar l-Scalar-Plain">env</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">DEPENDENCIES=&#39;dev&#39; SYMFONY_VERSION=&#39;3.2.*@dev&#39;</span>

<span class="l l-Scalar l-Scalar-Plain">before_install</span><span class="p p-Indicator">:</span>
    <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">composer self-update</span>
    <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">if [ &quot;$DEPENDENCIES&quot; == &quot;dev&quot; ]; then perl -pi -e &#39;s/^}$/,&quot;minimum-stability&quot;:&quot;dev&quot;}/&#39; composer.json; fi;</span>
    <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">if [ &quot;$SYMFONY_VERSION&quot; != &quot;&quot; ]; then composer --no-update require symfony/symfony:${SYMFONY_VERSION}; fi;</span>

<span class="l l-Scalar l-Scalar-Plain">install</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">composer update $COMPOSER_FLAGS</span>

<span class="l l-Scalar l-Scalar-Plain">script</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">phpunit</span>
</pre></div>
</td></tr></table></div>
</div>
</div>
<div class="section" id="updating-your-code-to-support-symfony-2-x-and-3-x-at-the-same-time">
<h2>Updating your Code to Support Symfony 2.x and 3.x at the Same Time</h2>
<p>The real challenge of adding Symfony 3 support for your bundles is when you want
to support both Symfony 2.x and 3.x simultaneously using the same code. There
are some edge cases where you’ll need to deal with the API differences.</p>
<p>Before diving into the specifics of the most common edge cases, the general
recommendation is to <strong>not rely on the Symfony Kernel version</strong> to decide which
code to use:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">if</span> <span class="p">(</span><span class="nx">Kernel</span><span class="o">::</span><span class="na">VERSION_ID</span> <span class="o">&lt;</span> <span class="mi">20800</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// code for Symfony 2.x</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="c1">// code for Symfony 3.x</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Instead of checking the Symfony Kernel version, check the version of the specific
component. For example, the OptionsResolver API changed in its 2.6 version by
adding a <code class="docutils literal notranslate"><span class="pre">setDefined()</span></code> method. The recommended check in this case would be:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\OptionsResolver\OptionsResolver</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">method_exists</span><span class="p">(</span><span class="nx">OptionsResolver</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="s1">&#39;setDefined&#39;</span><span class="p">))</span> <span class="p">{</span>
    <span class="c1">// code for the old OptionsResolver API</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="c1">// code for the new OptionsResolver API</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>There is one case when you actually can rely on the
<code class="docutils literal notranslate"><span class="pre">Symfony\Component\HttpKernel\Kernel::VERSION_ID</span></code> constant: when trying
to detect the version of the <code class="docutils literal notranslate"><span class="pre">symfony/http-kernel</span></code> component, because it
is the component where this constant is defined.</p>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>