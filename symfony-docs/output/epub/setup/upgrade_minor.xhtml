<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Upgrading a Minor Version (e.g. 4.0.0 to 4.1.0)</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="upgrading-a-minor-version-e-g-4-0-0-to-4-1-0">
<span id="index-0"></span><h1>Upgrading a Minor Version (e.g. 4.0.0 to 4.1.0)</h1>
<p>If you’re upgrading a minor version (where the middle number changes), then
you should <em>not</em> encounter significant backward compatibility changes. For
details, see the <a class="reference internal" href="../contributing/code/bc.xhtml"><span class="doc">Symfony backward compatibility promise</span></a>.</p>
<p>However, some backwards-compatibility breaks <em>are</em> possible and you’ll learn in
a second how to prepare for them.</p>
<p>There are two steps to upgrading a minor version:</p>
<ol class="arabic simple">
<li><p><a class="reference internal" href="#upgrade-minor-symfony-composer"><span class="std std-ref">Update the Symfony library via Composer</span></a>;</p></li>
<li><p><a class="reference internal" href="#upgrade-minor-symfony-code"><span class="std std-ref">Update your code to work with the new version</span></a>.</p></li>
</ol>
<div class="section" id="update-the-symfony-library-via-composer">
<span id="upgrade-minor-symfony-composer"></span><h2>1) Update the Symfony Library via Composer</h2>
<p>The <code class="docutils literal notranslate"><span class="pre">composer.json</span></code> file is configured to allow Symfony packages to be
upgraded to patch versions. But to upgrade to a new minor version, you will
probably need to update the version constraint next to each library starting
<code class="docutils literal notranslate"><span class="pre">symfony/</span></code>. Suppose you are upgrading from Symfony 4.3 to 4.4:</p>
<div class="highlight-diff notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20</pre></div></td><td class="code"><div class="highlight"><pre><span></span>{
    &quot;...&quot;: &quot;...&quot;,

    &quot;require&quot;: {
<span class="gd">-         &quot;symfony/cache&quot;: &quot;4.3.*&quot;,</span>
<span class="gi">+         &quot;symfony/cache&quot;: &quot;4.4.*&quot;,</span>
<span class="gd">-         &quot;symfony/config&quot;: &quot;4.3.*&quot;,</span>
<span class="gi">+         &quot;symfony/config&quot;: &quot;4.4.*&quot;,</span>
<span class="gd">-         &quot;symfony/console&quot;: &quot;4.3.*&quot;,</span>
<span class="gi">+         &quot;symfony/console&quot;: &quot;4.4.*&quot;,</span>
        &quot;...&quot;: &quot;...&quot;,

        &quot;...&quot;: &quot;A few libraries starting with
                symfony/ follow their versioning scheme. You
                do not need to update these versions: you can
                upgrade them independently whenever you want&quot;,
        &quot;symfony/monolog-bundle&quot;: &quot;^3.5&quot;,
    },
    &quot;...&quot;: &quot;...&quot;,
}
</pre></div>
</td></tr></table></div>
<p>Your <code class="docutils literal notranslate"><span class="pre">composer.json</span></code> file should also have an <code class="docutils literal notranslate"><span class="pre">extra</span></code> block that you will
<em>also</em> need to update:</p>
<div class="highlight-diff notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span>&quot;extra&quot;: {
    &quot;symfony&quot;: {
        &quot;...&quot;: &quot;...&quot;,
<span class="gd">-         &quot;require&quot;: &quot;4.3.*&quot;</span>
<span class="gi">+         &quot;require&quot;: &quot;4.4.*&quot;</span>
    }
}
</pre></div>
</td></tr></table></div>
<p>Next, use Composer to download new versions of the libraries:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer update <span class="s2">&quot;symfony/*&quot;</span>
</pre></div>
</td></tr></table></div>
<div class="section" id="dependency-errors">
<h3>Dependency Errors</h3>
<p>If you get a dependency error, it may mean that you also need to upgrade
other libraries that are dependencies of the Symfony libraries. To allow
that, pass the <code class="docutils literal notranslate"><span class="pre">--with-all-dependencies</span></code> flag:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer update <span class="s2">&quot;symfony/*&quot;</span> --with-all-dependencies
</pre></div>
</td></tr></table></div>
<p>This updates <code class="docutils literal notranslate"><span class="pre">symfony/*</span></code> and <em>all</em> packages that those packages depend on.
By using tight version constraints in <code class="docutils literal notranslate"><span class="pre">composer.json</span></code>, you can control what
versions each library upgrades to.</p>
<p>If this still doesn’t work, your <code class="docutils literal notranslate"><span class="pre">composer.json</span></code> file may specify a version
for a library that is not compatible with the newer Symfony version. In that
case, updating that library to a newer version in <code class="docutils literal notranslate"><span class="pre">composer.json</span></code> may solve
the issue.</p>
<p>Or, you may have deeper issues where different libraries depend on conflicting
versions of other libraries. Check your error message to debug.</p>
<p>Another issue that may happen is that the project dependencies can be installed
on your local computer but not on the remote server. This usually happens when
the PHP versions are different on each machine. The solution is to add the
<a class="reference external" href="https://getcomposer.org/doc/06-config.md#platform">platform</a><span class="link-target"> [https://getcomposer.org/doc/06-config.md#platform]</span> config option to your <cite>composer.json</cite> file to define the highest
PHP version allowed for the dependencies (set it to the server’s PHP version).</p>
</div>
<div class="section" id="upgrading-other-packages">
<h3>Upgrading other Packages</h3>
<p>You may also want to upgrade the rest of your libraries. If you’ve done a
good job with your <a class="reference external" href="https://getcomposer.org/doc/articles/versions.md">version constraints</a><span class="link-target"> [https://getcomposer.org/doc/articles/versions.md]</span> in <code class="docutils literal notranslate"><span class="pre">composer.json</span></code>, you can do
this safely by running:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer update
</pre></div>
</td></tr></table></div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>Beware, if you have some unspecific <a class="reference external" href="https://getcomposer.org/doc/articles/versions.md">version constraints</a><span class="link-target"> [https://getcomposer.org/doc/articles/versions.md]</span> in your
<code class="docutils literal notranslate"><span class="pre">composer.json</span></code> (e.g. <code class="docutils literal notranslate"><span class="pre">dev-master</span></code>), this could upgrade some
non-Symfony libraries to new versions that contain backwards-compatibility
breaking changes.</p>
</div>
</div>
</div>
<div class="section" id="updating-your-code-to-work-with-the-new-version">
<span id="upgrade-minor-symfony-code"></span><h2>2) Updating your Code to Work with the new Version</h2>
<p>In theory, you should be done! However, you <em>may</em> need to make a few changes
to your code to get everything working. Additionally, some features you’re
using might still work, but might now be deprecated. While that’s fine,
if you know about these deprecations, you can start to fix them over time.</p>
<p>Every version of Symfony comes with an UPGRADE file (e.g. <a class="reference external" href="https://github.com/symfony/symfony/blob/4.4/UPGRADE-4.4.md">UPGRADE-4.4.md</a><span class="link-target"> [https://github.com/symfony/symfony/blob/4.4/UPGRADE-4.4.md]</span>)
included in the Symfony directory that describes these changes. If you follow
the instructions in the document and update your code accordingly, it should be
safe to update in the future.</p>
<p>These documents can also be found in the <a class="reference external" href="https://github.com/symfony/symfony">Symfony Repository</a><span class="link-target"> [https://github.com/symfony/symfony]</span>.</p>
</div>
<div class="section" id="updating-recipes">
<span id="updating-flex-recipes"></span><h2>3) Updating Recipes</h2>
<p>Over time - and especially when you upgrade to a new version of a library - an
updated version of the <a class="reference internal" href="../setup.xhtml#recipes-description"><span class="std std-ref">recipe</span></a> may be available.
These updates are usually minor - e.g. new comments in a configuration file - but
it’s a good idea to keep your files in sync with the recipes.</p>
<p>Symfony Flex provides several commands to help upgrade your recipes. Be sure to
commit any unrelated changes you’re working on before starting:</p>
<div class="versionadded">
<p><span class="versionmodified">New in version 1.6: </span>The recipes commands were introduced in Symfony Flex 1.6.</p>
</div>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># see a list of all installed recipes and which have updates available</span>
<span class="gp">$</span> composer recipes

<span class="c1"># see detailed information about a specific recipes</span>
<span class="gp">$</span> composer recipes symfony/framework-bundle

<span class="c1"># update a specific recipes</span>
<span class="gp">$</span> composer recipes:install symfony/framework-bundle --force -v
</pre></div>
</td></tr></table></div>
<p>The tricky part of this process is that the recipe “update” does not perform
any intelligent “upgrading” of your code. Instead, <strong>the updates process re-installs
the latest version of the recipe</strong> which means that <strong>your custom code will be
overridden completely</strong>. After updating a recipe, you need to carefully choose
which changes you want, and undo the rest.</p>
<div class="screencast admonition">
<p class="admonition-title">Screencast</p>
<p>For a detailed example, see the <a class="reference external" href="https://symfonycasts.com/screencast/symfony5-upgrade">SymfonyCasts Symfony 5 Upgrade Tutorial</a><span class="link-target"> [https://symfonycasts.com/screencast/symfony5-upgrade]</span>.</p>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>