<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Symfony Local Web Server</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="symfony-local-web-server">
<h1>Symfony Local Web Server</h1>
<p>You can run Symfony applications with any web server (Apache, nginx, the
internal PHP web server, etc.). However, Symfony provides its own web server to
make you more productive while developing your applications.</p>
<p>Although this server is not intended for production use, it supports HTTP/2,
TLS/SSL, automatic generation of security certificates, local domains, and many
other features that sooner or later you’ll need when developing web projects.
Moreover, the server is not tied to Symfony and you can also use it with any
PHP application and even with HTML or single page applications.</p>
<div class="section" id="installation">
<h2>Installation</h2>
<p>The Symfony server is part of the <code class="docutils literal notranslate"><span class="pre">symfony</span></code> binary created when you
<a class="reference external" href="https://symfony.com/download">install Symfony</a><span class="link-target"> [https://symfony.com/download]</span> and has support for Linux, macOS and Windows.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The Symfony binary is developed internally at Symfony. If you want to
report a bug or suggest a new feature, please create an issue on
<a class="reference external" href="https://github.com/symfony/cli">symfony/cli</a><span class="link-target"> [https://github.com/symfony/cli]</span>.</p>
</div>
</div>
<div class="section" id="getting-started">
<h2>Getting Started</h2>
<p>The Symfony server is started once per project, so you may end up with several
instances (each of them listening to a different port). This is the common
workflow to serve a Symfony project:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> <span class="nb">cd</span> my-project/
<span class="gp">$</span> symfony server:start

<span class="go">  [OK] Web server listening on http://127.0.0.1:....</span>
<span class="go">  ...</span>

<span class="c1"># Now, browse the given URL, or run this command:</span>
<span class="gp">$</span> symfony open:local
</pre></div>
</td></tr></table></div>
<p>Running the server this way makes it display the log messages in the console, so
you won’t be able to run other commands at the same time. If you prefer, you can
run the Symfony server in the background:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> <span class="nb">cd</span> my-project/

<span class="c1"># start the server in the background</span>
<span class="gp">$</span> symfony server:start -d

<span class="c1"># continue working and running other commands...</span>

<span class="c1"># show the latest log messages</span>
<span class="gp">$</span> symfony server:log
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="enabling-php-fpm">
<h2>Enabling PHP-FPM</h2>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>PHP-FPM must be installed locally for the Symfony server to utilize.</p>
</div>
<p>When the server starts it will check for common patterns like <code class="docutils literal notranslate"><span class="pre">web/app.php</span></code>,
<code class="docutils literal notranslate"><span class="pre">web/app_dev.php</span></code> or <code class="docutils literal notranslate"><span class="pre">public/index.php</span></code>. If a file like this is found the
server will automatically start with PHP-FPM enabled. Otherwise the server will
start without PHP-FPM and will show a <code class="docutils literal notranslate"><span class="pre">Page</span> <span class="pre">not</span> <span class="pre">found</span></code> page when trying to
access a <code class="docutils literal notranslate"><span class="pre">.php</span></code> file in the browser.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>When an <code class="docutils literal notranslate"><span class="pre">index.html</span></code> and a front controller like e.g. <code class="docutils literal notranslate"><span class="pre">index.php</span></code> are
both present the server will still start with PHP-FPM enabled but the
<code class="docutils literal notranslate"><span class="pre">index.html</span></code> will take precedence over the front controller. This means
when an <code class="docutils literal notranslate"><span class="pre">index.html</span></code> file is present in <code class="docutils literal notranslate"><span class="pre">public</span></code> or <code class="docutils literal notranslate"><span class="pre">web</span></code>, it will be
displayed instead of the <code class="docutils literal notranslate"><span class="pre">index.php</span></code> which would show e.g. the Symfony
application.</p>
</div>
</div>
<div class="section" id="enabling-tls">
<h2>Enabling TLS</h2>
<p>Browsing the secure version of your applications locally is important to detect
problems with mixed content early, and to run libraries that only run in HTTPS.
Traditionally this has been painful and complicated to set up, but the Symfony
server automates everything. First, run this command:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> symfony server:ca:install
</pre></div>
</td></tr></table></div>
<p>This command creates a local certificate authority, registers it in your system
trust store, registers it in Firefox (this is required only for that browser)
and creates a default certificate for <code class="docutils literal notranslate"><span class="pre">localhost</span></code> and <code class="docutils literal notranslate"><span class="pre">127.0.0.1</span></code>. In other
words, it does everything for you.</p>
<p>Before browsing your local application with HTTPS instead of HTTP, restart its
server stopping and starting it again.</p>
</div>
<div class="section" id="different-php-settings-per-project">
<h2>Different PHP Settings Per Project</h2>
<div class="section" id="selecting-a-different-php-version">
<h3>Selecting a Different PHP Version</h3>
<p>If you have multiple PHP versions installed on your computer, you can tell
Symfony which one to use creating a file called <code class="docutils literal notranslate"><span class="pre">.php-version</span></code> at the project
root directory:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> <span class="nb">cd</span> my-project/

<span class="c1"># use a specific PHP version</span>
<span class="gp">$</span> <span class="nb">echo</span> <span class="m">7</span>.2 &gt; .php-version

<span class="c1"># use any PHP 7.x version available</span>
<span class="gp">$</span> <span class="nb">echo</span> <span class="m">7</span> &gt; .php-version
</pre></div>
</td></tr></table></div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The Symfony server traverses the directory structure up to the root
directory, so you can create a <code class="docutils literal notranslate"><span class="pre">.php-version</span></code> file in some parent
directory to set the same PHP version for a group of projects under that
directory.</p>
</div>
<p>Run the command below if you don’t remember all the PHP versions installed on your
computer:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> symfony local:php:list

<span class="go">  # You&#39;ll see all supported SAPIs (CGI, FastCGI, etc.) for each version.</span>
<span class="go">  # FastCGI (php-fpm) is used when possible; then CGI (which acts as a FastCGI</span>
<span class="go">  # server as well), and finally, the server falls back to plain CGI.</span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="overriding-php-config-options-per-project">
<h3>Overriding PHP Config Options Per Project</h3>
<p>You can change the value of any PHP runtime config option per project by creating a
file called <code class="docutils literal notranslate"><span class="pre">php.ini</span></code> at the project root directory. Add only the options you want
to override:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> <span class="nb">cd</span> my-project/

<span class="c1"># this project only overrides the default PHP timezone</span>
<span class="gp">$</span> cat php.ini
<span class="go">[Date]</span>
<span class="go">date.timezone = Asia/Tokyo</span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="running-commands-with-different-php-versions">
<h3>Running Commands with Different PHP Versions</h3>
<p>When running different PHP versions, it is useful to use the main <code class="docutils literal notranslate"><span class="pre">symfony</span></code>
command as a wrapper for the <code class="docutils literal notranslate"><span class="pre">php</span></code> command. This allows you to always select
the most appropriate PHP version according to the project which is running the
commands. It also loads the env vars automatically, which is important when
running non-Symfony commands:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># runs the command with the default PHP version</span>
<span class="gp">$</span> php -r <span class="s2">&quot;...&quot;</span>

<span class="c1"># runs the command with the PHP version selected by the project</span>
<span class="c1"># (or the default PHP version if the project didn&#39;t select one)</span>
<span class="gp">$</span> symfony php -r <span class="s2">&quot;...&quot;</span>
</pre></div>
</td></tr></table></div>
</div>
</div>
<div class="section" id="local-domain-names">
<h2>Local Domain Names</h2>
<p>By default, projects are accessible at some random port of the <code class="docutils literal notranslate"><span class="pre">127.0.0.1</span></code>
local IP. However, sometimes it is preferable to associate a domain name to them:</p>
<ul class="simple">
<li><p>It’s more convenient when you work continuously on the same project because
port numbers can change but domains don’t;</p></li>
<li><p>The behavior of some applications depend on their domains/subdomains;</p></li>
<li><p>To have stable endpoints, such as the local redirection URL for OAuth2.</p></li>
</ul>
<div class="section" id="setting-up-the-local-proxy">
<h3>Setting up the Local Proxy</h3>
<p>Local domains are possible thanks to a local proxy provided by the Symfony server.
If this is the first time you run the proxy, you must configure it as follows:</p>
<ol class="arabic simple">
<li><p>Open the <strong>proxy settings</strong> of your operating system:</p>
<ul class="simple">
<li><p><a class="reference external" href="https://www.dummies.com/computers/operating-systems/windows-10/how-to-set-up-a-proxy-in-windows-10/">Proxy settings in Windows</a><span class="link-target"> [https://www.dummies.com/computers/operating-systems/windows-10/how-to-set-up-a-proxy-in-windows-10/]</span>;</p></li>
<li><p><a class="reference external" href="https://support.apple.com/guide/mac-help/enter-proxy-server-settings-on-mac-mchlp2591/mac">Proxy settings in macOS</a><span class="link-target"> [https://support.apple.com/guide/mac-help/enter-proxy-server-settings-on-mac-mchlp2591/mac]</span>;</p></li>
<li><p><a class="reference external" href="https://help.ubuntu.com/stable/ubuntu-help/net-proxy.html.en">Proxy settings in Ubuntu</a><span class="link-target"> [https://help.ubuntu.com/stable/ubuntu-help/net-proxy.html.en]</span>.</p></li>
</ul>
</li>
<li><p>Set the following URL as the value of the <strong>Automatic Proxy Configuration</strong>:
<code class="docutils literal notranslate"><span class="pre">http://127.0.0.1:7080/proxy.pac</span></code></p></li>
</ol>
<p>Now run this command to start the proxy:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> symfony proxy:start
</pre></div>
</td></tr></table></div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Some browsers (e.g. Chrome) require to re-apply proxy settings (clicking on
<code class="docutils literal notranslate"><span class="pre">Re-apply</span> <span class="pre">settings</span></code> button on the <code class="docutils literal notranslate"><span class="pre">chrome://net-internals/#proxy</span></code> page)
or a full restart after starting the proxy. Otherwise, you’ll see a
<em>“This webpage is not available”</em> error (<code class="docutils literal notranslate"><span class="pre">ERR_NAME_NOT_RESOLVED</span></code>).</p>
</div>
</div>
<div class="section" id="defining-the-local-domain">
<h3>Defining the Local Domain</h3>
<p>By default, Symfony proposes <code class="docutils literal notranslate"><span class="pre">.wip</span></code> (for <em>Work in Progress</em>) for the local
domains. You can define a local domain for your project as follows:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> <span class="nb">cd</span> my-project/
<span class="gp">$</span> symfony proxy:domain:attach my-domain
</pre></div>
</td></tr></table></div>
<p>If you have installed the local proxy as explained in the previous section, you
can now browse <code class="docutils literal notranslate"><span class="pre">https://my-domain.wip</span></code> to access your local project with the
new custom domain.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Browse the <a class="reference external" href="http://127.0.0.1:7080">http://127.0.0.1:7080</a> URL to get the full list of local project
directories, their custom domains, and port numbers.</p>
</div>
<p>When running console commands, add the <code class="docutils literal notranslate"><span class="pre">https_proxy</span></code> env var to make custom
domains work:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> <span class="nv">https_proxy</span><span class="o">=</span>http://127.0.0.1:7080 curl https://my-domain.wip
</pre></div>
</td></tr></table></div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Although env var names are always defined in uppercase, the <code class="docutils literal notranslate"><span class="pre">https_proxy</span></code>
env var <a class="reference external" href="https://ec.haxx.se/usingcurl/usingcurl-proxies#http_proxy-in-lower-case-only">is treated differently</a><span class="link-target"> [https://ec.haxx.se/usingcurl/usingcurl-proxies#http_proxy-in-lower-case-only]</span> than other env vars and its name must be
spelled in lowercase.</p>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>If you prefer to use a different TLD, edit the <code class="docutils literal notranslate"><span class="pre">~/.symfony/proxy.json</span></code>
file (where <code class="docutils literal notranslate"><span class="pre">~</span></code> means the path to your user directory) and change the
value of the <code class="docutils literal notranslate"><span class="pre">tld</span></code> option from <code class="docutils literal notranslate"><span class="pre">wip</span></code> to any other TLD.</p>
</div>
</div>
</div>
<div class="section" id="long-running-commands">
<h2>Long-Running Commands</h2>
<p>Long-running commands, such as the ones that compile front-end web assets, block
the terminal and you can’t run other commands at the same time. The Symfony
server provides a <code class="docutils literal notranslate"><span class="pre">run</span></code> command to wrap them as follows:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># compile Webpack assets using Symfony Encore ... but do that in the</span>
<span class="c1"># background to not block the terminal</span>
<span class="gp">$</span> symfony run -d yarn encore dev --watch

<span class="c1"># continue working and running other commands...</span>

<span class="c1"># from time to time, check the command logs if you want</span>
<span class="gp">$</span> symfony server:log

<span class="c1"># and you can also check if the command is still running</span>
<span class="gp">$</span> symfony server:status
<span class="go">Web server listening on ...</span>
<span class="go">Command &quot;yarn ...&quot; running with PID ...</span>

<span class="c1"># stop the web server (and all the associated commands) when you are finished</span>
<span class="gp">$</span> symfony server:stop
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="docker-integration">
<h2>Docker Integration</h2>
<p>The local Symfony server provides full <a class="reference external" href="https://en.wikipedia.org/wiki/Docker_(software)">Docker</a><span class="link-target"> [https://en.wikipedia.org/wiki/Docker_(software)]</span> integration for projects that
use it.</p>
<p>When the web server detects that Docker Compose is running for the project, it
automatically exposes environment variables according to the exposed port and
the name of the <code class="docutils literal notranslate"><span class="pre">docker-compose</span></code> services.</p>
<p>Consider the following configuration:</p>
<div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># docker-compose.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">database</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">ports</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="nv">3306</span><span class="p p-Indicator">]</span>
</pre></div>
</td></tr></table></div>
<p>The web server detects that a service exposing port <code class="docutils literal notranslate"><span class="pre">3306</span></code> is running for the
project. It understands that this is a MySQL service and creates environment
variables accordingly with the service name (<code class="docutils literal notranslate"><span class="pre">database</span></code>) as a prefix:
<code class="docutils literal notranslate"><span class="pre">DATABASE_URL</span></code>, <code class="docutils literal notranslate"><span class="pre">DATABASE_HOST</span></code>, …</p>
<p>If the service is not in the supported list below, generic environment
variables are set: <code class="docutils literal notranslate"><span class="pre">PORT</span></code>, <code class="docutils literal notranslate"><span class="pre">IP</span></code>, and <code class="docutils literal notranslate"><span class="pre">HOST</span></code>.</p>
<p>If the <code class="docutils literal notranslate"><span class="pre">docker-compose.yaml</span></code> names do not match Symfony’s conventions, add a
label to override the environment variables prefix:</p>
<div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># docker-compose.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">db</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">ports</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="nv">3306</span><span class="p p-Indicator">]</span>
        <span class="l l-Scalar l-Scalar-Plain">labels</span><span class="p p-Indicator">:</span>
            <span class="l l-Scalar l-Scalar-Plain">com.symfony.server.service-prefix</span><span class="p p-Indicator">:</span> <span class="s">&#39;DATABASE&#39;</span>
</pre></div>
</td></tr></table></div>
<p>In this example, the service is named <code class="docutils literal notranslate"><span class="pre">db</span></code>, so environment variables would be
prefixed with <code class="docutils literal notranslate"><span class="pre">DB_</span></code>, but as the <code class="docutils literal notranslate"><span class="pre">com.symfony.server.service-prefix</span></code> is set
to <code class="docutils literal notranslate"><span class="pre">DATABASE</span></code>, the web server creates environment variables starting with
<code class="docutils literal notranslate"><span class="pre">DATABASE_</span></code> instead as expected by the default Symfony configuration.</p>
<p>Here is the list of supported services with their ports and default Symfony
prefixes:</p>
<table class="docutils">
<colgroup>
<col style="width: 10%" />
<col style="width: 7%" />
<col style="width: 83%" />
</colgroup>
<thead>
<tr class="row-odd"><th class="head"><p>Service</p></th>
<th class="head"><p>Port</p></th>
<th class="head"><p>Symfony default prefix</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p>MySQL</p></td>
<td><p>3306</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">DATABASE_</span></code></p></td>
</tr>
<tr class="row-odd"><td><p>PostgreSQL</p></td>
<td><p>5432</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">DATABASE_</span></code></p></td>
</tr>
<tr class="row-even"><td><p>Redis</p></td>
<td><p>6379</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">REDIS_</span></code></p></td>
</tr>
<tr class="row-odd"><td><p>Memcached</p></td>
<td><p>11211</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">MEMCACHED_</span></code></p></td>
</tr>
<tr class="row-even"><td><p>RabbitMQ</p></td>
<td><p>5672</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">RABBITMQ_</span></code> (set user and pass via Docker <code class="docutils literal notranslate"><span class="pre">RABBITMQ_DEFAULT_USER</span></code> and <code class="docutils literal notranslate"><span class="pre">RABBITMQ_DEFAULT_PASS</span></code> env var)</p></td>
</tr>
<tr class="row-odd"><td><p>Elasticsearch</p></td>
<td><p>9200</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">ELASTICSEARCH_</span></code></p></td>
</tr>
<tr class="row-even"><td><p>MongoDB</p></td>
<td><p>27017</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">MONGODB_</span></code> (set the database via a Docker <code class="docutils literal notranslate"><span class="pre">MONGO_DATABASE</span></code> env var)</p></td>
</tr>
<tr class="row-odd"><td><p>Kafka</p></td>
<td><p>9092</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">KAFKA_</span></code></p></td>
</tr>
<tr class="row-even"><td><p>MailCatcher</p></td>
<td><p>1025/1080
or 25/80</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">MAILER_</span></code></p></td>
</tr>
<tr class="row-odd"><td><p>Blackfire</p></td>
<td><p>8707</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">BLACKFIRE_</span></code></p></td>
</tr>
</tbody>
</table>
<p>You can open web management interfaces for the services that expose them:</p>
<div class="highlight-bash notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span>$ symfony open:local:webmail
$ symfony open:local:rabbitmq
</pre></div>
</td></tr></table></div>
<p>Or click on the links in the “Server” section of the web debug toolbar.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>To debug and list all exported environment variables, run <code class="docutils literal notranslate"><span class="pre">symfony</span>
<span class="pre">var:export</span></code>.</p>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>For some services, the web server also exposes environment variables
understood by CLI tools related to the service. For instance, running
<code class="docutils literal notranslate"><span class="pre">symfony</span> <span class="pre">run</span> <span class="pre">psql</span></code> will connect you automatically to the PostgreSQL server
running in a container without having to specify the username, password, or
database name.</p>
</div>
<p>When Docker services are running, browse a page of your Symfony application and
check the “Symfony Server” section in the web debug toolbar; you’ll see that
“Docker Compose” is “Up”.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If you don’t want environment variables to be exposed for a service, set
the <code class="docutils literal notranslate"><span class="pre">com.symfony.server.service-ignore</span></code> label to <code class="docutils literal notranslate"><span class="pre">true</span></code>:</p>
<div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># docker-compose.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">db</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">ports</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="nv">3306</span><span class="p p-Indicator">]</span>
        <span class="l l-Scalar l-Scalar-Plain">labels</span><span class="p p-Indicator">:</span>
            <span class="l l-Scalar l-Scalar-Plain">com.symfony.server.service-ignore</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">true</span>
</pre></div>
</td></tr></table></div>
</div>
<p>If your Docker Compose file is not at the root of the project, use the
<code class="docutils literal notranslate"><span class="pre">COMPOSE_FILE</span></code> and <code class="docutils literal notranslate"><span class="pre">COMPOSE_PROJECT_NAME</span></code> environment variables to define
its location, same as for <code class="docutils literal notranslate"><span class="pre">docker-compose</span></code>:</p>
<div class="highlight-bash notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># start your containers:</span>
<span class="nv">COMPOSE_FILE</span><span class="o">=</span>docker/docker-compose.yaml <span class="nv">COMPOSE_PROJECT_NAME</span><span class="o">=</span>project_name docker-compose up -d

<span class="c1"># run any Symfony CLI command:</span>
<span class="nv">COMPOSE_FILE</span><span class="o">=</span>docker/docker-compose.yaml <span class="nv">COMPOSE_PROJECT_NAME</span><span class="o">=</span>project_name symfony var:export
</pre></div>
</td></tr></table></div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If you have more than one Docker Compose file, you can provide them all
separated by <code class="docutils literal notranslate"><span class="pre">:</span></code> as explained in the <a class="reference external" href="https://docs.docker.com/compose/reference/envvars/">Docker compose CLI env var reference</a><span class="link-target"> [https://docs.docker.com/compose/reference/envvars/]</span>.</p>
</div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>When using the Symfony binary with <code class="docutils literal notranslate"><span class="pre">php</span> <span class="pre">bin/console</span></code> (<code class="docutils literal notranslate"><span class="pre">symfony</span> <span class="pre">console</span> <span class="pre">...</span></code>),
the binary will <strong>always</strong> use environment variables detected via Docker and will
ignore local environment variables.
For example if you set up a different database name in your <code class="docutils literal notranslate"><span class="pre">.env.test</span></code> file
(<code class="docutils literal notranslate"><span class="pre">DATABASE_URL=mysql://db_user:db_password&#64;127.0.0.1:3306/test</span></code>) and if you run
<code class="docutils literal notranslate"><span class="pre">symfony</span> <span class="pre">console</span> <span class="pre">doctrine:database:drop</span> <span class="pre">--force</span> <span class="pre">--env=test</span></code>, the command will drop the database
defined in your Docker configuration and not the “test” one.</p>
</div>
</div>
<div class="section" id="symfonycloud-integration">
<h2>SymfonyCloud Integration</h2>
<p>The local Symfony server provides full, but optional, integration with
<a class="reference external" href="https://symfony.com/cloud/">SymfonyCloud</a><span class="link-target"> [https://symfony.com/cloud/]</span>, a service optimized to run your Symfony applications on the
cloud. It provides features such as creating environments, backups/snapshots,
and even access to a copy of the production data from your local machine to help
debug any issues.</p>
<p><a class="reference external" href="https://symfony.com/doc/master/cloud/intro.html">Read SymfonyCloud technical docs</a><span class="link-target"> [https://symfony.com/doc/master/cloud/intro.html]</span>.</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>