<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Upgrading Existing Applications to Symfony Flex</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="upgrading-existing-applications-to-symfony-flex">
<span id="index-0"></span><h1>Upgrading Existing Applications to Symfony Flex</h1>
<p>Using Symfony Flex is optional, even in Symfony 4, where Flex is used by
default. However, Flex is so convenient and improves your productivity so much
that it’s strongly recommended to upgrade your existing applications to it.</p>
<p>Symfony Flex recommends that applications use the following directory structure,
which is the same used by default in Symfony 4, but you can
<a class="reference internal" href="#flex-customize-paths"><span class="std std-ref">customize some directories</span></a>:</p>
<div class="highlight-text notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></div></td><td class="code"><div class="highlight"><pre><span></span>your-project/
├── assets/
├── bin/
│   └── console
├── config/
│   ├── bundles.php
│   ├── packages/
│   ├── routes.yaml
│   └── services.yaml
├── public/
│   └── index.php
├── src/
│   ├── ...
│   └── Kernel.php
├── templates/
├── tests/
├── translations/
├── var/
└── vendor/
</pre></div>
</td></tr></table></div>
<p>This means that installing the <code class="docutils literal notranslate"><span class="pre">symfony/flex</span></code> dependency in your application
is not enough. You must also upgrade the directory structure to the one shown
above. There’s no automatic tool to make this upgrade, so you must follow these
manual steps:</p>
<ol class="arabic">
<li><p>Install Flex as a dependency of your project:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require symfony/flex
</pre></div>
</td></tr></table></div>
</li>
<li><p>If the project’s <code class="docutils literal notranslate"><span class="pre">composer.json</span></code> file contains <code class="docutils literal notranslate"><span class="pre">symfony/symfony</span></code> dependency,
it still depends on the Symfony Standard Edition, which is no longer available
in Symfony 4. First, remove this dependency:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer remove symfony/symfony
</pre></div>
</td></tr></table></div>
<p>Now add the <code class="docutils literal notranslate"><span class="pre">symfony/symfony</span></code> package to the <code class="docutils literal notranslate"><span class="pre">conflict</span></code> section of the project’s
<code class="docutils literal notranslate"><span class="pre">composer.json</span></code> file as <a class="reference external" href="https://github.com/symfony/skeleton/blob/8e33fe617629f283a12bbe0a6578bd6e6af417af/composer.json#L44-L46">shown in this example of the skeleton-project</a><span class="link-target"> [https://github.com/symfony/skeleton/blob/8e33fe617629f283a12bbe0a6578bd6e6af417af/composer.json#L44-L46]</span> so that
it will not be installed again:</p>
<div class="highlight-diff notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="highlight"><pre><span></span>{
    &quot;require&quot;: {
        &quot;symfony/flex&quot;: &quot;^1.0&quot;,
<span class="gi">+     },</span>
<span class="gi">+     &quot;conflict&quot;: {</span>
<span class="gi">+         &quot;symfony/symfony&quot;: &quot;*&quot;</span>
    }
}
</pre></div>
</td></tr></table></div>
<p>Now you must add in <code class="docutils literal notranslate"><span class="pre">composer.json</span></code> all the Symfony dependencies required
by your project. A quick way to do that is to add all the components that
were included in the previous <code class="docutils literal notranslate"><span class="pre">symfony/symfony</span></code> dependency and later you
can remove anything you don’t really need:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require annotations asset orm-pack twig <span class="err">\</span>
<span class="go">  logger mailer form security translation validator</span>
<span class="gp">$</span> composer require --dev dotenv maker-bundle orm-fixtures profiler
</pre></div>
</td></tr></table></div>
</li>
<li><p>If the project’s <code class="docutils literal notranslate"><span class="pre">composer.json</span></code> file doesn’t contain the <code class="docutils literal notranslate"><span class="pre">symfony/symfony</span></code>
dependency, it already defines its dependencies explicitly, as required by
Flex. Reinstall all dependencies to force Flex to generate the
configuration files in <code class="docutils literal notranslate"><span class="pre">config/</span></code>, which is the most tedious part of the upgrade
process:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> rm -rf vendor/*
<span class="gp">$</span> composer install
</pre></div>
</td></tr></table></div>
</li>
<li><p>No matter which of the previous steps you followed. At this point, you’ll have
lots of new config files in <code class="docutils literal notranslate"><span class="pre">config/</span></code>. They contain the default config
defined by Symfony, so you must check your original files in <code class="docutils literal notranslate"><span class="pre">app/config/</span></code>
and make the needed changes in the new files. Flex config doesn’t use suffixes
in config files, so the old <code class="docutils literal notranslate"><span class="pre">app/config/config_dev.yml</span></code> goes to
<code class="docutils literal notranslate"><span class="pre">config/packages/dev/*.yaml</span></code>, etc.</p></li>
<li><p>The most important config file is <code class="docutils literal notranslate"><span class="pre">app/config/services.yml</span></code>, which now is
located at <code class="docutils literal notranslate"><span class="pre">config/services.yaml</span></code>. Copy the contents of the
<a class="reference external" href="https://github.com/symfony/recipes/blob/master/symfony/framework-bundle/3.3/config/services.yaml">default services.yaml file</a><span class="link-target"> [https://github.com/symfony/recipes/blob/master/symfony/framework-bundle/3.3/config/services.yaml]</span> and then add your own service configuration.
Later you can revisit this file because thanks to Symfony’s
<a class="reference internal" href="../service_container/autowiring.xhtml"><span class="doc">autowiring feature</span></a> you can remove
most of the service configuration.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Make sure that your previous configuration files don’t have <code class="docutils literal notranslate"><span class="pre">imports</span></code>
declarations pointing to resources already loaded by <code class="docutils literal notranslate"><span class="pre">Kernel::configureContainer()</span></code>
or <code class="docutils literal notranslate"><span class="pre">Kernel::configureRoutes()</span></code> methods.</p>
</div>
</li>
<li><p>Move the rest of the <code class="docutils literal notranslate"><span class="pre">app/</span></code> contents as follows (and after that, remove the
<code class="docutils literal notranslate"><span class="pre">app/</span></code> directory):</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">app/Resources/views/</span></code> -&gt; <code class="docutils literal notranslate"><span class="pre">templates/</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">app/Resources/translations/</span></code> -&gt; <code class="docutils literal notranslate"><span class="pre">translations/</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">app/Resources/&lt;BundleName&gt;/views/</span></code> -&gt; <code class="docutils literal notranslate"><span class="pre">templates/bundles/&lt;BundleName&gt;/</span></code></p></li>
<li><p>rest of <code class="docutils literal notranslate"><span class="pre">app/Resources/</span></code> files -&gt; <code class="docutils literal notranslate"><span class="pre">src/Resources/</span></code></p></li>
</ul>
</li>
<li><p>Move the original PHP source code from <code class="docutils literal notranslate"><span class="pre">src/AppBundle/*</span></code>, except bundle
specific files (like <code class="docutils literal notranslate"><span class="pre">AppBundle.php</span></code> and <code class="docutils literal notranslate"><span class="pre">DependencyInjection/</span></code>), to
<code class="docutils literal notranslate"><span class="pre">src/</span></code>.</p>
<p>In addition to moving the files, update the <code class="docutils literal notranslate"><span class="pre">autoload</span></code> and <code class="docutils literal notranslate"><span class="pre">autoload-dev</span></code>
values of the <code class="docutils literal notranslate"><span class="pre">composer.json</span></code> file as <a class="reference external" href="https://github.com/symfony/skeleton/blob/8e33fe617629f283a12bbe0a6578bd6e6af417af/composer.json#L24-L33">shown in this example</a><span class="link-target"> [https://github.com/symfony/skeleton/blob/8e33fe617629f283a12bbe0a6578bd6e6af417af/composer.json#L24-L33]</span> to use
<code class="docutils literal notranslate"><span class="pre">App\</span></code> and <code class="docutils literal notranslate"><span class="pre">App\Tests\</span></code> as the application namespaces (advanced IDEs can
do this automatically).</p>
<p>If you used multiple bundles to organize your code, you must reorganize your
code into <code class="docutils literal notranslate"><span class="pre">src/</span></code>. For example, if you had <code class="docutils literal notranslate"><span class="pre">src/UserBundle/Controller/DefaultController.php</span></code>
and <code class="docutils literal notranslate"><span class="pre">src/ProductBundle/Controller/DefaultController.php</span></code>, you could move
them to <code class="docutils literal notranslate"><span class="pre">src/Controller/UserController.php</span></code> and <code class="docutils literal notranslate"><span class="pre">src/Controller/ProductController.php</span></code>.</p>
</li>
<li><p>Move the public assets, such as images or compiled CSS/JS files, from
<code class="docutils literal notranslate"><span class="pre">src/AppBundle/Resources/public/</span></code> to <code class="docutils literal notranslate"><span class="pre">public/</span></code> (e.g. <code class="docutils literal notranslate"><span class="pre">public/images/</span></code>).</p></li>
<li><p>Move the source of the assets (e.g. the SCSS files) to <code class="docutils literal notranslate"><span class="pre">assets/</span></code> and use
<a class="reference internal" href="../frontend.xhtml"><span class="doc">Webpack Encore</span></a> to manage and compile them.</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">SYMFONY_DEBUG</span></code> and <code class="docutils literal notranslate"><span class="pre">SYMFONY_ENV</span></code> environment variables were replaced by
<code class="docutils literal notranslate"><span class="pre">APP_DEBUG</span></code> and <code class="docutils literal notranslate"><span class="pre">APP_ENV</span></code>. Copy their values to the new vars and then remove
the former ones.</p></li>
<li><p>Create the new <code class="docutils literal notranslate"><span class="pre">public/index.php</span></code> front controller
<a class="reference external" href="https://github.com/symfony/recipes/blob/master/symfony/framework-bundle/3.4/public/index.php">copying Symfony’s index.php source</a><span class="link-target"> [https://github.com/symfony/recipes/blob/master/symfony/framework-bundle/3.4/public/index.php]</span> and, if you made any customization in
your <code class="docutils literal notranslate"><span class="pre">web/app.php</span></code> and <code class="docutils literal notranslate"><span class="pre">web/app_dev.php</span></code> files, copy those changes into
the new file. You can now remove the old <code class="docutils literal notranslate"><span class="pre">web/</span></code> dir.</p></li>
<li><p>Update the <code class="docutils literal notranslate"><span class="pre">bin/console</span></code> script <a class="reference external" href="https://github.com/symfony/recipes/blob/master/symfony/console/3.4/bin/console">copying Symfony’s bin/console source</a><span class="link-target"> [https://github.com/symfony/recipes/blob/master/symfony/console/3.4/bin/console]</span>
and changing anything according to your original console script.</p></li>
<li><p>Remove <code class="docutils literal notranslate"><span class="pre">src/AppBundle/</span></code>.</p></li>
<li><p>Move the original source code from <code class="docutils literal notranslate"><span class="pre">src/{App,...}Bundle/</span></code> to <code class="docutils literal notranslate"><span class="pre">src/</span></code> and
update the namespaces of every PHP file to be <code class="docutils literal notranslate"><span class="pre">App\...</span></code> (advanced IDEs can do
this automatically).</p></li>
<li><p>Remove the <code class="docutils literal notranslate"><span class="pre">bin/symfony_requirements</span></code> script and if you need a replacement
for it, use the new <a class="reference external" href="https://github.com/symfony/requirements-checker">Symfony Requirements Checker</a><span class="link-target"> [https://github.com/symfony/requirements-checker]</span>.</p></li>
<li><p>Update the <code class="docutils literal notranslate"><span class="pre">.gitignore</span></code> file to replace the existing <code class="docutils literal notranslate"><span class="pre">var/logs/</span></code> entry
by <code class="docutils literal notranslate"><span class="pre">var/log/</span></code>, which is the new name for the log directory.</p></li>
</ol>
<div class="section" id="customizing-flex-paths">
<span id="flex-customize-paths"></span><h2>Customizing Flex Paths</h2>
<p>The Flex recipes make a few assumptions about your project’s directory structure.
Some of these assumptions can be customized by adding a key under the <code class="docutils literal notranslate"><span class="pre">extra</span></code>
section of your <code class="docutils literal notranslate"><span class="pre">composer.json</span></code> file. For example, to tell Flex to copy any
PHP classes into <code class="docutils literal notranslate"><span class="pre">src/App</span></code> instead of <code class="docutils literal notranslate"><span class="pre">src</span></code>:</p>
<div class="highlight-json notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="p">{</span>
    <span class="nt">&quot;...&quot;</span><span class="p">:</span> <span class="s2">&quot;...&quot;</span><span class="p">,</span>

    <span class="nt">&quot;extra&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;src-dir&quot;</span><span class="p">:</span> <span class="s2">&quot;src/App&quot;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
<p>The configurable paths are:</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">bin-dir</span></code>: defaults to <code class="docutils literal notranslate"><span class="pre">bin/</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">config-dir</span></code>: defaults to <code class="docutils literal notranslate"><span class="pre">config/</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">src-dir</span></code> defaults to <code class="docutils literal notranslate"><span class="pre">src/</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">var-dir</span></code> defaults to <code class="docutils literal notranslate"><span class="pre">var/</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">public-dir</span></code> defaults to <code class="docutils literal notranslate"><span class="pre">public/</span></code></p></li>
</ul>
<p>If you customize these paths, some files copied from a recipe still may contain
references to the original path. In other words: you may need to update some things
manually after a recipe is installed.</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>