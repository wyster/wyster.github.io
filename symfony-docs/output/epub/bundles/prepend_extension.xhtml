<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Simplify Configuration of Multiple Bundles</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-simplify-configuration-of-multiple-bundles">
<span id="index-0"></span><h1>How to Simplify Configuration of Multiple Bundles</h1>
<p>When building reusable and extensible applications, developers are often
faced with a choice: either create a single large bundle or multiple smaller
bundles. Creating a single bundle has the drawback that itâ€™s impossible for
users to choose to remove functionality they are not using. Creating multiple
bundles has the drawback that configuration becomes more tedious and settings
often need to be repeated for various bundles.</p>
<p>It is possible to remove the disadvantage of the multiple bundle approach by
enabling a single Extension to prepend the settings for any bundle. It can use
the settings defined in the <code class="docutils literal notranslate"><span class="pre">config/*</span></code> files to prepend settings just as if
they had been written explicitly by the user in the application configuration.</p>
<p>For example, this could be used to configure the entity manager name to use in
multiple bundles. Or it can be used to enable an optional feature that depends
on another bundle being loaded as well.</p>
<p>To give an Extension the power to do this, it needs to implement
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/DependencyInjection/Extension/PrependExtensionInterface.php" title="Symfony\Component\DependencyInjection\Extension\PrependExtensionInterface"><span class="pre">PrependExtensionInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/DependencyInjection/Extension/PrependExtensionInterface.php]</span></span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Acme/HelloBundle/DependencyInjection/AcmeHelloExtension.php</span>
<span class="k">namespace</span> <span class="nx">Acme\HelloBundle\DependencyInjection</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\ContainerBuilder</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\Extension\PrependExtensionInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\DependencyInjection\Extension</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">AcmeHelloExtension</span> <span class="k">extends</span> <span class="nx">Extension</span> <span class="k">implements</span> <span class="nx">PrependExtensionInterface</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">prepend</span><span class="p">(</span><span class="nx">ContainerBuilder</span> <span class="nv">$container</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Inside the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/DependencyInjection/Extension/PrependExtensionInterface.php" title="Symfony\Component\DependencyInjection\Extension\PrependExtensionInterface::prepend()"><span class="pre">prepend()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/DependencyInjection/Extension/PrependExtensionInterface.php]</span></span></code>
method, developers have full access to the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/DependencyInjection/ContainerBuilder.php" title="Symfony\Component\DependencyInjection\ContainerBuilder"><span class="pre">ContainerBuilder</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/DependencyInjection/ContainerBuilder.php]</span></span></code>
instance just before the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/DependencyInjection/Extension/ExtensionInterface.php" title="Symfony\Component\DependencyInjection\Extension\ExtensionInterface::load()"><span class="pre">load()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/DependencyInjection/Extension/ExtensionInterface.php]</span></span></code>
method is called on each of the registered bundle Extensions. In order to
prepend settings to a bundle extension developers can use the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/DependencyInjection/ContainerBuilder.php" title="Symfony\Component\DependencyInjection\ContainerBuilder::prependExtensionConfig()"><span class="pre">prependExtensionConfig()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/DependencyInjection/ContainerBuilder.php]</span></span></code>
method on the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/DependencyInjection/ContainerBuilder.php" title="Symfony\Component\DependencyInjection\ContainerBuilder"><span class="pre">ContainerBuilder</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/DependencyInjection/ContainerBuilder.php]</span></span></code>
instance. As this method only prepends settings, any other settings done explicitly
inside the <code class="docutils literal notranslate"><span class="pre">config/*</span></code> files would override these prepended settings.</p>
<p>The following example illustrates how to prepend
a configuration setting in multiple bundles as well as disable a flag in multiple bundles
in case a specific other bundle is not registered:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Acme/HelloBundle/DependencyInjection/AcmeHelloExtension.php</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">prepend</span><span class="p">(</span><span class="nx">ContainerBuilder</span> <span class="nv">$container</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// get all bundles</span>
    <span class="nv">$bundles</span> <span class="o">=</span> <span class="nv">$container</span><span class="o">-&gt;</span><span class="na">getParameter</span><span class="p">(</span><span class="s1">&#39;kernel.bundles&#39;</span><span class="p">);</span>
    <span class="c1">// determine if AcmeGoodbyeBundle is registered</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$bundles</span><span class="p">[</span><span class="s1">&#39;AcmeGoodbyeBundle&#39;</span><span class="p">]))</span> <span class="p">{</span>
        <span class="c1">// disable AcmeGoodbyeBundle in bundles</span>
        <span class="nv">$config</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;use_acme_goodbye&#39;</span> <span class="o">=&gt;</span> <span class="k">false</span><span class="p">];</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$container</span><span class="o">-&gt;</span><span class="na">getExtensions</span><span class="p">()</span> <span class="k">as</span> <span class="nv">$name</span> <span class="o">=&gt;</span> <span class="nv">$extension</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">switch</span> <span class="p">(</span><span class="nv">$name</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">case</span> <span class="s1">&#39;acme_something&#39;</span><span class="o">:</span>
                <span class="k">case</span> <span class="s1">&#39;acme_other&#39;</span><span class="o">:</span>
                    <span class="c1">// set use_acme_goodbye to false in the config of</span>
                    <span class="c1">// acme_something and acme_other</span>
                    <span class="c1">//</span>
                    <span class="c1">// note that if the user manually configured</span>
                    <span class="c1">// use_acme_goodbye to true in config/services.yaml</span>
                    <span class="c1">// then the setting would in the end be true and not false</span>
                    <span class="nv">$container</span><span class="o">-&gt;</span><span class="na">prependExtensionConfig</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="nv">$config</span><span class="p">);</span>
                    <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// process the configuration of AcmeHelloExtension</span>
    <span class="nv">$configs</span> <span class="o">=</span> <span class="nv">$container</span><span class="o">-&gt;</span><span class="na">getExtensionConfig</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getAlias</span><span class="p">());</span>
    <span class="c1">// use the Configuration class to generate a config array with</span>
    <span class="c1">// the settings &quot;acme_hello&quot;</span>
    <span class="nv">$config</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">processConfiguration</span><span class="p">(</span><span class="k">new</span> <span class="nx">Configuration</span><span class="p">(),</span> <span class="nv">$configs</span><span class="p">);</span>

    <span class="c1">// check if entity_manager_name is set in the &quot;acme_hello&quot; configuration</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$config</span><span class="p">[</span><span class="s1">&#39;entity_manager_name&#39;</span><span class="p">]))</span> <span class="p">{</span>
        <span class="c1">// prepend the acme_something settings with the entity_manager_name</span>
        <span class="nv">$config</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;entity_manager_name&#39;</span> <span class="o">=&gt;</span> <span class="nv">$config</span><span class="p">[</span><span class="s1">&#39;entity_manager_name&#39;</span><span class="p">]];</span>
        <span class="nv">$container</span><span class="o">-&gt;</span><span class="na">prependExtensionConfig</span><span class="p">(</span><span class="s1">&#39;acme_something&#39;</span><span class="p">,</span> <span class="nv">$config</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The above would be the equivalent of writing the following into the
<code class="docutils literal notranslate"><span class="pre">config/packages/acme_something.yaml</span></code> in case AcmeGoodbyeBundle is not
registered and the <code class="docutils literal notranslate"><span class="pre">entity_manager_name</span></code> setting for <code class="docutils literal notranslate"><span class="pre">acme_hello</span></code> is set to
<code class="docutils literal notranslate"><span class="pre">non_default</span></code>:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/packages/acme_something.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">acme_something</span><span class="p p-Indicator">:</span>
    <span class="c1"># ...</span>
    <span class="l l-Scalar l-Scalar-Plain">use_acme_goodbye</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">false</span>
    <span class="l l-Scalar l-Scalar-Plain">entity_manager_name</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">non_default</span>

<span class="l l-Scalar l-Scalar-Plain">acme_other</span><span class="p p-Indicator">:</span>
    <span class="c1"># ...</span>
    <span class="l l-Scalar l-Scalar-Plain">use_acme_goodbye</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">false</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/packages/acme_something.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xmlns:acme-something=</span><span class="s">&quot;http://example.org/schema/dic/acme_something&quot;</span>
    <span class="na">xmlns:acme-other=</span><span class="s">&quot;http://example.org/schema/dic/acme_other&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd</span>
<span class="s">        http://example.org/schema/dic/acme_something</span>
<span class="s">        https://example.org/schema/dic/acme_something/acme_something-1.0.xsd</span>
<span class="s">        http://example.org/schema/dic/acme_other</span>
<span class="s">        https://example.org/schema/dic/acme_something/acme_other-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;acme-something:config</span> <span class="na">use-acme-goodbye=</span><span class="s">&quot;false&quot;</span><span class="nt">&gt;</span>
        <span class="c">&lt;!-- ... --&gt;</span>
        <span class="nt">&lt;acme-something:entity-manager-name&gt;</span>non_default<span class="nt">&lt;/acme-something:entity-manager-name&gt;</span>
    <span class="nt">&lt;/acme-something:config&gt;</span>

    <span class="nt">&lt;acme-other:config</span> <span class="na">use-acme-goodbye=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>

<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/packages/acme_something.php</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;acme_something&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="c1">// ...</span>
    <span class="s1">&#39;use_acme_goodbye&#39;</span> <span class="o">=&gt;</span> <span class="k">false</span><span class="p">,</span>
    <span class="s1">&#39;entity_manager_name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;non_default&#39;</span><span class="p">,</span>
<span class="p">]);</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;acme_other&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="c1">// ...</span>
    <span class="s1">&#39;use_acme_goodbye&#39;</span> <span class="o">=&gt;</span> <span class="k">false</span><span class="p">,</span>
<span class="p">]);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<div class="section" id="more-than-one-bundle-using-prependextensioninterface">
<h2>More than one Bundle using PrependExtensionInterface</h2>
<p>If there is more than one bundle that prepends the same extension and defines
the same key, the bundle that is registered <strong>first</strong> will take priority:
next bundles wonâ€™t override this specific config setting.</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>