<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Override any Part of a Bundle</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-override-any-part-of-a-bundle">
<span id="index-0"></span><h1>How to Override any Part of a Bundle</h1>
<p>When using a third-party bundle, you might want to customize or override some of
its features. This document describes ways of overriding the most common
features of a bundle.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The bundle overriding mechanism means that you cannot use physical paths to
refer to bundle’s resources (e.g. <code class="docutils literal notranslate"><span class="pre">__DIR__/config/services.xml</span></code>). Always
use logical paths in your bundles (e.g. <code class="docutils literal notranslate"><span class="pre">&#64;FooBundle/Resources/config/services.xml</span></code>)
and call the <a class="reference internal" href="../components/http_kernel.xhtml#http-kernel-resource-locator"><span class="std std-ref">locateResource() method</span></a>
to turn them into physical paths when needed.</p>
</div>
<div class="section" id="templates">
<span id="override-templates"></span><h2>Templates</h2>
<p>Third-party bundle templates can be overridden in the
<code class="docutils literal notranslate"><span class="pre">&lt;your-project&gt;/templates/bundles/&lt;bundle-name&gt;/</span></code> directory. The new templates
must use the same name and path (relative to <code class="docutils literal notranslate"><span class="pre">&lt;bundle&gt;/Resources/views/</span></code>) as
the original templates.</p>
<p>For example, to override the <code class="docutils literal notranslate"><span class="pre">Resources/views/Registration/confirmed.html.twig</span></code>
template from the FOSUserBundle, create this template:
<code class="docutils literal notranslate"><span class="pre">&lt;your-project&gt;/templates/bundles/FOSUserBundle/Registration/confirmed.html.twig</span></code></p>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>If you add a template in a new location, you <em>may</em> need to clear your
cache (<code class="docutils literal notranslate"><span class="pre">php</span> <span class="pre">bin/console</span> <span class="pre">cache:clear</span></code>), even if you are in debug mode.</p>
</div>
<p>Instead of overriding an entire template, you may just want to override one or
more blocks. However, since you are overriding the template you want to extend
from, you would end up in an infinite loop error. The solution is to use the
special <code class="docutils literal notranslate"><span class="pre">!</span></code> prefix in the template name to tell Symfony that you want to
extend from the original template, not from the overridden one:</p>
<div class="highlight-twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# templates/bundles/FOSUserBundle/Registration/confirmed.html.twig #}</span><span class="x"></span>
<span class="c">{# the special &#39;!&#39; prefix avoids errors when extending from an overridden template #}</span><span class="x"></span>
<span class="cp">{%</span> <span class="k">extends</span> <span class="s2">&quot;@!FOSUser/Registration/confirmed.html.twig&quot;</span> <span class="cp">%}</span><span class="x"></span>

<span class="cp">{%</span> <span class="k">block</span> <span class="nv">some_block</span> <span class="cp">%}</span><span class="x"></span>
<span class="x">    ...</span>
<span class="cp">{%</span> <span class="k">endblock</span> <span class="cp">%}</span><span class="x"></span>
</pre></div>
</td></tr></table></div>
<div class="admonition tip" id="templating-overriding-core-templates">
<p class="admonition-title">Tip</p>
<p>Symfony internals use some bundles too, so you can apply the same technique
to override the core Symfony templates. For example, you can
<a class="reference internal" href="../controller/error_pages.xhtml"><span class="doc">customize error pages</span></a> overriding TwigBundle
templates.</p>
</div>
</div>
<div class="section" id="routing">
<h2>Routing</h2>
<p>Routing is never automatically imported in Symfony. If you want to include
the routes from any bundle, then they must be manually imported from somewhere
in your application (e.g. <code class="docutils literal notranslate"><span class="pre">config/routes.yaml</span></code>).</p>
<p>The easiest way to “override” a bundle’s routing is to never import it at
all. Instead of importing a third-party bundle’s routing, copy
that routing file into your application, modify it, and import it instead.</p>
</div>
<div class="section" id="controllers">
<h2>Controllers</h2>
<p>If the controller is a service, see the next section on how to override it.
Otherwise, define a new route + controller with the same path associated to the
controller you want to override (and make sure that the new route is loaded
before the bundle one).</p>
</div>
<div class="section" id="services-configuration">
<h2>Services &amp; Configuration</h2>
<p>If you want to modify the services created by a bundle, you can use
<a class="reference internal" href="../service_container/service_decoration.xhtml"><span class="doc">service decoration</span></a>.</p>
<p>If you want to do more advanced manipulations, like removing services created by
other bundles, you must work with <a class="reference internal" href="../service_container/definitions.xhtml"><span class="doc">service definitions</span></a>
inside a <a class="reference internal" href="../service_container/compiler_passes.xhtml"><span class="doc">compiler pass</span></a>.</p>
</div>
<div class="section" id="entities-entity-mapping">
<h2>Entities &amp; Entity Mapping</h2>
<p>Overriding entity mapping is only possible if a bundle provides a mapped
superclass (such as the <code class="docutils literal notranslate"><span class="pre">User</span></code> entity in the FOSUserBundle). It’s possible to
override attributes and associations in this way. Learn more about this feature
and its limitations in <a class="reference external" href="https://www.doctrine-project.org/projects/doctrine-orm/en/current/reference/inheritance-mapping.html#overrides">the Doctrine documentation</a><span class="link-target"> [https://www.doctrine-project.org/projects/doctrine-orm/en/current/reference/inheritance-mapping.html#overrides]</span>.</p>
</div>
<div class="section" id="forms">
<h2>Forms</h2>
<p>Existing form types can be modified defining
<a class="reference internal" href="../form/create_form_type_extension.xhtml"><span class="doc">form type extensions</span></a>.</p>
</div>
<div class="section" id="validation-metadata">
<span id="override-validation"></span><h2>Validation Metadata</h2>
<p>Symfony loads all validation configuration files from every bundle and
combines them into one validation metadata tree. This means you are able to
add new constraints to a property, but you cannot override them.</p>
<p>To overcome this, the 3rd party bundle needs to have configuration for
<a class="reference internal" href="../validation/groups.xhtml"><span class="doc">validation groups</span></a>. For instance, the FOSUserBundle
has this configuration. To create your own validation, add the constraints
to a new validation group:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/validator/validation.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">FOS\UserBundle\Model\User</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">properties</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">plainPassword</span><span class="p p-Indicator">:</span>
            <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">NotBlank</span><span class="p p-Indicator">:</span>
                <span class="l l-Scalar l-Scalar-Plain">groups</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="nv">AcmeValidation</span><span class="p p-Indicator">]</span>
            <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">Length</span><span class="p p-Indicator">:</span>
                <span class="l l-Scalar l-Scalar-Plain">min</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">6</span>
                <span class="l l-Scalar l-Scalar-Plain">minMessage</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">fos_user.password.short</span>
                <span class="l l-Scalar l-Scalar-Plain">groups</span><span class="p p-Indicator">:</span> <span class="p p-Indicator">[</span><span class="nv">AcmeValidation</span><span class="p p-Indicator">]</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/validator/validation.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;constraint-mapping</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/constraint-mapping&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/constraint-mapping</span>
<span class="s">        https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;class</span> <span class="na">name=</span><span class="s">&quot;FOS\UserBundle\Model\User&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;plainPassword&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;constraint</span> <span class="na">name=</span><span class="s">&quot;NotBlank&quot;</span><span class="nt">&gt;</span>
                <span class="nt">&lt;option</span> <span class="na">name=</span><span class="s">&quot;groups&quot;</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;value&gt;</span>AcmeValidation<span class="nt">&lt;/value&gt;</span>
                <span class="nt">&lt;/option&gt;</span>
            <span class="nt">&lt;/constraint&gt;</span>

            <span class="nt">&lt;constraint</span> <span class="na">name=</span><span class="s">&quot;Length&quot;</span><span class="nt">&gt;</span>
                <span class="nt">&lt;option</span> <span class="na">name=</span><span class="s">&quot;min&quot;</span><span class="nt">&gt;</span>6<span class="nt">&lt;/option&gt;</span>
                <span class="nt">&lt;option</span> <span class="na">name=</span><span class="s">&quot;minMessage&quot;</span><span class="nt">&gt;</span>fos_user.password.short<span class="nt">&lt;/option&gt;</span>
                <span class="nt">&lt;option</span> <span class="na">name=</span><span class="s">&quot;groups&quot;</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;value&gt;</span>AcmeValidation<span class="nt">&lt;/value&gt;</span>
                <span class="nt">&lt;/option&gt;</span>
            <span class="nt">&lt;/constraint&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
    <span class="nt">&lt;/class&gt;</span>
<span class="nt">&lt;/constraint-mapping&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<p>Now, update the FOSUserBundle configuration, so it uses your validation groups
instead of the original ones.</p>
</div>
<div class="section" id="translations">
<span id="override-translations"></span><h2>Translations</h2>
<p>Translations are not related to bundles, but to translation domains.
For this reason, you can override any bundle translation file from the main
<code class="docutils literal notranslate"><span class="pre">translations/</span></code> directory, as long as the new file uses the same domain.</p>
<p>For example, to override the translations defined in the
<code class="docutils literal notranslate"><span class="pre">Resources/translations/FOSUserBundle.es.yml</span></code> file of the FOSUserBundle,
create a <code class="docutils literal notranslate"><span class="pre">&lt;your-project&gt;/translations/FOSUserBundle.es.yml</span></code> file.</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>