<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Create your First Page in Symfony</title>
    <link rel="stylesheet" href="_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="create-your-first-page-in-symfony">
<span id="creating-pages-in-symfony"></span><span id="creating-pages-in-symfony2"></span><span id="index-0"></span><h1>Create your First Page in Symfony</h1>
<p>Creating a new page - whether it’s an HTML page or a JSON endpoint - is a
two-step process:</p>
<ol class="arabic simple">
<li><p><strong>Create a route</strong>: A route is the URL (e.g. <code class="docutils literal notranslate"><span class="pre">/about</span></code>) to your page and
points to a controller;</p></li>
<li><p><strong>Create a controller</strong>: A controller is the PHP function you write that
builds the page. You take the incoming request information and use it to
create a Symfony <code class="docutils literal notranslate"><span class="pre">Response</span></code> object, which can hold HTML content, a JSON
string or even a binary file like an image or PDF.</p></li>
</ol>
<div class="screencast admonition">
<p class="admonition-title">Screencast</p>
<p>Do you prefer video tutorials? Check out the <a class="reference external" href="https://symfonycasts.com/screencast/symfony/setup">Stellar Development with Symfony</a><span class="link-target"> [https://symfonycasts.com/screencast/symfony/setup]</span>
screencast series.</p>
</div>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>Symfony <em>embraces</em> the HTTP Request-Response lifecycle. To find out more,
see <a class="reference internal" href="introduction/http_fundamentals.xhtml"><span class="doc">Symfony and HTTP Fundamentals</span></a>.</p>
</div>
<div class="section" id="creating-a-page-route-and-controller">
<span id="index-1"></span><h2>Creating a Page: Route and Controller</h2>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Before continuing, make sure you’ve read the <a class="reference internal" href="setup.xhtml"><span class="doc">Setup</span></a>
article and can access your new Symfony app in the browser.</p>
</div>
<p>Suppose you want to create a page - <code class="docutils literal notranslate"><span class="pre">/lucky/number</span></code> - that generates a lucky (well,
random) number and prints it. To do that, create a “Controller” class and a
“controller” method inside of it:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="o">&lt;?</span><span class="nx">php</span>
<span class="c1">// src/Controller/LuckyController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">LuckyController</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">number</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$number</span> <span class="o">=</span> <span class="nx">random_int</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>

        <span class="k">return</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">(</span>
            <span class="s1">&#39;&lt;html&gt;&lt;body&gt;Lucky number: &#39;</span><span class="o">.</span><span class="nv">$number</span><span class="o">.</span><span class="s1">&#39;&lt;/body&gt;&lt;/html&gt;&#39;</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Now you need to associate this controller function with a public URL (e.g. <code class="docutils literal notranslate"><span class="pre">/lucky/number</span></code>)
so that the <code class="docutils literal notranslate"><span class="pre">number()</span></code> method is called when a user browses to it. This association
is defined by creating a <strong>route</strong> in the <code class="docutils literal notranslate"><span class="pre">config/routes.yaml</span></code> file:</p>
<div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/routes.yaml</span>

<span class="c1"># the &quot;app_lucky_number&quot; route name is not important yet</span>
<span class="l l-Scalar l-Scalar-Plain">app_lucky_number</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">path</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">/lucky/number</span>
    <span class="l l-Scalar l-Scalar-Plain">controller</span><span class="p p-Indicator">:</span> <span class="l l-Scalar l-Scalar-Plain">App\Controller\LuckyController::number</span>
</pre></div>
</td></tr></table></div>
<p>That’s it! If you are using Symfony web server, try it out by going to: <a class="reference external" href="http://localhost:8000/lucky/number">http://localhost:8000/lucky/number</a></p>
<p>If you see a lucky number being printed back to you, congratulations! But before
you run off to play the lottery, check out how this works. Remember the two steps
to creating a page?</p>
<ol class="arabic simple">
<li><dl class="simple">
<dt><em>Create a route</em>: In <code class="docutils literal notranslate"><span class="pre">config/routes.yaml</span></code>, the route defines the URL to your</dt>
<dd><p>page (<code class="docutils literal notranslate"><span class="pre">path</span></code>) and what <code class="docutils literal notranslate"><span class="pre">controller</span></code> to call. You’ll learn more about <a class="reference internal" href="routing.xhtml"><span class="doc">routing</span></a>
in its own section, including how to make <em>variable</em> URLs;</p>
</dd>
</dl>
</li>
<li><p><em>Create a controller</em>: This is a function where <em>you</em> build the page and ultimately
return a <code class="docutils literal notranslate"><span class="pre">Response</span></code> object. You’ll learn more about <a class="reference internal" href="controller.xhtml"><span class="doc">controllers</span></a>
in their own section, including how to return JSON responses.</p></li>
</ol>
</div>
<div class="section" id="annotation-routes">
<span id="id1"></span><h2>Annotation Routes</h2>
<p>Instead of defining your route in YAML, Symfony also allows you to use <em>annotation</em>
routes. To do this, install the annotations package:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require annotations
</pre></div>
</td></tr></table></div>
<p>You can now add your route directly <em>above</em> the controller:</p>
<div class="highlight-diff notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span>// src/Controller/LuckyController.php

// ...
<span class="gi">+ use Symfony\Component\Routing\Annotation\Route;</span>

class LuckyController
{
<span class="gi">+     /**</span>
<span class="gi">+      * @Route(&quot;/lucky/number&quot;)</span>
<span class="gi">+      */</span>
    public function number()
    {
        // this looks exactly the same
    }
}
</pre></div>
</td></tr></table></div>
<p>That’s it! The page - <a class="reference external" href="http://localhost:8000/lucky/number">http://localhost:8000/lucky/number</a> will work exactly
like before! Annotations are the recommended way to configure routes.</p>
</div>
<div class="section" id="auto-installing-recipes-with-symfony-flex">
<span id="flex-quick-intro"></span><h2>Auto-Installing Recipes with Symfony Flex</h2>
<p>You may not have noticed, but when you ran <code class="docutils literal notranslate"><span class="pre">composer</span> <span class="pre">require</span> <span class="pre">annotations</span></code>, two
special things happened, both thanks to a powerful Composer plugin called
<a class="reference internal" href="setup.xhtml#symfony-flex"><span class="std std-ref">Flex</span></a>.</p>
<p>First, <code class="docutils literal notranslate"><span class="pre">annotations</span></code> isn’t a real package name: it’s an <em>alias</em> (i.e. shortcut)
that Flex resolves to <code class="docutils literal notranslate"><span class="pre">sensio/framework-extra-bundle</span></code>.</p>
<p>Second, after this package was downloaded, Flex runs a <em>recipe</em>, which is a
set of automated instructions that tell Symfony how to integrate an external
package. <a class="reference external" href="https://flex.symfony.com">Flex recipes</a><span class="link-target"> [https://flex.symfony.com]</span> exist for many packages and have the ability
to do a lot, like adding configuration files, creating directories, updating <code class="docutils literal notranslate"><span class="pre">.gitignore</span></code>
and adding new config to your <code class="docutils literal notranslate"><span class="pre">.env</span></code> file. Flex <em>automates</em> the installation of
packages so you can get back to coding.</p>
</div>
<div class="section" id="the-bin-console-command">
<h2>The bin/console Command</h2>
<p>Your project already has a powerful debugging tool inside: the <code class="docutils literal notranslate"><span class="pre">bin/console</span></code> command.
Try running it:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console
</pre></div>
</td></tr></table></div>
<p>You should see a list of commands that can give you debugging information, help generate
code, generate database migrations and a lot more. As you install more packages,
you’ll see more commands.</p>
<p>To get a list of <em>all</em> of the routes in your system, use the <code class="docutils literal notranslate"><span class="pre">debug:router</span></code> command:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console debug:router
</pre></div>
</td></tr></table></div>
<p>You should see your <code class="docutils literal notranslate"><span class="pre">app_lucky_number</span></code> route at the very top:</p>
<table class="docutils">
<colgroup>
<col style="width: 33%" />
<col style="width: 15%" />
<col style="width: 15%" />
<col style="width: 11%" />
<col style="width: 27%" />
</colgroup>
<thead>
<tr class="row-odd"><th class="head"><p>Name</p></th>
<th class="head"><p>Method</p></th>
<th class="head"><p>Scheme</p></th>
<th class="head"><p>Host</p></th>
<th class="head"><p>Path</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p>app_lucky_number</p></td>
<td><p>ANY</p></td>
<td><p>ANY</p></td>
<td><p>ANY</p></td>
<td><p>/lucky/number</p></td>
</tr>
</tbody>
</table>
<p>You will also see debugging routes below <code class="docutils literal notranslate"><span class="pre">app_lucky_number</span></code> – more on
the debugging routes in the next section.</p>
<p>You’ll learn about many more commands as you continue!</p>
</div>
<div class="section" id="the-web-debug-toolbar-debugging-dream">
<span id="web-debug-toolbar"></span><h2>The Web Debug Toolbar: Debugging Dream</h2>
<p>One of Symfony’s <em>amazing</em> features is the Web Debug Toolbar: a bar that displays
a <em>huge</em> amount of debugging information along the bottom of your page while
developing. This is all included out of the box using a <a class="reference internal" href="setup.xhtml#symfony-packs"><span class="std std-ref">Symfony pack</span></a>
called <code class="docutils literal notranslate"><span class="pre">symfony/profiler-pack</span></code>.</p>
<p>You will see a dark bar along the bottom of the page. You’ll learn more about
all the information it holds along the way, but feel free to experiment: hover
over and click the different icons to get information about routing,
performance, logging and more.</p>
</div>
<div class="section" id="rendering-a-template">
<h2>Rendering a Template</h2>
<p>If you’re returning HTML from your controller, you’ll probably want to render
a template. Fortunately, Symfony comes with <a class="reference external" href="https://twig.symfony.com">Twig</a><span class="link-target"> [https://twig.symfony.com]</span>: a templating language that’s
minimal, powerful and actually quite fun.</p>
<p>Install the twig package with:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require twig
</pre></div>
</td></tr></table></div>
<p>Make sure that <code class="docutils literal notranslate"><span class="pre">LuckyController</span></code> extends Symfony’s base
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Controller/AbstractController.php" title="Symfony\Bundle\FrameworkBundle\Controller\AbstractController"><span class="pre">AbstractController</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Controller/AbstractController.php]</span></span></code> class:</p>
<div class="highlight-diff notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="highlight"><pre><span></span>// src/Controller/LuckyController.php

// ...
<span class="gi">+ use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;</span>

<span class="gd">- class LuckyController</span>
<span class="gi">+ class LuckyController extends AbstractController</span>
{
    // ...
}
</pre></div>
</td></tr></table></div>
<p>Now, use the handy <code class="docutils literal notranslate"><span class="pre">render()</span></code> function to render a template. Pass it a <code class="docutils literal notranslate"><span class="pre">number</span></code>
variable so you can use it in Twig:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/LuckyController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="k">class</span> <span class="nc">LuckyController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @Route(&quot;/lucky/number&quot;)</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">number</span><span class="p">()</span><span class="o">:</span> <span class="nx">Response</span>
    <span class="p">{</span>
        <span class="nv">$number</span> <span class="o">=</span> <span class="nx">random_int</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>

        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="s1">&#39;lucky/number.html.twig&#39;</span><span class="p">,</span> <span class="p">[</span>
            <span class="s1">&#39;number&#39;</span> <span class="o">=&gt;</span> <span class="nv">$number</span><span class="p">,</span>
        <span class="p">]);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Template files live in the <code class="docutils literal notranslate"><span class="pre">templates/</span></code> directory, which was created for you automatically
when you installed Twig. Create a new <code class="docutils literal notranslate"><span class="pre">templates/lucky</span></code> directory with a new
<code class="docutils literal notranslate"><span class="pre">number.html.twig</span></code> file inside:</p>
<div class="highlight-html+twig notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">{# templates/lucky/number.html.twig #}</span>
<span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Your lucky number is <span class="cp">{{</span> <span class="nv">number</span> <span class="cp">}}</span><span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</pre></div>
</td></tr></table></div>
<p>The <code class="docutils literal notranslate"><span class="pre">{{</span> <span class="pre">number</span> <span class="pre">}}</span></code> syntax is used to <em>print</em> variables in Twig. Refresh your browser
to get your <em>new</em> lucky number!</p>
<blockquote>
<div><p><a class="reference external" href="http://localhost:8000/lucky/number">http://localhost:8000/lucky/number</a></p>
</div></blockquote>
<p>Now you may wonder where the Web Debug Toolbar has gone: that’s because there is
no <code class="docutils literal notranslate"><span class="pre">&lt;/body&gt;</span></code> tag in the current template. You can add the body element yourself,
or extend <code class="docutils literal notranslate"><span class="pre">base.html.twig</span></code>, which contains all default HTML elements.</p>
<p>In the <a class="reference internal" href="templates.xhtml"><span class="doc">templates</span></a> article, you’ll learn all about Twig: how
to loop, render other templates and leverage its powerful layout inheritance system.</p>
</div>
<div class="section" id="checking-out-the-project-structure">
<h2>Checking out the Project Structure</h2>
<p>Great news! You’ve already worked inside the most important directories in your
project:</p>
<dl class="simple">
<dt><code class="docutils literal notranslate"><span class="pre">config/</span></code></dt>
<dd><p>Contains… configuration!. You will configure routes,
<a class="reference internal" href="service_container.xhtml"><span class="doc">services</span></a> and packages.</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">src/</span></code></dt>
<dd><p>All your PHP code lives here.</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">templates/</span></code></dt>
<dd><p>All your Twig templates live here.</p>
</dd>
</dl>
<p>Most of the time, you’ll be working in <code class="docutils literal notranslate"><span class="pre">src/</span></code>, <code class="docutils literal notranslate"><span class="pre">templates/</span></code> or <code class="docutils literal notranslate"><span class="pre">config/</span></code>.
As you keep reading, you’ll learn what can be done inside each of these.</p>
<p>So what about the other directories in the project?</p>
<dl class="simple">
<dt><code class="docutils literal notranslate"><span class="pre">bin/</span></code></dt>
<dd><p>The famous <code class="docutils literal notranslate"><span class="pre">bin/console</span></code> file lives here (and other, less important
executable files).</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">var/</span></code></dt>
<dd><p>This is where automatically-created files are stored, like cache files
(<code class="docutils literal notranslate"><span class="pre">var/cache/</span></code>) and logs (<code class="docutils literal notranslate"><span class="pre">var/log/</span></code>).</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">vendor/</span></code></dt>
<dd><p>Third-party (i.e. “vendor”) libraries live here! These are downloaded via the <a class="reference external" href="https://getcomposer.org">Composer</a><span class="link-target"> [https://getcomposer.org]</span>
package manager.</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">public/</span></code></dt>
<dd><p>This is the document root for your project: you put any publicly accessible files
here.</p>
</dd>
</dl>
<p>And when you install new packages, new directories will be created automatically
when needed.</p>
</div>
<div class="section" id="what-s-next">
<h2>What’s Next?</h2>
<p>Congrats! You’re already starting to master Symfony and learn a whole new
way of building beautiful, functional, fast and maintainable applications.</p>
<p>OK, time to finish mastering the fundamentals by reading these articles:</p>
<ul class="simple">
<li><p><a class="reference internal" href="routing.xhtml"><span class="doc">Routing</span></a></p></li>
<li><p><a class="reference internal" href="controller.xhtml"><span class="doc">Controller</span></a></p></li>
<li><p><a class="reference internal" href="templates.xhtml"><span class="doc">Creating and Using Templates</span></a></p></li>
<li><p><a class="reference internal" href="configuration.xhtml"><span class="doc">Configuring Symfony</span></a></p></li>
</ul>
<p>Then, learn about other important topics like the
<a class="reference internal" href="service_container.xhtml"><span class="doc">service container</span></a>,
the <a class="reference internal" href="forms.xhtml"><span class="doc">form system</span></a>, using <a class="reference internal" href="doctrine.xhtml"><span class="doc">Doctrine</span></a>
(if you need to query a database) and more!</p>
<p>Have fun!</p>
</div>
<div class="section" id="go-deeper-with-http-framework-fundamentals">
<h2>Go Deeper with HTTP &amp; Framework Fundamentals</h2>
<div class="toctree-wrapper compound">
</div>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="introduction/from_flat_php_to_symfony.xhtml">Symfony versus Flat PHP</a></li>
<li class="toctree-l1"><a class="reference internal" href="introduction/http_fundamentals.xhtml">Symfony and HTTP Fundamentals</a></li>
</ul>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>