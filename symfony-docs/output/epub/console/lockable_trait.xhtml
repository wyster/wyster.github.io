<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Prevent Running the Same Console Command Multiple Times</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="prevent-running-the-same-console-command-multiple-times">
<h1>Prevent Running the Same Console Command Multiple Times</h1>
<p>You can use <a class="reference external" href="https://en.wikipedia.org/wiki/Lock_(computer_science)">locks</a><span class="link-target"> [https://en.wikipedia.org/wiki/Lock_(computer_science)]</span> to prevent the same command from running multiple times on
the same server. The <a class="reference internal" href="../components/lock.xhtml"><span class="doc">Lock component</span></a> provides multiple
classes to create locks based on the filesystem (<a class="reference internal" href="../components/lock.xhtml#lock-store-flock"><span class="std std-ref">FlockStore</span></a>),
shared memory (<a class="reference internal" href="../components/lock.xhtml#lock-store-semaphore"><span class="std std-ref">SemaphoreStore</span></a>) and even databases
and Redis servers.</p>
<p>In addition, the Console component provides a PHP trait called <code class="docutils literal notranslate"><span class="pre">LockableTrait</span></code>
that adds two convenient methods to lock and release commands:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Command\Command</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Command\LockableTrait</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Input\InputInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Output\OutputInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">UpdateContentsCommand</span> <span class="k">extends</span> <span class="nx">Command</span>
<span class="p">{</span>
    <span class="k">use</span> <span class="nx">LockableTrait</span><span class="p">;</span>

    <span class="c1">// ...</span>

    <span class="k">protected</span> <span class="k">function</span> <span class="nf">execute</span><span class="p">(</span><span class="nx">InputInterface</span> <span class="nv">$input</span><span class="p">,</span> <span class="nx">OutputInterface</span> <span class="nv">$output</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">lock</span><span class="p">())</span> <span class="p">{</span>
            <span class="nv">$output</span><span class="o">-&gt;</span><span class="na">writeln</span><span class="p">(</span><span class="s1">&#39;The command is already running in another process.&#39;</span><span class="p">);</span>

            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// If you prefer to wait until the lock is released, use this:</span>
        <span class="c1">// $this-&gt;lock(null, true);</span>

        <span class="c1">// ...</span>

        <span class="c1">// if not released explicitly, Symfony releases the lock</span>
        <span class="c1">// automatically when the execution of the command ends</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">release</span><span class="p">();</span>

        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>