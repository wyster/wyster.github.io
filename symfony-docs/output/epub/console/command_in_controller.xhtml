<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Call a Command from a Controller</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-call-a-command-from-a-controller">
<span id="index-0"></span><h1>How to Call a Command from a Controller</h1>
<p>The <a class="reference internal" href="../components/console.xhtml"><span class="doc">Console component documentation</span></a> covers how to
create a console command. This article covers how to use a console command
directly from your controller.</p>
<p>You may have the need to call some function that is only available in a console
command. Usually, you should refactor the command and move some logic into a
service that can be reused in the controller. However, when the command is part
of a third-party library, you donâ€™t want to modify or duplicate their code.
Instead, you can run the command directly from the controller.</p>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>In comparison with a direct call from the console, calling a command from
a controller has a slight performance impact because of the request stack
overhead.</p>
</div>
<p>Imagine you want to send spooled Swift Mailer messages by
<a class="reference internal" href="../email.xhtml"><span class="doc">using the swiftmailer:spool:send command</span></a>.
Run this command from inside your controller via:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/SpoolController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Console\Application</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Bundle\FrameworkBundle\Controller\AbstractController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Input\ArrayInput</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Output\BufferedOutput</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\KernelInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">SpoolController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">sendSpool</span><span class="p">(</span><span class="nv">$messages</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="nx">KernelInterface</span> <span class="nv">$kernel</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$application</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Application</span><span class="p">(</span><span class="nv">$kernel</span><span class="p">);</span>
        <span class="nv">$application</span><span class="o">-&gt;</span><span class="na">setAutoExit</span><span class="p">(</span><span class="k">false</span><span class="p">);</span>

        <span class="nv">$input</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ArrayInput</span><span class="p">([</span>
            <span class="s1">&#39;command&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;swiftmailer:spool:send&#39;</span><span class="p">,</span>
            <span class="c1">// (optional) define the value of command arguments</span>
            <span class="s1">&#39;fooArgument&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;barValue&#39;</span><span class="p">,</span>
            <span class="c1">// (optional) pass options to the command</span>
            <span class="s1">&#39;--message-limit&#39;</span> <span class="o">=&gt;</span> <span class="nv">$messages</span><span class="p">,</span>
        <span class="p">]);</span>

        <span class="c1">// You can use NullOutput() if you don&#39;t need the output</span>
        <span class="nv">$output</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BufferedOutput</span><span class="p">();</span>
        <span class="nv">$application</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">(</span><span class="nv">$input</span><span class="p">,</span> <span class="nv">$output</span><span class="p">);</span>

        <span class="c1">// return the output, don&#39;t use if you used NullOutput()</span>
        <span class="nv">$content</span> <span class="o">=</span> <span class="nv">$output</span><span class="o">-&gt;</span><span class="na">fetch</span><span class="p">();</span>

        <span class="c1">// return new Response(&quot;&quot;), if you used NullOutput()</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">(</span><span class="nv">$content</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="section" id="showing-colorized-command-output">
<h2>Showing Colorized Command Output</h2>
<p>By telling the <code class="docutils literal notranslate"><span class="pre">BufferedOutput</span></code> it is decorated via the second parameter,
it will return the Ansi color-coded content. The <a class="reference external" href="https://github.com/sensiolabs/ansi-to-html">SensioLabs AnsiToHtml converter</a><span class="link-target"> [https://github.com/sensiolabs/ansi-to-html]</span>
can be used to convert this to colorful HTML.</p>
<p>First, require the package:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require sensiolabs/ansi-to-html
</pre></div>
</td></tr></table></div>
<p>Now, use it in your controller:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// src/Controller/SpoolController.php</span>
<span class="k">namespace</span> <span class="nx">App\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">SensioLabs\AnsiConverter\AnsiToHtmlConverter</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Output\BufferedOutput</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Output\OutputInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="k">class</span> <span class="nc">SpoolController</span> <span class="k">extends</span> <span class="nx">AbstractController</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">sendSpool</span><span class="p">(</span><span class="nv">$messages</span> <span class="o">=</span> <span class="mi">10</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
        <span class="nv">$output</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BufferedOutput</span><span class="p">(</span>
            <span class="nx">OutputInterface</span><span class="o">::</span><span class="na">VERBOSITY_NORMAL</span><span class="p">,</span>
            <span class="k">true</span> <span class="c1">// true for decorated</span>
        <span class="p">);</span>
        <span class="c1">// ...</span>

        <span class="c1">// return the output</span>
        <span class="nv">$converter</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AnsiToHtmlConverter</span><span class="p">();</span>
        <span class="nv">$content</span> <span class="o">=</span> <span class="nv">$output</span><span class="o">-&gt;</span><span class="na">fetch</span><span class="p">();</span>

        <span class="k">return</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">(</span><span class="nv">$converter</span><span class="o">-&gt;</span><span class="na">convert</span><span class="p">(</span><span class="nv">$content</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The <code class="docutils literal notranslate"><span class="pre">AnsiToHtmlConverter</span></code> can also be registered <a class="reference external" href="https://github.com/sensiolabs/ansi-to-html#twig-integration">as a Twig Extension</a><span class="link-target"> [https://github.com/sensiolabs/ansi-to-html#twig-integration]</span>,
and supports optional themes.</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>