<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Define Commands as Services</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-define-commands-as-services">
<span id="index-0"></span><h1>How to Define Commands as Services</h1>
<p>If you’re using the <a class="reference internal" href="../service_container.xhtml#service-container-services-load-example"><span class="std std-ref">default services.yaml configuration</span></a>,
your command classes are already registered as services. Great! This is the
recommended setup.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>You can also manually register your command as a service by configuring the service
and <a class="reference internal" href="../service_container/tags.xhtml"><span class="doc">tagging it</span></a> with <code class="docutils literal notranslate"><span class="pre">console.command</span></code>.</p>
</div>
<p>For example, suppose you want to log something from within your command:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">namespace</span> <span class="nx">App\Command</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Psr\Log\LoggerInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Command\Command</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Input\InputInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Output\OutputInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">SunshineCommand</span> <span class="k">extends</span> <span class="nx">Command</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="k">static</span> <span class="nv">$defaultName</span> <span class="o">=</span> <span class="s1">&#39;app:sunshine&#39;</span><span class="p">;</span>
    <span class="k">private</span> <span class="nv">$logger</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nx">LoggerInterface</span> <span class="nv">$logger</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">logger</span> <span class="o">=</span> <span class="nv">$logger</span><span class="p">;</span>

        <span class="c1">// you *must* call the parent constructor</span>
        <span class="k">parent</span><span class="o">::</span><span class="na">__construct</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">protected</span> <span class="k">function</span> <span class="nf">configure</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$this</span>
            <span class="o">-&gt;</span><span class="na">setDescription</span><span class="p">(</span><span class="s1">&#39;Good morning!&#39;</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">protected</span> <span class="k">function</span> <span class="nf">execute</span><span class="p">(</span><span class="nx">InputInterface</span> <span class="nv">$input</span><span class="p">,</span> <span class="nx">OutputInterface</span> <span class="nv">$output</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">logger</span><span class="o">-&gt;</span><span class="na">info</span><span class="p">(</span><span class="s1">&#39;Waking up the sun&#39;</span><span class="p">);</span>
        <span class="c1">// ...</span>

        <span class="k">return</span> <span class="nx">Command</span><span class="o">::</span><span class="na">SUCCESS</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>If you’re using the <a class="reference internal" href="../service_container.xhtml#service-container-services-load-example"><span class="std std-ref">default services.yaml configuration</span></a>,
the command class will automatically be registered as a service and passed the <code class="docutils literal notranslate"><span class="pre">$logger</span></code>
argument (thanks to autowiring). In other words, you only need to create this
class and everything works automatically! You can call the <code class="docutils literal notranslate"><span class="pre">app:sunshine</span></code>
command and start logging.</p>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>You <em>do</em> have access to services in <code class="docutils literal notranslate"><span class="pre">configure()</span></code>. However, if your command is
not <a class="reference internal" href="#console-command-service-lazy-loading"><span class="std std-ref">lazy</span></a>, try to avoid doing any
work (e.g. making database queries), as that code will be run, even if you’re using
the console to execute a different command.</p>
</div>
<div class="section" id="lazy-loading">
<span id="console-command-service-lazy-loading"></span><h2>Lazy Loading</h2>
<p>To make your command lazily loaded, either define its <code class="docutils literal notranslate"><span class="pre">$defaultName</span></code> static property:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">SunshineCommand</span> <span class="k">extends</span> <span class="nx">Command</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="k">static</span> <span class="nv">$defaultName</span> <span class="o">=</span> <span class="s1">&#39;app:sunshine&#39;</span><span class="p">;</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Or set the <code class="docutils literal notranslate"><span class="pre">command</span></code> attribute on the <code class="docutils literal notranslate"><span class="pre">console.command</span></code> tag in your service definition:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="c1"># ...</span>

    <span class="l l-Scalar l-Scalar-Plain">App\Command\SunshineCommand</span><span class="p p-Indicator">:</span>
        <span class="l l-Scalar l-Scalar-Plain">tags</span><span class="p p-Indicator">:</span>
            <span class="p p-Indicator">-</span> <span class="p p-Indicator">{</span> <span class="nv">name</span><span class="p p-Indicator">:</span> <span class="s">&#39;console.command&#39;</span><span class="p p-Indicator">,</span> <span class="nv">command</span><span class="p p-Indicator">:</span> <span class="s">&#39;app:sunshine&#39;</span> <span class="p p-Indicator">}</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="c">&lt;!-- ... --&gt;</span>

        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;App\Command\SunshineCommand&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;tag</span> <span class="na">name=</span><span class="s">&quot;console.command&quot;</span> <span class="na">command=</span><span class="s">&quot;app:sunshine&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/service&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services.php</span>
<span class="k">use</span> <span class="nx">App\Command\SunshineCommand</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">register</span><span class="p">(</span><span class="nx">SunshineCommand</span><span class="o">::</span><span class="na">class</span><span class="p">)</span>
    <span class="o">-&gt;</span><span class="na">addTag</span><span class="p">(</span><span class="s1">&#39;console.command&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;command&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;app:sunshine&#39;</span><span class="p">])</span>
<span class="p">;</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If the command defines aliases (using the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Command/Command.php" title="Symfony\Component\Console\Command\Command::getAliases()"><span class="pre">getAliases()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Command/Command.php]</span></span></code> method)
you must add one <code class="docutils literal notranslate"><span class="pre">console.command</span></code> tag per alias.</p>
</div>
<p>That’s it. One way or another, the <code class="docutils literal notranslate"><span class="pre">SunshineCommand</span></code> will be instantiated
only when the <code class="docutils literal notranslate"><span class="pre">app:sunshine</span></code> command is actually called.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>You don’t need to call <code class="docutils literal notranslate"><span class="pre">setName()</span></code> for configuring the command when it is lazy.</p>
</div>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>Calling the <code class="docutils literal notranslate"><span class="pre">list</span></code> command will instantiate all commands, including lazy commands.</p>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>