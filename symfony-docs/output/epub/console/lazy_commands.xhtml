<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>How to Make Commands Lazily Loaded</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="how-to-make-commands-lazily-loaded">
<h1>How to Make Commands Lazily Loaded</h1>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If you are using the Symfony full-stack framework, you are probably looking for
details about <a class="reference internal" href="commands_as_services.xhtml#console-command-service-lazy-loading"><span class="std std-ref">creating lazy commands</span></a></p>
</div>
<p>The traditional way of adding commands to your application is to use
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Application.php" title="Symfony\Component\Console\Application::add()"><span class="pre">add()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Application.php]</span></span></code>, which expects a
<code class="docutils literal notranslate"><span class="pre">Command</span></code> instance as an argument.</p>
<p>In order to lazy-load commands, you need to register an intermediate loader
which will be responsible for returning <code class="docutils literal notranslate"><span class="pre">Command</span></code> instances:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">App\Command\HeavyCommand</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Application</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\CommandLoader\FactoryCommandLoader</span><span class="p">;</span>

<span class="nv">$commandLoader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FactoryCommandLoader</span><span class="p">([</span>
    <span class="s1">&#39;app:heavy&#39;</span> <span class="o">=&gt;</span> <span class="k">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="k">new</span> <span class="nx">HeavyCommand</span><span class="p">();</span> <span class="p">},</span>
<span class="p">]);</span>

<span class="nv">$application</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Application</span><span class="p">();</span>
<span class="nv">$application</span><span class="o">-&gt;</span><span class="na">setCommandLoader</span><span class="p">(</span><span class="nv">$commandLoader</span><span class="p">);</span>
<span class="nv">$application</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span>
</pre></div>
</div>
<p>This way, the <code class="docutils literal notranslate"><span class="pre">HeavyCommand</span></code> instance will be created only when the <code class="docutils literal notranslate"><span class="pre">app:heavy</span></code>
command is actually called.</p>
<p>This example makes use of the built-in
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/CommandLoader/FactoryCommandLoader.php" title="Symfony\Component\Console\CommandLoader\FactoryCommandLoader"><span class="pre">FactoryCommandLoader</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/CommandLoader/FactoryCommandLoader.php]</span></span></code> class,
but the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Application.php" title="Symfony\Component\Console\Application::setCommandLoader()"><span class="pre">setCommandLoader()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Application.php]</span></span></code>
method accepts any
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/CommandLoader/CommandLoaderInterface.php" title="Symfony\Component\Console\CommandLoader\CommandLoaderInterface"><span class="pre">CommandLoaderInterface</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/CommandLoader/CommandLoaderInterface.php]</span></span></code>
instance so you can use your own implementation.</p>
<div class="section" id="built-in-command-loaders">
<h2>Built-in Command Loaders</h2>
<div class="section" id="factorycommandloader">
<h3><code class="docutils literal notranslate"><span class="pre">FactoryCommandLoader</span></code></h3>
<p>The <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/CommandLoader/FactoryCommandLoader.php" title="Symfony\Component\Console\CommandLoader\FactoryCommandLoader"><span class="pre">FactoryCommandLoader</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/CommandLoader/FactoryCommandLoader.php]</span></span></code>
class provides a way of getting commands lazily loaded as it takes an
array of <code class="docutils literal notranslate"><span class="pre">Command</span></code> factories as its only constructor argument:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Console\CommandLoader\FactoryCommandLoader</span><span class="p">;</span>

<span class="nv">$commandLoader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FactoryCommandLoader</span><span class="p">([</span>
    <span class="s1">&#39;app:foo&#39;</span> <span class="o">=&gt;</span> <span class="k">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="k">new</span> <span class="nx">FooCommand</span><span class="p">();</span> <span class="p">},</span>
    <span class="s1">&#39;app:bar&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="nx">BarCommand</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="s1">&#39;create&#39;</span><span class="p">],</span>
<span class="p">]);</span>
</pre></div>
</div>
<p>Factories can be any PHP callable and will be executed each time
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/CommandLoader/FactoryCommandLoader.php" title="Symfony\Component\Console\CommandLoader\FactoryCommandLoader::get()"><span class="pre">get()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/CommandLoader/FactoryCommandLoader.php]</span></span></code>
is called.</p>
</div>
<div class="section" id="containercommandloader">
<h3><code class="docutils literal notranslate"><span class="pre">ContainerCommandLoader</span></code></h3>
<p>The <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/CommandLoader/ContainerCommandLoader.php" title="Symfony\Component\Console\CommandLoader\ContainerCommandLoader"><span class="pre">ContainerCommandLoader</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/CommandLoader/ContainerCommandLoader.php]</span></span></code>
class can be used to load commands from a PSR-11 container. As such, its
constructor takes a PSR-11 <code class="docutils literal notranslate"><span class="pre">ContainerInterface</span></code> implementation as its first
argument and a command map as its last argument. The command map must be an array
with command names as keys and service identifiers as values:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Console\CommandLoader\ContainerCommandLoader</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\DependencyInjection\ContainerBuilder</span><span class="p">;</span>

<span class="nv">$containerBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ContainerBuilder</span><span class="p">();</span>
<span class="nv">$containerBuilder</span><span class="o">-&gt;</span><span class="na">register</span><span class="p">(</span><span class="nx">FooCommand</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="nx">FooCommand</span><span class="o">::</span><span class="na">class</span><span class="p">);</span>
<span class="nv">$containerBuilder</span><span class="o">-&gt;</span><span class="na">compile</span><span class="p">();</span>

<span class="nv">$commandLoader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ContainerCommandLoader</span><span class="p">(</span><span class="nv">$containerBuilder</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;app:foo&#39;</span> <span class="o">=&gt;</span> <span class="nx">FooCommand</span><span class="o">::</span><span class="na">class</span><span class="p">,</span>
<span class="p">]);</span>
</pre></div>
</div>
<p>Like this, executing the <code class="docutils literal notranslate"><span class="pre">app:foo</span></code> command will load the <code class="docutils literal notranslate"><span class="pre">FooCommand</span></code> service
by calling <code class="docutils literal notranslate"><span class="pre">$containerBuilder-&gt;get(FooCommand::class)</span></code>.</p>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>