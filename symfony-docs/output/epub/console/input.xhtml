<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Console Input (Arguments &amp; Options)</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="console-input-arguments-options">
<h1>Console Input (Arguments &amp; Options)</h1>
<p>The most interesting part of the commands are the arguments and options that
you can make available. These arguments and options allow you to pass dynamic
information from the terminal to the command.</p>
<div class="section" id="using-command-arguments">
<h2>Using Command Arguments</h2>
<p>Arguments are the strings - separated by spaces - that
come after the command name itself. They are ordered, and can be optional
or required. For example, to add an optional <code class="docutils literal notranslate"><span class="pre">last_name</span></code> argument to the command
and make the <code class="docutils literal notranslate"><span class="pre">name</span></code> argument required:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Command\Command</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Input\InputArgument</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">GreetCommand</span> <span class="k">extends</span> <span class="nx">Command</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="k">protected</span> <span class="k">function</span> <span class="nf">configure</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$this</span>
            <span class="c1">// ...</span>
            <span class="o">-&gt;</span><span class="na">addArgument</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="nx">InputArgument</span><span class="o">::</span><span class="na">REQUIRED</span><span class="p">,</span> <span class="s1">&#39;Who do you want to greet?&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">addArgument</span><span class="p">(</span><span class="s1">&#39;last_name&#39;</span><span class="p">,</span> <span class="nx">InputArgument</span><span class="o">::</span><span class="na">OPTIONAL</span><span class="p">,</span> <span class="s1">&#39;Your last name?&#39;</span><span class="p">)</span>
        <span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>You now have access to a <code class="docutils literal notranslate"><span class="pre">last_name</span></code> argument in your command:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Command\Command</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Input\InputInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Output\OutputInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">GreetCommand</span> <span class="k">extends</span> <span class="nx">Command</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="k">protected</span> <span class="k">function</span> <span class="nf">execute</span><span class="p">(</span><span class="nx">InputInterface</span> <span class="nv">$input</span><span class="p">,</span> <span class="nx">OutputInterface</span> <span class="nv">$output</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$text</span> <span class="o">=</span> <span class="s1">&#39;Hi &#39;</span><span class="o">.</span><span class="nv">$input</span><span class="o">-&gt;</span><span class="na">getArgument</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">);</span>

        <span class="nv">$lastName</span> <span class="o">=</span> <span class="nv">$input</span><span class="o">-&gt;</span><span class="na">getArgument</span><span class="p">(</span><span class="s1">&#39;last_name&#39;</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$lastName</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$text</span> <span class="o">.=</span> <span class="s1">&#39; &#39;</span><span class="o">.</span><span class="nv">$lastName</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nv">$output</span><span class="o">-&gt;</span><span class="na">writeln</span><span class="p">(</span><span class="nv">$text</span><span class="o">.</span><span class="s1">&#39;!&#39;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The command can now be used in either of the following ways:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console app:greet Fabien
<span class="go">Hi Fabien!</span>

<span class="gp">$</span> php bin/console app:greet Fabien Potencier
<span class="go">Hi Fabien Potencier!</span>
</pre></div>
</td></tr></table></div>
<p>It is also possible to let an argument take a list of values (imagine you want
to greet all your friends). Only the last argument can be a list:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$this</span>
    <span class="c1">// ...</span>
    <span class="o">-&gt;</span><span class="na">addArgument</span><span class="p">(</span>
        <span class="s1">&#39;names&#39;</span><span class="p">,</span>
        <span class="nx">InputArgument</span><span class="o">::</span><span class="na">IS_ARRAY</span><span class="p">,</span>
        <span class="s1">&#39;Who do you want to greet (separate multiple names with a space)?&#39;</span>
    <span class="p">)</span>
<span class="p">;</span>
</pre></div>
</div>
<p>To use this, specify as many names as you want:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console app:greet Fabien Ryan Bernhard
</pre></div>
</td></tr></table></div>
<p>You can access the <code class="docutils literal notranslate"><span class="pre">names</span></code> argument as an array:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$names</span> <span class="o">=</span> <span class="nv">$input</span><span class="o">-&gt;</span><span class="na">getArgument</span><span class="p">(</span><span class="s1">&#39;names&#39;</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="nb">count</span><span class="p">(</span><span class="nv">$names</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$text</span> <span class="o">.=</span> <span class="s1">&#39; &#39;</span><span class="o">.</span><span class="nb">implode</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">,</span> <span class="nv">$names</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>There are three argument variants you can use:</p>
<dl class="simple">
<dt><code class="docutils literal notranslate"><span class="pre">InputArgument::REQUIRED</span></code></dt>
<dd><p>The argument is mandatory. The command doesn’t run if the argument isn’t
provided;</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">InputArgument::OPTIONAL</span></code></dt>
<dd><p>The argument is optional and therefore can be omitted. This is the default
behavior of arguments;</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">InputArgument::IS_ARRAY</span></code></dt>
<dd><p>The argument can contain any number of values. For that reason, it must be
used at the end of the argument list.</p>
</dd>
</dl>
<p>You can combine <code class="docutils literal notranslate"><span class="pre">IS_ARRAY</span></code> with <code class="docutils literal notranslate"><span class="pre">REQUIRED</span></code> or <code class="docutils literal notranslate"><span class="pre">OPTIONAL</span></code> like this:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$this</span>
    <span class="c1">// ...</span>
    <span class="o">-&gt;</span><span class="na">addArgument</span><span class="p">(</span>
        <span class="s1">&#39;names&#39;</span><span class="p">,</span>
        <span class="nx">InputArgument</span><span class="o">::</span><span class="na">IS_ARRAY</span> <span class="o">|</span> <span class="nx">InputArgument</span><span class="o">::</span><span class="na">REQUIRED</span><span class="p">,</span>
        <span class="s1">&#39;Who do you want to greet (separate multiple names with a space)?&#39;</span>
    <span class="p">)</span>
<span class="p">;</span>
</pre></div>
</div>
</div>
<div class="section" id="using-command-options">
<h2>Using Command Options</h2>
<p>Unlike arguments, options are not ordered (meaning you can specify them in any
order) and are specified with two dashes (e.g. <code class="docutils literal notranslate"><span class="pre">--yell</span></code>). Options are
<em>always</em> optional, and can be setup to accept a value (e.g. <code class="docutils literal notranslate"><span class="pre">--dir=src</span></code>) or
as a boolean flag without a value (e.g.  <code class="docutils literal notranslate"><span class="pre">--yell</span></code>).</p>
<p>For example, add a new option to the command that can be used to specify
how many times in a row the message should be printed:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Input\InputOption</span><span class="p">;</span>

<span class="nv">$this</span>
    <span class="c1">// ...</span>
    <span class="o">-&gt;</span><span class="na">addOption</span><span class="p">(</span>
        <span class="s1">&#39;iterations&#39;</span><span class="p">,</span>
        <span class="k">null</span><span class="p">,</span>
        <span class="nx">InputOption</span><span class="o">::</span><span class="na">VALUE_REQUIRED</span><span class="p">,</span>
        <span class="s1">&#39;How many times should the message be printed?&#39;</span><span class="p">,</span>
        <span class="mi">1</span>
    <span class="p">)</span>
<span class="p">;</span>
</pre></div>
</div>
<p>Next, use this in the command to print the message multiple times:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$input</span><span class="o">-&gt;</span><span class="na">getOption</span><span class="p">(</span><span class="s1">&#39;iterations&#39;</span><span class="p">);</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$output</span><span class="o">-&gt;</span><span class="na">writeln</span><span class="p">(</span><span class="nv">$text</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Now, when you run the command, you can optionally specify a <code class="docutils literal notranslate"><span class="pre">--iterations</span></code>
flag:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># no --iterations provided, the default (1) is used</span>
<span class="gp">$</span> php bin/console app:greet Fabien
<span class="go">Hi Fabien!</span>

<span class="gp">$</span> php bin/console app:greet Fabien --iterations<span class="o">=</span><span class="m">5</span>
<span class="go">Hi Fabien!</span>
<span class="go">Hi Fabien!</span>
<span class="go">Hi Fabien!</span>
<span class="go">Hi Fabien!</span>
<span class="go">Hi Fabien!</span>

<span class="c1"># the order of options isn&#39;t important</span>
<span class="gp">$</span> php bin/console app:greet Fabien --iterations<span class="o">=</span><span class="m">5</span> --yell
<span class="gp">$</span> php bin/console app:greet Fabien --yell --iterations<span class="o">=</span><span class="m">5</span>
<span class="gp">$</span> php bin/console app:greet --yell --iterations<span class="o">=</span><span class="m">5</span> Fabien
</pre></div>
</td></tr></table></div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>You can also declare a one-letter shortcut that you can call with a single
dash, like <code class="docutils literal notranslate"><span class="pre">-i</span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$this</span>
    <span class="c1">// ...</span>
    <span class="o">-&gt;</span><span class="na">addOption</span><span class="p">(</span>
        <span class="s1">&#39;iterations&#39;</span><span class="p">,</span>
        <span class="s1">&#39;i&#39;</span><span class="p">,</span>
        <span class="nx">InputOption</span><span class="o">::</span><span class="na">VALUE_REQUIRED</span><span class="p">,</span>
        <span class="s1">&#39;How many times should the message be printed?&#39;</span><span class="p">,</span>
        <span class="mi">1</span>
    <span class="p">)</span>
<span class="p">;</span>
</pre></div>
</div>
</div>
<p>Note that to comply with the <a class="reference external" href="http://docopt.org/">docopt standard</a><span class="link-target"> [http://docopt.org/]</span>, long options can specify their
values after a whitespace or an <code class="docutils literal notranslate"><span class="pre">=</span></code> sign (e.g. <code class="docutils literal notranslate"><span class="pre">--iterations</span> <span class="pre">5</span></code> or
<code class="docutils literal notranslate"><span class="pre">--iterations=5</span></code>), but short options can only use whitespaces or no
separation at all (e.g. <code class="docutils literal notranslate"><span class="pre">-i</span> <span class="pre">5</span></code> or <code class="docutils literal notranslate"><span class="pre">-i5</span></code>).</p>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>While it is possible to separate an option from its value with a whitespace,
using this form leads to an ambiguity should the option appear before the
command name. For example, <code class="docutils literal notranslate"><span class="pre">php</span> <span class="pre">bin/console</span> <span class="pre">--iterations</span> <span class="pre">5</span> <span class="pre">app:greet</span> <span class="pre">Fabien</span></code>
is ambiguous; Symfony would interpret <code class="docutils literal notranslate"><span class="pre">5</span></code> as the command name. To avoid
this situation, always place options after the command name, or avoid using
a space to separate the option name from its value.</p>
</div>
<p>There are four option variants you can use:</p>
<dl class="simple">
<dt><code class="docutils literal notranslate"><span class="pre">InputOption::VALUE_IS_ARRAY</span></code></dt>
<dd><p>This option accepts multiple values (e.g. <code class="docutils literal notranslate"><span class="pre">--dir=/foo</span> <span class="pre">--dir=/bar</span></code>);</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">InputOption::VALUE_NONE</span></code></dt>
<dd><p>Do not accept input for this option (e.g. <code class="docutils literal notranslate"><span class="pre">--yell</span></code>). This is the default
behavior of options;</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">InputOption::VALUE_REQUIRED</span></code></dt>
<dd><p>This value is required (e.g. <code class="docutils literal notranslate"><span class="pre">--iterations=5</span></code> or <code class="docutils literal notranslate"><span class="pre">-i5</span></code>), the option
itself is still optional;</p>
</dd>
<dt><code class="docutils literal notranslate"><span class="pre">InputOption::VALUE_OPTIONAL</span></code></dt>
<dd><p>This option may or may not have a value (e.g. <code class="docutils literal notranslate"><span class="pre">--yell</span></code> or
<code class="docutils literal notranslate"><span class="pre">--yell=loud</span></code>).</p>
</dd>
</dl>
<p>You can combine <code class="docutils literal notranslate"><span class="pre">VALUE_IS_ARRAY</span></code> with <code class="docutils literal notranslate"><span class="pre">VALUE_REQUIRED</span></code> or
<code class="docutils literal notranslate"><span class="pre">VALUE_OPTIONAL</span></code> like this:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$this</span>
    <span class="c1">// ...</span>
    <span class="o">-&gt;</span><span class="na">addOption</span><span class="p">(</span>
        <span class="s1">&#39;colors&#39;</span><span class="p">,</span>
        <span class="k">null</span><span class="p">,</span>
        <span class="nx">InputOption</span><span class="o">::</span><span class="na">VALUE_REQUIRED</span> <span class="o">|</span> <span class="nx">InputOption</span><span class="o">::</span><span class="na">VALUE_IS_ARRAY</span><span class="p">,</span>
        <span class="s1">&#39;Which colors do you like?&#39;</span><span class="p">,</span>
        <span class="p">[</span><span class="s1">&#39;blue&#39;</span><span class="p">,</span> <span class="s1">&#39;red&#39;</span><span class="p">]</span>
    <span class="p">)</span>
<span class="p">;</span>
</pre></div>
</div>
</div>
<div class="section" id="options-with-optional-arguments">
<h2>Options with optional arguments</h2>
<p>There is nothing forbidding you to create a command with an option that
optionally accepts a value, but it’s a bit tricky. Consider this example:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Input\InputOption</span><span class="p">;</span>

<span class="nv">$this</span>
    <span class="c1">// ...</span>
    <span class="o">-&gt;</span><span class="na">addOption</span><span class="p">(</span>
        <span class="s1">&#39;yell&#39;</span><span class="p">,</span>
        <span class="k">null</span><span class="p">,</span>
        <span class="nx">InputOption</span><span class="o">::</span><span class="na">VALUE_OPTIONAL</span><span class="p">,</span>
        <span class="s1">&#39;Should I yell while greeting?&#39;</span>
    <span class="p">)</span>
<span class="p">;</span>
</pre></div>
</div>
<p>This option can be used in 3 ways: <code class="docutils literal notranslate"><span class="pre">greet</span> <span class="pre">--yell</span></code>, <code class="docutils literal notranslate"><span class="pre">greet</span> <span class="pre">--yell=louder</span></code>,
and <code class="docutils literal notranslate"><span class="pre">greet</span></code>. However, it’s hard to distinguish between passing the option
without a value (<code class="docutils literal notranslate"><span class="pre">greet</span> <span class="pre">--yell</span></code>) and not passing the option (<code class="docutils literal notranslate"><span class="pre">greet</span></code>).</p>
<p>To solve this issue, you have to set the option’s default value to <code class="docutils literal notranslate"><span class="pre">false</span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ...</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Console\Input\InputOption</span><span class="p">;</span>

<span class="nv">$this</span>
    <span class="c1">// ...</span>
    <span class="o">-&gt;</span><span class="na">addOption</span><span class="p">(</span>
        <span class="s1">&#39;yell&#39;</span><span class="p">,</span>
        <span class="k">null</span><span class="p">,</span>
        <span class="nx">InputOption</span><span class="o">::</span><span class="na">VALUE_OPTIONAL</span><span class="p">,</span>
        <span class="s1">&#39;Should I yell while greeting?&#39;</span><span class="p">,</span>
        <span class="k">false</span> <span class="c1">// this is the new default value, instead of null</span>
    <span class="p">)</span>
<span class="p">;</span>
</pre></div>
</div>
<p>Now it’s possible to differentiate between not passing the option and not
passing any value for it:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$optionValue</span> <span class="o">=</span> <span class="nv">$input</span><span class="o">-&gt;</span><span class="na">getOption</span><span class="p">(</span><span class="s1">&#39;yell&#39;</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="k">false</span> <span class="o">===</span> <span class="nv">$optionValue</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// in this case, the option was not passed when running the command</span>
    <span class="nv">$yell</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
    <span class="nv">$yellLouder</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
<span class="p">}</span> <span class="k">elseif</span> <span class="p">(</span><span class="k">null</span> <span class="o">===</span> <span class="nv">$optionValue</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// in this case, the option was passed when running the command</span>
    <span class="c1">// but no value was given to it</span>
    <span class="nv">$yell</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
    <span class="nv">$yellLouder</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="c1">// in this case, the option was passed when running the command and</span>
    <span class="c1">// some specific value was given to it</span>
    <span class="nv">$yell</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;louder&#39;</span> <span class="o">===</span> <span class="nv">$optionValue</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$yellLouder</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nv">$yellLouder</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The above code can be simplified as follows because <code class="docutils literal notranslate"><span class="pre">false</span> <span class="pre">!==</span> <span class="pre">null</span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$optionValue</span> <span class="o">=</span> <span class="nv">$input</span><span class="o">-&gt;</span><span class="na">getOption</span><span class="p">(</span><span class="s1">&#39;yell&#39;</span><span class="p">);</span>
<span class="nv">$yell</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$optionValue</span> <span class="o">!==</span> <span class="k">false</span><span class="p">);</span>
<span class="nv">$yellLouder</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$optionValue</span> <span class="o">===</span> <span class="s1">&#39;louder&#39;</span><span class="p">);</span>
</pre></div>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>