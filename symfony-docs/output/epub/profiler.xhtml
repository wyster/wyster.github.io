<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Profiler</title>
    <link rel="stylesheet" href="_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="profiler">
<h1>Profiler</h1>
<p>The profiler is a powerful <strong>development tool</strong> that gives detailed information
about the execution of any request. <strong>Never</strong> enable the profiler in production
environments as it will lead to major security vulnerabilities in your project.</p>
<div class="section" id="installation">
<h2>Installation</h2>
<p>In applications using <a class="reference internal" href="setup.xhtml#symfony-flex"><span class="std std-ref">Symfony Flex</span></a>, run this command to
install the <code class="docutils literal notranslate"><span class="pre">profiler</span></code> <a class="reference internal" href="setup.xhtml#symfony-packs"><span class="std std-ref">Symfony pack</span></a> before using it:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require --dev symfony/profiler-pack
</pre></div>
</td></tr></table></div>
<p>Now, browse any page of your application in the development environment to let
the profiler collect information. Then, click on any element of the debug
toolbar injected at the bottom of your pages to open the web interface of the
Symfony Profiler, which will look like this:</p>
<img alt="_images/web-interface.png" class="with-browser align-center" src="_images/web-interface.png" />
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The debug toolbar is only injected into HTML responses. For other kinds of
contents (e.g. JSON responses in API requests) the profiler URL is available
in the <code class="docutils literal notranslate"><span class="pre">X-Debug-Token-Link</span></code> HTTP response header. Browse the <code class="docutils literal notranslate"><span class="pre">/_profiler</span></code>
URL to see all profiles.</p>
</div>
</div>
<div class="section" id="accessing-profiling-data-programmatically">
<h2>Accessing Profiling Data Programmatically</h2>
<p>Most of the times, the profiler information is accessed and analyzed using its
web-based interface. However, you can also retrieve profiling information
programmatically thanks to the methods provided by the <code class="docutils literal notranslate"><span class="pre">profiler</span></code> service.</p>
<p>When the response object is available, use the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Profiler/Profiler.php" title="Symfony\Component\HttpKernel\Profiler\Profiler::loadProfileFromResponse()"><span class="pre">loadProfileFromResponse()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Profiler/Profiler.php]</span></span></code>
method to access to its associated profile:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// ... $profiler is the &#39;profiler&#39; service</span>
<span class="nv">$profile</span> <span class="o">=</span> <span class="nv">$profiler</span><span class="o">-&gt;</span><span class="na">loadProfileFromResponse</span><span class="p">(</span><span class="nv">$response</span><span class="p">);</span>
</pre></div>
</div>
<p>When the profiler stores data about a request, it also associates a token with it;
this token is available in the <code class="docutils literal notranslate"><span class="pre">X-Debug-Token</span></code> HTTP header of the response.
Using this token, you can access the profile of any past response thanks to the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Profiler/Profiler.php" title="Symfony\Component\HttpKernel\Profiler\Profiler::loadProfile()"><span class="pre">loadProfile()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Profiler/Profiler.php]</span></span></code> method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$token</span> <span class="o">=</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">headers</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;X-Debug-Token&#39;</span><span class="p">);</span>
<span class="nv">$profile</span> <span class="o">=</span> <span class="nv">$profiler</span><span class="o">-&gt;</span><span class="na">loadProfile</span><span class="p">(</span><span class="nv">$token</span><span class="p">);</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>When the profiler is enabled but not the web debug toolbar, inspect the page
with your browser’s developer tools to get the value of the <code class="docutils literal notranslate"><span class="pre">X-Debug-Token</span></code>
HTTP header.</p>
</div>
<p>The <code class="docutils literal notranslate"><span class="pre">profiler</span></code> service also provides the
<code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Profiler/Profiler.php" title="Symfony\Component\HttpKernel\Profiler\Profiler::find()"><span class="pre">find()</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Profiler/Profiler.php]</span></span></code> method to
look for tokens based on some criteria:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// gets the latest 10 tokens</span>
<span class="nv">$tokens</span> <span class="o">=</span> <span class="nv">$profiler</span><span class="o">-&gt;</span><span class="na">find</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>

<span class="c1">// gets the latest 10 tokens for all URL containing /admin/</span>
<span class="nv">$tokens</span> <span class="o">=</span> <span class="nv">$profiler</span><span class="o">-&gt;</span><span class="na">find</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;/admin/&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>

<span class="c1">// gets the latest 10 tokens for local POST requests</span>
<span class="nv">$tokens</span> <span class="o">=</span> <span class="nv">$profiler</span><span class="o">-&gt;</span><span class="na">find</span><span class="p">(</span><span class="s1">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="s1">&#39;POST&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>

<span class="c1">// gets the latest 10 tokens for requests that happened between 2 and 4 days ago</span>
<span class="nv">$tokens</span> <span class="o">=</span> <span class="nv">$profiler</span><span class="o">-&gt;</span><span class="na">find</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;4 days ago&#39;</span><span class="p">,</span> <span class="s1">&#39;2 days ago&#39;</span><span class="p">);</span>
</pre></div>
</div>
</div>
<div class="section" id="data-collectors">
<h2>Data Collectors</h2>
<p>The profiler gets its information using some services called “data collectors”.
Symfony comes with several collectors that get information about the request,
the logger, the routing, the cache, etc.</p>
<p>Run this command to get the list of collectors actually enabled in your app:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> php bin/console debug:container --tag<span class="o">=</span>data_collector
</pre></div>
</td></tr></table></div>
<p>You can also <a class="reference internal" href="profiler/data_collector.xhtml"><span class="doc">create your own data collector</span></a> to
store any data generated by your app and display it in the debug toolbar and the
profiler web interface.</p>
</div>
<div class="section" id="timing-the-execution-of-the-application">
<span id="profiler-timing-execution"></span><h2>Timing the Execution of the Application</h2>
<p>If you want to measure the time some tasks take in your application, there’s no
need to create a custom data collector. Instead, use the built-in utilities to
<a class="reference internal" href="performance.xhtml#profiling-applications"><span class="std std-ref">profile Symfony applications</span></a>.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Consider using a professional profiler such as <a class="reference external" href="https://blackfire.io/docs/introduction?utm_source=symfony&amp;utm_medium=symfonycom_docs&amp;utm_campaign=profiler">Blackfire</a><span class="link-target"> [https://blackfire.io/docs/introduction?utm_source=symfony&amp;utm_medium=symfonycom_docs&amp;utm_campaign=profiler]</span> to measure and
analyze the execution of your application in detail.</p>
</div>
</div>
<div class="section" id="enabling-the-profiler-conditionally">
<h2>Enabling the Profiler Conditionally</h2>
<div class="admonition caution">
<p class="admonition-title">Caution</p>
<p>The possibility to use a matcher to enable the profiler conditionally was
removed in Symfony 4.0.</p>
</div>
<p>Symfony Profiler cannot be enabled/disabled conditionally using matchers, because
that feature was removed in Symfony 4.0. However, you can use the <code class="docutils literal notranslate"><span class="pre">enable()</span></code>
and <code class="docutils literal notranslate"><span class="pre">disable()</span></code> methods of the <code class="docutils literal notranslate"><a class="reference external" href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Profiler/Profiler.php" title="Symfony\Component\HttpKernel\Profiler\Profiler"><span class="pre">Profiler</span></a><span class="link-target"> <span class="pre">[https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Profiler/Profiler.php]</span></span></code>
class in your controllers to manage the profiler programmatically:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Profiler\Profiler</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="k">class</span> <span class="nc">DefaultController</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">someMethod</span><span class="p">(</span><span class="o">?</span><span class="nx">Profiler</span> <span class="nv">$profiler</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// $profiler won&#39;t be set if your environment doesn&#39;t have the profiler (like prod, by default)</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">null</span> <span class="o">!==</span> <span class="nv">$profiler</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// if it exists, disable the profiler for this particular controller action</span>
            <span class="nv">$profiler</span><span class="o">-&gt;</span><span class="na">disable</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>In order for the profiler to be injected into your controller you need to
create an alias pointing to the existing <code class="docutils literal notranslate"><span class="pre">profiler</span></code> service:</p>
<div class="configuration-block">
<ul class="simple">
<li><p><em>YAML</em><div class="highlight-yaml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># config/services_dev.yaml</span>
<span class="l l-Scalar l-Scalar-Plain">services</span><span class="p p-Indicator">:</span>
    <span class="l l-Scalar l-Scalar-Plain">Symfony\Component\HttpKernel\Profiler\Profiler</span><span class="p p-Indicator">:</span> <span class="s">&#39;@profiler&#39;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>XML</em><div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c">&lt;!-- config/services_dev.xml --&gt;</span>
<span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="nt">&lt;container</span> <span class="na">xmlns=</span><span class="s">&quot;http://symfony.com/schema/dic/services&quot;</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://symfony.com/schema/dic/services</span>
<span class="s">        https://symfony.com/schema/dic/services/services-1.0.xsd&quot;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;services&gt;</span>
        <span class="nt">&lt;service</span> <span class="na">id=</span><span class="s">&quot;Symfony\Component\HttpKernel\Profiler\Profiler&quot;</span> <span class="na">alias=</span><span class="s">&quot;profiler&quot;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
<span class="nt">&lt;/container&gt;</span>
</pre></div>
</td></tr></table></div>
</p></li>
<li><p><em>PHP</em><div class="highlight-php notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1">// config/services_dev.php</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Profiler\Profiler</span><span class="p">;</span>

<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">setAlias</span><span class="p">(</span><span class="nx">Profiler</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="s1">&#39;profiler&#39;</span><span class="p">);</span>
</pre></div>
</td></tr></table></div>
</p></li>
</ul>
</div>
</div>
<div class="section" id="updating-the-web-debug-toolbar-after-ajax-requests">
<h2>Updating the Web Debug Toolbar After AJAX Requests</h2>
<p><a class="reference external" href="https://en.wikipedia.org/wiki/Single-page_application">Single-page applications</a><span class="link-target"> [https://en.wikipedia.org/wiki/Single-page_application]</span> (SPA) are web applications that interact with the
user by dynamically rewriting the current page rather than loading entire new
pages from a server.</p>
<p>By default, the debug toolbar displays the information of the initial page load
and doesn’t refresh after each AJAX request. However, you can set the
<code class="docutils literal notranslate"><span class="pre">Symfony-Debug-Toolbar-Replace</span></code> header to a value of <code class="docutils literal notranslate"><span class="pre">1</span></code> in the response to
the AJAX request to force the refresh of the toolbar:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$response</span><span class="o">-&gt;</span><span class="na">headers</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="s1">&#39;Symfony-Debug-Toolbar-Replace&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</pre></div>
</div>
<p>Ideally this header should only be set during development and not for
production. To do that, create an <a class="reference internal" href="event_dispatcher.xhtml"><span class="doc">event subscriber</span></a>
and listen to the <a class="reference internal" href="components/http_kernel.xhtml#component-http-kernel-kernel-response"><span class="std std-ref">kernel.response</span></a>
event:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Event\ResponseEvent</span><span class="p">;</span>

<span class="c1">// ...</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">onKernelResponse</span><span class="p">(</span><span class="nx">ResponseEvent</span> <span class="nv">$event</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getKernel</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">isDebug</span><span class="p">())</span> <span class="p">{</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nv">$request</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getRequest</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$request</span><span class="o">-&gt;</span><span class="na">isXmlHttpRequest</span><span class="p">())</span> <span class="p">{</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nv">$response</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getResponse</span><span class="p">();</span>
    <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">headers</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="s1">&#39;Symfony-Debug-Toolbar-Replace&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="toctree-wrapper compound">
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>