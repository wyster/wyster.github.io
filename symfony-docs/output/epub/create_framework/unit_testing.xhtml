<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Unit Testing</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="unit-testing">
<h1>Unit Testing</h1>
<p>You might have noticed some subtle but nonetheless important bugs in the
framework we built in the previous chapter. When creating a framework, you
must be sure that it behaves as advertised. If not, all the applications based
on it will exhibit the same bugs. The good news is that whenever you fix a
bug, you are fixing a bunch of applications too.</p>
<p>Today’s mission is to write unit tests for the framework we have created by
using <a class="reference external" href="https://phpunit.de/manual/current/en/index.html">PHPUnit</a><span class="link-target"> [https://phpunit.de/manual/current/en/index.html]</span>. Create a PHPUnit configuration file in
<code class="docutils literal notranslate"><span class="pre">example.com/phpunit.xml.dist</span></code>:</p>
<div class="highlight-xml notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="nt">&lt;phpunit</span>
    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    <span class="na">xsi:noNamespaceSchemaLocation=</span><span class="s">&quot;https://schema.phpunit.de/5.1/phpunit.xsd&quot;</span>
    <span class="na">backupGlobals=</span><span class="s">&quot;false&quot;</span>
    <span class="na">colors=</span><span class="s">&quot;true&quot;</span>
    <span class="na">bootstrap=</span><span class="s">&quot;vendor/autoload.php&quot;</span>
<span class="nt">&gt;</span>
    <span class="nt">&lt;testsuites&gt;</span>
        <span class="nt">&lt;testsuite</span> <span class="na">name=</span><span class="s">&quot;Test Suite&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;directory&gt;</span>./tests<span class="nt">&lt;/directory&gt;</span>
        <span class="nt">&lt;/testsuite&gt;</span>
    <span class="nt">&lt;/testsuites&gt;</span>

    <span class="nt">&lt;filter&gt;</span>
        <span class="nt">&lt;whitelist</span> <span class="na">processUncoveredFilesFromWhitelist=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;directory</span> <span class="na">suffix=</span><span class="s">&quot;.php&quot;</span><span class="nt">&gt;</span>./src<span class="nt">&lt;/directory&gt;</span>
        <span class="nt">&lt;/whitelist&gt;</span>
    <span class="nt">&lt;/filter&gt;</span>
<span class="nt">&lt;/phpunit&gt;</span>
</pre></div>
</td></tr></table></div>
<p>This configuration defines sensible defaults for most PHPUnit settings; more
interesting, the autoloader is used to bootstrap the tests, and tests will be
stored under the <code class="docutils literal notranslate"><span class="pre">example.com/tests/</span></code> directory.</p>
<p>Now, let’s write a test for “not found” resources. To avoid the creation of
all dependencies when writing tests and to really just unit-test what we want,
we are going to use <a class="reference external" href="https://phpunit.de/manual/current/en/test-doubles.html">test doubles</a><span class="link-target"> [https://phpunit.de/manual/current/en/test-doubles.html]</span>. Test doubles are easier to create when we
rely on interfaces instead of concrete classes. Fortunately, Symfony provides
such interfaces for core objects like the URL matcher and the controller
resolver. Modify the framework to make use of them:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// example.com/src/Simplex/Framework.php</span>
<span class="k">namespace</span> <span class="nx">Simplex</span><span class="p">;</span>

<span class="c1">// ...</span>

<span class="k">use</span> <span class="nx">Calendar\Controller\LeapYearController</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Controller\ArgumentResolverInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Controller\ControllerResolverInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Matcher\UrlMatcherInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Framework</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="nv">$matcher</span><span class="p">;</span>
    <span class="k">protected</span> <span class="nv">$controllerResolver</span><span class="p">;</span>
    <span class="k">protected</span> <span class="nv">$argumentResolver</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nx">UrlMatcherInterface</span> <span class="nv">$matcher</span><span class="p">,</span> <span class="nx">ControllerResolverInterface</span> <span class="nv">$resolver</span><span class="p">,</span> <span class="nx">ArgumentResolverInterface</span> <span class="nv">$argumentResolver</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">matcher</span> <span class="o">=</span> <span class="nv">$matcher</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">controllerResolver</span> <span class="o">=</span> <span class="nv">$resolver</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">argumentResolver</span> <span class="o">=</span> <span class="nv">$argumentResolver</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>We are now ready to write our first test:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// example.com/tests/Simplex/Tests/FrameworkTest.php</span>
<span class="k">namespace</span> <span class="nx">Simplex\Tests</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">PHPUnit\Framework\TestCase</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Simplex\Framework</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Request</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Controller\ArgumentResolverInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Controller\ControllerResolverInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Exception\ResourceNotFoundException</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">FrameworkTest</span> <span class="k">extends</span> <span class="nx">TestCase</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">testNotFoundHandling</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$framework</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getFrameworkForException</span><span class="p">(</span><span class="k">new</span> <span class="nx">ResourceNotFoundException</span><span class="p">());</span>

        <span class="nv">$response</span> <span class="o">=</span> <span class="nv">$framework</span><span class="o">-&gt;</span><span class="na">handle</span><span class="p">(</span><span class="k">new</span> <span class="nx">Request</span><span class="p">());</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="mi">404</span><span class="p">,</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getStatusCode</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">function</span> <span class="nf">getFrameworkForException</span><span class="p">(</span><span class="nv">$exception</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$matcher</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createMock</span><span class="p">(</span><span class="nx">Routing\Matcher\UrlMatcherInterface</span><span class="o">::</span><span class="na">class</span><span class="p">);</span>
        <span class="c1">// use getMock() on PHPUnit 5.3 or below</span>
        <span class="c1">// $matcher = $this-&gt;getMock(Routing\Matcher\UrlMatcherInterface::class);</span>

        <span class="nv">$matcher</span>
            <span class="o">-&gt;</span><span class="na">expects</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">once</span><span class="p">())</span>
            <span class="o">-&gt;</span><span class="na">method</span><span class="p">(</span><span class="s1">&#39;match&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">will</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">throwException</span><span class="p">(</span><span class="nv">$exception</span><span class="p">))</span>
        <span class="p">;</span>
        <span class="nv">$matcher</span>
            <span class="o">-&gt;</span><span class="na">expects</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">once</span><span class="p">())</span>
            <span class="o">-&gt;</span><span class="na">method</span><span class="p">(</span><span class="s1">&#39;getContext&#39;</span><span class="p">)</span>
            <span class="o">-&gt;</span><span class="na">will</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">returnValue</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createMock</span><span class="p">(</span><span class="nx">Routing\RequestContext</span><span class="o">::</span><span class="na">class</span><span class="p">)))</span>
        <span class="p">;</span>
        <span class="nv">$controllerResolver</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createMock</span><span class="p">(</span><span class="nx">ControllerResolverInterface</span><span class="o">::</span><span class="na">class</span><span class="p">);</span>
        <span class="nv">$argumentResolver</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createMock</span><span class="p">(</span><span class="nx">ArgumentResolverInterface</span><span class="o">::</span><span class="na">class</span><span class="p">);</span>

        <span class="k">return</span> <span class="k">new</span> <span class="nx">Framework</span><span class="p">(</span><span class="nv">$matcher</span><span class="p">,</span> <span class="nv">$controllerResolver</span><span class="p">,</span> <span class="nv">$argumentResolver</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>This test simulates a request that does not match any route. As such, the
<code class="docutils literal notranslate"><span class="pre">match()</span></code> method returns a <code class="docutils literal notranslate"><span class="pre">ResourceNotFoundException</span></code> exception and we
are testing that our framework converts this exception to a 404 response.</p>
<p>Execute this test by running <code class="docutils literal notranslate"><span class="pre">phpunit</span></code> in the <code class="docutils literal notranslate"><span class="pre">example.com</span></code> directory:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> ./vendor/bin/phpunit
</pre></div>
</td></tr></table></div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>If you don’t understand what the hell is going on in the code, read the
PHPUnit documentation on <a class="reference external" href="https://phpunit.de/manual/current/en/test-doubles.html">test doubles</a><span class="link-target"> [https://phpunit.de/manual/current/en/test-doubles.html]</span>.</p>
</div>
<p>After the test ran, you should see a green bar. If not, you have a bug
either in the test or in the framework code!</p>
<p>Adding a unit test for any exception thrown in a controller:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">public</span> <span class="k">function</span> <span class="nf">testErrorHandling</span><span class="p">()</span>
<span class="p">{</span>
    <span class="nv">$framework</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getFrameworkForException</span><span class="p">(</span><span class="k">new</span> <span class="nx">\RuntimeException</span><span class="p">());</span>

    <span class="nv">$response</span> <span class="o">=</span> <span class="nv">$framework</span><span class="o">-&gt;</span><span class="na">handle</span><span class="p">(</span><span class="k">new</span> <span class="nx">Request</span><span class="p">());</span>

    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getStatusCode</span><span class="p">());</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Last, but not the least, let’s write a test for when we actually have a proper
Response:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Controller\ArgumentResolver</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Controller\ControllerResolver</span><span class="p">;</span>
<span class="c1">// ...</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">testControllerResponse</span><span class="p">()</span>
<span class="p">{</span>
    <span class="nv">$matcher</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createMock</span><span class="p">(</span><span class="nx">Routing\Matcher\UrlMatcherInterface</span><span class="o">::</span><span class="na">class</span><span class="p">);</span>
    <span class="c1">// use getMock() on PHPUnit 5.3 or below</span>
    <span class="c1">// $matcher = $this-&gt;getMock(Routing\Matcher\UrlMatcherInterface::class);</span>

    <span class="nv">$matcher</span>
        <span class="o">-&gt;</span><span class="na">expects</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">once</span><span class="p">())</span>
        <span class="o">-&gt;</span><span class="na">method</span><span class="p">(</span><span class="s1">&#39;match&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">will</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">returnValue</span><span class="p">([</span>
            <span class="s1">&#39;_route&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;is_leap_year/{year}&#39;</span><span class="p">,</span>
            <span class="s1">&#39;year&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;2000&#39;</span><span class="p">,</span>
            <span class="s1">&#39;_controller&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="k">new</span> <span class="nx">LeapYearController</span><span class="p">(),</span> <span class="s1">&#39;index&#39;</span><span class="p">]</span>
        <span class="p">]))</span>
    <span class="p">;</span>
    <span class="nv">$matcher</span>
        <span class="o">-&gt;</span><span class="na">expects</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">once</span><span class="p">())</span>
        <span class="o">-&gt;</span><span class="na">method</span><span class="p">(</span><span class="s1">&#39;getContext&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">will</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">returnValue</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createMock</span><span class="p">(</span><span class="nx">Routing\RequestContext</span><span class="o">::</span><span class="na">class</span><span class="p">)))</span>
    <span class="p">;</span>
    <span class="nv">$controllerResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ControllerResolver</span><span class="p">();</span>
    <span class="nv">$argumentResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ArgumentResolver</span><span class="p">();</span>

    <span class="nv">$framework</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Framework</span><span class="p">(</span><span class="nv">$matcher</span><span class="p">,</span> <span class="nv">$controllerResolver</span><span class="p">,</span> <span class="nv">$argumentResolver</span><span class="p">);</span>

    <span class="nv">$response</span> <span class="o">=</span> <span class="nv">$framework</span><span class="o">-&gt;</span><span class="na">handle</span><span class="p">(</span><span class="k">new</span> <span class="nx">Request</span><span class="p">());</span>

    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getStatusCode</span><span class="p">());</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertContains</span><span class="p">(</span><span class="s1">&#39;Yep, this is a leap year!&#39;</span><span class="p">,</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getContent</span><span class="p">());</span>
<span class="p">}</span>
</pre></div>
</div>
<p>In this test, we simulate a route that matches and returns a simple
controller. We check that the response status is 200 and that its content is
the one we have set in the controller.</p>
<p>To check that we have covered all possible use cases, run the PHPUnit test
coverage feature (you need to enable <a class="reference external" href="https://xdebug.org/">XDebug</a><span class="link-target"> [https://xdebug.org/]</span> first):</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> ./vendor/bin/phpunit --coverage-html<span class="o">=</span>cov/
</pre></div>
</td></tr></table></div>
<p>Open <code class="docutils literal notranslate"><span class="pre">example.com/cov/src/Simplex/Framework.php.html</span></code> in a browser and check
that all the lines for the Framework class are green (it means that they have
been visited when the tests were executed).</p>
<p>Alternatively you can output the result directly to the console:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> ./vendor/bin/phpunit --coverage-text
</pre></div>
</td></tr></table></div>
<p>Thanks to the clean object-oriented code that we have written so far, we have
been able to write unit-tests to cover all possible use cases of our
framework; test doubles ensured that we were actually testing our code and not
Symfony code.</p>
<p>Now that we are confident (again) about the code we have written, we can
safely think about the next batch of features we want to add to our framework.</p>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>