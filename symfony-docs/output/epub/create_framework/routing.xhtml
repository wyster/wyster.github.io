<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>The Routing Component</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="the-routing-component">
<h1>The Routing Component</h1>
<p>Before we start diving into the Routing component, let’s refactor our current
framework just a little to make templates even more readable:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// example.com/web/front.php</span>
<span class="k">require_once</span> <span class="no">__DIR__</span><span class="o">.</span><span class="s1">&#39;/../vendor/autoload.php&#39;</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Request</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>

<span class="nv">$request</span> <span class="o">=</span> <span class="nx">Request</span><span class="o">::</span><span class="na">createFromGlobals</span><span class="p">();</span>

<span class="nv">$map</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s1">&#39;/hello&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;hello&#39;</span><span class="p">,</span>
    <span class="s1">&#39;/bye&#39;</span>   <span class="o">=&gt;</span> <span class="s1">&#39;bye&#39;</span><span class="p">,</span>
<span class="p">];</span>

<span class="nv">$path</span> <span class="o">=</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">getPathInfo</span><span class="p">();</span>
<span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$map</span><span class="p">[</span><span class="nv">$path</span><span class="p">]))</span> <span class="p">{</span>
    <span class="nb">ob_start</span><span class="p">();</span>
    <span class="nb">extract</span><span class="p">(</span><span class="nv">$request</span><span class="o">-&gt;</span><span class="na">query</span><span class="o">-&gt;</span><span class="na">all</span><span class="p">(),</span> <span class="nx">EXTR_SKIP</span><span class="p">);</span>
    <span class="k">include</span> <span class="nb">sprintf</span><span class="p">(</span><span class="no">__DIR__</span><span class="o">.</span><span class="s1">&#39;/../src/pages/%s.php&#39;</span><span class="p">,</span> <span class="nv">$map</span><span class="p">[</span><span class="nv">$path</span><span class="p">]);</span>
    <span class="nv">$response</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">(</span><span class="nb">ob_get_clean</span><span class="p">());</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nv">$response</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">(</span><span class="s1">&#39;Not Found&#39;</span><span class="p">,</span> <span class="mi">404</span><span class="p">);</span>
<span class="p">}</span>

<span class="nv">$response</span><span class="o">-&gt;</span><span class="na">send</span><span class="p">();</span>
</pre></div>
</div>
<p>As we now extract the request query parameters, simplify the <code class="docutils literal notranslate"><span class="pre">hello.php</span></code>
template as follows:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="o">&lt;!--</span> <span class="nx">example</span><span class="o">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">src</span><span class="o">/</span><span class="nx">pages</span><span class="o">/</span><span class="nx">hello</span><span class="o">.</span><span class="nx">php</span> <span class="o">--&gt;</span>
<span class="nx">Hello</span> <span class="o">&lt;?=</span> <span class="nb">htmlspecialchars</span><span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span> <span class="o">?</span> <span class="nv">$name</span> <span class="o">:</span> <span class="s1">&#39;World&#39;</span><span class="p">,</span> <span class="nx">ENT_QUOTES</span><span class="p">,</span> <span class="s1">&#39;UTF-8&#39;</span><span class="p">)</span> <span class="cp">?&gt;</span><span class="x"></span>
</pre></div>
</div>
<p>Now, we are in good shape to add new features.</p>
<p>One very important aspect of any website is the form of its URLs. Thanks to
the URL map, we have decoupled the URL from the code that generates the
associated response, but it is not yet flexible enough. For instance, we might
want to support dynamic paths to allow embedding data directly into the URL
(e.g. <code class="docutils literal notranslate"><span class="pre">/hello/Fabien</span></code>) instead of relying on a query string (e.g. <code class="docutils literal notranslate"><span class="pre">/hello?name=Fabien</span></code>).</p>
<p>To support this feature, add the Symfony Routing component as a dependency:</p>
<div class="highlight-terminal notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="gp">$</span> composer require symfony/routing
</pre></div>
</td></tr></table></div>
<p>Instead of an array for the URL map, the Routing component relies on a
<code class="docutils literal notranslate"><span class="pre">RouteCollection</span></code> instance:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Routing\RouteCollection</span><span class="p">;</span>

<span class="nv">$routes</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">RouteCollection</span><span class="p">();</span>
</pre></div>
</div>
<p>Let’s add a route that describes the <code class="docutils literal notranslate"><span class="pre">/hello/SOMETHING</span></code> URL and add another
one for the simple <code class="docutils literal notranslate"><span class="pre">/bye</span></code> one:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Routing\Route</span><span class="p">;</span>

<span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">Route</span><span class="p">(</span><span class="s1">&#39;/hello/{name}&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;World&#39;</span><span class="p">]));</span>
<span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;bye&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">Route</span><span class="p">(</span><span class="s1">&#39;/bye&#39;</span><span class="p">));</span>
</pre></div>
</div>
<p>Each entry in the collection is defined by a name (<code class="docutils literal notranslate"><span class="pre">hello</span></code>) and a <code class="docutils literal notranslate"><span class="pre">Route</span></code>
instance, which is defined by a route pattern (<code class="docutils literal notranslate"><span class="pre">/hello/{name}</span></code>) and an array
of default values for route attributes (<code class="docutils literal notranslate"><span class="pre">['name'</span> <span class="pre">=&gt;</span> <span class="pre">'World']</span></code>).</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Read the <a class="reference internal" href="../routing.xhtml"><span class="doc">Routing documentation</span></a> to learn more about
its many features like URL generation, attribute requirements, HTTP
method enforcement, loaders for YAML or XML files, dumpers to PHP or
Apache rewrite rules for enhanced performance and much more.</p>
</div>
<p>Based on the information stored in the <code class="docutils literal notranslate"><span class="pre">RouteCollection</span></code> instance, a
<code class="docutils literal notranslate"><span class="pre">UrlMatcher</span></code> instance can match URL paths:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Routing\Matcher\UrlMatcher</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\RequestContext</span><span class="p">;</span>

<span class="nv">$context</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">RequestContext</span><span class="p">();</span>
<span class="nv">$context</span><span class="o">-&gt;</span><span class="na">fromRequest</span><span class="p">(</span><span class="nv">$request</span><span class="p">);</span>
<span class="nv">$matcher</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UrlMatcher</span><span class="p">(</span><span class="nv">$routes</span><span class="p">,</span> <span class="nv">$context</span><span class="p">);</span>

<span class="nv">$attributes</span> <span class="o">=</span> <span class="nv">$matcher</span><span class="o">-&gt;</span><span class="na">match</span><span class="p">(</span><span class="nv">$request</span><span class="o">-&gt;</span><span class="na">getPathInfo</span><span class="p">());</span>
</pre></div>
</div>
<p>The <code class="docutils literal notranslate"><span class="pre">match()</span></code> method takes a request path and returns an array of attributes
(notice that the matched route is automatically stored under the special
<code class="docutils literal notranslate"><span class="pre">_route</span></code> attribute):</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$matcher</span><span class="o">-&gt;</span><span class="na">match</span><span class="p">(</span><span class="s1">&#39;/bye&#39;</span><span class="p">);</span>
<span class="cm">/* Result:</span>
<span class="cm">[</span>
<span class="cm">    &#39;_route&#39; =&gt; &#39;bye&#39;,</span>
<span class="cm">];</span>
<span class="cm">*/</span>

<span class="nv">$matcher</span><span class="o">-&gt;</span><span class="na">match</span><span class="p">(</span><span class="s1">&#39;/hello/Fabien&#39;</span><span class="p">);</span>
<span class="cm">/* Result:</span>
<span class="cm">[</span>
<span class="cm">    &#39;name&#39; =&gt; &#39;Fabien&#39;,</span>
<span class="cm">    &#39;_route&#39; =&gt; &#39;hello&#39;,</span>
<span class="cm">];</span>
<span class="cm">*/</span>

<span class="nv">$matcher</span><span class="o">-&gt;</span><span class="na">match</span><span class="p">(</span><span class="s1">&#39;/hello&#39;</span><span class="p">);</span>
<span class="cm">/* Result:</span>
<span class="cm">[</span>
<span class="cm">    &#39;name&#39; =&gt; &#39;World&#39;,</span>
<span class="cm">    &#39;_route&#39; =&gt; &#39;hello&#39;,</span>
<span class="cm">];</span>
<span class="cm">*/</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Even if we don’t strictly need the request context in our examples, it is
used in real-world applications to enforce method requirements and more.</p>
</div>
<p>The URL matcher throws an exception when none of the routes match:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$matcher</span><span class="o">-&gt;</span><span class="na">match</span><span class="p">(</span><span class="s1">&#39;/not-found&#39;</span><span class="p">);</span>

<span class="c1">// throws a Symfony\Component\Routing\Exception\ResourceNotFoundException</span>
</pre></div>
</div>
<p>With this knowledge in mind, let’s write the new version of our framework:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// example.com/web/front.php</span>
<span class="k">require_once</span> <span class="no">__DIR__</span><span class="o">.</span><span class="s1">&#39;/../vendor/autoload.php&#39;</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Request</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing</span><span class="p">;</span>

<span class="nv">$request</span> <span class="o">=</span> <span class="nx">Request</span><span class="o">::</span><span class="na">createFromGlobals</span><span class="p">();</span>
<span class="nv">$routes</span> <span class="o">=</span> <span class="k">include</span> <span class="no">__DIR__</span><span class="o">.</span><span class="s1">&#39;/../src/app.php&#39;</span><span class="p">;</span>

<span class="nv">$context</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Routing\RequestContext</span><span class="p">();</span>
<span class="nv">$context</span><span class="o">-&gt;</span><span class="na">fromRequest</span><span class="p">(</span><span class="nv">$request</span><span class="p">);</span>
<span class="nv">$matcher</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Routing\Matcher\UrlMatcher</span><span class="p">(</span><span class="nv">$routes</span><span class="p">,</span> <span class="nv">$context</span><span class="p">);</span>

<span class="k">try</span> <span class="p">{</span>
    <span class="nb">extract</span><span class="p">(</span><span class="nv">$matcher</span><span class="o">-&gt;</span><span class="na">match</span><span class="p">(</span><span class="nv">$request</span><span class="o">-&gt;</span><span class="na">getPathInfo</span><span class="p">()),</span> <span class="nx">EXTR_SKIP</span><span class="p">);</span>
    <span class="nb">ob_start</span><span class="p">();</span>
    <span class="k">include</span> <span class="nb">sprintf</span><span class="p">(</span><span class="no">__DIR__</span><span class="o">.</span><span class="s1">&#39;/../src/pages/%s.php&#39;</span><span class="p">,</span> <span class="nv">$_route</span><span class="p">);</span>

    <span class="nv">$response</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">(</span><span class="nb">ob_get_clean</span><span class="p">());</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">Routing\Exception\ResourceNotFoundException</span> <span class="nv">$exception</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$response</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">(</span><span class="s1">&#39;Not Found&#39;</span><span class="p">,</span> <span class="mi">404</span><span class="p">);</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">Exception</span> <span class="nv">$exception</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$response</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">(</span><span class="s1">&#39;An error occurred&#39;</span><span class="p">,</span> <span class="mi">500</span><span class="p">);</span>
<span class="p">}</span>

<span class="nv">$response</span><span class="o">-&gt;</span><span class="na">send</span><span class="p">();</span>
</pre></div>
</div>
<p>There are a few new things in the code:</p>
<ul>
<li><p>Route names are used for template names;</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">500</span></code> errors are now managed correctly;</p></li>
<li><p>Request attributes are extracted to keep our templates simple:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// example.com/src/pages/hello.php</span>
<span class="nx">Hello</span> <span class="o">&lt;?=</span> <span class="nb">htmlspecialchars</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="nx">ENT_QUOTES</span><span class="p">,</span> <span class="s1">&#39;UTF-8&#39;</span><span class="p">)</span> <span class="cp">?&gt;</span><span class="x"></span>
</pre></div>
</div>
</li>
<li><p>Route configuration has been moved to its own file:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// example.com/src/app.php</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing</span><span class="p">;</span>

<span class="nv">$routes</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Routing\RouteCollection</span><span class="p">();</span>
<span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">Routing\Route</span><span class="p">(</span><span class="s1">&#39;/hello/{name}&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;World&#39;</span><span class="p">]));</span>
<span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;bye&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">Routing\Route</span><span class="p">(</span><span class="s1">&#39;/bye&#39;</span><span class="p">));</span>

<span class="k">return</span> <span class="nv">$routes</span><span class="p">;</span>
</pre></div>
</div>
</li>
</ul>
<p>We now have a clear separation between the configuration (everything
specific to our application in <code class="docutils literal notranslate"><span class="pre">app.php</span></code>) and the framework (the generic
code that powers our application in <code class="docutils literal notranslate"><span class="pre">front.php</span></code>).</p>
<p>With less than 30 lines of code, we have a new framework, more powerful and
more flexible than the previous one. Enjoy!</p>
<p>Using the Routing component has one big additional benefit: the ability to
generate URLs based on Route definitions. When using both URL matching and URL
generation in your code, changing the URL patterns should have no other
impact. You can use the generator this way:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Routing</span><span class="p">;</span>

<span class="nv">$generator</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Routing\Generator\UrlGenerator</span><span class="p">(</span><span class="nv">$routes</span><span class="p">,</span> <span class="nv">$context</span><span class="p">);</span>

<span class="k">echo</span> <span class="nv">$generator</span><span class="o">-&gt;</span><span class="na">generate</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Fabien&#39;</span><span class="p">]);</span>
<span class="c1">// outputs /hello/Fabien</span>
</pre></div>
</div>
<p>The code should be self-explanatory; and thanks to the context, you can even
generate absolute URLs:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Routing\Generator\UrlGeneratorInterface</span><span class="p">;</span>

<span class="k">echo</span> <span class="nv">$generator</span><span class="o">-&gt;</span><span class="na">generate</span><span class="p">(</span>
    <span class="s1">&#39;hello&#39;</span><span class="p">,</span>
    <span class="p">[</span><span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Fabien&#39;</span><span class="p">],</span>
    <span class="nx">UrlGeneratorInterface</span><span class="o">::</span><span class="na">ABSOLUTE_URL</span>
<span class="p">);</span>
<span class="c1">// outputs something like http://example.com/somewhere/hello/Fabien</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Concerned about performance? Based on your route definitions, create a
highly optimized URL matcher class that can replace the default
<code class="docutils literal notranslate"><span class="pre">UrlMatcher</span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">use</span> <span class="nx">Symfony\Component\Routing\Matcher\CompiledUrlMatcher</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Matcher\Dumper\CompiledUrlMatcherDumper</span><span class="p">;</span>

<span class="c1">// $compiledRoutes is a plain PHP array that describes all routes in a performant data format</span>
<span class="c1">// you can (and should) cache it, typically by exporting it to a PHP file</span>
<span class="nv">$compiledRoutes</span> <span class="o">=</span> <span class="p">(</span><span class="k">new</span> <span class="nx">CompiledUrlMatcherDumper</span><span class="p">(</span><span class="nv">$routes</span><span class="p">))</span><span class="o">-&gt;</span><span class="na">getCompiledRoutes</span><span class="p">();</span>

<span class="nv">$matcher</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CompiledUrlMatcher</span><span class="p">(</span><span class="nv">$compiledRoutes</span><span class="p">,</span> <span class="nv">$context</span><span class="p">);</span>
</pre></div>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>