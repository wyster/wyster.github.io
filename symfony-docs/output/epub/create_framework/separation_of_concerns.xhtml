<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>The Separation of Concerns</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="the-separation-of-concerns">
<h1>The Separation of Concerns</h1>
<p>One down-side of our framework right now is that we need to copy and paste the
code in <code class="docutils literal notranslate"><span class="pre">front.php</span></code> each time we create a new website. 60 lines of code is
not that much, but it would be nice if we could wrap this code into a proper
class. It would bring us better <em>reusability</em> and easier testing to name just
a few benefits.</p>
<p>If you have a closer look at the code, <code class="docutils literal notranslate"><span class="pre">front.php</span></code> has one input, the
Request and one output, the Response. Our framework class will follow this
simple principle: the logic is about creating the Response associated with a
Request.</p>
<p>Let’s create our very own namespace for our framework: <code class="docutils literal notranslate"><span class="pre">Simplex</span></code>. Move the
request handling logic into its own <code class="docutils literal notranslate"><span class="pre">Simplex\Framework</span></code> class:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// example.com/src/Simplex/Framework.php</span>
<span class="k">namespace</span> <span class="nx">Simplex</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Request</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Controller\ArgumentResolver</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Controller\ControllerResolver</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Exception\ResourceNotFoundException</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\Routing\Matcher\UrlMatcher</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Framework</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$matcher</span><span class="p">;</span>
    <span class="k">private</span> <span class="nv">$controllerResolver</span><span class="p">;</span>
    <span class="k">private</span> <span class="nv">$argumentResolver</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nx">UrlMatcher</span> <span class="nv">$matcher</span><span class="p">,</span> <span class="nx">ControllerResolver</span> <span class="nv">$controllerResolver</span><span class="p">,</span> <span class="nx">ArgumentResolver</span> <span class="nv">$argumentResolver</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">matcher</span> <span class="o">=</span> <span class="nv">$matcher</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">controllerResolver</span> <span class="o">=</span> <span class="nv">$controllerResolver</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">argumentResolver</span> <span class="o">=</span> <span class="nv">$argumentResolver</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">handle</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">matcher</span><span class="o">-&gt;</span><span class="na">getContext</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">fromRequest</span><span class="p">(</span><span class="nv">$request</span><span class="p">);</span>

        <span class="k">try</span> <span class="p">{</span>
            <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">attributes</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">matcher</span><span class="o">-&gt;</span><span class="na">match</span><span class="p">(</span><span class="nv">$request</span><span class="o">-&gt;</span><span class="na">getPathInfo</span><span class="p">()));</span>

            <span class="nv">$controller</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">controllerResolver</span><span class="o">-&gt;</span><span class="na">getController</span><span class="p">(</span><span class="nv">$request</span><span class="p">);</span>
            <span class="nv">$arguments</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">argumentResolver</span><span class="o">-&gt;</span><span class="na">getArguments</span><span class="p">(</span><span class="nv">$request</span><span class="p">,</span> <span class="nv">$controller</span><span class="p">);</span>

            <span class="k">return</span> <span class="nb">call_user_func_array</span><span class="p">(</span><span class="nv">$controller</span><span class="p">,</span> <span class="nv">$arguments</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">ResourceNotFoundException</span> <span class="nv">$exception</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">(</span><span class="s1">&#39;Not Found&#39;</span><span class="p">,</span> <span class="mi">404</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">\Exception</span> <span class="nv">$exception</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">(</span><span class="s1">&#39;An error occurred&#39;</span><span class="p">,</span> <span class="mi">500</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>And update <code class="docutils literal notranslate"><span class="pre">example.com/web/front.php</span></code> accordingly:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// example.com/web/front.php</span>

<span class="c1">// ...</span>
<span class="nv">$request</span> <span class="o">=</span> <span class="nx">Request</span><span class="o">::</span><span class="na">createFromGlobals</span><span class="p">();</span>
<span class="nv">$routes</span> <span class="o">=</span> <span class="k">include</span> <span class="no">__DIR__</span><span class="o">.</span><span class="s1">&#39;/../src/app.php&#39;</span><span class="p">;</span>

<span class="nv">$context</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Routing\RequestContext</span><span class="p">();</span>
<span class="nv">$matcher</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Routing\Matcher\UrlMatcher</span><span class="p">(</span><span class="nv">$routes</span><span class="p">,</span> <span class="nv">$context</span><span class="p">);</span>

<span class="nv">$controllerResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ControllerResolver</span><span class="p">();</span>
<span class="nv">$argumentResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ArgumentResolver</span><span class="p">();</span>

<span class="nv">$framework</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Simplex\Framework</span><span class="p">(</span><span class="nv">$matcher</span><span class="p">,</span> <span class="nv">$controllerResolver</span><span class="p">,</span> <span class="nv">$argumentResolver</span><span class="p">);</span>
<span class="nv">$response</span> <span class="o">=</span> <span class="nv">$framework</span><span class="o">-&gt;</span><span class="na">handle</span><span class="p">(</span><span class="nv">$request</span><span class="p">);</span>

<span class="nv">$response</span><span class="o">-&gt;</span><span class="na">send</span><span class="p">();</span>
</pre></div>
</div>
<p>To wrap up the refactoring, let’s move everything but routes definition from
<code class="docutils literal notranslate"><span class="pre">example.com/src/app.php</span></code> into yet another namespace: <code class="docutils literal notranslate"><span class="pre">Calendar</span></code>.</p>
<p>For the classes defined under the <code class="docutils literal notranslate"><span class="pre">Simplex</span></code> and <code class="docutils literal notranslate"><span class="pre">Calendar</span></code> namespaces to
be autoloaded, update the <code class="docutils literal notranslate"><span class="pre">composer.json</span></code> file:</p>
<div class="highlight-json notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="p">{</span>
    <span class="nt">&quot;...&quot;</span><span class="p">:</span> <span class="s2">&quot;...&quot;</span><span class="p">,</span>
    <span class="nt">&quot;autoload&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;psr-4&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;&quot;</span><span class="p">:</span> <span class="s2">&quot;src/&quot;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>For the Composer autoloader to be updated, run <code class="docutils literal notranslate"><span class="pre">composer</span> <span class="pre">dump-autoload</span></code>.</p>
</div>
<p>Move the controller to <code class="docutils literal notranslate"><span class="pre">Calendar\Controller\LeapYearController</span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// example.com/src/Calendar/Controller/LeapYearController.php</span>
<span class="k">namespace</span> <span class="nx">Calendar\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Calendar\Model\LeapYear</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Request</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">LeapYearController</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">,</span> <span class="nv">$year</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$leapYear</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LeapYear</span><span class="p">();</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$leapYear</span><span class="o">-&gt;</span><span class="na">isLeapYear</span><span class="p">(</span><span class="nv">$year</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">(</span><span class="s1">&#39;Yep, this is a leap year!&#39;</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">(</span><span class="s1">&#39;Nope, this is not a leap year.&#39;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>And move the <code class="docutils literal notranslate"><span class="pre">is_leap_year()</span></code> function to its own class too:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// example.com/src/Calendar/Model/LeapYear.php</span>
<span class="k">namespace</span> <span class="nx">Calendar\Model</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">LeapYear</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">isLeapYear</span><span class="p">(</span><span class="nv">$year</span> <span class="o">=</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">null</span> <span class="o">===</span> <span class="nv">$year</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$year</span> <span class="o">=</span> <span class="nb">date</span><span class="p">(</span><span class="s1">&#39;Y&#39;</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="mi">0</span> <span class="o">==</span> <span class="nv">$year</span> <span class="o">%</span> <span class="mi">400</span> <span class="o">||</span> <span class="p">(</span><span class="mi">0</span> <span class="o">==</span> <span class="nv">$year</span> <span class="o">%</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="mi">0</span> <span class="o">!=</span> <span class="nv">$year</span> <span class="o">%</span> <span class="mi">100</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Don’t forget to update the <code class="docutils literal notranslate"><span class="pre">example.com/src/app.php</span></code> file accordingly:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;leap_year&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">Routing\Route</span><span class="p">(</span><span class="s1">&#39;/is_leap_year/{year}&#39;</span><span class="p">,</span> <span class="p">[</span>
    <span class="s1">&#39;year&#39;</span> <span class="o">=&gt;</span> <span class="k">null</span><span class="p">,</span>
    <span class="s1">&#39;_controller&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Calendar\Controller\LeapYearController::index&#39;</span><span class="p">,</span>
<span class="p">]));</span>
</pre></div>
</div>
<p>To sum up, here is the new file layout:</p>
<div class="highlight-text notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16</pre></div></td><td class="code"><div class="highlight"><pre><span></span>example.com
├── composer.json
├── composer.lock
├── src
│   ├── app.php
│   └── Simplex
│       └── Framework.php
│   └── Calendar
│       └── Controller
│       │   └── LeapYearController.php
│       └── Model
│           └── LeapYear.php
├── vendor
│   └── autoload.php
└── web
    └── front.php
</pre></div>
</td></tr></table></div>
<p>That’s it! Our application has now four different layers and each of them has
a well-defined goal:</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">web/front.php</span></code>: The front controller; the only exposed PHP code that
makes the interface with the client (it gets the Request and sends the
Response) and provides the boiler-plate code to initialize the framework and
our application;</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">src/Simplex</span></code>: The reusable framework code that abstracts the handling of
incoming Requests (by the way, it makes your controllers/templates better
testable – more about that later on);</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">src/Calendar</span></code>: Our application specific code (the controllers and the
model);</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">src/app.php</span></code>: The application configuration/framework customization.</p></li>
</ul>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>