<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>The HttpKernel Component: HttpKernelInterface</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../_static/rtd_custom.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="the-httpkernel-component-httpkernelinterface">
<h1>The HttpKernel Component: HttpKernelInterface</h1>
<p>In the conclusion of the second chapter of this book, I’ve talked about one
great benefit of using the Symfony components: the <em>interoperability</em> between
all frameworks and applications using them. Let’s do a big step towards this
goal by making our framework implement <code class="docutils literal notranslate"><span class="pre">HttpKernelInterface</span></code>:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="k">namespace</span> <span class="nx">Symfony\Component\HttpKernel</span><span class="p">;</span>

<span class="c1">// ...</span>
<span class="k">interface</span> <span class="nx">HttpKernelInterface</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @return Response A Response instance</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">handle</span><span class="p">(</span>
        <span class="nx">Request</span> <span class="nv">$request</span><span class="p">,</span>
        <span class="nv">$type</span> <span class="o">=</span> <span class="nx">self</span><span class="o">::</span><span class="na">MASTER_REQUEST</span><span class="p">,</span>
        <span class="nv">$catch</span> <span class="o">=</span> <span class="k">true</span>
    <span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p><code class="docutils literal notranslate"><span class="pre">HttpKernelInterface</span></code> is probably the most important piece of code in the
HttpKernel component, no kidding. Frameworks and applications that implement
this interface are fully interoperable. Moreover, a lot of great features will
come with it for free.</p>
<p>Update your framework so that it implements this interface:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// example.com/src/Framework.php</span>

<span class="c1">// ...</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\HttpKernelInterface</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Framework</span> <span class="k">implements</span> <span class="nx">HttpKernelInterface</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">handle</span><span class="p">(</span>
        <span class="nx">Request</span> <span class="nv">$request</span><span class="p">,</span>
        <span class="nv">$type</span> <span class="o">=</span> <span class="nx">HttpKernelInterface</span><span class="o">::</span><span class="na">MASTER_REQUEST</span><span class="p">,</span>
        <span class="nv">$catch</span> <span class="o">=</span> <span class="k">true</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>With this change, a little goes a long way! Let’s talk about one of
the most impressive upsides: transparent <a class="reference internal" href="../http_cache.xhtml"><span class="doc">HTTP caching</span></a> support.</p>
<p>The <code class="docutils literal notranslate"><span class="pre">HttpCache</span></code> class implements a fully-featured reverse proxy, written in
PHP; it implements <code class="docutils literal notranslate"><span class="pre">HttpKernelInterface</span></code> and wraps another
<code class="docutils literal notranslate"><span class="pre">HttpKernelInterface</span></code> instance:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// example.com/web/front.php</span>

<span class="c1">// ...</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel</span><span class="p">;</span>

<span class="nv">$framework</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Simplex\Framework</span><span class="p">(</span><span class="nv">$dispatcher</span><span class="p">,</span> <span class="nv">$matcher</span><span class="p">,</span> <span class="nv">$controllerResolver</span><span class="p">,</span> <span class="nv">$argumentResolver</span><span class="p">);</span>
<span class="nv">$framework</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">HttpKernel\HttpCache\HttpCache</span><span class="p">(</span>
    <span class="nv">$framework</span><span class="p">,</span>
    <span class="k">new</span> <span class="nx">HttpKernel\HttpCache\Store</span><span class="p">(</span><span class="no">__DIR__</span><span class="o">.</span><span class="s1">&#39;/../cache&#39;</span><span class="p">)</span>
<span class="p">);</span>

<span class="nv">$response</span> <span class="o">=</span> <span class="nv">$framework</span><span class="o">-&gt;</span><span class="na">handle</span><span class="p">(</span><span class="nv">$request</span><span class="p">);</span>
<span class="nv">$response</span><span class="o">-&gt;</span><span class="na">send</span><span class="p">();</span>
</pre></div>
</div>
<p>That’s all it takes to add HTTP caching support to our framework. Isn’t it
amazing?</p>
<p>Configuring the cache needs to be done via HTTP cache headers. For instance,
to cache a response for 10 seconds, use the <code class="docutils literal notranslate"><span class="pre">Response::setTtl()</span></code> method:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="c1">// example.com/src/Calendar/Controller/LeapYearController.php</span>

<span class="c1">// ...</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">,</span> <span class="nv">$year</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$leapYear</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LeapYear</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$leapYear</span><span class="o">-&gt;</span><span class="na">isLeapYear</span><span class="p">(</span><span class="nv">$year</span><span class="p">))</span> <span class="p">{</span>
        <span class="nv">$response</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">(</span><span class="s1">&#39;Yep, this is a leap year!&#39;</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nv">$response</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">(</span><span class="s1">&#39;Nope, this is not a leap year.&#39;</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">setTtl</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>

    <span class="k">return</span> <span class="nv">$response</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>If you are running your framework from the command line by simulating
requests (<code class="docutils literal notranslate"><span class="pre">Request::create('/is_leap_year/2012')</span></code>), you can debug Response
instances by dumping their string representation (<code class="docutils literal notranslate"><span class="pre">echo</span> <span class="pre">$response;</span></code>) as it
displays all headers as well as the response content.</p>
</div>
<p>To validate that it works correctly, add a random number to the response
content and check that the number only changes every 10 seconds:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$response</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">(</span><span class="s1">&#39;Yep, this is a leap year! &#39;</span><span class="o">.</span><span class="nb">rand</span><span class="p">());</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>When deploying to your production environment, keep using the Symfony
reverse proxy (great for shared hosting) or even better, switch to a more
efficient reverse proxy like <a class="reference external" href="https://varnish-cache.org/">Varnish</a><span class="link-target"> [https://varnish-cache.org/]</span>.</p>
</div>
<p>Using HTTP cache headers to manage your application cache is very powerful and
allows you to tune finely your caching strategy as you can use both the
expiration and the validation models of the HTTP specification. If you are not
comfortable with these concepts, read the <a class="reference internal" href="../http_cache.xhtml"><span class="doc">HTTP caching</span></a> chapter of the
Symfony documentation.</p>
<p>The Response class contains methods that let you configure the HTTP cache. One
of the most powerful is <code class="docutils literal notranslate"><span class="pre">setCache()</span></code> as it abstracts the most frequently used
caching strategies into a single array:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$response</span><span class="o">-&gt;</span><span class="na">setCache</span><span class="p">([</span>
    <span class="s1">&#39;must_revalidate&#39;</span>  <span class="o">=&gt;</span> <span class="k">false</span><span class="p">,</span>
    <span class="s1">&#39;no_cache&#39;</span>         <span class="o">=&gt;</span> <span class="k">false</span><span class="p">,</span>
    <span class="s1">&#39;no_store&#39;</span>         <span class="o">=&gt;</span> <span class="k">false</span><span class="p">,</span>
    <span class="s1">&#39;no_transform&#39;</span>     <span class="o">=&gt;</span> <span class="k">false</span><span class="p">,</span>
    <span class="s1">&#39;public&#39;</span>           <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span>
    <span class="s1">&#39;private&#39;</span>          <span class="o">=&gt;</span> <span class="k">false</span><span class="p">,</span>
    <span class="s1">&#39;proxy_revalidate&#39;</span> <span class="o">=&gt;</span> <span class="k">false</span><span class="p">,</span>
    <span class="s1">&#39;max_age&#39;</span>          <span class="o">=&gt;</span> <span class="mi">600</span><span class="p">,</span>
    <span class="s1">&#39;s_maxage&#39;</span>         <span class="o">=&gt;</span> <span class="mi">600</span><span class="p">,</span>
    <span class="s1">&#39;immutable&#39;</span>        <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span>
    <span class="s1">&#39;last_modified&#39;</span>    <span class="o">=&gt;</span> <span class="k">new</span> <span class="nx">\DateTime</span><span class="p">(),</span>
    <span class="s1">&#39;etag&#39;</span>             <span class="o">=&gt;</span> <span class="s1">&#39;abcdef&#39;</span>
<span class="p">]);</span>

<span class="c1">// it is equivalent to the following code</span>
<span class="nv">$response</span><span class="o">-&gt;</span><span class="na">setPublic</span><span class="p">();</span>
<span class="nv">$response</span><span class="o">-&gt;</span><span class="na">setMaxAge</span><span class="p">(</span><span class="mi">600</span><span class="p">);</span>
<span class="nv">$response</span><span class="o">-&gt;</span><span class="na">setSharedMaxAge</span><span class="p">(</span><span class="mi">600</span><span class="p">);</span>
<span class="nv">$response</span><span class="o">-&gt;</span><span class="na">setImmutable</span><span class="p">();</span>
<span class="nv">$response</span><span class="o">-&gt;</span><span class="na">setLastModified</span><span class="p">(</span><span class="k">new</span> <span class="nx">\DateTime</span><span class="p">());</span>
<span class="nv">$response</span><span class="o">-&gt;</span><span class="na">setEtag</span><span class="p">(</span><span class="s1">&#39;abcde&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>When using the validation model, the <code class="docutils literal notranslate"><span class="pre">isNotModified()</span></code> method allows you to
cut on the response time by short-circuiting the response generation as early as
possible:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$response</span><span class="o">-&gt;</span><span class="na">setETag</span><span class="p">(</span><span class="s1">&#39;whatever_you_compute_as_an_etag&#39;</span><span class="p">);</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$response</span><span class="o">-&gt;</span><span class="na">isNotModified</span><span class="p">(</span><span class="nv">$request</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nv">$response</span><span class="p">;</span>
<span class="p">}</span>

<span class="nv">$response</span><span class="o">-&gt;</span><span class="na">setContent</span><span class="p">(</span><span class="s1">&#39;The computed content of the response&#39;</span><span class="p">);</span>

<span class="k">return</span> <span class="nv">$response</span><span class="p">;</span>
</pre></div>
</div>
<p>Using HTTP caching is great, but what if you cannot cache the whole page? What
if you can cache everything but some sidebar that is more dynamic that the
rest of the content? Edge Side Includes (<a class="reference external" href="https://en.wikipedia.org/wiki/Edge_Side_Includes">ESI</a><span class="link-target"> [https://en.wikipedia.org/wiki/Edge_Side_Includes]</span>) to the rescue! Instead of
generating the whole content in one go, ESI allows you to mark a region of a
page as being the content of a sub-request call:</p>
<div class="highlight-text notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span>This is the content of your page

Is 2012 a leap year? &lt;esi:include src=&quot;/leapyear/2012&quot;/&gt;

Some other content
</pre></div>
</td></tr></table></div>
<p>For ESI tags to be supported by HttpCache, you need to pass it an instance of
the <code class="docutils literal notranslate"><span class="pre">ESI</span></code> class. The <code class="docutils literal notranslate"><span class="pre">ESI</span></code> class automatically parses ESI tags and makes
sub-requests to convert them to their proper content:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$framework</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">HttpKernel\HttpCache\HttpCache</span><span class="p">(</span>
    <span class="nv">$framework</span><span class="p">,</span>
    <span class="k">new</span> <span class="nx">HttpKernel\HttpCache\Store</span><span class="p">(</span><span class="no">__DIR__</span><span class="o">.</span><span class="s1">&#39;/../cache&#39;</span><span class="p">),</span>
    <span class="k">new</span> <span class="nx">HttpKernel\HttpCache\Esi</span><span class="p">()</span>
<span class="p">);</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>For ESI to work, you need to use a reverse proxy that supports it like the
Symfony implementation. <a class="reference external" href="https://varnish-cache.org/">Varnish</a><span class="link-target"> [https://varnish-cache.org/]</span> is the best alternative and it is
Open-Source.</p>
</div>
<p>When using complex HTTP caching strategies and/or many ESI include tags, it
can be hard to understand why and when a resource should be cached or not. To
ease debugging, you can enable the debug mode:</p>
<div class="highlight-php notranslate"><div class="highlight"><pre><span></span><span class="nv">$framework</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">HttpKernel\HttpCache\HttpCache</span><span class="p">(</span>
    <span class="nv">$framework</span><span class="p">,</span>
    <span class="k">new</span> <span class="nx">HttpKernel\HttpCache\Store</span><span class="p">(</span><span class="no">__DIR__</span><span class="o">.</span><span class="s1">&#39;/../cache&#39;</span><span class="p">),</span>
    <span class="k">new</span> <span class="nx">HttpKernel\HttpCache\Esi</span><span class="p">(),</span>
    <span class="p">[</span><span class="s1">&#39;debug&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">]</span>
<span class="p">);</span>
</pre></div>
</div>
<p>The debug mode adds a <code class="docutils literal notranslate"><span class="pre">X-Symfony-Cache</span></code> header to each response that
describes what the cache layer did:</p>
<div class="highlight-text notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre><span></span>X-Symfony-Cache:  GET /is_leap_year/2012: stale, invalid, store

X-Symfony-Cache:  GET /is_leap_year/2012: fresh
</pre></div>
</td></tr></table></div>
<p>HttpCache has many features like support for the
<code class="docutils literal notranslate"><span class="pre">stale-while-revalidate</span></code> and <code class="docutils literal notranslate"><span class="pre">stale-if-error</span></code> HTTP Cache-Control
extensions as defined in RFC 5861.</p>
<p>With the addition of a single interface, our framework can now benefit from
the many features built into the HttpKernel component; HTTP caching being just
one of them but an important one as it can make your applications fly!</p>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>